{"version":3,"sources":["RobinChat.tsx","index.tsx"],"names":["Chat","render","Streamlit","setFrameHeight","window","innerHeight","props","args","isUser","message","theme","Avatar","styled","img","border","borderRadius","height","width","margin","Message","div","display","background","padding","maxWidth","whiteSpace","fontFamily","font","css","src","alt","draggable","StreamlitComponentBase","withStreamlitConnection","ReactDOM","StrictMode","document","getElementById"],"mappings":"6RAWMA,E,4MACGC,OAAS,WACdC,IAAUC,eAAeC,OAAOC,aAChC,MAA4B,EAAKC,MAAMC,KAA/BC,EAAR,EAAQA,OAAQC,EAAhB,EAAgBA,QAMRC,EAAU,EAAKJ,MAAfI,MAIR,IAAKA,EACH,OAAO,oFAIT,IAAMC,EAASC,IAAOC,IAAI,CACxBC,OAAO,wBACPC,aAAc,MACdC,OAAQ,OACRC,MAAO,OACPC,OAAQ,IAIJC,EAAUP,IAAOQ,IAAI,CACzBC,QAAS,eAETC,WAAYd,EAAS,UAAW,UAChCM,OAAQ,wBACRC,aAAc,OACdQ,QAAS,YACTL,OAAQ,WACRM,SAAU,MACVC,WAAY,aAIRzB,EAAOY,IAAOQ,IAAI,CACtBC,QAAS,OAETK,WAAW,GAAD,OAAKhB,EAAMiB,KAAX,sCACVX,OAAQ,OACRE,OAAQ,EACRD,MAAO,SAET,SAACX,GACC,OAAIA,EAAME,OACDoB,YAAP,8IAOKA,YAAP,6BAGF,OACE,kBAAC,EAAD,CAAMpB,OAAQA,IACVA,GAAU,kBAACG,EAAD,CAAQkB,IA1DN,uCA0DsBC,IAAI,UAAUC,UAAU,UAC5D,kBAACZ,EAAD,KAAUV,K,yBA/DCuB,KAqEJC,cAAwBjC,GC5EvCkC,IAASjC,OACP,kBAAC,IAAMkC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.7edbfefd.chunk.js","sourcesContent":["import {\n  // eslint-disable-next-line \n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport React, { ReactNode } from \"react\"\nimport styled from '@emotion/styled'\nimport { css } from '@emotion/react'\n\n\nclass Chat extends StreamlitComponentBase {\n  public render = (): ReactNode => {\n    Streamlit.setFrameHeight(window.innerHeight)\n    const { isUser, message } = this.props.args;\n    const avatarUrl = 'https://i.ibb.co/QcGKRF9/upscale.png'\n    \n    // Streamlit sends us a theme object via props that we can use to ensure\n    // that our component has visuals that match the active theme in a\n    // streamlit app.\n    const { theme } = this.props\n    \n    // Maintain compatibility with older versions of Streamlit that don't send\n    // a theme object.\n    if (!theme) {\n      return <div>Theme is undefined, please check streamlit version.</div>\n    }\n    \n    // styles for the avatar image\n    const Avatar = styled.img({\n      border: `1px solid transparent`,\n      borderRadius: '50%',\n      height: '3rem',\n      width: '3rem',\n      margin: 0\n    })\n    \n    // styles for the message box\n    const Message = styled.div({\n      display: 'inline-block',\n      // background: '#8629FF',\n      background: isUser ? '#DBEDF4' :'#E6E9F1' ,\n      border: '1px solid transparent',\n      borderRadius: '10px',\n      padding: '10px 14px',\n      margin: '5px 20px',\n      maxWidth: '70%',\n      whiteSpace: 'pre-line'\n    })\n    \n    // styles for the container\n    const Chat = styled.div({\n      display: 'flex',\n      // flexDirection: 'row',\n      fontFamily: `${theme.font}, 'Segoe UI', 'Roboto', sans-serif`, \n      height: 'auto',\n      margin: 0,\n      width: '100%'\n    }, \n    (props: {isUser: boolean}) => {  // specific styles\n      if (props.isUser){\n        return css`\n          flex-direction: row-reverse;\n          & > div {\n            text-align: right;\n          }\n        `;\n      }\n      return css``\n    })\n\n    return (\n      <Chat isUser={isUser}>\n        {!isUser && <Avatar src={avatarUrl} alt=\"profile\" draggable=\"false\"/>}\n        <Message>{message}</Message>\n      </Chat>\n    )\n  }\n}\n\nexport default withStreamlitConnection(Chat);\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport Chat from \"./RobinChat\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <Chat />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}