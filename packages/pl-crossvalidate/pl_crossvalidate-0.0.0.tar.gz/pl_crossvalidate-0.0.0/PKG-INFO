Metadata-Version: 2.1
Name: pl_crossvalidate
Version: 0.0.0
Summary: Cross validation made easy in Lightning
Author-email: Nicki Skafte Detlefsen <skaftenicki@gmail.com>
License:                                  Apache License
                                   Version 2.0, January 2004
                                http://www.apache.org/licenses/
        
           TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION
        
           1. Definitions.
        
              "License" shall mean the terms and conditions for use, reproduction,
              and distribution as defined by Sections 1 through 9 of this document.
        
              "Licensor" shall mean the copyright owner or entity authorized by
              the copyright owner that is granting the License.
        
              "Legal Entity" shall mean the union of the acting entity and all
              other entities that control, are controlled by, or are under common
              control with that entity. For the purposes of this definition,
              "control" means (i) the power, direct or indirect, to cause the
              direction or management of such entity, whether by contract or
              otherwise, or (ii) ownership of fifty percent (50%) or more of the
              outstanding shares, or (iii) beneficial ownership of such entity.
        
              "You" (or "Your") shall mean an individual or Legal Entity
              exercising permissions granted by this License.
        
              "Source" form shall mean the preferred form for making modifications,
              including but not limited to software source code, documentation
              source, and configuration files.
        
              "Object" form shall mean any form resulting from mechanical
              transformation or translation of a Source form, including but
              not limited to compiled object code, generated documentation,
              and conversions to other media types.
        
              "Work" shall mean the work of authorship, whether in Source or
              Object form, made available under the License, as indicated by a
              copyright notice that is included in or attached to the work
              (an example is provided in the Appendix below).
        
              "Derivative Works" shall mean any work, whether in Source or Object
              form, that is based on (or derived from) the Work and for which the
              editorial revisions, annotations, elaborations, or other modifications
              represent, as a whole, an original work of authorship. For the purposes
              of this License, Derivative Works shall not include works that remain
              separable from, or merely link (or bind by name) to the interfaces of,
              the Work and Derivative Works thereof.
        
              "Contribution" shall mean any work of authorship, including
              the original version of the Work and any modifications or additions
              to that Work or Derivative Works thereof, that is intentionally
              submitted to Licensor for inclusion in the Work by the copyright owner
              or by an individual or Legal Entity authorized to submit on behalf of
              the copyright owner. For the purposes of this definition, "submitted"
              means any form of electronic, verbal, or written communication sent
              to the Licensor or its representatives, including but not limited to
              communication on electronic mailing lists, source code control systems,
              and issue tracking systems that are managed by, or on behalf of, the
              Licensor for the purpose of discussing and improving the Work, but
              excluding communication that is conspicuously marked or otherwise
              designated in writing by the copyright owner as "Not a Contribution."
        
              "Contributor" shall mean Licensor and any individual or Legal Entity
              on behalf of whom a Contribution has been received by Licensor and
              subsequently incorporated within the Work.
        
           2. Grant of Copyright License. Subject to the terms and conditions of
              this License, each Contributor hereby grants to You a perpetual,
              worldwide, non-exclusive, no-charge, royalty-free, irrevocable
              copyright license to reproduce, prepare Derivative Works of,
              publicly display, publicly perform, sublicense, and distribute the
              Work and such Derivative Works in Source or Object form.
        
           3. Grant of Patent License. Subject to the terms and conditions of
              this License, each Contributor hereby grants to You a perpetual,
              worldwide, non-exclusive, no-charge, royalty-free, irrevocable
              (except as stated in this section) patent license to make, have made,
              use, offer to sell, sell, import, and otherwise transfer the Work,
              where such license applies only to those patent claims licensable
              by such Contributor that are necessarily infringed by their
              Contribution(s) alone or by combination of their Contribution(s)
              with the Work to which such Contribution(s) was submitted. If You
              institute patent litigation against any entity (including a
              cross-claim or counterclaim in a lawsuit) alleging that the Work
              or a Contribution incorporated within the Work constitutes direct
              or contributory patent infringement, then any patent licenses
              granted to You under this License for that Work shall terminate
              as of the date such litigation is filed.
        
           4. Redistribution. You may reproduce and distribute copies of the
              Work or Derivative Works thereof in any medium, with or without
              modifications, and in Source or Object form, provided that You
              meet the following conditions:
        
              (a) You must give any other recipients of the Work or
                  Derivative Works a copy of this License; and
        
              (b) You must cause any modified files to carry prominent notices
                  stating that You changed the files; and
        
              (c) You must retain, in the Source form of any Derivative Works
                  that You distribute, all copyright, patent, trademark, and
                  attribution notices from the Source form of the Work,
                  excluding those notices that do not pertain to any part of
                  the Derivative Works; and
        
              (d) If the Work includes a "NOTICE" text file as part of its
                  distribution, then any Derivative Works that You distribute must
                  include a readable copy of the attribution notices contained
                  within such NOTICE file, excluding those notices that do not
                  pertain to any part of the Derivative Works, in at least one
                  of the following places: within a NOTICE text file distributed
                  as part of the Derivative Works; within the Source form or
                  documentation, if provided along with the Derivative Works; or,
                  within a display generated by the Derivative Works, if and
                  wherever such third-party notices normally appear. The contents
                  of the NOTICE file are for informational purposes only and
                  do not modify the License. You may add Your own attribution
                  notices within Derivative Works that You distribute, alongside
                  or as an addendum to the NOTICE text from the Work, provided
                  that such additional attribution notices cannot be construed
                  as modifying the License.
        
              You may add Your own copyright statement to Your modifications and
              may provide additional or different license terms and conditions
              for use, reproduction, or distribution of Your modifications, or
              for any such Derivative Works as a whole, provided Your use,
              reproduction, and distribution of the Work otherwise complies with
              the conditions stated in this License.
        
           5. Submission of Contributions. Unless You explicitly state otherwise,
              any Contribution intentionally submitted for inclusion in the Work
              by You to the Licensor shall be under the terms and conditions of
              this License, without any additional terms or conditions.
              Notwithstanding the above, nothing herein shall supersede or modify
              the terms of any separate license agreement you may have executed
              with Licensor regarding such Contributions.
        
           6. Trademarks. This License does not grant permission to use the trade
              names, trademarks, service marks, or product names of the Licensor,
              except as required for reasonable and customary use in describing the
              origin of the Work and reproducing the content of the NOTICE file.
        
           7. Disclaimer of Warranty. Unless required by applicable law or
              agreed to in writing, Licensor provides the Work (and each
              Contributor provides its Contributions) on an "AS IS" BASIS,
              WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
              implied, including, without limitation, any warranties or conditions
              of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
              PARTICULAR PURPOSE. You are solely responsible for determining the
              appropriateness of using or redistributing the Work and assume any
              risks associated with Your exercise of permissions under this License.
        
           8. Limitation of Liability. In no event and under no legal theory,
              whether in tort (including negligence), contract, or otherwise,
              unless required by applicable law (such as deliberate and grossly
              negligent acts) or agreed to in writing, shall any Contributor be
              liable to You for damages, including any direct, indirect, special,
              incidental, or consequential damages of any character arising as a
              result of this License or out of the use or inability to use the
              Work (including but not limited to damages for loss of goodwill,
              work stoppage, computer failure or malfunction, or any and all
              other commercial damages or losses), even if such Contributor
              has been advised of the possibility of such damages.
        
           9. Accepting Warranty or Additional Liability. While redistributing
              the Work or Derivative Works thereof, You may choose to offer,
              and charge a fee for, acceptance of support, warranty, indemnity,
              or other liability obligations and/or rights consistent with this
              License. However, in accepting such obligations, You may act only
              on Your own behalf and on Your sole responsibility, not on behalf
              of any other Contributor, and only if You agree to indemnify,
              defend, and hold each Contributor harmless for any liability
              incurred by, or claims asserted against, such Contributor by reason
              of your accepting any such warranty or additional liability.
        
           END OF TERMS AND CONDITIONS
        
           APPENDIX: How to apply the Apache License to your work.
        
              To apply the Apache License to your work, attach the following
              boilerplate notice, with the fields enclosed by brackets "[]"
              replaced with your own identifying information. (Don't include
              the brackets!)  The text should be enclosed in the appropriate
              comment syntax for the file format. We also recommend that a
              file or class name and description of purpose be included on the
              same "printed page" as the copyright notice for easier
              identification within third-party archives.
        
           Copyright [yyyy] [name of copyright owner]
        
           Licensed under the Apache License, Version 2.0 (the "License");
           you may not use this file except in compliance with the License.
           You may obtain a copy of the License at
        
               http://www.apache.org/licenses/LICENSE-2.0
        
           Unless required by applicable law or agreed to in writing, software
           distributed under the License is distributed on an "AS IS" BASIS,
           WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           See the License for the specific language governing permissions and
           limitations under the License.
        
Requires-Python: >=3.10
Description-Content-Type: text/markdown
Provides-Extra: dev
License-File: LICENSE

# PL Cross
[![license](https://img.shields.io/badge/License-Apache%202.0-blue.svg)](https://github.com/SkafteNicki/pl_cross/blob/master/LICENSE)
[![Tests](https://github.com/SkafteNicki/pl_cross/actions/workflows/tests.yaml/badge.svg)](https://github.com/SkafteNicki/pl_cross/blob/master/.github/workflows/tests.yaml)
[![codecov](https://codecov.io/gh/SkafteNicki/pl_cross/branch/master/graph/badge.svg)](https://codecov.io/gh/SkafteNicki/pl_cross)

Cross validation in pytorch lightning made easy :]

Just import the specialized trainer from `pl_cross` instead of `pytorch_lightning` and you are set
```python
# To distinguish from the original trainer the new trainer is called KFoldTrainer by default
from pl_cross import KFoldTrainer as Trainer

# Normal Lightning module
model = MyModel(...)

# Use a Lightning datamodule or training dataloader
datamodule = MyDatamodule(...)

# New trainer takes all original arguments + three new for controling the cross validation
trainer = Trainer(
    num_folds=5,  # number of folds to do
    shuffle=False,  # if samples should be shuffled before splitting
    stratified=False,  # if splitting should be done in a stratified manner
    accelerator=...,
    callbacks=...,
    ...
)

# Returns a dict of stats over the different splits
cross_val_stats = trainer.cross_validate(model, datamodule=datamodule)

# Additionally, we can construct an ensemble from the K trained models
ensemble_model = trainer.create_ensemble(model)
```

## 💻 Installation

```bash
pip install pl-cross
```

Or latest version from github
```bash
pip install https://github.com/Lightning-AI/torchmetrics/archive/master.zip
```

Requires `torch>=2.0`, `lightning>=2.0` and `scikit-learn>=1.0`.

## 🤔 Cross-validation: why?

The core functionality of machine learning algorithms is that they are able to *learn* from data. Therefore, it is very
interesting to ask the question: how *well* does our algorithms actually learn?. This is in abstract question, because
it requires us to define what *well* means. One interpretation of this question is an algorithms ability to
*generalize* e.g. a model that generalizes well have actually learned something meaningfull.

The mathematical definition of the generalization error/expected loss/risk is given by
<p align="center">
<img src="https://render.githubusercontent.com/render/math?math=I[{\color{blue}f}] = \int_{X \times Y} {\color{green}V}({\color{blue}f}(x), y) {\color{red}p}(x, y) dx dy">
</p>

where <img src="https://render.githubusercontent.com/render/math?math={\color{blue}f}"> is some function
<img src="https://render.githubusercontent.com/render/math?math={\color{blue}f}: X \rightarrow Y, {\color{green}V}">
denotes the loss function and <img src="https://render.githubusercontent.com/render/math?math={\color{red}p}(x,y)"> is
the joint probability distribution between <img src="https://render.githubusercontent.com/render/math?math=x"> and
<img src="https://render.githubusercontent.com/render/math?math=y">. This is the theoretical error an algorithm will do
on some unobserved dataset. The problem with this definition is that we cannot compute it, due to
<img src="https://render.githubusercontent.com/render/math?math={\color{red}p}"> being unknown and even if we knew it
the integral is intractable. The best we therefore can do is an *approximation* of the generalization error:

<p align="center">
<img src="https://render.githubusercontent.com/render/math?math=I_{\color{cyan}n}[{\color{blue}f}] = \frac{1}{{\color{cyan}n}} \sum_{i=1}^{{\color{cyan}n}} {\color{green}V}({\color{blue}f}(x_i), y_i)">
</p>

which measures the error that our function <img src="https://render.githubusercontent.com/render/math?math={\color{blue}f}">
does on <img src="https://render.githubusercontent.com/render/math?math={\color{cyan}n}"> datapoints measured by loss
function <img src="https://render.githubusercontent.com/render/math?math={\color{green}V}">. This function we can
compute (just think of this as your normal loss function) and we even know that

<p align="center">
<img src="https://render.githubusercontent.com/render/math?math=\lim_{n \rightarrow \infty} I[{\color{blue}f}] - I_{\color{cyan}n}[{\color{blue}f}] = 0">
</p>

Namely that approximation of the generalization error will become the true generalization error if we just evaluate it
on enough data. But how does all this related to cross-validation you may ask? The problem with the above is that
<img src="https://render.githubusercontent.com/render/math?math={\color{blue}f}"> is not a fixed function, but
data-dependent function i.e. <img src="https://render.githubusercontent.com/render/math?math={\color{blue}f_{\color{magenta}m}}">.
Thus, the above approximation will only converge if <img src="https://render.githubusercontent.com/render/math?math=\color{cyan}n">
and <img src="https://render.githubusercontent.com/render/math?math=\color{magenta}m"> refers to different sets of
data points. This is where cross-validation strategies comes into play.

<img src="crossval_types.jpg" width="700" title="All credit to https://www.researchgate.net/figure/Figura-44-Hold-out-y-K-fold-cross-validation-5_fig1_334119803">

<center>

| Hold out | K-fold |
|----------|--------|
| <img src="https://render.githubusercontent.com/render/math?math=I[{\color{blue}f_{\color{magenta}m}}] \approx I_{\mathcal{D}_{test}}[{\color{blue}f_{\color{magenta}m}}] \quad \quad \quad \quad"> | <img src="https://render.githubusercontent.com/render/math?math=I[{\color{blue}f_{\color{magenta}m}}] \approx \sum_{k=1}^K \dfrac{\|\mathcal{D}_k\|}{N} I_{\mathcal{D}_k}[{\color{blue}f_{\color{magenta}m}}]">

</center>

In general we consider two viable strategies for selecting the
<img src="https://render.githubusercontent.com/render/math?math=\color{cyan}n"> (validation) and
<img src="https://render.githubusercontent.com/render/math?math=\color{magenta}m"> (training) set: hold-out validation
and K-fold cross validation. In hold out we create a separate independent set of data to evaluate our training on. This
is easily done in native pytorch-lightning by implementing the `validation_step` method. For K-fold we cut our data
into K equally large chunks and then we iteratively train on K-1 folds and evaluate on the remaining 1 fold, repeating
this K times. In general K-fold gives a better approximation of the generalization error than hold-out, but at the
expense of requiring you to train K models.

## 🗒️ Some notes

* For the `.cross_validate` method to work, we in addition to the standard set of method in lightning that need
    to be implemented (`training_step` and `configure_optimizers`) we also requires the `test_step` method to be
    implemented, as we use this method evaluating the hold out set. We do not rely on the `validation_step` method
    as your models training may be dependent on the validation set (for example if you use early stopping) and your
    validation set will therefore not be truly separated from the training.

* To do the splitting in cross validation we need the total number of data points in your dataset. For this reason,
    we require that your dataset implements the `__len__` method.

* Cross validation is always done sequentially, even if the device you are training on in principal could
    fit parallel training on multiple folds at the same time. We try to figure out in the future if we can
    parallelize the process.

* Logging can be a bit weird. Logging of training progress is essentially not important to cross-validation,
    but that does not mean that it is interesting to track. The cross-validation method will hijack the `version`
    attribute of any logger attached to the trainer and set the logging directory to `f"{version}/fold_{fold_index}"`.

* Stratified splitting assume that we can extract a 1D label vector from your dataset.

    * If your dataset has an `labels` attribute, we will use that as the labels
    * If the attribute does not exist, we manually iterate over your dataset trying to extract the labels when creating
        the splits (this is done as part of `.setup` phase of the datamodule). By default we assume that given a `batch`
        the labels can be found as the second argument e.g. `batch[1]`. You can adjust this by importing the specialized
        `KFoldDataModule` and changing the `label_extractor` attribute. For example, if your batches are dictionaries
        instead you can do something like this:

        ```python
        from pl_cross import KFoldDataModule, KFoldTrainer

        model = ...

        trainer = KFoldTrainer(...)

        datamodule = KFoldDataModule(
            num_folds, shuffle, stratified,  # these should match how the trainer is initialized
            train_dataloader=my_train_dataloader,
        )
        # change the label extractor function, such that it will return the labels for a given batch
        datamodule.label_extractor = lambda batch: batch['y']

        trainer.cross_validate(model, datamodule=datamodule)
        ```

## 😃 Bibtex

If you want to cite the framework feel free to use this:

```bibtex
@article{software:pl_cross,
    title={PL Cross},
    author={Nicki S. Detlefsen},
    journal={GitHub. Note: https://github.com/SkafteNicki/pl_cross},
    year={2023}
}
```
