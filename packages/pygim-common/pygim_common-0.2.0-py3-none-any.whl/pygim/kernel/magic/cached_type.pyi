from typing import *
from pygim.typing import AnyClass, AnyArgs, AnyKwargs

class CachedInstanceMeta(type):
    def __new__(mcls: AnyClass, name: Text, bases: Tuple[AnyClass], namespace: AnyKwargs) -> Any: ...
    def __call__(self, *args: AnyArgs, **kwargs: AnyKwargs) -> Any: ...
    @classmethod
    def reset(cls) -> None: ...

class CachedClassInstanceMeta(CachedInstanceMeta):
    def __new__(mcls: AnyClass, name: Text, bases: Tuple[AnyClass], attrs: AnyKwargs) -> type: ...
    @classmethod
    def reset(cls) -> None: ...

class CachedClassMeta(type):
    def __new__(mcls: AnyClass, name: Text, bases: Tuple[AnyClass], namespace: AnyKwargs) -> Any: ...
    @classmethod
    def reset(cls) -> None: ...

class CachedTypeMeta(type):
    def __new__(
        mcls: AnyClass,
        name: Text,
        bases: Tuple[AnyClass] = ...,
        attrs: AnyKwargs = ...,
        *,
        cache_class: bool = ...,
        cache_instance: bool = ...,
    ) -> type: ...
    def __init__(self, *args: AnyArgs, **kwargs: AnyKwargs) -> None: ...
    def __call__(self, *args: AnyArgs, **kwargs: AnyKwargs) -> Any: ...
    @classmethod
    def reset_type_cache(mcls, *, type_cache: bool = ..., instance_cache: bool = ...) -> None: ...

class CachedType(metaclass=CachedTypeMeta): ...

create_cached_class = CachedTypeMeta
