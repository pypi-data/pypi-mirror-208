from typing import Iterable, Text, Collection, Optional, Generator, Any, Mapping
from typing_extensions import TypeAlias
from pygim.typing import PathLike, MaybePathLike, MaybePathLikes
from pathlib import Path

Paths: TypeAlias = Collection[Path]
MaybePaths: TypeAlias = Optional[Paths]
PathGenerator: TypeAlias = Generator[Path, Any, Any]
PathFilters: TypeAlias = Mapping[Text, Any]

class _FileSystemOps:
    def __get__(self, __instance: PathSet, _: type) -> _FileSystemOps: ...
    def delete(self, path: Path) -> None: ...
    def delete_all(self) -> None: ...

class PathSet:
    FS: Any
    def __post_init__(self) -> None: ...
    @classmethod
    def prefixed(cls, paths: Collection[PathLike], *, prefix: MaybePathLike = ...) -> PathSet: ...
    def __len__(self) -> int: ...
    def __iter__(self) -> PathGenerator: ...
    def __bool__(self) -> bool: ...
    def clone(self, paths: MaybePathLikes = ...) -> PathSet: ...
    def filter(self, **filters: PathFilters) -> PathGenerator: ...
    def drop(self, **filters: PathFilters) -> PathGenerator: ...
    def filtered(self, **filters: PathFilters) -> PathSet: ...
    def dropped(self, **filters: PathFilters) -> PathSet: ...
    def dirs(self, **filters: PathFilters) -> PathSet: ...
    def files(self, **filters: PathFilters) -> PathSet: ...
    def by_suffix(self, *suffix: Iterable[Text]) -> PathSet: ...
    def __add__(self, other: MaybePathLikes) -> PathSet: ...
    def __init__(self, _paths: MaybePaths, _pattern: Text) -> None: ...
