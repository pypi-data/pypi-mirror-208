//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-31833905
// Cuda compilation tools, release 11.8, V11.8.89
// Based on NVVM 7.0.1
//

.version 7.8
.target sm_75
.address_size 64

	// .globl	_ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb1ELb0EEEvNS_10KernelArgsIT_T0_EE
.global .align 4 .b8 _ZZN4cuda3std3__48__detail21__stronger_order_cudaEiiE7__xform[16] = {3, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 3, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllIE[24] = {254, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllJE[20] = {254, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllKE[8] = {0, 0, 0, 0, 1, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond6AllEhcE[12] = {0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond6AllXyzE[12] = {0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0};
.extern .shared .align 16 .b8 _ZN6kernel5shmemE[];

.visible .entry _ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb1ELb0EEEvNS_10KernelArgsIT_T0_EE(
	.param .align 8 .b8 _ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb1ELb0EEEvNS_10KernelArgsIT_T0_EE_param_0[144]
)
{
	.reg .pred 	%p<208>;
	.reg .f32 	%f<400>;
	.reg .b32 	%r<1678>;
	.reg .f64 	%fd<5>;
	.reg .b64 	%rd<454>;


	mov.b64 	%rd27, _ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb1ELb0EEEvNS_10KernelArgsIT_T0_EE_param_0;
	mov.u64 	%rd1, %rd27;
	ld.param.v2.u32 	{%r603, %r604}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb1ELb0EEEvNS_10KernelArgsIT_T0_EE_param_0];
	ld.param.v2.u32 	{%r605, %r606}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb1ELb0EEEvNS_10KernelArgsIT_T0_EE_param_0+8];
	ld.param.v2.u32 	{%r607, %r608}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb1ELb0EEEvNS_10KernelArgsIT_T0_EE_param_0+16];
	ld.param.v2.u32 	{%r609, %r610}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb1ELb0EEEvNS_10KernelArgsIT_T0_EE_param_0+24];
	ld.param.v2.u32 	{%r611, %r612}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb1ELb0EEEvNS_10KernelArgsIT_T0_EE_param_0+32];
	ld.param.v2.u32 	{%r613, %r614}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb1ELb0EEEvNS_10KernelArgsIT_T0_EE_param_0+40];
	ld.param.v2.u32 	{%r615, %r616}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb1ELb0EEEvNS_10KernelArgsIT_T0_EE_param_0+48];
	mov.u32 	%r17, %tid.y;
	mov.u32 	%r18, %tid.z;
	mov.u32 	%r19, %ctaid.y;
	mov.u32 	%r20, %ctaid.z;
	mov.u32 	%r617, 32;
	sub.s32 	%r21, %r617, %r610;
	mov.u32 	%r22, %tid.x;
	setp.le.s32 	%p11, %r21, %r22;
	add.s32 	%r618, %r616, -1;
	add.s32 	%r619, %r614, %r608;
	add.s32 	%r620, %r619, %r609;
	add.s32 	%r621, %r620, 1;
	mad.lo.s32 	%r622, %r618, %r615, %r621;
	mul.lo.s32 	%r623, %r603, %r605;
	shl.b32 	%r23, %r623, 1;
	shl.b32 	%r24, %r623, 2;
	div.s32 	%r624, %r622, %r24;
	add.s32 	%r625, %r624, 1;
	mul.lo.s32 	%r626, %r625, %r609;
	mul.lo.s32 	%r627, %r604, %r606;
	shl.b32 	%r25, %r627, 1;
	div.s32 	%r628, %r626, %r25;
	add.s32 	%r629, %r628, 1;
	mul.lo.s32 	%r26, %r629, %r608;
	ld.param.u64 	%rd28, [%rd1+136];
	cvta.to.global.u64 	%rd2, %rd28;
	mad.lo.s32 	%r632, %r605, %r20, %r19;
	mad.lo.s32 	%r633, %r632, %r604, %r18;
	mad.lo.s32 	%r634, %r633, %r603, %r17;
	shl.b32 	%r27, %r634, 5;
	add.s32 	%r1472, %r27, %r22;
	mul.lo.s32 	%r635, %r627, %r623;
	shl.b32 	%r31, %r635, 5;
	shl.b32 	%r636, %r610, 2;
	mov.u32 	%r637, 128;
	sub.s32 	%r32, %r637, %r636;
	mul.lo.s32 	%r638, %r609, %r608;
	mul.lo.s32 	%r639, %r638, %r616;
	mul.lo.s32 	%r640, %r639, %r32;
	mul.lo.s32 	%r33, %r640, 3;
	setp.ge.s32 	%p12, %r1472, %r33;
	@%p12 bra 	$L__BB0_9;

	not.b32 	%r641, %r22;
	add.s32 	%r642, %r33, %r641;
	sub.s32 	%r643, %r642, %r27;
	mul.lo.s32 	%r644, %r627, %r603;
	mul.lo.s32 	%r645, %r644, %r605;
	shl.b32 	%r646, %r645, 5;
	div.u32 	%r34, %r643, %r646;
	add.s32 	%r647, %r34, 1;
	and.b32  	%r1469, %r647, 3;
	setp.eq.s32 	%p13, %r1469, 0;
	mov.u32 	%r1470, %r1472;
	@%p13 bra 	$L__BB0_6;

	mov.u32 	%r1470, %r1472;

$L__BB0_5:
	.pragma "nounroll";
	mul.wide.s32 	%rd29, %r1470, 4;
	add.s64 	%rd30, %rd2, %rd29;
	mov.u32 	%r648, 0;
	st.global.u32 	[%rd30], %r648;
	add.s32 	%r1470, %r1470, %r31;
	add.s32 	%r1469, %r1469, -1;
	setp.ne.s32 	%p14, %r1469, 0;
	@%p14 bra 	$L__BB0_5;

$L__BB0_6:
	setp.lt.u32 	%p15, %r34, 3;
	@%p15 bra 	$L__BB0_9;

	mul.wide.s32 	%rd33, %r31, 4;

$L__BB0_8:
	mul.wide.s32 	%rd31, %r1470, 4;
	add.s64 	%rd32, %rd2, %rd31;
	mov.u32 	%r649, 0;
	st.global.u32 	[%rd32], %r649;
	add.s64 	%rd34, %rd32, %rd33;
	st.global.u32 	[%rd34], %r649;
	add.s32 	%r650, %r1470, %r31;
	add.s32 	%r651, %r650, %r31;
	add.s64 	%rd35, %rd34, %rd33;
	st.global.u32 	[%rd35], %r649;
	add.s32 	%r652, %r651, %r31;
	add.s64 	%rd36, %rd35, %rd33;
	st.global.u32 	[%rd36], %r649;
	add.s32 	%r1470, %r652, %r31;
	setp.lt.s32 	%p16, %r1470, %r33;
	@%p16 bra 	$L__BB0_8;

$L__BB0_9:
	ld.param.u64 	%rd37, [%rd1+56];
	cvta.to.global.u64 	%rd3, %rd37;
	sub.s32 	%r653, %r609, %r23;
	div.s32 	%r654, %r653, %r25;
	mul.lo.s32 	%r655, %r654, %r608;
	sub.s32 	%r656, %r655, %r23;
	sub.s32 	%r657, %r608, %r25;
	mul.lo.s32 	%r658, %r657, %r605;
	mul.lo.s32 	%r43, %r603, 384;
	add.s32 	%r659, %r43, %r43;
	add.s32 	%r660, %r659, 128;
	mul.lo.s32 	%r662, %r627, 768;
	mul.lo.s32 	%r663, %r658, %r660;
	mad.lo.s32 	%r44, %r662, %r656, %r663;
	bra.uni 	$L__BB0_10;

$L__BB0_375:
	mov.f32 	%f399, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f399;
  cvt.rn.f16.f32 high, %f399;
  mov.b32 %r1448, {low,high};}

	// end inline asm
	mul.wide.s32 	%rd447, %r1472, 4;
	add.s64 	%rd448, %rd3, %rd447;
	st.global.u32 	[%rd448], %r1448;
	add.s32 	%r1472, %r1472, %r31;

$L__BB0_10:
	setp.lt.s32 	%p17, %r1472, %r44;
	@%p17 bra 	$L__BB0_375;

	ld.param.u64 	%rd38, [%rd1+96];
	cvta.to.global.u64 	%rd5, %rd38;
	ld.param.u64 	%rd39, [%rd1+64];
	cvta.to.global.u64 	%rd6, %rd39;
	mad.lo.s32 	%r1514, %r603, %r19, %r17;
	mul.lo.s32 	%r49, %r604, %r20;
	add.s32 	%r50, %r49, %r18;
	setp.ge.s32 	%p18, %r1514, %r608;
	@%p18 bra 	$L__BB0_35;

	setp.gt.s32 	%p19, %r21, %r22;
	mov.u32 	%r664, 31;
	sub.s32 	%r665, %r664, %r22;
	selp.b32 	%r666, %r22, %r665, %p19;
	shl.b32 	%r667, %r666, 2;
	mov.u32 	%r668, 2;
	sub.s32 	%r51, %r667, %r611;
	sub.s32 	%r669, %r668, %r611;
	add.s32 	%r52, %r669, %r667;
	shl.b32 	%r53, %r638, 6;
	add.s32 	%r54, %r608, -1;
	add.s32 	%r55, %r51, 1;
	add.s32 	%r56, %r52, 1;
	shl.b32 	%r57, %r22, 1;
	or.b32  	%r58, %r57, 1;
	shr.u32 	%r671, %r58, 31;
	add.s32 	%r672, %r58, %r671;
	shr.s32 	%r60, %r672, 1;
	and.b32  	%r673, %r672, -2;
	sub.s32 	%r674, %r58, %r673;
	add.s32 	%r59, %r674, %r53;
	rem.s32 	%r709, %r55, %r32;
	add.s32 	%r710, %r709, %r32;
	rem.s32 	%r83, %r710, %r32;
	rem.s32 	%r711, %r56, %r32;
	add.s32 	%r712, %r711, %r32;
	rem.s32 	%r84, %r712, %r32;
	mov.u32 	%r1473, %r1514;

$L__BB0_13:
	setp.ge.s32 	%p20, %r50, %r609;
	@%p20 bra 	$L__BB0_34;

	add.s32 	%r62, %r54, %r1473;
	rem.s32 	%r675, %r51, %r32;
	add.s32 	%r676, %r675, %r32;
	rem.s32 	%r63, %r676, %r32;
	rem.s32 	%r677, %r52, %r32;
	add.s32 	%r678, %r677, %r32;
	rem.s32 	%r64, %r678, %r32;
	mul.lo.s32 	%r65, %r1473, %r609;
	add.s32 	%r679, %r608, %r1473;
	mul.lo.s32 	%r66, %r679, %r609;
	add.s32 	%r680, %r679, %r608;
	mul.lo.s32 	%r67, %r680, %r609;
	mov.u32 	%r1474, %r50;

$L__BB0_15:
	mul.lo.s32 	%r69, %r1474, %r608;
	add.s32 	%r70, %r69, %r1473;
	shl.b32 	%r71, %r70, 6;
	@%p19 bra 	$L__BB0_17;
	bra.uni 	$L__BB0_16;

$L__BB0_17:
	add.s32 	%r683, %r65, %r1474;
	mul.lo.s32 	%r684, %r683, %r32;
	add.s32 	%r685, %r684, %r63;
	mul.wide.s32 	%rd40, %r685, 4;
	add.s64 	%rd41, %rd5, %rd40;
	ld.global.f32 	%f40, [%rd41];
	add.s32 	%r686, %r684, %r64;
	mul.wide.s32 	%rd42, %r686, 4;
	add.s64 	%rd43, %rd5, %rd42;
	ld.global.f32 	%f41, [%rd43];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f40;
  cvt.rn.f16.f32 high, %f41;
  mov.b32 %r1475, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_18;

$L__BB0_16:
	mov.f32 	%f39, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f39;
  cvt.rn.f16.f32 high, %f39;
  mov.b32 %r1475, {low,high};}

	// end inline asm

$L__BB0_18:
	shl.b32 	%r75, %r70, 5;
	add.s32 	%r687, %r75, %r22;
	shl.b32 	%r688, %r687, 2;
	add.s32 	%r689, %r53, %r688;
	mul.wide.s32 	%rd44, %r689, 4;
	add.s64 	%rd45, %rd6, %rd44;
	st.global.u32 	[%rd45], %r1475;
	@%p19 bra 	$L__BB0_20;
	bra.uni 	$L__BB0_19;

$L__BB0_20:
	add.s32 	%r692, %r66, %r1474;
	mul.lo.s32 	%r693, %r692, %r32;
	add.s32 	%r694, %r693, %r63;
	mul.wide.s32 	%rd46, %r694, 4;
	add.s64 	%rd47, %rd5, %rd46;
	ld.global.f32 	%f44, [%rd47];
	add.s32 	%r695, %r693, %r64;
	mul.wide.s32 	%rd48, %r695, 4;
	add.s64 	%rd49, %rd5, %rd48;
	ld.global.f32 	%f45, [%rd49];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f44;
  cvt.rn.f16.f32 high, %f45;
  mov.b32 %r1476, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_21;

$L__BB0_19:
	mov.f32 	%f43, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f43;
  cvt.rn.f16.f32 high, %f43;
  mov.b32 %r1476, {low,high};}

	// end inline asm

$L__BB0_21:
	add.s32 	%r696, %r57, %r71;
	mul.wide.s32 	%rd50, %r696, 4;
	add.s64 	%rd51, %rd6, %rd50;
	st.global.u32 	[%rd51], %r1476;
	@%p19 bra 	$L__BB0_23;
	bra.uni 	$L__BB0_22;

$L__BB0_23:
	add.s32 	%r699, %r67, %r1474;
	mul.lo.s32 	%r700, %r699, %r32;
	add.s32 	%r701, %r700, %r63;
	mul.wide.s32 	%rd52, %r701, 4;
	add.s64 	%rd53, %rd5, %rd52;
	ld.global.f32 	%f48, [%rd53];
	add.s32 	%r702, %r700, %r64;
	mul.wide.s32 	%rd54, %r702, 4;
	add.s64 	%rd55, %rd5, %rd54;
	ld.global.f32 	%f49, [%rd55];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f48;
  cvt.rn.f16.f32 high, %f49;
  mov.b32 %r1477, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_24;

$L__BB0_22:
	mov.f32 	%f47, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f47;
  cvt.rn.f16.f32 high, %f47;
  mov.b32 %r1477, {low,high};}

	// end inline asm

$L__BB0_24:
	rem.s32 	%r703, %r62, %r608;
	add.s32 	%r704, %r703, %r69;
	shl.b32 	%r82, %r704, 5;
	add.s32 	%r705, %r82, %r22;
	shl.b32 	%r706, %r705, 2;
	add.s32 	%r707, %r53, %r706;
	add.s32 	%r708, %r707, 2;
	mul.wide.s32 	%rd56, %r708, 4;
	add.s64 	%rd57, %rd6, %rd56;
	st.global.u32 	[%rd57], %r1477;
	@%p19 bra 	$L__BB0_26;
	bra.uni 	$L__BB0_25;

$L__BB0_26:
	add.s32 	%r715, %r65, %r1474;
	mul.lo.s32 	%r716, %r715, %r32;
	add.s32 	%r717, %r716, %r83;
	mul.wide.s32 	%rd58, %r717, 4;
	add.s64 	%rd59, %rd5, %rd58;
	ld.global.f32 	%f52, [%rd59];
	add.s32 	%r718, %r716, %r84;
	mul.wide.s32 	%rd60, %r718, 4;
	add.s64 	%rd61, %rd5, %rd60;
	ld.global.f32 	%f53, [%rd61];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f52;
  cvt.rn.f16.f32 high, %f53;
  mov.b32 %r1478, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_27;

$L__BB0_25:
	mov.f32 	%f51, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f51;
  cvt.rn.f16.f32 high, %f51;
  mov.b32 %r1478, {low,high};}

	// end inline asm

$L__BB0_27:
	add.s32 	%r719, %r75, %r60;
	shl.b32 	%r720, %r719, 2;
	add.s32 	%r721, %r59, %r720;
	mul.wide.s32 	%rd62, %r721, 4;
	add.s64 	%rd63, %rd6, %rd62;
	st.global.u32 	[%rd63], %r1478;
	@%p19 bra 	$L__BB0_29;
	bra.uni 	$L__BB0_28;

$L__BB0_29:
	add.s32 	%r724, %r66, %r1474;
	mul.lo.s32 	%r725, %r724, %r32;
	add.s32 	%r726, %r725, %r83;
	mul.wide.s32 	%rd64, %r726, 4;
	add.s64 	%rd65, %rd5, %rd64;
	ld.global.f32 	%f56, [%rd65];
	add.s32 	%r727, %r725, %r84;
	mul.wide.s32 	%rd66, %r727, 4;
	add.s64 	%rd67, %rd5, %rd66;
	ld.global.f32 	%f57, [%rd67];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f56;
  cvt.rn.f16.f32 high, %f57;
  mov.b32 %r1479, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_30;

$L__BB0_28:
	mov.f32 	%f55, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f55;
  cvt.rn.f16.f32 high, %f55;
  mov.b32 %r1479, {low,high};}

	// end inline asm

$L__BB0_30:
	add.s32 	%r728, %r58, %r71;
	mul.wide.s32 	%rd68, %r728, 4;
	add.s64 	%rd69, %rd6, %rd68;
	st.global.u32 	[%rd69], %r1479;
	@%p19 bra 	$L__BB0_32;
	bra.uni 	$L__BB0_31;

$L__BB0_32:
	add.s32 	%r731, %r67, %r1474;
	mul.lo.s32 	%r732, %r731, %r32;
	add.s32 	%r733, %r732, %r83;
	mul.wide.s32 	%rd70, %r733, 4;
	add.s64 	%rd71, %rd5, %rd70;
	ld.global.f32 	%f60, [%rd71];
	add.s32 	%r734, %r732, %r84;
	mul.wide.s32 	%rd72, %r734, 4;
	add.s64 	%rd73, %rd5, %rd72;
	ld.global.f32 	%f61, [%rd73];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f60;
  cvt.rn.f16.f32 high, %f61;
  mov.b32 %r1480, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_33;

$L__BB0_31:
	mov.f32 	%f59, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f59;
  cvt.rn.f16.f32 high, %f59;
  mov.b32 %r1480, {low,high};}

	// end inline asm

$L__BB0_33:
	add.s32 	%r735, %r82, %r60;
	shl.b32 	%r736, %r735, 2;
	add.s32 	%r737, %r59, %r736;
	add.s32 	%r738, %r737, 2;
	mul.wide.s32 	%rd74, %r738, 4;
	add.s64 	%rd75, %rd6, %rd74;
	st.global.u32 	[%rd75], %r1480;
	add.s32 	%r1474, %r1474, %r627;
	setp.lt.s32 	%p27, %r1474, %r609;
	@%p27 bra 	$L__BB0_15;

$L__BB0_34:
	add.s32 	%r1473, %r1473, %r623;
	setp.lt.s32 	%p28, %r1473, %r608;
	@%p28 bra 	$L__BB0_13;

$L__BB0_35:
	ld.param.u64 	%rd76, [%rd1+104];
	cvta.to.global.u64 	%rd7, %rd76;
	ld.param.u64 	%rd77, [%rd1+72];
	cvta.to.global.u64 	%rd8, %rd77;
	@%p18 bra 	$L__BB0_119;

	shl.b32 	%r96, %r50, 1;
	mov.u64 	%rd78, _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllIE;
	mov.u32 	%r1481, %r1514;

$L__BB0_37:
	setp.ge.s32 	%p30, %r96, %r609;
	@%p30 bra 	$L__BB0_118;

	mov.u32 	%r1482, %r96;

$L__BB0_39:
	setp.ne.s32 	%p31, %r22, 0;
	@%p31 bra 	$L__BB0_117;

	shr.u32 	%r740, %r1482, 31;
	add.s32 	%r741, %r1482, %r740;
	shr.s32 	%r742, %r741, 1;
	mad.lo.s32 	%r743, %r742, %r608, %r1481;
	shl.b32 	%r100, %r743, 5;
	add.s32 	%r101, %r1482, -2;
	mul.lo.s32 	%r102, %r101, %r608;
	add.s32 	%r744, %r609, %r101;
	mul.lo.s32 	%r103, %r744, %r608;
	add.s32 	%r745, %r744, %r609;
	mul.lo.s32 	%r104, %r745, %r608;
	add.s32 	%r105, %r102, %r608;
	add.s32 	%r106, %r1482, -1;
	add.s32 	%r746, %r609, %r106;
	mul.lo.s32 	%r107, %r746, %r608;
	add.s32 	%r747, %r746, %r609;
	mul.lo.s32 	%r108, %r747, %r608;
	add.s32 	%r748, %r609, %r1482;
	mul.lo.s32 	%r109, %r748, %r608;
	add.s32 	%r749, %r748, %r609;
	mul.lo.s32 	%r110, %r749, %r608;
	mul.lo.s32 	%r111, %r1482, %r608;
	add.s32 	%r112, %r111, %r608;
	add.s32 	%r113, %r1482, 1;
	add.s32 	%r750, %r609, %r113;
	mul.lo.s32 	%r114, %r750, %r608;
	add.s32 	%r751, %r750, %r609;
	mul.lo.s32 	%r115, %r751, %r608;
	add.s32 	%r116, %r112, %r608;
	add.s32 	%r117, %r1482, 2;
	add.s32 	%r752, %r609, %r117;
	mul.lo.s32 	%r118, %r752, %r608;
	add.s32 	%r753, %r752, %r609;
	mul.lo.s32 	%r119, %r753, %r608;
	mov.u32 	%r1485, 0;
	mov.u64 	%rd451, %rd78;

$L__BB0_41:
	ld.global.nc.u32 	%r754, [%rd451];
	cvt.rn.f64.s32 	%fd1, %r754;
	add.f64 	%fd3, %fd1, 0d3FE0000000000000;
	add.s32 	%r121, %r754, %r1481;
	setp.lt.s32 	%p32, %r121, %r608;
	or.b32  	%r755, %r101, %r121;
	setp.gt.s32 	%p33, %r755, -1;
	and.pred  	%p34, %p32, %p33;
	setp.lt.s32 	%p35, %r101, %r609;
	and.pred  	%p1, %p35, %p34;
	cvt.rn.f32.f64 	%f62, %fd3;
	add.f32 	%f63, %f62, 0f3E800000;
	abs.f32 	%f1, %f63;
	add.f32 	%f64, %f1, 0f40200000;
	setp.geu.f32 	%p36, %f64, 0f40000000;
	@%p36 bra 	$L__BB0_46;

	@%p1 bra 	$L__BB0_44;
	bra.uni 	$L__BB0_43;

$L__BB0_44:
	add.s32 	%r758, %r102, %r121;
	mul.wide.s32 	%rd79, %r758, 4;
	add.s64 	%rd80, %rd7, %rd79;
	ld.global.f32 	%f67, [%rd80];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f67;
  mov.b32 %r1484, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_45;

$L__BB0_43:
	mov.f32 	%f66, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f66;
  cvt.rn.f16.f32 high, %f66;
  mov.b32 %r1484, {low,high};}

	// end inline asm

$L__BB0_45:
	add.s32 	%r759, %r1485, %r100;
	mul.wide.s32 	%rd81, %r759, 4;
	add.s64 	%rd82, %rd8, %rd81;
	st.global.u32 	[%rd82], %r1484;
	add.s32 	%r1485, %r1485, 1;

$L__BB0_46:
	cvt.rn.f32.f64 	%f68, %fd1;
	add.f32 	%f69, %f68, 0f3E800000;
	abs.f32 	%f2, %f69;
	add.f32 	%f3, %f2, 0f40000000;
	setp.geu.f32 	%p37, %f3, 0f40000000;
	@%p37 bra 	$L__BB0_51;

	@%p1 bra 	$L__BB0_49;
	bra.uni 	$L__BB0_48;

$L__BB0_49:
	add.s32 	%r762, %r103, %r121;
	mul.wide.s32 	%rd83, %r762, 4;
	add.s64 	%rd84, %rd7, %rd83;
	ld.global.f32 	%f72, [%rd84];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f72;
  mov.b32 %r1486, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_50;

$L__BB0_48:
	mov.f32 	%f71, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f71;
  cvt.rn.f16.f32 high, %f71;
  mov.b32 %r1486, {low,high};}

	// end inline asm

$L__BB0_50:
	add.s32 	%r763, %r1485, %r100;
	mul.wide.s32 	%rd85, %r763, 4;
	add.s64 	%rd86, %rd8, %rd85;
	st.global.u32 	[%rd86], %r1486;
	add.s32 	%r1485, %r1485, 1;

$L__BB0_51:
	add.f32 	%f73, %f2, 0f40200000;
	setp.geu.f32 	%p38, %f73, 0f40000000;
	@%p38 bra 	$L__BB0_56;

	@%p1 bra 	$L__BB0_54;
	bra.uni 	$L__BB0_53;

$L__BB0_54:
	add.s32 	%r766, %r104, %r121;
	mul.wide.s32 	%rd87, %r766, 4;
	add.s64 	%rd88, %rd7, %rd87;
	ld.global.f32 	%f76, [%rd88];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f76;
  mov.b32 %r1488, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_55;

$L__BB0_53:
	mov.f32 	%f75, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f75;
  cvt.rn.f16.f32 high, %f75;
  mov.b32 %r1488, {low,high};}

	// end inline asm

$L__BB0_55:
	add.s32 	%r767, %r1485, %r100;
	mul.wide.s32 	%rd89, %r767, 4;
	add.s64 	%rd90, %rd8, %rd89;
	st.global.u32 	[%rd90], %r1488;
	add.s32 	%r1485, %r1485, 1;

$L__BB0_56:
	or.b32  	%r768, %r106, %r121;
	setp.gt.s32 	%p39, %r768, -1;
	and.pred  	%p41, %p32, %p39;
	setp.le.s32 	%p42, %r1482, %r609;
	and.pred  	%p2, %p42, %p41;
	add.f32 	%f4, %f1, 0f3FC00000;
	setp.geu.f32 	%p43, %f4, 0f40000000;
	@%p43 bra 	$L__BB0_61;

	@%p2 bra 	$L__BB0_59;
	bra.uni 	$L__BB0_58;

$L__BB0_59:
	add.s32 	%r771, %r105, %r121;
	mul.wide.s32 	%rd91, %r771, 4;
	add.s64 	%rd92, %rd7, %rd91;
	ld.global.f32 	%f79, [%rd92];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f79;
  mov.b32 %r1490, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_60;

$L__BB0_58:
	mov.f32 	%f78, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f78;
  cvt.rn.f16.f32 high, %f78;
  mov.b32 %r1490, {low,high};}

	// end inline asm

$L__BB0_60:
	add.s32 	%r772, %r1485, %r100;
	mul.wide.s32 	%rd93, %r772, 4;
	add.s64 	%rd94, %rd8, %rd93;
	st.global.u32 	[%rd94], %r1490;
	add.s32 	%r1485, %r1485, 1;

$L__BB0_61:
	add.f32 	%f5, %f2, 0f3F800000;
	setp.geu.f32 	%p44, %f5, 0f40000000;
	@%p44 bra 	$L__BB0_66;

	@%p2 bra 	$L__BB0_64;
	bra.uni 	$L__BB0_63;

$L__BB0_64:
	add.s32 	%r775, %r107, %r121;
	mul.wide.s32 	%rd95, %r775, 4;
	add.s64 	%rd96, %rd7, %rd95;
	ld.global.f32 	%f82, [%rd96];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f82;
  mov.b32 %r1492, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_65;

$L__BB0_63:
	mov.f32 	%f81, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f81;
  cvt.rn.f16.f32 high, %f81;
  mov.b32 %r1492, {low,high};}

	// end inline asm

$L__BB0_65:
	add.s32 	%r776, %r1485, %r100;
	mul.wide.s32 	%rd97, %r776, 4;
	add.s64 	%rd98, %rd8, %rd97;
	st.global.u32 	[%rd98], %r1492;
	add.s32 	%r1485, %r1485, 1;

$L__BB0_66:
	add.f32 	%f6, %f2, 0f3FC00000;
	setp.geu.f32 	%p45, %f6, 0f40000000;
	@%p45 bra 	$L__BB0_71;

	@%p2 bra 	$L__BB0_69;
	bra.uni 	$L__BB0_68;

$L__BB0_69:
	add.s32 	%r779, %r108, %r121;
	mul.wide.s32 	%rd99, %r779, 4;
	add.s64 	%rd100, %rd7, %rd99;
	ld.global.f32 	%f85, [%rd100];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f85;
  mov.b32 %r1494, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_70;

$L__BB0_68:
	mov.f32 	%f84, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f84;
  cvt.rn.f16.f32 high, %f84;
  mov.b32 %r1494, {low,high};}

	// end inline asm

$L__BB0_70:
	add.s32 	%r780, %r1485, %r100;
	mul.wide.s32 	%rd101, %r780, 4;
	add.s64 	%rd102, %rd8, %rd101;
	st.global.u32 	[%rd102], %r1494;
	add.s32 	%r1485, %r1485, 1;

$L__BB0_71:
	or.b32  	%r781, %r1482, %r121;
	setp.gt.s32 	%p46, %r781, -1;
	and.pred  	%p48, %p32, %p46;
	setp.lt.s32 	%p49, %r1482, %r609;
	and.pred  	%p3, %p49, %p48;
	add.f32 	%f7, %f1, 0f3F000000;
	setp.geu.f32 	%p50, %f7, 0f40000000;
	@%p50 bra 	$L__BB0_76;

	@%p3 bra 	$L__BB0_74;
	bra.uni 	$L__BB0_73;

$L__BB0_74:
	add.s32 	%r784, %r111, %r121;
	mul.wide.s32 	%rd103, %r784, 4;
	add.s64 	%rd104, %rd7, %rd103;
	ld.global.f32 	%f88, [%rd104];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f88;
  mov.b32 %r1496, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_75;

$L__BB0_73:
	mov.f32 	%f87, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f87;
  cvt.rn.f16.f32 high, %f87;
  mov.b32 %r1496, {low,high};}

	// end inline asm

$L__BB0_75:
	add.s32 	%r785, %r1485, %r100;
	mul.wide.s32 	%rd105, %r785, 4;
	add.s64 	%rd106, %rd8, %rd105;
	st.global.u32 	[%rd106], %r1496;
	add.s32 	%r1485, %r1485, 1;

$L__BB0_76:
	add.f32 	%f89, %f2, 0f00000000;
	setp.geu.f32 	%p51, %f89, 0f40000000;
	@%p51 bra 	$L__BB0_81;

	@%p3 bra 	$L__BB0_79;
	bra.uni 	$L__BB0_78;

$L__BB0_79:
	add.s32 	%r788, %r109, %r121;
	mul.wide.s32 	%rd107, %r788, 4;
	add.s64 	%rd108, %rd7, %rd107;
	ld.global.f32 	%f92, [%rd108];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f92;
  mov.b32 %r1498, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_80;

$L__BB0_78:
	mov.f32 	%f91, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f91;
  cvt.rn.f16.f32 high, %f91;
  mov.b32 %r1498, {low,high};}

	// end inline asm

$L__BB0_80:
	add.s32 	%r789, %r1485, %r100;
	mul.wide.s32 	%rd109, %r789, 4;
	add.s64 	%rd110, %rd8, %rd109;
	st.global.u32 	[%rd110], %r1498;
	add.s32 	%r1485, %r1485, 1;

$L__BB0_81:
	add.f32 	%f8, %f2, 0f3F000000;
	setp.geu.f32 	%p52, %f8, 0f40000000;
	@%p52 bra 	$L__BB0_86;

	@%p3 bra 	$L__BB0_84;
	bra.uni 	$L__BB0_83;

$L__BB0_84:
	add.s32 	%r792, %r110, %r121;
	mul.wide.s32 	%rd111, %r792, 4;
	add.s64 	%rd112, %rd7, %rd111;
	ld.global.f32 	%f95, [%rd112];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f95;
  mov.b32 %r1500, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_85;

$L__BB0_83:
	mov.f32 	%f94, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f94;
  cvt.rn.f16.f32 high, %f94;
  mov.b32 %r1500, {low,high};}

	// end inline asm

$L__BB0_85:
	add.s32 	%r793, %r1485, %r100;
	mul.wide.s32 	%rd113, %r793, 4;
	add.s64 	%rd114, %rd8, %rd113;
	st.global.u32 	[%rd114], %r1500;
	add.s32 	%r1485, %r1485, 1;

$L__BB0_86:
	or.b32  	%r794, %r113, %r121;
	setp.gt.s32 	%p53, %r794, -1;
	and.pred  	%p55, %p32, %p53;
	setp.lt.s32 	%p56, %r113, %r609;
	and.pred  	%p4, %p56, %p55;
	@%p50 bra 	$L__BB0_91;

	@%p4 bra 	$L__BB0_89;
	bra.uni 	$L__BB0_88;

$L__BB0_89:
	add.s32 	%r797, %r112, %r121;
	mul.wide.s32 	%rd115, %r797, 4;
	add.s64 	%rd116, %rd7, %rd115;
	ld.global.f32 	%f98, [%rd116];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f98;
  mov.b32 %r1502, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_90;

$L__BB0_88:
	mov.f32 	%f97, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f97;
  cvt.rn.f16.f32 high, %f97;
  mov.b32 %r1502, {low,high};}

	// end inline asm

$L__BB0_90:
	add.s32 	%r798, %r1485, %r100;
	mul.wide.s32 	%rd117, %r798, 4;
	add.s64 	%rd118, %rd8, %rd117;
	st.global.u32 	[%rd118], %r1502;
	add.s32 	%r1485, %r1485, 1;

$L__BB0_91:
	@%p44 bra 	$L__BB0_96;

	@%p4 bra 	$L__BB0_94;
	bra.uni 	$L__BB0_93;

$L__BB0_94:
	add.s32 	%r801, %r114, %r121;
	mul.wide.s32 	%rd119, %r801, 4;
	add.s64 	%rd120, %rd7, %rd119;
	ld.global.f32 	%f101, [%rd120];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f101;
  mov.b32 %r1504, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_95;

$L__BB0_93:
	mov.f32 	%f100, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f100;
  cvt.rn.f16.f32 high, %f100;
  mov.b32 %r1504, {low,high};}

	// end inline asm

$L__BB0_95:
	add.s32 	%r802, %r1485, %r100;
	mul.wide.s32 	%rd121, %r802, 4;
	add.s64 	%rd122, %rd8, %rd121;
	st.global.u32 	[%rd122], %r1504;
	add.s32 	%r1485, %r1485, 1;

$L__BB0_96:
	@%p52 bra 	$L__BB0_101;

	@%p4 bra 	$L__BB0_99;
	bra.uni 	$L__BB0_98;

$L__BB0_99:
	add.s32 	%r805, %r115, %r121;
	mul.wide.s32 	%rd123, %r805, 4;
	add.s64 	%rd124, %rd7, %rd123;
	ld.global.f32 	%f104, [%rd124];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f104;
  mov.b32 %r1506, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_100;

$L__BB0_98:
	mov.f32 	%f103, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f103;
  cvt.rn.f16.f32 high, %f103;
  mov.b32 %r1506, {low,high};}

	// end inline asm

$L__BB0_100:
	add.s32 	%r806, %r1485, %r100;
	mul.wide.s32 	%rd125, %r806, 4;
	add.s64 	%rd126, %rd8, %rd125;
	st.global.u32 	[%rd126], %r1506;
	add.s32 	%r1485, %r1485, 1;

$L__BB0_101:
	or.b32  	%r807, %r117, %r121;
	setp.gt.s32 	%p60, %r807, -1;
	and.pred  	%p62, %p32, %p60;
	setp.lt.s32 	%p63, %r117, %r609;
	and.pred  	%p5, %p63, %p62;
	@%p43 bra 	$L__BB0_106;

	@%p5 bra 	$L__BB0_104;
	bra.uni 	$L__BB0_103;

$L__BB0_104:
	add.s32 	%r810, %r116, %r121;
	mul.wide.s32 	%rd127, %r810, 4;
	add.s64 	%rd128, %rd7, %rd127;
	ld.global.f32 	%f107, [%rd128];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f107;
  mov.b32 %r1508, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_105;

$L__BB0_103:
	mov.f32 	%f106, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f106;
  cvt.rn.f16.f32 high, %f106;
  mov.b32 %r1508, {low,high};}

	// end inline asm

$L__BB0_105:
	add.s32 	%r811, %r1485, %r100;
	mul.wide.s32 	%rd129, %r811, 4;
	add.s64 	%rd130, %rd8, %rd129;
	st.global.u32 	[%rd130], %r1508;
	add.s32 	%r1485, %r1485, 1;

$L__BB0_106:
	@%p37 bra 	$L__BB0_111;

	@%p5 bra 	$L__BB0_109;
	bra.uni 	$L__BB0_108;

$L__BB0_109:
	add.s32 	%r814, %r118, %r121;
	mul.wide.s32 	%rd131, %r814, 4;
	add.s64 	%rd132, %rd7, %rd131;
	ld.global.f32 	%f110, [%rd132];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f110;
  mov.b32 %r1510, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_110;

$L__BB0_108:
	mov.f32 	%f109, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f109;
  cvt.rn.f16.f32 high, %f109;
  mov.b32 %r1510, {low,high};}

	// end inline asm

$L__BB0_110:
	add.s32 	%r815, %r1485, %r100;
	mul.wide.s32 	%rd133, %r815, 4;
	add.s64 	%rd134, %rd8, %rd133;
	st.global.u32 	[%rd134], %r1510;
	add.s32 	%r1485, %r1485, 1;

$L__BB0_111:
	@%p45 bra 	$L__BB0_116;

	@%p5 bra 	$L__BB0_114;
	bra.uni 	$L__BB0_113;

$L__BB0_114:
	add.s32 	%r818, %r119, %r121;
	mul.wide.s32 	%rd135, %r818, 4;
	add.s64 	%rd136, %rd7, %rd135;
	ld.global.f32 	%f113, [%rd136];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f113;
  mov.b32 %r1512, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_115;

$L__BB0_113:
	mov.f32 	%f112, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f112;
  cvt.rn.f16.f32 high, %f112;
  mov.b32 %r1512, {low,high};}

	// end inline asm

$L__BB0_115:
	add.s32 	%r819, %r1485, %r100;
	mul.wide.s32 	%rd137, %r819, 4;
	add.s64 	%rd138, %rd8, %rd137;
	st.global.u32 	[%rd138], %r1512;
	add.s32 	%r1485, %r1485, 1;

$L__BB0_116:
	add.s64 	%rd451, %rd451, 4;
	mov.u64 	%rd139, _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllIE;
	add.s64 	%rd140, %rd139, 24;
	setp.ne.s64 	%p67, %rd451, %rd140;
	@%p67 bra 	$L__BB0_41;

$L__BB0_117:
	add.s32 	%r1482, %r1482, %r25;
	setp.lt.s32 	%p68, %r1482, %r609;
	@%p68 bra 	$L__BB0_39;

$L__BB0_118:
	add.s32 	%r1481, %r1481, %r623;
	setp.lt.s32 	%p69, %r1481, %r608;
	@%p69 bra 	$L__BB0_37;

$L__BB0_119:
	setp.eq.s32 	%p70, %r612, 1;
	ld.param.u64 	%rd141, [%rd1+112];
	cvta.to.global.u64 	%rd11, %rd141;
	ld.param.u64 	%rd142, [%rd1+80];
	cvta.to.global.u64 	%rd12, %rd142;
	@%p70 bra 	$L__BB0_137;
	bra.uni 	$L__BB0_120;

$L__BB0_137:
	@%p18 bra 	$L__BB0_266;

	shl.b32 	%r224, %r50, 1;
	shr.u32 	%r865, %r613, 31;
	add.s32 	%r866, %r613, %r865;
	shr.u32 	%r867, %r866, 1;
	and.b32  	%r225, %r867, 1;
	mov.u64 	%rd162, _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllIE;

$L__BB0_139:
	setp.ge.s32 	%p80, %r224, %r609;
	@%p80 bra 	$L__BB0_265;

	mov.u32 	%r1520, %r224;

$L__BB0_141:
	setp.ne.s32 	%p81, %r22, 0;
	@%p81 bra 	$L__BB0_264;

	shr.u32 	%r869, %r1520, 31;
	add.s32 	%r870, %r1520, %r869;
	shr.s32 	%r871, %r870, 1;
	mad.lo.s32 	%r872, %r871, %r608, %r1514;
	shl.b32 	%r229, %r872, 5;
	add.s32 	%r230, %r1520, -2;
	mul.lo.s32 	%r231, %r230, %r608;
	add.s32 	%r873, %r609, %r230;
	mul.lo.s32 	%r232, %r873, %r608;
	add.s32 	%r233, %r231, %r608;
	add.s32 	%r234, %r1520, -1;
	add.s32 	%r874, %r609, %r234;
	mul.lo.s32 	%r235, %r874, %r608;
	add.s32 	%r875, %r609, %r1520;
	mul.lo.s32 	%r236, %r875, %r608;
	mul.lo.s32 	%r237, %r1520, %r608;
	add.s32 	%r238, %r237, %r608;
	add.s32 	%r239, %r1520, 1;
	add.s32 	%r876, %r609, %r239;
	mul.lo.s32 	%r240, %r876, %r608;
	add.s32 	%r241, %r238, %r608;
	add.s32 	%r242, %r1520, 2;
	add.s32 	%r877, %r609, %r242;
	mul.lo.s32 	%r243, %r877, %r608;
	mov.u32 	%r1524, 0;
	mov.u64 	%rd452, 24;
	mov.u64 	%rd453, %rd162;

$L__BB0_143:
	ld.global.nc.u32 	%r878, [%rd453];
	cvt.rn.f64.s32 	%fd2, %r878;
	add.f64 	%fd4, %fd2, 0d3FE0000000000000;
	add.s32 	%r245, %r878, %r1514;
	setp.lt.s32 	%p82, %r245, %r608;
	or.b32  	%r879, %r230, %r245;
	setp.gt.s32 	%p83, %r879, -1;
	and.pred  	%p84, %p82, %p83;
	setp.lt.s32 	%p85, %r230, %r609;
	and.pred  	%p6, %p85, %p84;
	cvt.rn.f32.f64 	%f130, %fd4;
	add.f32 	%f131, %f130, 0f3E800000;
	abs.f32 	%f9, %f131;
	add.f32 	%f132, %f9, 0f40200000;
	setp.geu.f32 	%p86, %f132, 0f40000000;
	@%p86 bra 	$L__BB0_155;

	@%p6 bra 	$L__BB0_146;
	bra.uni 	$L__BB0_145;

$L__BB0_146:
	setp.eq.s32 	%p87, %r225, 0;
	add.s32 	%r881, %r231, %r245;
	shl.b32 	%r882, %r881, 1;
	mul.wide.s32 	%rd163, %r882, 4;
	add.s64 	%rd164, %rd11, %rd163;
	ld.global.f32 	%f10, [%rd164];
	@%p87 bra 	$L__BB0_148;
	bra.uni 	$L__BB0_147;

$L__BB0_148:
	mov.f32 	%f138, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f10;
  cvt.rn.f16.f32 high, %f138;
  mov.b32 %r1522, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_149;

$L__BB0_145:
	mov.f32 	%f134, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f134;
  cvt.rn.f16.f32 high, %f134;
  mov.b32 %r1522, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_149;

$L__BB0_147:
	mov.f32 	%f135, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f135;
  cvt.rn.f16.f32 high, %f10;
  mov.b32 %r1522, {low,high};}

	// end inline asm

$L__BB0_149:
	add.s32 	%r250, %r1524, %r229;
	mul.wide.s32 	%rd165, %r250, 4;
	add.s64 	%rd166, %rd12, %rd165;
	st.global.u32 	[%rd166], %r1522;
	@%p6 bra 	$L__BB0_151;
	bra.uni 	$L__BB0_150;

$L__BB0_151:
	setp.eq.s32 	%p88, %r225, 0;
	add.s32 	%r886, %r232, %r245;
	shl.b32 	%r887, %r886, 1;
	mul.wide.s32 	%rd167, %r887, 4;
	add.s64 	%rd168, %rd11, %rd167;
	ld.global.f32 	%f11, [%rd168];
	@%p88 bra 	$L__BB0_153;
	bra.uni 	$L__BB0_152;

$L__BB0_153:
	mov.f32 	%f144, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f11;
  cvt.rn.f16.f32 high, %f144;
  mov.b32 %r1523, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_154;

$L__BB0_150:
	mov.f32 	%f140, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f140;
  cvt.rn.f16.f32 high, %f140;
  mov.b32 %r1523, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_154;

$L__BB0_152:
	mov.f32 	%f141, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f141;
  cvt.rn.f16.f32 high, %f11;
  mov.b32 %r1523, {low,high};}

	// end inline asm

$L__BB0_154:
	add.s32 	%r890, %r250, 1;
	mul.wide.s32 	%rd169, %r890, 4;
	add.s64 	%rd170, %rd12, %rd169;
	st.global.u32 	[%rd170], %r1523;
	add.s32 	%r1524, %r1524, 2;

$L__BB0_155:
	cvt.rn.f32.f64 	%f145, %fd2;
	add.f32 	%f146, %f145, 0f3E800000;
	abs.f32 	%f12, %f146;
	add.f32 	%f13, %f12, 0f40000000;
	setp.geu.f32 	%p89, %f13, 0f40000000;
	@%p89 bra 	$L__BB0_167;

	@%p6 bra 	$L__BB0_158;
	bra.uni 	$L__BB0_157;

$L__BB0_158:
	setp.eq.s32 	%p90, %r225, 0;
	add.s32 	%r892, %r231, %r245;
	shl.b32 	%r893, %r892, 1;
	or.b32  	%r894, %r893, 1;
	mul.wide.s32 	%rd171, %r894, 4;
	add.s64 	%rd172, %rd11, %rd171;
	ld.global.f32 	%f14, [%rd172];
	@%p90 bra 	$L__BB0_160;
	bra.uni 	$L__BB0_159;

$L__BB0_160:
	mov.f32 	%f152, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f14;
  cvt.rn.f16.f32 high, %f152;
  mov.b32 %r1525, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_161;

$L__BB0_157:
	mov.f32 	%f148, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f148;
  cvt.rn.f16.f32 high, %f148;
  mov.b32 %r1525, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_161;

$L__BB0_159:
	mov.f32 	%f149, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f149;
  cvt.rn.f16.f32 high, %f14;
  mov.b32 %r1525, {low,high};}

	// end inline asm

$L__BB0_161:
	add.s32 	%r261, %r1524, %r229;
	mul.wide.s32 	%rd173, %r261, 4;
	add.s64 	%rd174, %rd12, %rd173;
	st.global.u32 	[%rd174], %r1525;
	@%p6 bra 	$L__BB0_163;
	bra.uni 	$L__BB0_162;

$L__BB0_163:
	setp.eq.s32 	%p91, %r225, 0;
	add.s32 	%r898, %r232, %r245;
	shl.b32 	%r899, %r898, 1;
	or.b32  	%r900, %r899, 1;
	mul.wide.s32 	%rd175, %r900, 4;
	add.s64 	%rd176, %rd11, %rd175;
	ld.global.f32 	%f15, [%rd176];
	@%p91 bra 	$L__BB0_165;
	bra.uni 	$L__BB0_164;

$L__BB0_165:
	mov.f32 	%f158, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f15;
  cvt.rn.f16.f32 high, %f158;
  mov.b32 %r1526, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_166;

$L__BB0_162:
	mov.f32 	%f154, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f154;
  cvt.rn.f16.f32 high, %f154;
  mov.b32 %r1526, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_166;

$L__BB0_164:
	mov.f32 	%f155, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f155;
  cvt.rn.f16.f32 high, %f15;
  mov.b32 %r1526, {low,high};}

	// end inline asm

$L__BB0_166:
	add.s32 	%r903, %r261, 1;
	mul.wide.s32 	%rd177, %r903, 4;
	add.s64 	%rd178, %rd12, %rd177;
	st.global.u32 	[%rd178], %r1526;
	add.s32 	%r1524, %r1524, 2;

$L__BB0_167:
	or.b32  	%r904, %r234, %r245;
	setp.gt.s32 	%p92, %r904, -1;
	and.pred  	%p94, %p82, %p92;
	setp.le.s32 	%p95, %r1520, %r609;
	and.pred  	%p7, %p95, %p94;
	add.f32 	%f16, %f9, 0f3FC00000;
	setp.geu.f32 	%p96, %f16, 0f40000000;
	@%p96 bra 	$L__BB0_179;

	@%p7 bra 	$L__BB0_170;
	bra.uni 	$L__BB0_169;

$L__BB0_170:
	setp.eq.s32 	%p97, %r225, 0;
	add.s32 	%r906, %r233, %r245;
	shl.b32 	%r907, %r906, 1;
	mul.wide.s32 	%rd179, %r907, 4;
	add.s64 	%rd180, %rd11, %rd179;
	ld.global.f32 	%f17, [%rd180];
	@%p97 bra 	$L__BB0_172;
	bra.uni 	$L__BB0_171;

$L__BB0_172:
	mov.f32 	%f164, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f17;
  cvt.rn.f16.f32 high, %f164;
  mov.b32 %r1528, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_173;

$L__BB0_169:
	mov.f32 	%f160, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f160;
  cvt.rn.f16.f32 high, %f160;
  mov.b32 %r1528, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_173;

$L__BB0_171:
	mov.f32 	%f161, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f161;
  cvt.rn.f16.f32 high, %f17;
  mov.b32 %r1528, {low,high};}

	// end inline asm

$L__BB0_173:
	add.s32 	%r272, %r1524, %r229;
	mul.wide.s32 	%rd181, %r272, 4;
	add.s64 	%rd182, %rd12, %rd181;
	st.global.u32 	[%rd182], %r1528;
	@%p7 bra 	$L__BB0_175;
	bra.uni 	$L__BB0_174;

$L__BB0_175:
	setp.eq.s32 	%p98, %r225, 0;
	add.s32 	%r911, %r235, %r245;
	shl.b32 	%r912, %r911, 1;
	mul.wide.s32 	%rd183, %r912, 4;
	add.s64 	%rd184, %rd11, %rd183;
	ld.global.f32 	%f18, [%rd184];
	@%p98 bra 	$L__BB0_177;
	bra.uni 	$L__BB0_176;

$L__BB0_177:
	mov.f32 	%f170, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f18;
  cvt.rn.f16.f32 high, %f170;
  mov.b32 %r1529, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_178;

$L__BB0_174:
	mov.f32 	%f166, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f166;
  cvt.rn.f16.f32 high, %f166;
  mov.b32 %r1529, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_178;

$L__BB0_176:
	mov.f32 	%f167, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f167;
  cvt.rn.f16.f32 high, %f18;
  mov.b32 %r1529, {low,high};}

	// end inline asm

$L__BB0_178:
	add.s32 	%r915, %r272, 1;
	mul.wide.s32 	%rd185, %r915, 4;
	add.s64 	%rd186, %rd12, %rd185;
	st.global.u32 	[%rd186], %r1529;
	add.s32 	%r1524, %r1524, 2;

$L__BB0_179:
	add.f32 	%f19, %f12, 0f3F800000;
	setp.geu.f32 	%p99, %f19, 0f40000000;
	@%p99 bra 	$L__BB0_191;

	@%p7 bra 	$L__BB0_182;
	bra.uni 	$L__BB0_181;

$L__BB0_182:
	setp.eq.s32 	%p100, %r225, 0;
	add.s32 	%r917, %r233, %r245;
	shl.b32 	%r918, %r917, 1;
	or.b32  	%r919, %r918, 1;
	mul.wide.s32 	%rd187, %r919, 4;
	add.s64 	%rd188, %rd11, %rd187;
	ld.global.f32 	%f20, [%rd188];
	@%p100 bra 	$L__BB0_184;
	bra.uni 	$L__BB0_183;

$L__BB0_184:
	mov.f32 	%f176, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f20;
  cvt.rn.f16.f32 high, %f176;
  mov.b32 %r1531, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_185;

$L__BB0_181:
	mov.f32 	%f172, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f172;
  cvt.rn.f16.f32 high, %f172;
  mov.b32 %r1531, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_185;

$L__BB0_183:
	mov.f32 	%f173, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f173;
  cvt.rn.f16.f32 high, %f20;
  mov.b32 %r1531, {low,high};}

	// end inline asm

$L__BB0_185:
	add.s32 	%r283, %r1524, %r229;
	mul.wide.s32 	%rd189, %r283, 4;
	add.s64 	%rd190, %rd12, %rd189;
	st.global.u32 	[%rd190], %r1531;
	@%p7 bra 	$L__BB0_187;
	bra.uni 	$L__BB0_186;

$L__BB0_187:
	setp.eq.s32 	%p101, %r225, 0;
	add.s32 	%r923, %r235, %r245;
	shl.b32 	%r924, %r923, 1;
	or.b32  	%r925, %r924, 1;
	mul.wide.s32 	%rd191, %r925, 4;
	add.s64 	%rd192, %rd11, %rd191;
	ld.global.f32 	%f21, [%rd192];
	@%p101 bra 	$L__BB0_189;
	bra.uni 	$L__BB0_188;

$L__BB0_189:
	mov.f32 	%f182, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f21;
  cvt.rn.f16.f32 high, %f182;
  mov.b32 %r1532, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_190;

$L__BB0_186:
	mov.f32 	%f178, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f178;
  cvt.rn.f16.f32 high, %f178;
  mov.b32 %r1532, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_190;

$L__BB0_188:
	mov.f32 	%f179, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f179;
  cvt.rn.f16.f32 high, %f21;
  mov.b32 %r1532, {low,high};}

	// end inline asm

$L__BB0_190:
	add.s32 	%r928, %r283, 1;
	mul.wide.s32 	%rd193, %r928, 4;
	add.s64 	%rd194, %rd12, %rd193;
	st.global.u32 	[%rd194], %r1532;
	add.s32 	%r1524, %r1524, 2;

$L__BB0_191:
	or.b32  	%r929, %r1520, %r245;
	setp.gt.s32 	%p102, %r929, -1;
	and.pred  	%p104, %p82, %p102;
	setp.lt.s32 	%p105, %r1520, %r609;
	and.pred  	%p8, %p105, %p104;
	add.f32 	%f22, %f9, 0f3F000000;
	setp.geu.f32 	%p106, %f22, 0f40000000;
	@%p106 bra 	$L__BB0_203;

	@%p8 bra 	$L__BB0_194;
	bra.uni 	$L__BB0_193;

$L__BB0_194:
	setp.eq.s32 	%p107, %r225, 0;
	add.s32 	%r931, %r237, %r245;
	shl.b32 	%r932, %r931, 1;
	mul.wide.s32 	%rd195, %r932, 4;
	add.s64 	%rd196, %rd11, %rd195;
	ld.global.f32 	%f23, [%rd196];
	@%p107 bra 	$L__BB0_196;
	bra.uni 	$L__BB0_195;

$L__BB0_196:
	mov.f32 	%f188, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f23;
  cvt.rn.f16.f32 high, %f188;
  mov.b32 %r1534, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_197;

$L__BB0_193:
	mov.f32 	%f184, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f184;
  cvt.rn.f16.f32 high, %f184;
  mov.b32 %r1534, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_197;

$L__BB0_195:
	mov.f32 	%f185, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f185;
  cvt.rn.f16.f32 high, %f23;
  mov.b32 %r1534, {low,high};}

	// end inline asm

$L__BB0_197:
	add.s32 	%r294, %r1524, %r229;
	mul.wide.s32 	%rd197, %r294, 4;
	add.s64 	%rd198, %rd12, %rd197;
	st.global.u32 	[%rd198], %r1534;
	@%p8 bra 	$L__BB0_199;
	bra.uni 	$L__BB0_198;

$L__BB0_199:
	setp.eq.s32 	%p108, %r225, 0;
	add.s32 	%r936, %r236, %r245;
	shl.b32 	%r937, %r936, 1;
	mul.wide.s32 	%rd199, %r937, 4;
	add.s64 	%rd200, %rd11, %rd199;
	ld.global.f32 	%f24, [%rd200];
	@%p108 bra 	$L__BB0_201;
	bra.uni 	$L__BB0_200;

$L__BB0_201:
	mov.f32 	%f194, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f24;
  cvt.rn.f16.f32 high, %f194;
  mov.b32 %r1535, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_202;

$L__BB0_198:
	mov.f32 	%f190, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f190;
  cvt.rn.f16.f32 high, %f190;
  mov.b32 %r1535, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_202;

$L__BB0_200:
	mov.f32 	%f191, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f191;
  cvt.rn.f16.f32 high, %f24;
  mov.b32 %r1535, {low,high};}

	// end inline asm

$L__BB0_202:
	add.s32 	%r940, %r294, 1;
	mul.wide.s32 	%rd201, %r940, 4;
	add.s64 	%rd202, %rd12, %rd201;
	st.global.u32 	[%rd202], %r1535;
	add.s32 	%r1524, %r1524, 2;

$L__BB0_203:
	add.f32 	%f195, %f12, 0f00000000;
	setp.geu.f32 	%p109, %f195, 0f40000000;
	@%p109 bra 	$L__BB0_215;

	@%p8 bra 	$L__BB0_206;
	bra.uni 	$L__BB0_205;

$L__BB0_206:
	setp.eq.s32 	%p110, %r225, 0;
	add.s32 	%r942, %r237, %r245;
	shl.b32 	%r943, %r942, 1;
	or.b32  	%r944, %r943, 1;
	mul.wide.s32 	%rd203, %r944, 4;
	add.s64 	%rd204, %rd11, %rd203;
	ld.global.f32 	%f25, [%rd204];
	@%p110 bra 	$L__BB0_208;
	bra.uni 	$L__BB0_207;

$L__BB0_208:
	mov.f32 	%f201, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f25;
  cvt.rn.f16.f32 high, %f201;
  mov.b32 %r1537, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_209;

$L__BB0_205:
	mov.f32 	%f197, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f197;
  cvt.rn.f16.f32 high, %f197;
  mov.b32 %r1537, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_209;

$L__BB0_207:
	mov.f32 	%f198, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f198;
  cvt.rn.f16.f32 high, %f25;
  mov.b32 %r1537, {low,high};}

	// end inline asm

$L__BB0_209:
	add.s32 	%r305, %r1524, %r229;
	mul.wide.s32 	%rd205, %r305, 4;
	add.s64 	%rd206, %rd12, %rd205;
	st.global.u32 	[%rd206], %r1537;
	@%p8 bra 	$L__BB0_211;
	bra.uni 	$L__BB0_210;

$L__BB0_211:
	setp.eq.s32 	%p111, %r225, 0;
	add.s32 	%r948, %r236, %r245;
	shl.b32 	%r949, %r948, 1;
	or.b32  	%r950, %r949, 1;
	mul.wide.s32 	%rd207, %r950, 4;
	add.s64 	%rd208, %rd11, %rd207;
	ld.global.f32 	%f26, [%rd208];
	@%p111 bra 	$L__BB0_213;
	bra.uni 	$L__BB0_212;

$L__BB0_213:
	mov.f32 	%f207, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f26;
  cvt.rn.f16.f32 high, %f207;
  mov.b32 %r1538, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_214;

$L__BB0_210:
	mov.f32 	%f203, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f203;
  cvt.rn.f16.f32 high, %f203;
  mov.b32 %r1538, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_214;

$L__BB0_212:
	mov.f32 	%f204, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f204;
  cvt.rn.f16.f32 high, %f26;
  mov.b32 %r1538, {low,high};}

	// end inline asm

$L__BB0_214:
	add.s32 	%r953, %r305, 1;
	mul.wide.s32 	%rd209, %r953, 4;
	add.s64 	%rd210, %rd12, %rd209;
	st.global.u32 	[%rd210], %r1538;
	add.s32 	%r1524, %r1524, 2;

$L__BB0_215:
	or.b32  	%r954, %r239, %r245;
	setp.gt.s32 	%p112, %r954, -1;
	and.pred  	%p114, %p82, %p112;
	setp.lt.s32 	%p115, %r239, %r609;
	and.pred  	%p9, %p115, %p114;
	@%p106 bra 	$L__BB0_227;

	@%p9 bra 	$L__BB0_218;
	bra.uni 	$L__BB0_217;

$L__BB0_218:
	setp.eq.s32 	%p117, %r225, 0;
	add.s32 	%r956, %r238, %r245;
	shl.b32 	%r957, %r956, 1;
	mul.wide.s32 	%rd211, %r957, 4;
	add.s64 	%rd212, %rd11, %rd211;
	ld.global.f32 	%f27, [%rd212];
	@%p117 bra 	$L__BB0_220;
	bra.uni 	$L__BB0_219;

$L__BB0_220:
	mov.f32 	%f213, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f27;
  cvt.rn.f16.f32 high, %f213;
  mov.b32 %r1540, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_221;

$L__BB0_217:
	mov.f32 	%f209, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f209;
  cvt.rn.f16.f32 high, %f209;
  mov.b32 %r1540, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_221;

$L__BB0_219:
	mov.f32 	%f210, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f210;
  cvt.rn.f16.f32 high, %f27;
  mov.b32 %r1540, {low,high};}

	// end inline asm

$L__BB0_221:
	add.s32 	%r316, %r1524, %r229;
	mul.wide.s32 	%rd213, %r316, 4;
	add.s64 	%rd214, %rd12, %rd213;
	st.global.u32 	[%rd214], %r1540;
	@%p9 bra 	$L__BB0_223;
	bra.uni 	$L__BB0_222;

$L__BB0_223:
	setp.eq.s32 	%p118, %r225, 0;
	add.s32 	%r961, %r240, %r245;
	shl.b32 	%r962, %r961, 1;
	mul.wide.s32 	%rd215, %r962, 4;
	add.s64 	%rd216, %rd11, %rd215;
	ld.global.f32 	%f28, [%rd216];
	@%p118 bra 	$L__BB0_225;
	bra.uni 	$L__BB0_224;

$L__BB0_225:
	mov.f32 	%f219, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f28;
  cvt.rn.f16.f32 high, %f219;
  mov.b32 %r1541, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_226;

$L__BB0_222:
	mov.f32 	%f215, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f215;
  cvt.rn.f16.f32 high, %f215;
  mov.b32 %r1541, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_226;

$L__BB0_224:
	mov.f32 	%f216, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f216;
  cvt.rn.f16.f32 high, %f28;
  mov.b32 %r1541, {low,high};}

	// end inline asm

$L__BB0_226:
	add.s32 	%r965, %r316, 1;
	mul.wide.s32 	%rd217, %r965, 4;
	add.s64 	%rd218, %rd12, %rd217;
	st.global.u32 	[%rd218], %r1541;
	add.s32 	%r1524, %r1524, 2;

$L__BB0_227:
	@%p99 bra 	$L__BB0_239;

	@%p9 bra 	$L__BB0_230;
	bra.uni 	$L__BB0_229;

$L__BB0_230:
	setp.eq.s32 	%p120, %r225, 0;
	add.s32 	%r967, %r238, %r245;
	shl.b32 	%r968, %r967, 1;
	or.b32  	%r969, %r968, 1;
	mul.wide.s32 	%rd219, %r969, 4;
	add.s64 	%rd220, %rd11, %rd219;
	ld.global.f32 	%f29, [%rd220];
	@%p120 bra 	$L__BB0_232;
	bra.uni 	$L__BB0_231;

$L__BB0_232:
	mov.f32 	%f225, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f29;
  cvt.rn.f16.f32 high, %f225;
  mov.b32 %r1543, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_233;

$L__BB0_229:
	mov.f32 	%f221, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f221;
  cvt.rn.f16.f32 high, %f221;
  mov.b32 %r1543, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_233;

$L__BB0_231:
	mov.f32 	%f222, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f222;
  cvt.rn.f16.f32 high, %f29;
  mov.b32 %r1543, {low,high};}

	// end inline asm

$L__BB0_233:
	add.s32 	%r327, %r1524, %r229;
	mul.wide.s32 	%rd221, %r327, 4;
	add.s64 	%rd222, %rd12, %rd221;
	st.global.u32 	[%rd222], %r1543;
	@%p9 bra 	$L__BB0_235;
	bra.uni 	$L__BB0_234;

$L__BB0_235:
	setp.eq.s32 	%p121, %r225, 0;
	add.s32 	%r973, %r240, %r245;
	shl.b32 	%r974, %r973, 1;
	or.b32  	%r975, %r974, 1;
	mul.wide.s32 	%rd223, %r975, 4;
	add.s64 	%rd224, %rd11, %rd223;
	ld.global.f32 	%f30, [%rd224];
	@%p121 bra 	$L__BB0_237;
	bra.uni 	$L__BB0_236;

$L__BB0_237:
	mov.f32 	%f231, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f30;
  cvt.rn.f16.f32 high, %f231;
  mov.b32 %r1544, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_238;

$L__BB0_234:
	mov.f32 	%f227, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f227;
  cvt.rn.f16.f32 high, %f227;
  mov.b32 %r1544, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_238;

$L__BB0_236:
	mov.f32 	%f228, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f228;
  cvt.rn.f16.f32 high, %f30;
  mov.b32 %r1544, {low,high};}

	// end inline asm

$L__BB0_238:
	add.s32 	%r978, %r327, 1;
	mul.wide.s32 	%rd225, %r978, 4;
	add.s64 	%rd226, %rd12, %rd225;
	st.global.u32 	[%rd226], %r1544;
	add.s32 	%r1524, %r1524, 2;

$L__BB0_239:
	or.b32  	%r979, %r242, %r245;
	setp.gt.s32 	%p122, %r979, -1;
	and.pred  	%p124, %p82, %p122;
	setp.lt.s32 	%p125, %r242, %r609;
	and.pred  	%p10, %p125, %p124;
	@%p96 bra 	$L__BB0_251;

	@%p10 bra 	$L__BB0_242;
	bra.uni 	$L__BB0_241;

$L__BB0_242:
	setp.eq.s32 	%p127, %r225, 0;
	add.s32 	%r981, %r241, %r245;
	shl.b32 	%r982, %r981, 1;
	mul.wide.s32 	%rd227, %r982, 4;
	add.s64 	%rd228, %rd11, %rd227;
	ld.global.f32 	%f31, [%rd228];
	@%p127 bra 	$L__BB0_244;
	bra.uni 	$L__BB0_243;

$L__BB0_244:
	mov.f32 	%f237, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f31;
  cvt.rn.f16.f32 high, %f237;
  mov.b32 %r1546, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_245;

$L__BB0_241:
	mov.f32 	%f233, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f233;
  cvt.rn.f16.f32 high, %f233;
  mov.b32 %r1546, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_245;

$L__BB0_243:
	mov.f32 	%f234, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f234;
  cvt.rn.f16.f32 high, %f31;
  mov.b32 %r1546, {low,high};}

	// end inline asm

$L__BB0_245:
	add.s32 	%r338, %r1524, %r229;
	mul.wide.s32 	%rd229, %r338, 4;
	add.s64 	%rd230, %rd12, %rd229;
	st.global.u32 	[%rd230], %r1546;
	@%p10 bra 	$L__BB0_247;
	bra.uni 	$L__BB0_246;

$L__BB0_247:
	setp.eq.s32 	%p128, %r225, 0;
	add.s32 	%r986, %r243, %r245;
	shl.b32 	%r987, %r986, 1;
	mul.wide.s32 	%rd231, %r987, 4;
	add.s64 	%rd232, %rd11, %rd231;
	ld.global.f32 	%f32, [%rd232];
	@%p128 bra 	$L__BB0_249;
	bra.uni 	$L__BB0_248;

$L__BB0_249:
	mov.f32 	%f243, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f32;
  cvt.rn.f16.f32 high, %f243;
  mov.b32 %r1547, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_250;

$L__BB0_246:
	mov.f32 	%f239, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f239;
  cvt.rn.f16.f32 high, %f239;
  mov.b32 %r1547, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_250;

$L__BB0_248:
	mov.f32 	%f240, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f240;
  cvt.rn.f16.f32 high, %f32;
  mov.b32 %r1547, {low,high};}

	// end inline asm

$L__BB0_250:
	add.s32 	%r990, %r338, 1;
	mul.wide.s32 	%rd233, %r990, 4;
	add.s64 	%rd234, %rd12, %rd233;
	st.global.u32 	[%rd234], %r1547;
	add.s32 	%r1524, %r1524, 2;

$L__BB0_251:
	@%p89 bra 	$L__BB0_263;

	@%p10 bra 	$L__BB0_254;
	bra.uni 	$L__BB0_253;

$L__BB0_254:
	setp.eq.s32 	%p130, %r225, 0;
	add.s32 	%r992, %r241, %r245;
	shl.b32 	%r993, %r992, 1;
	or.b32  	%r994, %r993, 1;
	mul.wide.s32 	%rd235, %r994, 4;
	add.s64 	%rd236, %rd11, %rd235;
	ld.global.f32 	%f33, [%rd236];
	@%p130 bra 	$L__BB0_256;
	bra.uni 	$L__BB0_255;

$L__BB0_256:
	mov.f32 	%f249, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f33;
  cvt.rn.f16.f32 high, %f249;
  mov.b32 %r1549, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_257;

$L__BB0_253:
	mov.f32 	%f245, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f245;
  cvt.rn.f16.f32 high, %f245;
  mov.b32 %r1549, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_257;

$L__BB0_255:
	mov.f32 	%f246, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f246;
  cvt.rn.f16.f32 high, %f33;
  mov.b32 %r1549, {low,high};}

	// end inline asm

$L__BB0_257:
	add.s32 	%r349, %r1524, %r229;
	mul.wide.s32 	%rd237, %r349, 4;
	add.s64 	%rd238, %rd12, %rd237;
	st.global.u32 	[%rd238], %r1549;
	@%p10 bra 	$L__BB0_259;
	bra.uni 	$L__BB0_258;

$L__BB0_259:
	setp.eq.s32 	%p131, %r225, 0;
	add.s32 	%r998, %r243, %r245;
	shl.b32 	%r999, %r998, 1;
	or.b32  	%r1000, %r999, 1;
	mul.wide.s32 	%rd239, %r1000, 4;
	add.s64 	%rd240, %rd11, %rd239;
	ld.global.f32 	%f34, [%rd240];
	@%p131 bra 	$L__BB0_261;
	bra.uni 	$L__BB0_260;

$L__BB0_261:
	mov.f32 	%f255, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f34;
  cvt.rn.f16.f32 high, %f255;
  mov.b32 %r1550, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_262;

$L__BB0_258:
	mov.f32 	%f251, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f251;
  cvt.rn.f16.f32 high, %f251;
  mov.b32 %r1550, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_262;

$L__BB0_260:
	mov.f32 	%f252, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f252;
  cvt.rn.f16.f32 high, %f34;
  mov.b32 %r1550, {low,high};}

	// end inline asm

$L__BB0_262:
	add.s32 	%r1003, %r349, 1;
	mul.wide.s32 	%rd241, %r1003, 4;
	add.s64 	%rd242, %rd12, %rd241;
	st.global.u32 	[%rd242], %r1550;
	add.s32 	%r1524, %r1524, 2;

$L__BB0_263:
	add.s64 	%rd453, %rd453, 4;
	add.s64 	%rd452, %rd452, -4;
	setp.ne.s64 	%p132, %rd452, 0;
	@%p132 bra 	$L__BB0_143;

$L__BB0_264:
	add.s32 	%r1520, %r1520, %r25;
	setp.lt.s32 	%p133, %r1520, %r609;
	@%p133 bra 	$L__BB0_141;

$L__BB0_265:
	add.s32 	%r1514, %r1514, %r623;
	setp.lt.s32 	%p134, %r1514, %r608;
	@%p134 bra 	$L__BB0_139;
	bra.uni 	$L__BB0_266;

$L__BB0_120:
	@%p18 bra 	$L__BB0_266;

	neg.s32 	%r199, %r49;
	mov.u32 	%r820, 31;
	sub.s32 	%r821, %r820, %r22;
	setp.gt.s32 	%p72, %r21, %r22;
	selp.b32 	%r822, %r22, %r821, %p72;
	shl.b32 	%r823, %r822, 2;
	mov.u32 	%r824, 2;
	sub.s32 	%r200, %r823, %r611;
	sub.s32 	%r825, %r824, %r611;
	add.s32 	%r201, %r825, %r823;
	add.s32 	%r202, %r608, -1;
	add.s32 	%r203, %r200, 1;
	add.s32 	%r204, %r201, 1;
	rem.s32 	%r850, %r203, %r32;
	add.s32 	%r851, %r850, %r32;
	rem.s32 	%r215, %r851, %r32;
	rem.s32 	%r852, %r204, %r32;
	add.s32 	%r853, %r852, %r32;
	rem.s32 	%r216, %r853, %r32;

$L__BB0_122:
	setp.ne.s32 	%p73, %r18, %r199;
	@%p73 bra 	$L__BB0_136;

	shl.b32 	%r206, %r1514, 1;
	rem.s32 	%r826, %r200, %r32;
	add.s32 	%r827, %r826, %r32;
	rem.s32 	%r207, %r827, %r32;
	rem.s32 	%r828, %r201, %r32;
	add.s32 	%r829, %r828, %r32;
	rem.s32 	%r208, %r829, %r32;
	@%p72 bra 	$L__BB0_125;
	bra.uni 	$L__BB0_124;

$L__BB0_125:
	mul.lo.s32 	%r832, %r206, %r32;
	add.s32 	%r833, %r832, %r207;
	mul.wide.s32 	%rd143, %r833, 4;
	add.s64 	%rd144, %rd11, %rd143;
	ld.global.f32 	%f116, [%rd144];
	add.s32 	%r834, %r832, %r208;
	mul.wide.s32 	%rd145, %r834, 4;
	add.s64 	%rd146, %rd11, %rd145;
	ld.global.f32 	%f117, [%rd146];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f116;
  cvt.rn.f16.f32 high, %f117;
  mov.b32 %r1515, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_126;

$L__BB0_124:
	mov.f32 	%f115, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f115;
  cvt.rn.f16.f32 high, %f115;
  mov.b32 %r1515, {low,high};}

	// end inline asm

$L__BB0_126:
	shl.b32 	%r835, %r1514, 5;
	add.s32 	%r836, %r835, %r22;
	shl.b32 	%r837, %r836, 2;
	mul.wide.s32 	%rd147, %r837, 4;
	add.s64 	%rd13, %rd12, %rd147;
	st.global.u32 	[%rd13], %r1515;
	@%p72 bra 	$L__BB0_128;
	bra.uni 	$L__BB0_127;

$L__BB0_128:
	add.s32 	%r840, %r206, 1;
	mul.lo.s32 	%r841, %r840, %r32;
	add.s32 	%r842, %r841, %r207;
	mul.wide.s32 	%rd148, %r842, 4;
	add.s64 	%rd149, %rd11, %rd148;
	ld.global.f32 	%f120, [%rd149];
	add.s32 	%r843, %r841, %r208;
	mul.wide.s32 	%rd150, %r843, 4;
	add.s64 	%rd151, %rd11, %rd150;
	ld.global.f32 	%f121, [%rd151];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f120;
  cvt.rn.f16.f32 high, %f121;
  mov.b32 %r1516, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_129;

$L__BB0_127:
	mov.f32 	%f119, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f119;
  cvt.rn.f16.f32 high, %f119;
  mov.b32 %r1516, {low,high};}

	// end inline asm

$L__BB0_129:
	add.s32 	%r844, %r202, %r1514;
	rem.s32 	%r845, %r844, %r608;
	shl.b32 	%r846, %r845, 5;
	add.s32 	%r847, %r846, %r22;
	shl.b32 	%r848, %r847, 2;
	or.b32  	%r849, %r848, 2;
	mul.wide.s32 	%rd152, %r849, 4;
	add.s64 	%rd14, %rd12, %rd152;
	st.global.u32 	[%rd14], %r1516;
	@%p72 bra 	$L__BB0_131;
	bra.uni 	$L__BB0_130;

$L__BB0_131:
	mul.lo.s32 	%r856, %r206, %r32;
	add.s32 	%r857, %r856, %r215;
	mul.wide.s32 	%rd153, %r857, 4;
	add.s64 	%rd154, %rd11, %rd153;
	ld.global.f32 	%f124, [%rd154];
	add.s32 	%r858, %r856, %r216;
	mul.wide.s32 	%rd155, %r858, 4;
	add.s64 	%rd156, %rd11, %rd155;
	ld.global.f32 	%f125, [%rd156];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f124;
  cvt.rn.f16.f32 high, %f125;
  mov.b32 %r1517, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_132;

$L__BB0_130:
	mov.f32 	%f123, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f123;
  cvt.rn.f16.f32 high, %f123;
  mov.b32 %r1517, {low,high};}

	// end inline asm

$L__BB0_132:
	st.global.u32 	[%rd13+4], %r1517;
	@%p72 bra 	$L__BB0_134;
	bra.uni 	$L__BB0_133;

$L__BB0_134:
	add.s32 	%r861, %r206, 1;
	mul.lo.s32 	%r862, %r861, %r32;
	add.s32 	%r863, %r862, %r215;
	mul.wide.s32 	%rd157, %r863, 4;
	add.s64 	%rd158, %rd11, %rd157;
	ld.global.f32 	%f128, [%rd158];
	add.s32 	%r864, %r862, %r216;
	mul.wide.s32 	%rd159, %r864, 4;
	add.s64 	%rd160, %rd11, %rd159;
	ld.global.f32 	%f129, [%rd160];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f128;
  cvt.rn.f16.f32 high, %f129;
  mov.b32 %r1518, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_135;

$L__BB0_133:
	mov.f32 	%f127, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f127;
  cvt.rn.f16.f32 high, %f127;
  mov.b32 %r1518, {low,high};}

	// end inline asm

$L__BB0_135:
	st.global.u32 	[%rd14+4], %r1518;

$L__BB0_136:
	add.s32 	%r1514, %r1514, %r623;
	setp.lt.s32 	%p78, %r1514, %r608;
	@%p78 bra 	$L__BB0_122;

$L__BB0_266:
	add.s32 	%r358, %r603, -1;
	mul.lo.s32 	%r359, %r604, 320;
	mul.lo.s32 	%r360, %r358, %r359;
	add.s32 	%r361, %r43, -64;
	add.s32 	%r362, %r604, -1;
	mul.lo.s32 	%r363, %r361, %r362;
	shl.b32 	%r1005, %r604, 8;
	or.b32  	%r364, %r1005, 128;
	mad.lo.s32 	%r365, %r364, %r358, %r360;
	mad.lo.s32 	%r1006, %r362, %r43, %r363;
	add.s32 	%r1007, %r1006, %r365;
	add.s32 	%r1008, %r363, %r360;
	add.s32 	%r366, %r1008, %r1007;
	setp.lt.s32 	%p135, %r366, 1;
	mov.f32 	%f257, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f257;
  cvt.rn.f16.f32 high, %f257;
  mov.b32 %r1553, {low,high};}

	// end inline asm
	@%p135 bra 	$L__BB0_269;

	mov.u32 	%r1554, 0;
	mov.u32 	%r1552, _ZN6kernel5shmemE;

$L__BB0_268:
	st.shared.u32 	[%r1552], %r1553;
	mov.f32 	%f265, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f265;
  cvt.rn.f16.f32 high, %f265;
  mov.b32 %r1011, {low,high};}

	// end inline asm
	st.shared.u32 	[%r1552+4], %r1011;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f265;
  cvt.rn.f16.f32 high, %f265;
  mov.b32 %r1012, {low,high};}

	// end inline asm
	st.shared.u32 	[%r1552+8], %r1012;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f265;
  cvt.rn.f16.f32 high, %f265;
  mov.b32 %r1013, {low,high};}

	// end inline asm
	st.shared.u32 	[%r1552+12], %r1013;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f265;
  cvt.rn.f16.f32 high, %f265;
  mov.b32 %r1553, {low,high};}

	// end inline asm
	add.s32 	%r1552, %r1552, 16;
	add.s32 	%r1554, %r1554, 4;
	setp.lt.s32 	%p136, %r1554, %r366;
	@%p136 bra 	$L__BB0_268;

$L__BB0_269:
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f257;
  cvt.rn.f16.f32 high, %f257;
  mov.b32 %r1666, {low,high};}

	// end inline asm
	mov.u32 	%r1017, 31;
	sub.s32 	%r1018, %r1017, %r22;
	setp.gt.s32 	%p138, %r21, %r22;
	selp.b32 	%r1019, %r22, %r1018, %p138;
	shl.b32 	%r1020, %r1019, 2;
	sub.s32 	%r375, %r1020, %r611;
	rem.s32 	%r1021, %r375, %r32;
	add.s32 	%r1022, %r1021, %r32;
	rem.s32 	%r376, %r1022, %r32;
	add.s32 	%r1023, %r375, 2;
	rem.s32 	%r1024, %r1023, %r32;
	add.s32 	%r1025, %r1024, %r32;
	rem.s32 	%r377, %r1025, %r32;
	add.s32 	%r1036, %r375, 1;
	rem.s32 	%r1037, %r1036, %r32;
	add.s32 	%r1038, %r1037, %r32;
	rem.s32 	%r378, %r1038, %r32;
	add.s32 	%r1039, %r375, 3;
	rem.s32 	%r1040, %r1039, %r32;
	add.s32 	%r1041, %r1040, %r32;
	rem.s32 	%r379, %r1041, %r32;
	// begin inline asm
	mov.u32 %r1052, %envreg2;
	// end inline asm
	cvt.u64.u32 	%rd248, %r1052;
	// begin inline asm
	mov.u32 %r1053, %envreg1;
	// end inline asm
	cvt.u64.u32 	%rd249, %r1053;
	bfi.b64 	%rd24, %rd249, %rd248, 32, 32;
	setp.ne.s64 	%p146, %rd24, 0;
	@%p146 bra 	$L__BB0_287;

	// begin inline asm
	trap;
	// end inline asm

$L__BB0_287:
	add.s64 	%rd25, %rd24, 4;
	mov.u32 	%r1054, %nctaid.y;
	mov.u32 	%r1055, %nctaid.x;
	mul.lo.s32 	%r1056, %r1055, %r1054;
	mov.u32 	%r1057, %nctaid.z;
	mul.lo.s32 	%r380, %r1056, %r1057;
	neg.s32 	%r381, %r18;
	add.s32 	%r382, %r22, %r17;
	setp.ne.s32 	%p147, %r382, %r381;
	mov.u32 	%r1058, %ctaid.x;
	add.s32 	%r383, %r1058, %r19;
	neg.s32 	%r384, %r20;
	bar.sync 	0;
	@%p147 bra 	$L__BB0_291;

	setp.eq.s32 	%p148, %r383, %r384;
	mov.u32 	%r1061, -2147483647;
	sub.s32 	%r1062, %r1061, %r380;
	selp.b32 	%r1060, %r1062, 1, %p148;
	membar.gl;
	// begin inline asm
	atom.add.release.gpu.u32 %r1059,[%rd25],%r1060;
	// end inline asm

$L__BB0_289:
	ld.volatile.u32 	%r1063, [%rd25];
	xor.b32  	%r1064, %r1063, %r1059;
	setp.gt.s32 	%p149, %r1064, -1;
	@%p149 bra 	$L__BB0_289;

	// begin inline asm
	ld.acquire.gpu.u32 %r1065,[%rd25];
	// end inline asm

$L__BB0_291:
	bar.sync 	0;
	setp.lt.s32 	%p150, %r26, 1;
	@%p150 bra 	$L__BB0_374;

	setp.eq.s32 	%p151, %r383, %r384;
	not.b32 	%r1067, %r19;
	add.s32 	%r1068, %r605, %r1067;
	not.b32 	%r1069, %r20;
	add.s32 	%r1070, %r606, %r1069;
	not.b32 	%r1071, %r17;
	add.s32 	%r1072, %r603, %r1071;
	not.b32 	%r1073, %r18;
	add.s32 	%r1074, %r604, %r1073;
	mad.lo.s32 	%r1075, %r1068, %r603, %r1072;
	mad.lo.s32 	%r1076, %r1070, %r604, %r1074;
	add.s32 	%r1077, %r1075, %r1076;
	sub.s32 	%r1078, %r1075, %r1076;
	shl.b32 	%r1079, %r1077, 1;
	shl.b32 	%r1080, %r1078, 1;
	add.s32 	%r1081, %r1068, %r1070;
	mul.lo.s32 	%r386, %r1081, %r607;
	add.s32 	%r387, %r1080, %r609;
	add.s32 	%r1082, %r386, %r608;
	add.s32 	%r388, %r1082, %r1079;
	sub.s32 	%r389, %r25, %r608;
	sub.s32 	%r390, %r24, %r609;
	add.s32 	%r1083, %r17, -1;
	shl.b32 	%r1084, %r18, 8;
	mad.lo.s32 	%r1085, %r364, %r1083, %r360;
	add.s32 	%r1086, %r1085, %r1084;
	shl.b32 	%r1087, %r1086, 2;
	mov.u32 	%r1088, _ZN6kernel5shmemE;
	add.s32 	%r1089, %r1088, %r1087;
	add.s32 	%r391, %r1089, -512;
	add.s32 	%r1090, %r18, -1;
	mul.lo.s32 	%r1091, %r1072, 384;
	mad.lo.s32 	%r1092, %r604, 576, 128;
	mul.lo.s32 	%r1093, %r1092, %r358;
	mad.lo.s32 	%r1094, %r43, %r1090, %r1091;
	add.s32 	%r1095, %r1094, %r363;
	add.s32 	%r1096, %r1095, %r1093;
	shl.b32 	%r1097, %r1096, 2;
	add.s32 	%r392, %r1088, %r1097;
	add.s32 	%r393, %r608, -1;
	add.s32 	%r394, %r609, -2;
	mad.lo.s32 	%r395, %r616, %r615, %r614;
	mul.lo.s32 	%r1098, %r18, 320;
	mad.lo.s32 	%r1099, %r359, %r17, %r1098;
	shl.b32 	%r1100, %r1099, 2;
	add.s32 	%r1101, %r1088, %r1100;
	add.s32 	%r1102, %r1101, -256;
	add.s32 	%r396, %r22, 16;
	shl.b32 	%r1103, %r22, 4;
	add.s32 	%r1104, %r1103, 256;
	add.s32 	%r397, %r1102, %r1104;
	add.s32 	%r398, %r22, 96;
	shl.b32 	%r1105, %r22, 3;
	add.s32 	%r1106, %r1102, %r1105;
	mul.lo.s32 	%r1107, %r361, %r18;
	add.s32 	%r1108, %r365, %r1107;
	add.s32 	%r1109, %r1108, %r1091;
	shl.b32 	%r1110, %r1109, 2;
	add.s32 	%r1111, %r1088, %r1110;
	add.s32 	%r1112, %r1111, -256;
	add.s32 	%r400, %r1112, %r1104;
	add.s32 	%r401, %r1112, %r1105;
	mad.lo.s32 	%r1113, %r604, %r1083, %r18;
	mad.lo.s32 	%r1114, %r1113, 1280, %r1088;
	add.s32 	%r402, %r1114, -256;
	sub.s32 	%r1115, %r1107, %r361;
	add.s32 	%r1116, %r1093, %r1115;
	add.s32 	%r1117, %r1116, %r1091;
	shl.b32 	%r1118, %r1117, 2;
	add.s32 	%r1119, %r1088, %r1118;
	add.s32 	%r403, %r1119, -256;
	mad.lo.s32 	%r1120, %r364, %r17, %r360;
	add.s32 	%r1121, %r1120, %r1084;
	shl.b32 	%r1122, %r1121, 2;
	add.s32 	%r1123, %r1088, %r1122;
	add.s32 	%r404, %r22, 32;
	add.s32 	%r405, %r1123, %r1103;
	mad.lo.s32 	%r1124, %r43, %r18, %r1091;
	add.s32 	%r1125, %r1124, %r363;
	add.s32 	%r1126, %r1125, %r365;
	shl.b32 	%r1127, %r1126, 2;
	add.s32 	%r1128, %r1088, %r1127;
	add.s32 	%r406, %r1128, %r1103;
	mov.u32 	%r1129, -2147483647;
	sub.s32 	%r1130, %r1129, %r380;
	selp.b32 	%r407, %r1130, 1, %p151;
	mov.u32 	%r1635, 0;
	mov.u32 	%r1667, %r1666;
	mov.u32 	%r1557, %r1666;
	mov.u32 	%r1558, %r1666;
	mov.u32 	%r1654, %r1666;
	mov.u32 	%r1636, %r1666;
	mov.u32 	%r1656, %r1666;
	mov.u32 	%r1646, %r1666;
	mov.u32 	%r1637, %r1666;
	mov.u32 	%r1657, %r1666;
	mov.u32 	%r1647, %r1666;
	mov.u32 	%r1668, %r1666;
	mov.u32 	%r1567, %r1666;
	mov.u32 	%r1568, %r1666;
	mov.u32 	%r1569, %r1666;
	mov.u32 	%r1570, %r1666;
	mov.u32 	%r1571, %r1666;
	mov.u32 	%r1572, %r1666;
	mov.u32 	%r1669, %r1666;
	mov.u32 	%r1655, %r1666;
	mov.u32 	%r1575, %r1666;
	mov.u32 	%r1576, %r1666;
	mov.u32 	%r1577, %r1666;
	mov.u32 	%r1578, %r1666;
	mov.u32 	%r1579, %r1666;
	mov.u32 	%r1580, %r1666;
	mov.u32 	%r1648, %r1666;
	mov.u32 	%r1649, %r1666;
	mov.u32 	%r1583, %r1666;
	mov.u32 	%r1670, %r1666;
	mov.u32 	%r1585, %r1666;
	mov.u32 	%r1671, %r1666;
	mov.u32 	%r1587, %r1666;
	mov.u32 	%r1651, %r1666;
	mov.u32 	%r1672, %r1666;
	mov.u32 	%r1673, %r1666;
	mov.u32 	%r1591, %r1666;
	mov.u32 	%r1653, %r1666;
	mov.u32 	%r1674, %r1666;
	mov.u32 	%r1675, %r1666;
	mov.u32 	%r1664, %r1666;
	mov.u32 	%r1665, %r1666;
	mov.u32 	%r1597, %r1666;
	mov.u32 	%r1598, %r1666;
	mov.u32 	%r1599, %r1666;
	mov.u32 	%r1600, %r1666;
	mov.u32 	%r1601, %r1666;
	mov.u32 	%r1602, %r1666;
	mov.u32 	%r1603, %r1666;
	mov.u32 	%r1604, %r1666;
	mov.u32 	%r1605, %r1666;
	mov.u32 	%r1606, %r1666;
	mov.u32 	%r1607, %r1666;
	mov.u32 	%r1608, %r1666;
	mov.u32 	%r1609, %r1666;
	mov.u32 	%r1610, %r1666;
	mov.u32 	%r1676, %r1666;
	mov.u32 	%r1677, %r1666;
	mov.u32 	%r1613, %r1666;
	mov.u32 	%r1614, %r1666;
	mov.u32 	%r1615, %r1666;
	mov.u32 	%r1616, %r1666;
	mov.u32 	%r1617, %r1666;
	mov.u32 	%r1618, %r1666;
	mov.u32 	%r1619, %r1666;
	mov.u32 	%r1620, %r1666;
	mov.u32 	%r1621, %r1666;
	mov.u32 	%r1622, %r1666;
	mov.u32 	%r1623, %r1666;
	mov.u32 	%r1624, %r1666;
	mov.u32 	%r1625, %r1666;
	mov.u32 	%r1626, %r1666;
	mov.u32 	%r1627, %r1666;
	mov.u32 	%r1628, %r1666;
	mov.u32 	%r1629, %r1666;
	mov.u32 	%r1630, %r1666;
	mov.u32 	%r1631, %r1666;
	mov.u32 	%r1632, %r1666;
	mov.u32 	%r1633, %r1666;
	mov.u32 	%r1634, %r1666;
	mov.u32 	%r1638, %r1567;
	mov.u32 	%r1639, %r1575;
	mov.u32 	%r1640, %r1577;
	mov.u32 	%r1642, %r1569;

$L__BB0_293:
	mov.u32 	%r479, %r1626;
	mov.u32 	%r478, %r1625;
	mov.u32 	%r475, %r1622;
	mov.u32 	%r474, %r1621;
	mov.u32 	%r471, %r1618;
	mov.u32 	%r468, %r1615;
	mov.u32 	%r1625, %r1610;
	mov.u32 	%r462, %r1609;
	mov.u32 	%r459, %r1606;
	mov.u32 	%r1621, %r1605;
	mov.u32 	%r457, %r1604;
	mov.u32 	%r454, %r1601;
	mov.u32 	%r453, %r1600;
	mov.u32 	%r451, %r1598;
	mov.u32 	%r447, %r1675;
	mov.u32 	%r443, %r1673;
	mov.u32 	%r1626, %r1671;
	mov.u32 	%r438, %r1585;
	mov.u32 	%r1622, %r1670;
	mov.u32 	%r436, %r1583;
	mov.u32 	%r1601, %r1649;
	mov.u32 	%r434, %r1648;
	mov.u32 	%r1618, %r1580;
	mov.u32 	%r432, %r1579;
	mov.u32 	%r1600, %r1578;
	mov.u32 	%r429, %r1576;
	mov.u32 	%r1583, %r1655;
	mov.u32 	%r1604, %r1669;
	mov.u32 	%r1615, %r1572;
	mov.u32 	%r424, %r1571;
	mov.u32 	%r1598, %r1570;
	mov.u32 	%r421, %r1568;
	mov.u32 	%r1605, %r1668;
	mov.u32 	%r1606, %r1647;
	mov.u32 	%r415, %r1646;
	mov.u32 	%r1585, %r1654;
	mov.u32 	%r1610, %r1667;
	mov.u32 	%r1609, %r1666;
	add.s32 	%r1131, %r388, %r1635;
	div.s32 	%r1132, %r1131, %r608;
	mul.lo.s32 	%r1133, %r1132, %r608;
	sub.s32 	%r489, %r1131, %r1133;
	mad.lo.s32 	%r1134, %r1132, %r25, %r387;
	add.s32 	%r1135, %r1635, %r386;
	mad.lo.s32 	%r1136, %r1132, %r389, %r1135;
	div.s32 	%r1137, %r1134, %r609;
	mul.lo.s32 	%r1138, %r1137, %r609;
	sub.s32 	%r490, %r1134, %r1138;
	mad.lo.s32 	%r491, %r1137, %r390, %r1136;
	setp.eq.s32 	%p152, %r17, 0;
	@%p152 bra 	$L__BB0_295;

	shl.b32 	%r1139, %r404, 4;
	add.s32 	%r1140, %r391, %r1139;
	ld.shared.v4.u32 	{%r1576, %r1568, %r1640, %r1642}, [%r1140];
	ld.shared.v4.u32 	{%r1639, %r1638, %r1637, %r1636}, [%r1140+512];

$L__BB0_295:
	setp.eq.s32 	%p153, %r18, 0;
	mov.u32 	%r1644, %r1557;
	mov.u32 	%r1645, %r1558;
	mov.u32 	%r1646, %r415;
	mov.u32 	%r1647, %r1606;
	mov.u32 	%r1648, %r434;
	mov.u32 	%r1649, %r1601;
	mov.u32 	%r1650, %r1587;
	mov.u32 	%r1652, %r1591;
	mov.u32 	%r1654, %r1585;
	mov.u32 	%r1655, %r1583;
	@%p153 bra 	$L__BB0_298;

	shl.b32 	%r1149, %r404, 4;
	add.s32 	%r508, %r392, %r1149;
	ld.shared.v4.u32 	{%r1653, %r1651, %r1645, %r1644}, [%r508];
	ld.shared.v4.u32 	{%r1652, %r1650, %r1646, %r1648}, [%r508+512];
	mov.u32 	%r1647, %r1606;
	mov.u32 	%r1649, %r1601;
	mov.u32 	%r1654, %r1585;
	mov.u32 	%r1655, %r1583;
	@%p152 bra 	$L__BB0_298;

	ld.shared.v4.u32 	{%r1654, %r1655, %r1647, %r1649}, [%r508+1024];

$L__BB0_298:
	mov.b64 	%rd450, _ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb1ELb0EEEvNS_10KernelArgsIT_T0_EE_param_0;
	mov.u64 	%rd449, %rd450;
	bar.sync 	0;
	ld.param.u64 	%rd252, [%rd449+136];
	cvta.to.global.u64 	%rd26, %rd252;
	setp.ge.s32 	%p155, %r489, %r393;
	setp.lt.s32 	%p156, %r489, 2;
	or.pred  	%p157, %p156, %p155;
	setp.lt.s32 	%p158, %r490, 2;
	or.pred  	%p159, %p158, %p157;
	setp.ge.s32 	%p160, %r490, %r394;
	or.pred  	%p161, %p160, %p159;
	setp.lt.s32 	%p162, %r491, %r614;
	or.pred  	%p163, %p162, %p161;
	setp.ge.s32 	%p164, %r491, %r395;
	or.pred  	%p165, %p163, %p164;
	@%p165 bra 	$L__BB0_348;

	sub.s32 	%r533, %r491, %r614;
	rem.s32 	%r1162, %r533, %r615;
	setp.ne.s32 	%p166, %r1162, 0;
	@%p166 bra 	$L__BB0_348;

	div.s32 	%r1163, %r533, %r615;
	mul.lo.s32 	%r1164, %r1163, %r608;
	mul.lo.s32 	%r534, %r1164, 3;
	add.s32 	%r535, %r489, -2;
	add.s32 	%r1165, %r534, %r535;
	mul.lo.s32 	%r536, %r1165, %r609;
	@%p11 bra 	$L__BB0_302;

	add.s32 	%r1170, %r536, %r490;
	mul.lo.s32 	%r1171, %r1170, %r32;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1634;
  cvt.f32.f16 %f302, low;}

	// end inline asm
	add.s32 	%r1172, %r376, %r1171;
	mul.wide.s32 	%rd253, %r1172, 4;
	add.s64 	%rd254, %rd26, %rd253;
	st.global.f32 	[%rd254], %f302;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1634;
  cvt.f32.f16 %f303, high;}

	// end inline asm
	add.s32 	%r1173, %r377, %r1171;
	mul.wide.s32 	%rd255, %r1173, 4;
	add.s64 	%rd256, %rd26, %rd255;
	st.global.f32 	[%rd256], %f303;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1632;
  cvt.f32.f16 %f304, low;}

	// end inline asm
	add.s32 	%r1174, %r378, %r1171;
	mul.wide.s32 	%rd257, %r1174, 4;
	add.s64 	%rd258, %rd26, %rd257;
	st.global.f32 	[%rd258], %f304;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1632;
  cvt.f32.f16 %f305, high;}

	// end inline asm
	add.s32 	%r1175, %r379, %r1171;
	mul.wide.s32 	%rd259, %r1175, 4;
	add.s64 	%rd260, %rd26, %rd259;
	st.global.f32 	[%rd260], %f305;

$L__BB0_302:
	add.s32 	%r537, %r534, %r608;
	@%p11 bra 	$L__BB0_304;

	mul.lo.s32 	%r1465, %r1132, %r608;
	add.s32 	%r1464, %r388, %r1635;
	sub.s32 	%r1463, %r1464, %r1465;
	add.s32 	%r1462, %r1463, -2;
	add.s32 	%r1180, %r537, %r1462;
	mad.lo.s32 	%r1181, %r1180, %r609, %r490;
	mul.lo.s32 	%r1182, %r1181, %r32;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1633;
  cvt.f32.f16 %f306, low;}

	// end inline asm
	add.s32 	%r1183, %r376, %r1182;
	mul.wide.s32 	%rd261, %r1183, 4;
	add.s64 	%rd262, %rd26, %rd261;
	st.global.f32 	[%rd262], %f306;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1633;
  cvt.f32.f16 %f307, high;}

	// end inline asm
	add.s32 	%r1184, %r377, %r1182;
	mul.wide.s32 	%rd263, %r1184, 4;
	add.s64 	%rd264, %rd26, %rd263;
	st.global.f32 	[%rd264], %f307;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1631;
  cvt.f32.f16 %f308, low;}

	// end inline asm
	add.s32 	%r1185, %r378, %r1182;
	mul.wide.s32 	%rd265, %r1185, 4;
	add.s64 	%rd266, %rd26, %rd265;
	st.global.f32 	[%rd266], %f308;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1631;
  cvt.f32.f16 %f309, high;}

	// end inline asm
	add.s32 	%r1186, %r379, %r1182;
	mul.wide.s32 	%rd267, %r1186, 4;
	add.s64 	%rd268, %rd26, %rd267;
	st.global.f32 	[%rd268], %f309;

$L__BB0_304:
	@%p11 bra 	$L__BB0_306;

	add.s32 	%r1459, %r490, 1;
	add.s32 	%r1191, %r536, %r1459;
	mul.lo.s32 	%r1192, %r1191, %r32;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1630;
  cvt.f32.f16 %f310, low;}

	// end inline asm
	add.s32 	%r1193, %r376, %r1192;
	mul.wide.s32 	%rd269, %r1193, 4;
	add.s64 	%rd270, %rd26, %rd269;
	st.global.f32 	[%rd270], %f310;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1630;
  cvt.f32.f16 %f311, high;}

	// end inline asm
	add.s32 	%r1194, %r377, %r1192;
	mul.wide.s32 	%rd271, %r1194, 4;
	add.s64 	%rd272, %rd26, %rd271;
	st.global.f32 	[%rd272], %f311;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1629;
  cvt.f32.f16 %f312, low;}

	// end inline asm
	add.s32 	%r1195, %r378, %r1192;
	mul.wide.s32 	%rd273, %r1195, 4;
	add.s64 	%rd274, %rd26, %rd273;
	st.global.f32 	[%rd274], %f312;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1629;
  cvt.f32.f16 %f313, high;}

	// end inline asm
	add.s32 	%r1196, %r379, %r1192;
	mul.wide.s32 	%rd275, %r1196, 4;
	add.s64 	%rd276, %rd26, %rd275;
	st.global.f32 	[%rd276], %f313;

$L__BB0_306:
	add.s32 	%r539, %r489, -1;
	add.s32 	%r1197, %r534, %r539;
	mul.lo.s32 	%r540, %r1197, %r609;
	@%p11 bra 	$L__BB0_308;

	add.s32 	%r1460, %r490, -1;
	add.s32 	%r1202, %r540, %r1460;
	mul.lo.s32 	%r1203, %r1202, %r32;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1677;
  cvt.f32.f16 %f314, low;}

	// end inline asm
	add.s32 	%r1204, %r376, %r1203;
	mul.wide.s32 	%rd277, %r1204, 4;
	add.s64 	%rd278, %rd26, %rd277;
	st.global.f32 	[%rd278], %f314;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1677;
  cvt.f32.f16 %f315, high;}

	// end inline asm
	add.s32 	%r1205, %r377, %r1203;
	mul.wide.s32 	%rd279, %r1205, 4;
	add.s64 	%rd280, %rd26, %rd279;
	st.global.f32 	[%rd280], %f315;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1676;
  cvt.f32.f16 %f316, low;}

	// end inline asm
	add.s32 	%r1206, %r378, %r1203;
	mul.wide.s32 	%rd281, %r1206, 4;
	add.s64 	%rd282, %rd26, %rd281;
	st.global.f32 	[%rd282], %f316;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1676;
  cvt.f32.f16 %f317, high;}

	// end inline asm
	add.s32 	%r1207, %r379, %r1203;
	mul.wide.s32 	%rd283, %r1207, 4;
	add.s64 	%rd284, %rd26, %rd283;
	st.global.f32 	[%rd284], %f317;

$L__BB0_308:
	add.s32 	%r1208, %r537, %r539;
	mul.lo.s32 	%r542, %r1208, %r609;
	@%p11 bra 	$L__BB0_310;

	add.s32 	%r1461, %r490, -1;
	add.s32 	%r1213, %r542, %r1461;
	mul.lo.s32 	%r1214, %r1213, %r32;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1628;
  cvt.f32.f16 %f318, low;}

	// end inline asm
	add.s32 	%r1215, %r376, %r1214;
	mul.wide.s32 	%rd285, %r1215, 4;
	add.s64 	%rd286, %rd26, %rd285;
	st.global.f32 	[%rd286], %f318;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1628;
  cvt.f32.f16 %f319, high;}

	// end inline asm
	add.s32 	%r1216, %r377, %r1214;
	mul.wide.s32 	%rd287, %r1216, 4;
	add.s64 	%rd288, %rd26, %rd287;
	st.global.f32 	[%rd288], %f319;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1627;
  cvt.f32.f16 %f320, low;}

	// end inline asm
	add.s32 	%r1217, %r378, %r1214;
	mul.wide.s32 	%rd289, %r1217, 4;
	add.s64 	%rd290, %rd26, %rd289;
	st.global.f32 	[%rd290], %f320;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1627;
  cvt.f32.f16 %f321, high;}

	// end inline asm
	add.s32 	%r1218, %r379, %r1214;
	mul.wide.s32 	%rd291, %r1218, 4;
	add.s64 	%rd292, %rd26, %rd291;
	st.global.f32 	[%rd292], %f321;

$L__BB0_310:
	@%p11 bra 	$L__BB0_312;

	add.s32 	%r1223, %r540, %r490;
	mul.lo.s32 	%r1224, %r1223, %r32;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r479;
  cvt.f32.f16 %f322, low;}

	// end inline asm
	add.s32 	%r1225, %r376, %r1224;
	mul.wide.s32 	%rd293, %r1225, 4;
	add.s64 	%rd294, %rd26, %rd293;
	st.global.f32 	[%rd294], %f322;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r479;
  cvt.f32.f16 %f323, high;}

	// end inline asm
	add.s32 	%r1226, %r377, %r1224;
	mul.wide.s32 	%rd295, %r1226, 4;
	add.s64 	%rd296, %rd26, %rd295;
	st.global.f32 	[%rd296], %f323;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r475;
  cvt.f32.f16 %f324, low;}

	// end inline asm
	add.s32 	%r1227, %r378, %r1224;
	mul.wide.s32 	%rd297, %r1227, 4;
	add.s64 	%rd298, %rd26, %rd297;
	st.global.f32 	[%rd298], %f324;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r475;
  cvt.f32.f16 %f325, high;}

	// end inline asm
	add.s32 	%r1228, %r379, %r1224;
	mul.wide.s32 	%rd299, %r1228, 4;
	add.s64 	%rd300, %rd26, %rd299;
	st.global.f32 	[%rd300], %f325;

$L__BB0_312:
	@%p11 bra 	$L__BB0_314;

	add.s32 	%r1233, %r542, %r490;
	mul.lo.s32 	%r1234, %r1233, %r32;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r478;
  cvt.f32.f16 %f326, low;}

	// end inline asm
	add.s32 	%r1235, %r376, %r1234;
	mul.wide.s32 	%rd301, %r1235, 4;
	add.s64 	%rd302, %rd26, %rd301;
	st.global.f32 	[%rd302], %f326;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r478;
  cvt.f32.f16 %f327, high;}

	// end inline asm
	add.s32 	%r1236, %r377, %r1234;
	mul.wide.s32 	%rd303, %r1236, 4;
	add.s64 	%rd304, %rd26, %rd303;
	st.global.f32 	[%rd304], %f327;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r474;
  cvt.f32.f16 %f328, low;}

	// end inline asm
	add.s32 	%r1237, %r378, %r1234;
	mul.wide.s32 	%rd305, %r1237, 4;
	add.s64 	%rd306, %rd26, %rd305;
	st.global.f32 	[%rd306], %f328;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r474;
  cvt.f32.f16 %f329, high;}

	// end inline asm
	add.s32 	%r1238, %r379, %r1234;
	mul.wide.s32 	%rd307, %r1238, 4;
	add.s64 	%rd308, %rd26, %rd307;
	st.global.f32 	[%rd308], %f329;

$L__BB0_314:
	add.s32 	%r543, %r537, %r608;
	add.s32 	%r1239, %r543, %r539;
	mul.lo.s32 	%r544, %r1239, %r609;
	@%p11 bra 	$L__BB0_316;

	add.s32 	%r1244, %r544, %r490;
	mul.lo.s32 	%r1245, %r1244, %r32;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1624;
  cvt.f32.f16 %f330, low;}

	// end inline asm
	add.s32 	%r1246, %r376, %r1245;
	mul.wide.s32 	%rd309, %r1246, 4;
	add.s64 	%rd310, %rd26, %rd309;
	st.global.f32 	[%rd310], %f330;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1624;
  cvt.f32.f16 %f331, high;}

	// end inline asm
	add.s32 	%r1247, %r377, %r1245;
	mul.wide.s32 	%rd311, %r1247, 4;
	add.s64 	%rd312, %rd26, %rd311;
	st.global.f32 	[%rd312], %f331;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1620;
  cvt.f32.f16 %f332, low;}

	// end inline asm
	add.s32 	%r1248, %r378, %r1245;
	mul.wide.s32 	%rd313, %r1248, 4;
	add.s64 	%rd314, %rd26, %rd313;
	st.global.f32 	[%rd314], %f332;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1620;
  cvt.f32.f16 %f333, high;}

	// end inline asm
	add.s32 	%r1249, %r379, %r1245;
	mul.wide.s32 	%rd315, %r1249, 4;
	add.s64 	%rd316, %rd26, %rd315;
	st.global.f32 	[%rd316], %f333;

$L__BB0_316:
	@%p11 bra 	$L__BB0_318;

	add.s32 	%r1450, %r490, 1;
	add.s32 	%r1254, %r540, %r1450;
	mul.lo.s32 	%r1255, %r1254, %r32;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r471;
  cvt.f32.f16 %f334, low;}

	// end inline asm
	add.s32 	%r1256, %r376, %r1255;
	mul.wide.s32 	%rd317, %r1256, 4;
	add.s64 	%rd318, %rd26, %rd317;
	st.global.f32 	[%rd318], %f334;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r471;
  cvt.f32.f16 %f335, high;}

	// end inline asm
	add.s32 	%r1257, %r377, %r1255;
	mul.wide.s32 	%rd319, %r1257, 4;
	add.s64 	%rd320, %rd26, %rd319;
	st.global.f32 	[%rd320], %f335;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r468;
  cvt.f32.f16 %f336, low;}

	// end inline asm
	add.s32 	%r1258, %r378, %r1255;
	mul.wide.s32 	%rd321, %r1258, 4;
	add.s64 	%rd322, %rd26, %rd321;
	st.global.f32 	[%rd322], %f336;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r468;
  cvt.f32.f16 %f337, high;}

	// end inline asm
	add.s32 	%r1259, %r379, %r1255;
	mul.wide.s32 	%rd323, %r1259, 4;
	add.s64 	%rd324, %rd26, %rd323;
	st.global.f32 	[%rd324], %f337;

$L__BB0_318:
	@%p11 bra 	$L__BB0_320;

	add.s32 	%r1451, %r490, 1;
	add.s32 	%r1264, %r542, %r1451;
	mul.lo.s32 	%r1265, %r1264, %r32;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1617;
  cvt.f32.f16 %f338, low;}

	// end inline asm
	add.s32 	%r1266, %r376, %r1265;
	mul.wide.s32 	%rd325, %r1266, 4;
	add.s64 	%rd326, %rd26, %rd325;
	st.global.f32 	[%rd326], %f338;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1617;
  cvt.f32.f16 %f339, high;}

	// end inline asm
	add.s32 	%r1267, %r377, %r1265;
	mul.wide.s32 	%rd327, %r1267, 4;
	add.s64 	%rd328, %rd26, %rd327;
	st.global.f32 	[%rd328], %f339;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1614;
  cvt.f32.f16 %f340, low;}

	// end inline asm
	add.s32 	%r1268, %r378, %r1265;
	mul.wide.s32 	%rd329, %r1268, 4;
	add.s64 	%rd330, %rd26, %rd329;
	st.global.f32 	[%rd330], %f340;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1614;
  cvt.f32.f16 %f341, high;}

	// end inline asm
	add.s32 	%r1269, %r379, %r1265;
	mul.wide.s32 	%rd331, %r1269, 4;
	add.s64 	%rd332, %rd26, %rd331;
	st.global.f32 	[%rd332], %f341;

$L__BB0_320:
	@%p11 bra 	$L__BB0_322;

	add.s32 	%r1452, %r490, 1;
	add.s32 	%r1274, %r544, %r1452;
	mul.lo.s32 	%r1275, %r1274, %r32;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1616;
  cvt.f32.f16 %f342, low;}

	// end inline asm
	add.s32 	%r1276, %r376, %r1275;
	mul.wide.s32 	%rd333, %r1276, 4;
	add.s64 	%rd334, %rd26, %rd333;
	st.global.f32 	[%rd334], %f342;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1616;
  cvt.f32.f16 %f343, high;}

	// end inline asm
	add.s32 	%r1277, %r377, %r1275;
	mul.wide.s32 	%rd335, %r1277, 4;
	add.s64 	%rd336, %rd26, %rd335;
	st.global.f32 	[%rd336], %f343;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1613;
  cvt.f32.f16 %f344, low;}

	// end inline asm
	add.s32 	%r1278, %r378, %r1275;
	mul.wide.s32 	%rd337, %r1278, 4;
	add.s64 	%rd338, %rd26, %rd337;
	st.global.f32 	[%rd338], %f344;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1613;
  cvt.f32.f16 %f345, high;}

	// end inline asm
	add.s32 	%r1279, %r379, %r1275;
	mul.wide.s32 	%rd339, %r1279, 4;
	add.s64 	%rd340, %rd26, %rd339;
	st.global.f32 	[%rd340], %f345;

$L__BB0_322:
	@%p11 bra 	$L__BB0_324;

	add.s32 	%r1466, %r490, 2;
	add.s32 	%r1284, %r540, %r1466;
	mul.lo.s32 	%r1285, %r1284, %r32;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1665;
  cvt.f32.f16 %f346, low;}

	// end inline asm
	add.s32 	%r1286, %r376, %r1285;
	mul.wide.s32 	%rd341, %r1286, 4;
	add.s64 	%rd342, %rd26, %rd341;
	st.global.f32 	[%rd342], %f346;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1665;
  cvt.f32.f16 %f347, high;}

	// end inline asm
	add.s32 	%r1287, %r377, %r1285;
	mul.wide.s32 	%rd343, %r1287, 4;
	add.s64 	%rd344, %rd26, %rd343;
	st.global.f32 	[%rd344], %f347;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1664;
  cvt.f32.f16 %f348, low;}

	// end inline asm
	add.s32 	%r1288, %r378, %r1285;
	mul.wide.s32 	%rd345, %r1288, 4;
	add.s64 	%rd346, %rd26, %rd345;
	st.global.f32 	[%rd346], %f348;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1664;
  cvt.f32.f16 %f349, high;}

	// end inline asm
	add.s32 	%r1289, %r379, %r1285;
	mul.wide.s32 	%rd347, %r1289, 4;
	add.s64 	%rd348, %rd26, %rd347;
	st.global.f32 	[%rd348], %f349;

$L__BB0_324:
	add.s32 	%r1290, %r537, %r489;
	mul.lo.s32 	%r546, %r1290, %r609;
	@%p11 bra 	$L__BB0_326;

	add.s32 	%r1453, %r490, -1;
	add.s32 	%r1295, %r546, %r1453;
	mul.lo.s32 	%r1296, %r1295, %r32;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r447;
  cvt.f32.f16 %f350, low;}

	// end inline asm
	add.s32 	%r1297, %r376, %r1296;
	mul.wide.s32 	%rd349, %r1297, 4;
	add.s64 	%rd350, %rd26, %rd349;
	st.global.f32 	[%rd350], %f350;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r447;
  cvt.f32.f16 %f351, high;}

	// end inline asm
	add.s32 	%r1298, %r377, %r1296;
	mul.wide.s32 	%rd351, %r1298, 4;
	add.s64 	%rd352, %rd26, %rd351;
	st.global.f32 	[%rd352], %f351;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r443;
  cvt.f32.f16 %f352, low;}

	// end inline asm
	add.s32 	%r1299, %r378, %r1296;
	mul.wide.s32 	%rd353, %r1299, 4;
	add.s64 	%rd354, %rd26, %rd353;
	st.global.f32 	[%rd354], %f352;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r443;
  cvt.f32.f16 %f353, high;}

	// end inline asm
	add.s32 	%r1300, %r379, %r1296;
	mul.wide.s32 	%rd355, %r1300, 4;
	add.s64 	%rd356, %rd26, %rd355;
	st.global.f32 	[%rd356], %f353;

$L__BB0_326:
	add.s32 	%r1301, %r543, %r489;
	mul.lo.s32 	%r547, %r1301, %r609;
	@%p11 bra 	$L__BB0_328;

	add.s32 	%r1454, %r490, -1;
	add.s32 	%r1306, %r547, %r1454;
	mul.lo.s32 	%r1307, %r1306, %r32;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1674;
  cvt.f32.f16 %f354, low;}

	// end inline asm
	add.s32 	%r1308, %r376, %r1307;
	mul.wide.s32 	%rd357, %r1308, 4;
	add.s64 	%rd358, %rd26, %rd357;
	st.global.f32 	[%rd358], %f354;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1674;
  cvt.f32.f16 %f355, high;}

	// end inline asm
	add.s32 	%r1309, %r377, %r1307;
	mul.wide.s32 	%rd359, %r1309, 4;
	add.s64 	%rd360, %rd26, %rd359;
	st.global.f32 	[%rd360], %f355;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1672;
  cvt.f32.f16 %f356, low;}

	// end inline asm
	add.s32 	%r1310, %r378, %r1307;
	mul.wide.s32 	%rd361, %r1310, 4;
	add.s64 	%rd362, %rd26, %rd361;
	st.global.f32 	[%rd362], %f356;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1672;
  cvt.f32.f16 %f357, high;}

	// end inline asm
	add.s32 	%r1311, %r379, %r1307;
	mul.wide.s32 	%rd363, %r1311, 4;
	add.s64 	%rd364, %rd26, %rd363;
	st.global.f32 	[%rd364], %f357;

$L__BB0_328:
	add.s32 	%r1312, %r534, %r489;
	mul.lo.s32 	%r548, %r1312, %r609;
	@%p11 bra 	$L__BB0_330;

	add.s32 	%r1317, %r548, %r490;
	mul.lo.s32 	%r1318, %r1317, %r32;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1626;
  cvt.f32.f16 %f358, low;}

	// end inline asm
	add.s32 	%r1319, %r376, %r1318;
	mul.wide.s32 	%rd365, %r1319, 4;
	add.s64 	%rd366, %rd26, %rd365;
	st.global.f32 	[%rd366], %f358;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1626;
  cvt.f32.f16 %f359, high;}

	// end inline asm
	add.s32 	%r1320, %r377, %r1318;
	mul.wide.s32 	%rd367, %r1320, 4;
	add.s64 	%rd368, %rd26, %rd367;
	st.global.f32 	[%rd368], %f359;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1622;
  cvt.f32.f16 %f360, low;}

	// end inline asm
	add.s32 	%r1321, %r378, %r1318;
	mul.wide.s32 	%rd369, %r1321, 4;
	add.s64 	%rd370, %rd26, %rd369;
	st.global.f32 	[%rd370], %f360;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1622;
  cvt.f32.f16 %f361, high;}

	// end inline asm
	add.s32 	%r1322, %r379, %r1318;
	mul.wide.s32 	%rd371, %r1322, 4;
	add.s64 	%rd372, %rd26, %rd371;
	st.global.f32 	[%rd372], %f361;

$L__BB0_330:
	@%p11 bra 	$L__BB0_332;

	add.s32 	%r1327, %r546, %r490;
	mul.lo.s32 	%r1328, %r1327, %r32;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1625;
  cvt.f32.f16 %f362, low;}

	// end inline asm
	add.s32 	%r1329, %r376, %r1328;
	mul.wide.s32 	%rd373, %r1329, 4;
	add.s64 	%rd374, %rd26, %rd373;
	st.global.f32 	[%rd374], %f362;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1625;
  cvt.f32.f16 %f363, high;}

	// end inline asm
	add.s32 	%r1330, %r377, %r1328;
	mul.wide.s32 	%rd375, %r1330, 4;
	add.s64 	%rd376, %rd26, %rd375;
	st.global.f32 	[%rd376], %f363;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1621;
  cvt.f32.f16 %f364, low;}

	// end inline asm
	add.s32 	%r1331, %r378, %r1328;
	mul.wide.s32 	%rd377, %r1331, 4;
	add.s64 	%rd378, %rd26, %rd377;
	st.global.f32 	[%rd378], %f364;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1621;
  cvt.f32.f16 %f365, high;}

	// end inline asm
	add.s32 	%r1332, %r379, %r1328;
	mul.wide.s32 	%rd379, %r1332, 4;
	add.s64 	%rd380, %rd26, %rd379;
	st.global.f32 	[%rd380], %f365;

$L__BB0_332:
	@%p11 bra 	$L__BB0_334;

	add.s32 	%r1337, %r547, %r490;
	mul.lo.s32 	%r1338, %r1337, %r32;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r462;
  cvt.f32.f16 %f366, low;}

	// end inline asm
	add.s32 	%r1339, %r376, %r1338;
	mul.wide.s32 	%rd381, %r1339, 4;
	add.s64 	%rd382, %rd26, %rd381;
	st.global.f32 	[%rd382], %f366;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r462;
  cvt.f32.f16 %f367, high;}

	// end inline asm
	add.s32 	%r1340, %r377, %r1338;
	mul.wide.s32 	%rd383, %r1340, 4;
	add.s64 	%rd384, %rd26, %rd383;
	st.global.f32 	[%rd384], %f367;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r457;
  cvt.f32.f16 %f368, low;}

	// end inline asm
	add.s32 	%r1341, %r378, %r1338;
	mul.wide.s32 	%rd385, %r1341, 4;
	add.s64 	%rd386, %rd26, %rd385;
	st.global.f32 	[%rd386], %f368;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r457;
  cvt.f32.f16 %f369, high;}

	// end inline asm
	add.s32 	%r1342, %r379, %r1338;
	mul.wide.s32 	%rd387, %r1342, 4;
	add.s64 	%rd388, %rd26, %rd387;
	st.global.f32 	[%rd388], %f369;

$L__BB0_334:
	@%p11 bra 	$L__BB0_336;

	add.s32 	%r1455, %r490, 1;
	add.s32 	%r1347, %r548, %r1455;
	mul.lo.s32 	%r1348, %r1347, %r32;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1618;
  cvt.f32.f16 %f370, low;}

	// end inline asm
	add.s32 	%r1349, %r376, %r1348;
	mul.wide.s32 	%rd389, %r1349, 4;
	add.s64 	%rd390, %rd26, %rd389;
	st.global.f32 	[%rd390], %f370;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1618;
  cvt.f32.f16 %f371, high;}

	// end inline asm
	add.s32 	%r1350, %r377, %r1348;
	mul.wide.s32 	%rd391, %r1350, 4;
	add.s64 	%rd392, %rd26, %rd391;
	st.global.f32 	[%rd392], %f371;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1615;
  cvt.f32.f16 %f372, low;}

	// end inline asm
	add.s32 	%r1351, %r378, %r1348;
	mul.wide.s32 	%rd393, %r1351, 4;
	add.s64 	%rd394, %rd26, %rd393;
	st.global.f32 	[%rd394], %f372;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1615;
  cvt.f32.f16 %f373, high;}

	// end inline asm
	add.s32 	%r1352, %r379, %r1348;
	mul.wide.s32 	%rd395, %r1352, 4;
	add.s64 	%rd396, %rd26, %rd395;
	st.global.f32 	[%rd396], %f373;

$L__BB0_336:
	@%p11 bra 	$L__BB0_338;

	add.s32 	%r1456, %r490, 1;
	add.s32 	%r1357, %r546, %r1456;
	mul.lo.s32 	%r1358, %r1357, %r32;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r432;
  cvt.f32.f16 %f374, low;}

	// end inline asm
	add.s32 	%r1359, %r376, %r1358;
	mul.wide.s32 	%rd397, %r1359, 4;
	add.s64 	%rd398, %rd26, %rd397;
	st.global.f32 	[%rd398], %f374;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r432;
  cvt.f32.f16 %f375, high;}

	// end inline asm
	add.s32 	%r1360, %r377, %r1358;
	mul.wide.s32 	%rd399, %r1360, 4;
	add.s64 	%rd400, %rd26, %rd399;
	st.global.f32 	[%rd400], %f375;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r424;
  cvt.f32.f16 %f376, low;}

	// end inline asm
	add.s32 	%r1361, %r378, %r1358;
	mul.wide.s32 	%rd401, %r1361, 4;
	add.s64 	%rd402, %rd26, %rd401;
	st.global.f32 	[%rd402], %f376;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r424;
  cvt.f32.f16 %f377, high;}

	// end inline asm
	add.s32 	%r1362, %r379, %r1358;
	mul.wide.s32 	%rd403, %r1362, 4;
	add.s64 	%rd404, %rd26, %rd403;
	st.global.f32 	[%rd404], %f377;

$L__BB0_338:
	@%p11 bra 	$L__BB0_340;

	add.s32 	%r1457, %r490, 1;
	add.s32 	%r1367, %r547, %r1457;
	mul.lo.s32 	%r1368, %r1367, %r32;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r453;
  cvt.f32.f16 %f378, low;}

	// end inline asm
	add.s32 	%r1369, %r376, %r1368;
	mul.wide.s32 	%rd405, %r1369, 4;
	add.s64 	%rd406, %rd26, %rd405;
	st.global.f32 	[%rd406], %f378;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r453;
  cvt.f32.f16 %f379, high;}

	// end inline asm
	add.s32 	%r1370, %r377, %r1368;
	mul.wide.s32 	%rd407, %r1370, 4;
	add.s64 	%rd408, %rd26, %rd407;
	st.global.f32 	[%rd408], %f379;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r451;
  cvt.f32.f16 %f380, low;}

	// end inline asm
	add.s32 	%r1371, %r378, %r1368;
	mul.wide.s32 	%rd409, %r1371, 4;
	add.s64 	%rd410, %rd26, %rd409;
	st.global.f32 	[%rd410], %f380;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r451;
  cvt.f32.f16 %f381, high;}

	// end inline asm
	add.s32 	%r1372, %r379, %r1368;
	mul.wide.s32 	%rd411, %r1372, 4;
	add.s64 	%rd412, %rd26, %rd411;
	st.global.f32 	[%rd412], %f381;

$L__BB0_340:
	add.s32 	%r1467, %r490, 2;
	add.s32 	%r549, %r547, %r1467;
	@%p11 bra 	$L__BB0_342;

	mul.lo.s32 	%r1377, %r549, %r32;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1657;
  cvt.f32.f16 %f382, low;}

	// end inline asm
	add.s32 	%r1378, %r376, %r1377;
	mul.wide.s32 	%rd413, %r1378, 4;
	add.s64 	%rd414, %rd26, %rd413;
	st.global.f32 	[%rd414], %f382;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1657;
  cvt.f32.f16 %f383, high;}

	// end inline asm
	add.s32 	%r1379, %r377, %r1377;
	mul.wide.s32 	%rd415, %r1379, 4;
	add.s64 	%rd416, %rd26, %rd415;
	st.global.f32 	[%rd416], %f383;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1656;
  cvt.f32.f16 %f384, low;}

	// end inline asm
	add.s32 	%r1380, %r378, %r1377;
	mul.wide.s32 	%rd417, %r1380, 4;
	add.s64 	%rd418, %rd26, %rd417;
	st.global.f32 	[%rd418], %f384;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1656;
  cvt.f32.f16 %f385, high;}

	// end inline asm
	add.s32 	%r1381, %r379, %r1377;
	mul.wide.s32 	%rd419, %r1381, 4;
	add.s64 	%rd420, %rd26, %rd419;
	st.global.f32 	[%rd420], %f385;

$L__BB0_342:
	add.s32 	%r550, %r489, 1;
	@%p11 bra 	$L__BB0_344;

	add.s32 	%r1386, %r537, %r550;
	mad.lo.s32 	%r1387, %r1386, %r609, %r490;
	mul.lo.s32 	%r1388, %r1387, %r32;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1610;
  cvt.f32.f16 %f386, low;}

	// end inline asm
	add.s32 	%r1389, %r376, %r1388;
	mul.wide.s32 	%rd421, %r1389, 4;
	add.s64 	%rd422, %rd26, %rd421;
	st.global.f32 	[%rd422], %f386;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1610;
  cvt.f32.f16 %f387, high;}

	// end inline asm
	add.s32 	%r1390, %r377, %r1388;
	mul.wide.s32 	%rd423, %r1390, 4;
	add.s64 	%rd424, %rd26, %rd423;
	st.global.f32 	[%rd424], %f387;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1605;
  cvt.f32.f16 %f388, low;}

	// end inline asm
	add.s32 	%r1391, %r378, %r1388;
	mul.wide.s32 	%rd425, %r1391, 4;
	add.s64 	%rd426, %rd26, %rd425;
	st.global.f32 	[%rd426], %f388;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1605;
  cvt.f32.f16 %f389, high;}

	// end inline asm
	add.s32 	%r1392, %r379, %r1388;
	mul.wide.s32 	%rd427, %r1392, 4;
	add.s64 	%rd428, %rd26, %rd427;
	st.global.f32 	[%rd428], %f389;

$L__BB0_344:
	add.s32 	%r1393, %r543, %r550;
	mul.lo.s32 	%r551, %r1393, %r609;
	@%p11 bra 	$L__BB0_346;

	add.s32 	%r1398, %r551, %r490;
	mul.lo.s32 	%r1399, %r1398, %r32;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1609;
  cvt.f32.f16 %f390, low;}

	// end inline asm
	add.s32 	%r1400, %r376, %r1399;
	mul.wide.s32 	%rd429, %r1400, 4;
	add.s64 	%rd430, %rd26, %rd429;
	st.global.f32 	[%rd430], %f390;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1609;
  cvt.f32.f16 %f391, high;}

	// end inline asm
	add.s32 	%r1401, %r377, %r1399;
	mul.wide.s32 	%rd431, %r1401, 4;
	add.s64 	%rd432, %rd26, %rd431;
	st.global.f32 	[%rd432], %f391;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1604;
  cvt.f32.f16 %f392, low;}

	// end inline asm
	add.s32 	%r1402, %r378, %r1399;
	mul.wide.s32 	%rd433, %r1402, 4;
	add.s64 	%rd434, %rd26, %rd433;
	st.global.f32 	[%rd434], %f392;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1604;
  cvt.f32.f16 %f393, high;}

	// end inline asm
	add.s32 	%r1403, %r379, %r1399;
	mul.wide.s32 	%rd435, %r1403, 4;
	add.s64 	%rd436, %rd26, %rd435;
	st.global.f32 	[%rd436], %f393;

$L__BB0_346:
	add.s32 	%r1458, %r490, 1;
	add.s32 	%r552, %r551, %r1458;
	@%p11 bra 	$L__BB0_348;

	mul.lo.s32 	%r1408, %r552, %r32;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1600;
  cvt.f32.f16 %f394, low;}

	// end inline asm
	add.s32 	%r1409, %r376, %r1408;
	mul.wide.s32 	%rd437, %r1409, 4;
	add.s64 	%rd438, %rd26, %rd437;
	st.global.f32 	[%rd438], %f394;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1600;
  cvt.f32.f16 %f395, high;}

	// end inline asm
	add.s32 	%r1410, %r377, %r1408;
	mul.wide.s32 	%rd439, %r1410, 4;
	add.s64 	%rd440, %rd26, %rd439;
	st.global.f32 	[%rd440], %f395;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1598;
  cvt.f32.f16 %f396, low;}

	// end inline asm
	add.s32 	%r1411, %r378, %r1408;
	mul.wide.s32 	%rd441, %r1411, 4;
	add.s64 	%rd442, %rd26, %rd441;
	st.global.f32 	[%rd442], %f396;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1598;
  cvt.f32.f16 %f397, high;}

	// end inline asm
	add.s32 	%r1412, %r379, %r1408;
	mul.wide.s32 	%rd443, %r1412, 4;
	add.s64 	%rd444, %rd26, %rd443;
	st.global.f32 	[%rd444], %f397;

$L__BB0_348:
	setp.eq.s32 	%p191, %r17, %r358;
	@%p191 bra 	$L__BB0_350;

	st.shared.v4.u32 	[%r397], {%r1677, %r1676, %r1674, %r1672};
	st.shared.v4.u32 	[%r397+768], {%r1634, %r1632, %r1624, %r1620};
	add.s32 	%r1449, %r1106, 768;
	st.shared.v2.u32 	[%r1449], {%r1628, %r1627};

$L__BB0_350:
	setp.eq.s32 	%p192, %r18, %r362;
	@%p192 bra 	$L__BB0_354;

	setp.eq.s32 	%p207, %r17, %r358;
	st.shared.v4.u32 	[%r400], {%r1630, %r1629, %r1616, %r1613};
	st.shared.v4.u32 	[%r400+768], {%r1665, %r1664, %r1657, %r1656};
	@%p207 bra 	$L__BB0_353;

	st.shared.v2.u32 	[%r401], {%r1633, %r1631};

$L__BB0_353:
	st.shared.v2.u32 	[%r401+768], {%r1617, %r1614};

$L__BB0_354:
	bar.sync 	0;
	mov.u32 	%r1571, %r424;
	mov.u32 	%r1572, %r1615;
	mov.u32 	%r1579, %r432;
	mov.u32 	%r1580, %r1618;
	mov.u32 	%r1578, %r1600;
	mov.u32 	%r1570, %r1598;
	@%p152 bra 	$L__BB0_356;

	shl.b32 	%r1413, %r396, 4;
	add.s32 	%r1414, %r402, %r1413;
	ld.shared.v4.u32 	{%r1580, %r1572, %r1578, %r1570}, [%r1414];
	ld.shared.v4.u32 	{%r1665, %r1664, %r1657, %r1656}, [%r1414+768];
	shl.b32 	%r1423, %r398, 3;
	add.s32 	%r1424, %r402, %r1423;
	ld.shared.v2.u32 	{%r1579, %r1571}, [%r1424];

$L__BB0_356:
	setp.eq.s32 	%p205, %r18, 0;
	mov.u32 	%r1666, %r1609;
	mov.u32 	%r1667, %r1610;
	mov.u32 	%r1668, %r1605;
	mov.u32 	%r1669, %r1604;
	mov.u32 	%r1670, %r1622;
	mov.u32 	%r1671, %r1626;
	mov.u32 	%r1673, %r443;
	mov.u32 	%r1675, %r447;
	@%p205 bra 	$L__BB0_359;

	shl.b32 	%r1427, %r396, 4;
	add.s32 	%r1428, %r403, %r1427;
	ld.shared.v4.u32 	{%r1677, %r1676, %r1674, %r1672}, [%r1428];
	ld.shared.v4.u32 	{%r1671, %r1670, %r1666, %r1669}, [%r1428+768];
	shl.b32 	%r1437, %r398, 3;
	add.s32 	%r582, %r403, %r1437;
	ld.shared.v2.u32 	{%r1675, %r1673}, [%r582];
	mov.u32 	%r1667, %r1610;
	mov.u32 	%r1668, %r1605;
	@%p152 bra 	$L__BB0_359;

	ld.shared.v2.u32 	{%r1667, %r1668}, [%r582+768];

$L__BB0_359:
	setp.eq.s32 	%p206, %r17, %r358;
	bar.sync 	0;
	@%p206 bra 	$L__BB0_362;

	setp.ne.s32 	%p198, %r18, %r362;
	st.shared.v4.u32 	[%r405], {%r1653, %r1651, %r1558, %r1557};
	st.shared.v4.u32 	[%r405+512], {%r1591, %r1587, %r1607, %r1602};
	@%p198 bra 	$L__BB0_362;

	st.shared.v4.u32 	[%r405+1024], {%r1608, %r1603, %r1623, %r1619};

$L__BB0_362:
	@%p192 bra 	$L__BB0_364;

	st.shared.v4.u32 	[%r406], {%r1608, %r1603, %r1623, %r1619};
	st.shared.v4.u32 	[%r406+512], {%r1599, %r1597, %r1577, %r1569};
	st.shared.v4.u32 	[%r406+1024], {%r1575, %r1567, %r1637, %r1636};

$L__BB0_364:
	rem.s32 	%r1442, %r1635, %r607;
	setp.eq.s32 	%p200, %r1442, 0;
	@%p200 bra 	$L__BB0_366;

	bar.sync 	0;
	bra.uni 	$L__BB0_373;

$L__BB0_366:
	@%p146 bra 	$L__BB0_368;

	// begin inline asm
	trap;
	// end inline asm

$L__BB0_368:
	bar.sync 	0;
	@%p147 bra 	$L__BB0_372;

	membar.gl;
	// begin inline asm
	atom.add.release.gpu.u32 %r1443,[%rd25],%r407;
	// end inline asm

$L__BB0_370:
	ld.volatile.u32 	%r1445, [%rd25];
	xor.b32  	%r1446, %r1445, %r1443;
	setp.gt.s32 	%p203, %r1446, -1;
	@%p203 bra 	$L__BB0_370;

	// begin inline asm
	ld.acquire.gpu.u32 %r1447,[%rd25];
	// end inline asm

$L__BB0_372:
	bar.sync 	0;

$L__BB0_373:
	add.s32 	%r1635, %r1635, 1;
	setp.lt.s32 	%p204, %r1635, %r26;
	mov.u32 	%r1557, %r1644;
	mov.u32 	%r1558, %r1645;
	mov.u32 	%r1567, %r1638;
	mov.u32 	%r1569, %r1642;
	mov.u32 	%r1575, %r1639;
	mov.u32 	%r1577, %r1640;
	mov.u32 	%r1587, %r1650;
	mov.u32 	%r1591, %r1652;
	mov.u32 	%r1597, %r421;
	mov.u32 	%r1599, %r429;
	mov.u32 	%r1602, %r434;
	mov.u32 	%r1603, %r436;
	mov.u32 	%r1607, %r415;
	mov.u32 	%r1608, %r438;
	mov.u32 	%r1613, %r451;
	mov.u32 	%r1614, %r424;
	mov.u32 	%r1616, %r453;
	mov.u32 	%r1617, %r432;
	mov.u32 	%r1619, %r454;
	mov.u32 	%r1620, %r457;
	mov.u32 	%r1623, %r459;
	mov.u32 	%r1624, %r462;
	mov.u32 	%r1627, %r443;
	mov.u32 	%r1628, %r447;
	mov.u32 	%r1629, %r468;
	mov.u32 	%r1630, %r471;
	mov.u32 	%r1631, %r474;
	mov.u32 	%r1632, %r475;
	mov.u32 	%r1633, %r478;
	mov.u32 	%r1634, %r479;
	@%p204 bra 	$L__BB0_293;

$L__BB0_374:
	ret;

}

