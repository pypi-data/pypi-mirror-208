Metadata-Version: 2.1
Name: cone.fileupload
Version: 1.0a1
Summary: jQuery File Upload integration for cone.app
Home-page: http://github.com/conestack/cone.fileuplaod
Author: Cone Contributors
Author-email: dev@conestack.org
License: Simplified BSD
Keywords: node pyramid cone web
Classifier: Environment :: Web Environment
Classifier: Programming Language :: Python
Classifier: Topic :: Internet :: WWW/HTTP :: Dynamic Content
License-File: LICENSE.rst
Requires-Dist: setuptools
Requires-Dist: cone.app (>=1.0.3)
Provides-Extra: test
Requires-Dist: zope.testrunner ; extra == 'test'

.. image:: https://img.shields.io/pypi/v/cone.fileupload.svg
    :target: https://pypi.python.org/pypi/cone.fileupload
    :alt: Latest PyPI version

.. image:: https://img.shields.io/pypi/dm/cone.fileupload.svg
    :target: https://pypi.python.org/pypi/cone.fileupload
    :alt: Number of PyPI downloads

.. image:: https://travis-ci.org/bluedynamics/cone.fileupload.svg?branch=master
    :target: https://travis-ci.org/bluedynamics/cone.fileupload

.. image:: https://coveralls.io/repos/github/bluedynamics/cone.fileupload/badge.svg?branch=master
    :target: https://coveralls.io/github/bluedynamics/cone.fileupload?branch=master

This package integrates
`jQueryFileUpload <https://github.com/blueimp/jQuery-File-Upload>`_ in cone.

Currently, version 10.32.0 is included.

Included files of jQuery File Upload:

* jquery.iframe-transport.js
* jquery.fileupload.js
* jquery.fileupload-process.js
* jquery.fileupload-ui.js
* jquery.fileupload-validate.js

Additionally, v3.20.0 of
`Javascript-Templates <https://github.com/blueimp/JavaScript-Templates>`_
is included.


Usage
-----

Since ``cone.app`` not knows about the underlying data, ``cone.fileupload``
only provides an abstract server implementation.

So first we need to provide a model.

.. code-block:: python

    from cone.app.model import BaseNode
    from pyramid.security import ALL_PERMISSIONS
    from pyramid.security import Allow
    from pyramid.security import Deny
    from pyramid.security import Everyone

    ACL = [
        (Allow, 'role:manager', ['add', 'delete']),
        (Allow, Everyone, ['login']),
        (Deny, Everyone, ALL_PERMISSIONS),
    ]

    class Container(BaseNode):
        __acl__ = ACL

        def __call__(self):
            """Persistence happens here.
            """

    class File(BaseNode):
        __acl__ = ACL

        # allow setting any value types
        child_constraints = None

Now we need to provide a concrete ``FileUploadHandle`` implementation for
our model.

.. code-block:: python

    from cone.fileupload.browser.fileupload import FileUploadHandle
    from pyramid.view import view_config

    @view_config(
        name='fileupload_handle',
        context=Container, # <- here the view gets bound to our model
        accept='application/json',
        renderer='json',
        permission='add')
    class ContainerFileUploadHandle(FileUploadHandle):

        def create_file(self, stream, filename, mimetype):
            # this function gets called for persisting uploaded files
            file = self.model[filename] = File()
            file['body'] = stream.read()
            return {
                'name': filename,
                'size': len(file['body']),
                'view_url': '/{0}'.format(file.name),
                'download_url': '/{0}/download'.format(file.name),
                'delete_url': '/{0}/filedelete_handle'.format(file.name),
                'delete_type': 'GET',
            }

        def read_existing(self):
            # this function gets called for initial reading of existing files
            files = list()
            for node in self.model.values():
                files.append({
                    'name': node.name,
                    'size': len(node['body']),
                    'view_url': '/{0}'.format(node.name),
                    'download_url': '/{0}/download'.format(node.name),
                    'delete_url': '/{0}/filedelete_handle'.format(node.name),
                    'delete_type': 'GET',
                })
            return files

Optionally we might want to provide a custom fileupload tile for our model.

.. code-block:: python

    from cone.tile import tile
    from cone.fileupload.browser.fileupload import FileUploadTile

    @tile(
        name='fileupload',
        path='cone.fileupload:browser/fileupload.pt',
        interface=Container,
        permission='add')
    class ContainerFileUploadTile(FileUploadTile):
        accept_file_types = r'/(\.|\/)(gif|jpg)$/i'

The file upload actions are either rendered as dedicated tile by name
``fileupload_toolbar`` or integrated into the context menu. If it's desired to
display the action in the context menu, ``fileupload_contextmenu_actions``
flag must be set on model ``properties``.


Contributors
============

- Robert Niederreiter


Changes
=======

1.0a1 (2023-05-15)
------------------

- Use ``webresource`` for resource registration.
  [rnix]

- Replace deprecated use of ``allow_non_node_children`` by ``child_constraints``.
  [rnix]


0.7 (2022-01-19)
----------------

- Modernize JavaScript setup.

- Add ``i18n_messages_src``, ``upload_template_src`` and
  ``download_template_src`` attributes to ``FileUploadTile``.

- Add optional ``download_url`` to file data dict.

- Remove ``thumbnailUrl`` from file data dict.

**Breaking Changes**

- Rename ``url`` to ``view_url`` in file data dict.

- Rename ``deleteUrl`` to ``delete_url`` in file data dict.

- Rename ``deleteType`` to ``delete_type`` in file data dict.


0.6 (2021-11-21)
----------------

- Fileupload actions optionally work from contextmenu.
  [rnix]

- Move button toolbar into dedicated tile for customization.
  [rnix]

- Reduce included files and plugins of jquery fileupload to required ones.
  [rnix]

- Update jquery fileupload to version 10.32.0.
  [rnix]


0.5 (2021-11-08)
----------------

- Rename deprecated ``allow_non_node_childs`` to ``allow_non_node_children``
  in tests and documentation.
  [rnix]


0.4 (2020-05-30)
----------------

- Initial pypi release
  [rnix]


0.3
---

- Python 3 compatibility.
  [rnix]

- Convert doctests to unittests.
  [rnix]

- Use ``cone.app.main_hook`` decorator.
  [rnix]

- Move resource registration to main hook.
  [rnix]

- Upgrade to ``cone.app`` 1.0b1.
  [rnix]


0.2
---

- Code organization.
  [rnix]


0.1
---

- Make it work
  [rnix]


License
=======

Copyright (c) 2013-2021, BlueDynamics Alliance, Austria
Copyright (c) 2021-2022, Cone Contributors
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

* Redistributions of source code must retain the above copyright notice, this
  list of conditions and the following disclaimer.

* Redistributions in binary form must reproduce the above copyright notice, this
  list of conditions and the following disclaimer in the documentation and/or
  other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
