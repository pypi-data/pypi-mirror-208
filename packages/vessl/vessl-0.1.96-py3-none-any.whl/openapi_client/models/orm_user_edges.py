# coding: utf-8

"""
    Aron API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class OrmUserEdges(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'access_tokens': 'list[OrmAccessToken]',
        'cluster_quotas': 'list[OrmClusterQuota]',
        'credit_earn_histories': 'list[OrmCreditEarnHistory]',
        'default_organization': 'OrmOrganization',
        'experiments': 'list[OrmExperiment]',
        'model_service_revisions': 'list[OrmModelServiceRevision]',
        'model_service_rollouts': 'list[OrmModelServiceRollout]',
        'model_services': 'list[OrmModelService]',
        'models': 'list[OrmModel]',
        'pipelines': 'list[OrmPipeline]',
        'project_dashboards': 'list[OrmProjectDashboard]',
        'reset_password_tokens': 'list[OrmResetPasswordToken]',
        'starred_dashboards': 'list[OrmProjectDashboard]',
        'triggered_pipeline_executions': 'list[OrmPipelineExecution]',
        'user_organization': 'list[OrmUserOrganization]',
        'workspaces': 'list[OrmWorkspace]'
    }

    attribute_map = {
        'access_tokens': 'access_tokens',
        'cluster_quotas': 'cluster_quotas',
        'credit_earn_histories': 'credit_earn_histories',
        'default_organization': 'default_organization',
        'experiments': 'experiments',
        'model_service_revisions': 'model_service_revisions',
        'model_service_rollouts': 'model_service_rollouts',
        'model_services': 'model_services',
        'models': 'models',
        'pipelines': 'pipelines',
        'project_dashboards': 'project_dashboards',
        'reset_password_tokens': 'reset_password_tokens',
        'starred_dashboards': 'starred_dashboards',
        'triggered_pipeline_executions': 'triggered_pipeline_executions',
        'user_organization': 'user_organization',
        'workspaces': 'workspaces'
    }

    def __init__(self, access_tokens=None, cluster_quotas=None, credit_earn_histories=None, default_organization=None, experiments=None, model_service_revisions=None, model_service_rollouts=None, model_services=None, models=None, pipelines=None, project_dashboards=None, reset_password_tokens=None, starred_dashboards=None, triggered_pipeline_executions=None, user_organization=None, workspaces=None, local_vars_configuration=None):  # noqa: E501
        """OrmUserEdges - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._access_tokens = None
        self._cluster_quotas = None
        self._credit_earn_histories = None
        self._default_organization = None
        self._experiments = None
        self._model_service_revisions = None
        self._model_service_rollouts = None
        self._model_services = None
        self._models = None
        self._pipelines = None
        self._project_dashboards = None
        self._reset_password_tokens = None
        self._starred_dashboards = None
        self._triggered_pipeline_executions = None
        self._user_organization = None
        self._workspaces = None
        self.discriminator = None

        if access_tokens is not None:
            self.access_tokens = access_tokens
        if cluster_quotas is not None:
            self.cluster_quotas = cluster_quotas
        if credit_earn_histories is not None:
            self.credit_earn_histories = credit_earn_histories
        if default_organization is not None:
            self.default_organization = default_organization
        if experiments is not None:
            self.experiments = experiments
        if model_service_revisions is not None:
            self.model_service_revisions = model_service_revisions
        if model_service_rollouts is not None:
            self.model_service_rollouts = model_service_rollouts
        if model_services is not None:
            self.model_services = model_services
        if models is not None:
            self.models = models
        if pipelines is not None:
            self.pipelines = pipelines
        if project_dashboards is not None:
            self.project_dashboards = project_dashboards
        if reset_password_tokens is not None:
            self.reset_password_tokens = reset_password_tokens
        if starred_dashboards is not None:
            self.starred_dashboards = starred_dashboards
        if triggered_pipeline_executions is not None:
            self.triggered_pipeline_executions = triggered_pipeline_executions
        if user_organization is not None:
            self.user_organization = user_organization
        if workspaces is not None:
            self.workspaces = workspaces

    @property
    def access_tokens(self):
        """Gets the access_tokens of this OrmUserEdges.  # noqa: E501


        :return: The access_tokens of this OrmUserEdges.  # noqa: E501
        :rtype: list[OrmAccessToken]
        """
        return self._access_tokens

    @access_tokens.setter
    def access_tokens(self, access_tokens):
        """Sets the access_tokens of this OrmUserEdges.


        :param access_tokens: The access_tokens of this OrmUserEdges.  # noqa: E501
        :type access_tokens: list[OrmAccessToken]
        """

        self._access_tokens = access_tokens

    @property
    def cluster_quotas(self):
        """Gets the cluster_quotas of this OrmUserEdges.  # noqa: E501


        :return: The cluster_quotas of this OrmUserEdges.  # noqa: E501
        :rtype: list[OrmClusterQuota]
        """
        return self._cluster_quotas

    @cluster_quotas.setter
    def cluster_quotas(self, cluster_quotas):
        """Sets the cluster_quotas of this OrmUserEdges.


        :param cluster_quotas: The cluster_quotas of this OrmUserEdges.  # noqa: E501
        :type cluster_quotas: list[OrmClusterQuota]
        """

        self._cluster_quotas = cluster_quotas

    @property
    def credit_earn_histories(self):
        """Gets the credit_earn_histories of this OrmUserEdges.  # noqa: E501


        :return: The credit_earn_histories of this OrmUserEdges.  # noqa: E501
        :rtype: list[OrmCreditEarnHistory]
        """
        return self._credit_earn_histories

    @credit_earn_histories.setter
    def credit_earn_histories(self, credit_earn_histories):
        """Sets the credit_earn_histories of this OrmUserEdges.


        :param credit_earn_histories: The credit_earn_histories of this OrmUserEdges.  # noqa: E501
        :type credit_earn_histories: list[OrmCreditEarnHistory]
        """

        self._credit_earn_histories = credit_earn_histories

    @property
    def default_organization(self):
        """Gets the default_organization of this OrmUserEdges.  # noqa: E501


        :return: The default_organization of this OrmUserEdges.  # noqa: E501
        :rtype: OrmOrganization
        """
        return self._default_organization

    @default_organization.setter
    def default_organization(self, default_organization):
        """Sets the default_organization of this OrmUserEdges.


        :param default_organization: The default_organization of this OrmUserEdges.  # noqa: E501
        :type default_organization: OrmOrganization
        """

        self._default_organization = default_organization

    @property
    def experiments(self):
        """Gets the experiments of this OrmUserEdges.  # noqa: E501


        :return: The experiments of this OrmUserEdges.  # noqa: E501
        :rtype: list[OrmExperiment]
        """
        return self._experiments

    @experiments.setter
    def experiments(self, experiments):
        """Sets the experiments of this OrmUserEdges.


        :param experiments: The experiments of this OrmUserEdges.  # noqa: E501
        :type experiments: list[OrmExperiment]
        """

        self._experiments = experiments

    @property
    def model_service_revisions(self):
        """Gets the model_service_revisions of this OrmUserEdges.  # noqa: E501


        :return: The model_service_revisions of this OrmUserEdges.  # noqa: E501
        :rtype: list[OrmModelServiceRevision]
        """
        return self._model_service_revisions

    @model_service_revisions.setter
    def model_service_revisions(self, model_service_revisions):
        """Sets the model_service_revisions of this OrmUserEdges.


        :param model_service_revisions: The model_service_revisions of this OrmUserEdges.  # noqa: E501
        :type model_service_revisions: list[OrmModelServiceRevision]
        """

        self._model_service_revisions = model_service_revisions

    @property
    def model_service_rollouts(self):
        """Gets the model_service_rollouts of this OrmUserEdges.  # noqa: E501


        :return: The model_service_rollouts of this OrmUserEdges.  # noqa: E501
        :rtype: list[OrmModelServiceRollout]
        """
        return self._model_service_rollouts

    @model_service_rollouts.setter
    def model_service_rollouts(self, model_service_rollouts):
        """Sets the model_service_rollouts of this OrmUserEdges.


        :param model_service_rollouts: The model_service_rollouts of this OrmUserEdges.  # noqa: E501
        :type model_service_rollouts: list[OrmModelServiceRollout]
        """

        self._model_service_rollouts = model_service_rollouts

    @property
    def model_services(self):
        """Gets the model_services of this OrmUserEdges.  # noqa: E501


        :return: The model_services of this OrmUserEdges.  # noqa: E501
        :rtype: list[OrmModelService]
        """
        return self._model_services

    @model_services.setter
    def model_services(self, model_services):
        """Sets the model_services of this OrmUserEdges.


        :param model_services: The model_services of this OrmUserEdges.  # noqa: E501
        :type model_services: list[OrmModelService]
        """

        self._model_services = model_services

    @property
    def models(self):
        """Gets the models of this OrmUserEdges.  # noqa: E501


        :return: The models of this OrmUserEdges.  # noqa: E501
        :rtype: list[OrmModel]
        """
        return self._models

    @models.setter
    def models(self, models):
        """Sets the models of this OrmUserEdges.


        :param models: The models of this OrmUserEdges.  # noqa: E501
        :type models: list[OrmModel]
        """

        self._models = models

    @property
    def pipelines(self):
        """Gets the pipelines of this OrmUserEdges.  # noqa: E501


        :return: The pipelines of this OrmUserEdges.  # noqa: E501
        :rtype: list[OrmPipeline]
        """
        return self._pipelines

    @pipelines.setter
    def pipelines(self, pipelines):
        """Sets the pipelines of this OrmUserEdges.


        :param pipelines: The pipelines of this OrmUserEdges.  # noqa: E501
        :type pipelines: list[OrmPipeline]
        """

        self._pipelines = pipelines

    @property
    def project_dashboards(self):
        """Gets the project_dashboards of this OrmUserEdges.  # noqa: E501


        :return: The project_dashboards of this OrmUserEdges.  # noqa: E501
        :rtype: list[OrmProjectDashboard]
        """
        return self._project_dashboards

    @project_dashboards.setter
    def project_dashboards(self, project_dashboards):
        """Sets the project_dashboards of this OrmUserEdges.


        :param project_dashboards: The project_dashboards of this OrmUserEdges.  # noqa: E501
        :type project_dashboards: list[OrmProjectDashboard]
        """

        self._project_dashboards = project_dashboards

    @property
    def reset_password_tokens(self):
        """Gets the reset_password_tokens of this OrmUserEdges.  # noqa: E501


        :return: The reset_password_tokens of this OrmUserEdges.  # noqa: E501
        :rtype: list[OrmResetPasswordToken]
        """
        return self._reset_password_tokens

    @reset_password_tokens.setter
    def reset_password_tokens(self, reset_password_tokens):
        """Sets the reset_password_tokens of this OrmUserEdges.


        :param reset_password_tokens: The reset_password_tokens of this OrmUserEdges.  # noqa: E501
        :type reset_password_tokens: list[OrmResetPasswordToken]
        """

        self._reset_password_tokens = reset_password_tokens

    @property
    def starred_dashboards(self):
        """Gets the starred_dashboards of this OrmUserEdges.  # noqa: E501


        :return: The starred_dashboards of this OrmUserEdges.  # noqa: E501
        :rtype: list[OrmProjectDashboard]
        """
        return self._starred_dashboards

    @starred_dashboards.setter
    def starred_dashboards(self, starred_dashboards):
        """Sets the starred_dashboards of this OrmUserEdges.


        :param starred_dashboards: The starred_dashboards of this OrmUserEdges.  # noqa: E501
        :type starred_dashboards: list[OrmProjectDashboard]
        """

        self._starred_dashboards = starred_dashboards

    @property
    def triggered_pipeline_executions(self):
        """Gets the triggered_pipeline_executions of this OrmUserEdges.  # noqa: E501


        :return: The triggered_pipeline_executions of this OrmUserEdges.  # noqa: E501
        :rtype: list[OrmPipelineExecution]
        """
        return self._triggered_pipeline_executions

    @triggered_pipeline_executions.setter
    def triggered_pipeline_executions(self, triggered_pipeline_executions):
        """Sets the triggered_pipeline_executions of this OrmUserEdges.


        :param triggered_pipeline_executions: The triggered_pipeline_executions of this OrmUserEdges.  # noqa: E501
        :type triggered_pipeline_executions: list[OrmPipelineExecution]
        """

        self._triggered_pipeline_executions = triggered_pipeline_executions

    @property
    def user_organization(self):
        """Gets the user_organization of this OrmUserEdges.  # noqa: E501


        :return: The user_organization of this OrmUserEdges.  # noqa: E501
        :rtype: list[OrmUserOrganization]
        """
        return self._user_organization

    @user_organization.setter
    def user_organization(self, user_organization):
        """Sets the user_organization of this OrmUserEdges.


        :param user_organization: The user_organization of this OrmUserEdges.  # noqa: E501
        :type user_organization: list[OrmUserOrganization]
        """

        self._user_organization = user_organization

    @property
    def workspaces(self):
        """Gets the workspaces of this OrmUserEdges.  # noqa: E501


        :return: The workspaces of this OrmUserEdges.  # noqa: E501
        :rtype: list[OrmWorkspace]
        """
        return self._workspaces

    @workspaces.setter
    def workspaces(self, workspaces):
        """Sets the workspaces of this OrmUserEdges.


        :param workspaces: The workspaces of this OrmUserEdges.  # noqa: E501
        :type workspaces: list[OrmWorkspace]
        """

        self._workspaces = workspaces

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrmUserEdges):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OrmUserEdges):
            return True

        return self.to_dict() != other.to_dict()
