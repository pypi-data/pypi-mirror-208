# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from contek_viper.execution import execution_service_pb2 as contek__viper_dot_execution_dot_execution__service__pb2


class ExecutionServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SubmitTrigger = channel.unary_unary(
                '/contek_viper.execution.ExecutionService/SubmitTrigger',
                request_serializer=contek__viper_dot_execution_dot_execution__service__pb2.SubmitTriggerRequest.SerializeToString,
                response_deserializer=contek__viper_dot_execution_dot_execution__service__pb2.SubmitTriggerResponse.FromString,
                )


class ExecutionServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def SubmitTrigger(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ExecutionServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SubmitTrigger': grpc.unary_unary_rpc_method_handler(
                    servicer.SubmitTrigger,
                    request_deserializer=contek__viper_dot_execution_dot_execution__service__pb2.SubmitTriggerRequest.FromString,
                    response_serializer=contek__viper_dot_execution_dot_execution__service__pb2.SubmitTriggerResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'contek_viper.execution.ExecutionService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ExecutionService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def SubmitTrigger(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/contek_viper.execution.ExecutionService/SubmitTrigger',
            contek__viper_dot_execution_dot_execution__service__pb2.SubmitTriggerRequest.SerializeToString,
            contek__viper_dot_execution_dot_execution__service__pb2.SubmitTriggerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
