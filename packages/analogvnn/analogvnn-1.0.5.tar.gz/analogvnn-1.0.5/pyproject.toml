# pyproject-build

[build-system]
requires = ["wheel", "setuptools>=61.0.0", "flit_core >=3.2,<4"]
#build-backend = "setuptools.build_meta"
build-backend = "flit_core.buildapi"

[tool.flit.module]
name = "analogvnn"

[tool.setuptools]
py-modules = ['analogvnn']

[project]
# $ pip install analogvnn
name = "analogvnn"
version = "1.0.5"
description = "A fully modular framework for modeling and optimizing analog/photonic neural networks"  # Optional
readme = "README.md"
requires-python = ">=3.7"
license = { file = "LICENSE" }
keywords = ["deep-learning", "analog", "photonics", "neural-network", "framework", "pytorch"]
authors = [
    { name = "Vivswan Shah", email = "vivswanshah@pitt.edu" }
]
maintainers = [
    { name = "Vivswan Shah", email = "vivswanshah@pitt.edu" }
]
# For a list of valid classifiers, see https://pypi.org/classifiers/
classifiers = [# Optional
    # How mature is this project? Common values are
    #   3 - Alpha
    #   4 - Beta
    #   5 - Production/Stable
    "Development Status :: 5 - Production/Stable",
    # Indicate who your project is intended for
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "Topic :: Software Development :: Build Tools",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
    # Pick your license as you wish
    "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
    # Specify the Python versions you support here. In particular, ensure
    # that you indicate you support Python 3. These classifiers are *not*
    # checked by "pip install". See instead "python_requires" below.
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.7",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3 :: Only",
]

# This field lists other packages that your project depends on to run.
# Any package you put here will be installed by pip when your project is
# installed, so they must be valid existing projects.
#
# For an analysis of this field vs pip's requirements files see:
# https://packaging.python.org/discussions/install-requires-vs-requirements/
dependencies = [
    "dataclasses",
    "scipy",
    "numpy>=1.16.5",
    "networkx",
    "importlib-metadata<5.0.0,>=2.0.0; python_version < '3.8'",
]

# List additional groups of dependencies here (e.g. development
# dependencies). Users will be able to install these using the "extras"
# syntax, for example:
#
#   $ pip install analogvnn[dev]
#
# Similar to `dependencies` above, these must be valid existing
# projects.
[project.optional-dependencies]
full = [
    "tensorflow",
    "tensorboard",
    "torchinfo",
    "graphviz",
    #"python-graphviz",
]
doc = [
    "sphinx>=4.2.0",
    "sphinx-autobuild",
    "rst-to-myst[sphinx]",
    "furo",
    "myst_parser",
    "sphinx-rtd-theme",
    "sphinx-autoapi",
    "sphinx-copybutton",
    "sphinx-notfound-page",
    "sphinx-inline-tabs",
    "sphinxext-opengraph",
    "sphinxcontrib-katex", # for math
]
flake8 = [
    "flake8",
    "flake8-docstrings",
    "flake8-quotes",
    "flake8-bugbear",
    "flake8-comprehensions",
    "flake8-executable",
    "flake8-coding",
    "flake8-return",
#    "flake8-noreturn; python_version >= '3.8'",
    "flake8-deprecated",
]
dev = [
    "flit", # for building {flit build}
    "setuptools>=61.0.0",
    "build", # building the package {pyproject-build}
    "twine", # to publish on pypi {twine upload --repository-url=https://test.pypi.org/legacy/ dist/*} {twine upload dist/*}
    "johnnydep", # to see dependencies {johnnydep <package>}
]
test = ["analogvnn[flake8]"]
all = ["analogvnn[full,dev,doc,test]"]

[project.urls]
"Author" = "https://vivswan.github.io/"
"Bug Reports" = "https://github.com/Vivswan/AnalogVNN/issues"
"Documentation" = "https://analogvnn.readthedocs.io/en/latest/"
"Homepage" = "https://github.com/Vivswan/AnalogVNN"
"Say Thanks!" = "https://vivswan.github.io/"
"Source" = "https://github.com/Vivswan/AnalogVNN"

# The following would provide a command line executable called `sample`
# which executes the function `main` from this package when invoked.
#[project.scripts]  # Optional
#sample = "sample:main"