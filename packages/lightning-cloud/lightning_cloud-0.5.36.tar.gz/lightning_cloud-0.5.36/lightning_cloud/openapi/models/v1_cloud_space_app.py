# coding: utf-8
"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set

    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

import pprint
import re  # noqa: F401

from typing import TYPE_CHECKING

import six

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_cloud.openapi.models import *


class V1CloudSpaceApp(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'authors': 'list[str]',
        'categories': 'list[str]',
        'components': 'list[str]',
        'description': 'str',
        'display_name': 'str',
        'entrypoint_file': 'str',
        'git_url': 'str',
        'id': 'str',
        'license': 'str',
        'name': 'str',
        'org_logo': 'str',
        'organization': 'str',
        'short_description': 'str',
        'source_url': 'str',
        'tags': 'list[str]',
        'template_tags': 'list[str]',
        'thumbnail': 'str',
        'version': 'str',
        'video': 'str',
        'visibility': 'str'
    }

    attribute_map = {
        'authors': 'authors',
        'categories': 'categories',
        'components': 'components',
        'description': 'description',
        'display_name': 'displayName',
        'entrypoint_file': 'entrypointFile',
        'git_url': 'gitUrl',
        'id': 'id',
        'license': 'license',
        'name': 'name',
        'org_logo': 'orgLogo',
        'organization': 'organization',
        'short_description': 'shortDescription',
        'source_url': 'sourceUrl',
        'tags': 'tags',
        'template_tags': 'templateTags',
        'thumbnail': 'thumbnail',
        'version': 'version',
        'video': 'video',
        'visibility': 'visibility'
    }

    def __init__(self,
                 authors: 'list[str]' = None,
                 categories: 'list[str]' = None,
                 components: 'list[str]' = None,
                 description: 'str' = None,
                 display_name: 'str' = None,
                 entrypoint_file: 'str' = None,
                 git_url: 'str' = None,
                 id: 'str' = None,
                 license: 'str' = None,
                 name: 'str' = None,
                 org_logo: 'str' = None,
                 organization: 'str' = None,
                 short_description: 'str' = None,
                 source_url: 'str' = None,
                 tags: 'list[str]' = None,
                 template_tags: 'list[str]' = None,
                 thumbnail: 'str' = None,
                 version: 'str' = None,
                 video: 'str' = None,
                 visibility: 'str' = None):  # noqa: E501
        """V1CloudSpaceApp - a model defined in Swagger"""  # noqa: E501
        self._authors = None
        self._categories = None
        self._components = None
        self._description = None
        self._display_name = None
        self._entrypoint_file = None
        self._git_url = None
        self._id = None
        self._license = None
        self._name = None
        self._org_logo = None
        self._organization = None
        self._short_description = None
        self._source_url = None
        self._tags = None
        self._template_tags = None
        self._thumbnail = None
        self._version = None
        self._video = None
        self._visibility = None
        self.discriminator = None
        if authors is not None:
            self.authors = authors
        if categories is not None:
            self.categories = categories
        if components is not None:
            self.components = components
        if description is not None:
            self.description = description
        if display_name is not None:
            self.display_name = display_name
        if entrypoint_file is not None:
            self.entrypoint_file = entrypoint_file
        if git_url is not None:
            self.git_url = git_url
        if id is not None:
            self.id = id
        if license is not None:
            self.license = license
        if name is not None:
            self.name = name
        if org_logo is not None:
            self.org_logo = org_logo
        if organization is not None:
            self.organization = organization
        if short_description is not None:
            self.short_description = short_description
        if source_url is not None:
            self.source_url = source_url
        if tags is not None:
            self.tags = tags
        if template_tags is not None:
            self.template_tags = template_tags
        if thumbnail is not None:
            self.thumbnail = thumbnail
        if version is not None:
            self.version = version
        if video is not None:
            self.video = video
        if visibility is not None:
            self.visibility = visibility

    @property
    def authors(self) -> 'list[str]':
        """Gets the authors of this V1CloudSpaceApp.  # noqa: E501


        :return: The authors of this V1CloudSpaceApp.  # noqa: E501
        :rtype: list[str]
        """
        return self._authors

    @authors.setter
    def authors(self, authors: 'list[str]'):
        """Sets the authors of this V1CloudSpaceApp.


        :param authors: The authors of this V1CloudSpaceApp.  # noqa: E501
        :type: list[str]
        """

        self._authors = authors

    @property
    def categories(self) -> 'list[str]':
        """Gets the categories of this V1CloudSpaceApp.  # noqa: E501


        :return: The categories of this V1CloudSpaceApp.  # noqa: E501
        :rtype: list[str]
        """
        return self._categories

    @categories.setter
    def categories(self, categories: 'list[str]'):
        """Sets the categories of this V1CloudSpaceApp.


        :param categories: The categories of this V1CloudSpaceApp.  # noqa: E501
        :type: list[str]
        """

        self._categories = categories

    @property
    def components(self) -> 'list[str]':
        """Gets the components of this V1CloudSpaceApp.  # noqa: E501


        :return: The components of this V1CloudSpaceApp.  # noqa: E501
        :rtype: list[str]
        """
        return self._components

    @components.setter
    def components(self, components: 'list[str]'):
        """Sets the components of this V1CloudSpaceApp.


        :param components: The components of this V1CloudSpaceApp.  # noqa: E501
        :type: list[str]
        """

        self._components = components

    @property
    def description(self) -> 'str':
        """Gets the description of this V1CloudSpaceApp.  # noqa: E501


        :return: The description of this V1CloudSpaceApp.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: 'str'):
        """Sets the description of this V1CloudSpaceApp.


        :param description: The description of this V1CloudSpaceApp.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def display_name(self) -> 'str':
        """Gets the display_name of this V1CloudSpaceApp.  # noqa: E501


        :return: The display_name of this V1CloudSpaceApp.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name: 'str'):
        """Sets the display_name of this V1CloudSpaceApp.


        :param display_name: The display_name of this V1CloudSpaceApp.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def entrypoint_file(self) -> 'str':
        """Gets the entrypoint_file of this V1CloudSpaceApp.  # noqa: E501


        :return: The entrypoint_file of this V1CloudSpaceApp.  # noqa: E501
        :rtype: str
        """
        return self._entrypoint_file

    @entrypoint_file.setter
    def entrypoint_file(self, entrypoint_file: 'str'):
        """Sets the entrypoint_file of this V1CloudSpaceApp.


        :param entrypoint_file: The entrypoint_file of this V1CloudSpaceApp.  # noqa: E501
        :type: str
        """

        self._entrypoint_file = entrypoint_file

    @property
    def git_url(self) -> 'str':
        """Gets the git_url of this V1CloudSpaceApp.  # noqa: E501


        :return: The git_url of this V1CloudSpaceApp.  # noqa: E501
        :rtype: str
        """
        return self._git_url

    @git_url.setter
    def git_url(self, git_url: 'str'):
        """Sets the git_url of this V1CloudSpaceApp.


        :param git_url: The git_url of this V1CloudSpaceApp.  # noqa: E501
        :type: str
        """

        self._git_url = git_url

    @property
    def id(self) -> 'str':
        """Gets the id of this V1CloudSpaceApp.  # noqa: E501


        :return: The id of this V1CloudSpaceApp.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: 'str'):
        """Sets the id of this V1CloudSpaceApp.


        :param id: The id of this V1CloudSpaceApp.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def license(self) -> 'str':
        """Gets the license of this V1CloudSpaceApp.  # noqa: E501


        :return: The license of this V1CloudSpaceApp.  # noqa: E501
        :rtype: str
        """
        return self._license

    @license.setter
    def license(self, license: 'str'):
        """Sets the license of this V1CloudSpaceApp.


        :param license: The license of this V1CloudSpaceApp.  # noqa: E501
        :type: str
        """

        self._license = license

    @property
    def name(self) -> 'str':
        """Gets the name of this V1CloudSpaceApp.  # noqa: E501


        :return: The name of this V1CloudSpaceApp.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: 'str'):
        """Sets the name of this V1CloudSpaceApp.


        :param name: The name of this V1CloudSpaceApp.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def org_logo(self) -> 'str':
        """Gets the org_logo of this V1CloudSpaceApp.  # noqa: E501


        :return: The org_logo of this V1CloudSpaceApp.  # noqa: E501
        :rtype: str
        """
        return self._org_logo

    @org_logo.setter
    def org_logo(self, org_logo: 'str'):
        """Sets the org_logo of this V1CloudSpaceApp.


        :param org_logo: The org_logo of this V1CloudSpaceApp.  # noqa: E501
        :type: str
        """

        self._org_logo = org_logo

    @property
    def organization(self) -> 'str':
        """Gets the organization of this V1CloudSpaceApp.  # noqa: E501


        :return: The organization of this V1CloudSpaceApp.  # noqa: E501
        :rtype: str
        """
        return self._organization

    @organization.setter
    def organization(self, organization: 'str'):
        """Sets the organization of this V1CloudSpaceApp.


        :param organization: The organization of this V1CloudSpaceApp.  # noqa: E501
        :type: str
        """

        self._organization = organization

    @property
    def short_description(self) -> 'str':
        """Gets the short_description of this V1CloudSpaceApp.  # noqa: E501


        :return: The short_description of this V1CloudSpaceApp.  # noqa: E501
        :rtype: str
        """
        return self._short_description

    @short_description.setter
    def short_description(self, short_description: 'str'):
        """Sets the short_description of this V1CloudSpaceApp.


        :param short_description: The short_description of this V1CloudSpaceApp.  # noqa: E501
        :type: str
        """

        self._short_description = short_description

    @property
    def source_url(self) -> 'str':
        """Gets the source_url of this V1CloudSpaceApp.  # noqa: E501


        :return: The source_url of this V1CloudSpaceApp.  # noqa: E501
        :rtype: str
        """
        return self._source_url

    @source_url.setter
    def source_url(self, source_url: 'str'):
        """Sets the source_url of this V1CloudSpaceApp.


        :param source_url: The source_url of this V1CloudSpaceApp.  # noqa: E501
        :type: str
        """

        self._source_url = source_url

    @property
    def tags(self) -> 'list[str]':
        """Gets the tags of this V1CloudSpaceApp.  # noqa: E501


        :return: The tags of this V1CloudSpaceApp.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags: 'list[str]'):
        """Sets the tags of this V1CloudSpaceApp.


        :param tags: The tags of this V1CloudSpaceApp.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    @property
    def template_tags(self) -> 'list[str]':
        """Gets the template_tags of this V1CloudSpaceApp.  # noqa: E501


        :return: The template_tags of this V1CloudSpaceApp.  # noqa: E501
        :rtype: list[str]
        """
        return self._template_tags

    @template_tags.setter
    def template_tags(self, template_tags: 'list[str]'):
        """Sets the template_tags of this V1CloudSpaceApp.


        :param template_tags: The template_tags of this V1CloudSpaceApp.  # noqa: E501
        :type: list[str]
        """

        self._template_tags = template_tags

    @property
    def thumbnail(self) -> 'str':
        """Gets the thumbnail of this V1CloudSpaceApp.  # noqa: E501


        :return: The thumbnail of this V1CloudSpaceApp.  # noqa: E501
        :rtype: str
        """
        return self._thumbnail

    @thumbnail.setter
    def thumbnail(self, thumbnail: 'str'):
        """Sets the thumbnail of this V1CloudSpaceApp.


        :param thumbnail: The thumbnail of this V1CloudSpaceApp.  # noqa: E501
        :type: str
        """

        self._thumbnail = thumbnail

    @property
    def version(self) -> 'str':
        """Gets the version of this V1CloudSpaceApp.  # noqa: E501


        :return: The version of this V1CloudSpaceApp.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version: 'str'):
        """Sets the version of this V1CloudSpaceApp.


        :param version: The version of this V1CloudSpaceApp.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def video(self) -> 'str':
        """Gets the video of this V1CloudSpaceApp.  # noqa: E501


        :return: The video of this V1CloudSpaceApp.  # noqa: E501
        :rtype: str
        """
        return self._video

    @video.setter
    def video(self, video: 'str'):
        """Sets the video of this V1CloudSpaceApp.


        :param video: The video of this V1CloudSpaceApp.  # noqa: E501
        :type: str
        """

        self._video = video

    @property
    def visibility(self) -> 'str':
        """Gets the visibility of this V1CloudSpaceApp.  # noqa: E501


        :return: The visibility of this V1CloudSpaceApp.  # noqa: E501
        :rtype: str
        """
        return self._visibility

    @visibility.setter
    def visibility(self, visibility: 'str'):
        """Sets the visibility of this V1CloudSpaceApp.


        :param visibility: The visibility of this V1CloudSpaceApp.  # noqa: E501
        :type: str
        """

        self._visibility = visibility

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict()
                        if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()))
            else:
                result[attr] = value
        if issubclass(V1CloudSpaceApp, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'V1CloudSpaceApp') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, V1CloudSpaceApp):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: 'V1CloudSpaceApp') -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
