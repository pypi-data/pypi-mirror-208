import socket
import io
import pathlib
from http.client import HTTPConnection, HTTPResponse


class TeeReadingFile:
    """
    A file-like object which wraps a file. All the data read from that file ("src")
    is copied and written to another file ("dst").

    Implements the file-like interface used by http.client.HTTPResponse.
    """
    def __init__(self, src, dst):
        self.src = src
        self.dst = dst

    def write(self, data):
        return self.dst.write(data)

    def read(self, amt=None):
        data = self.src.read(amt)
        self.dst.write(data)
        return data

    def close(self):
        self.src.close()
        self.dst.close()

    def readinto(self, b):
        n = self.src.readinto(b)
        if n is not None:
            self.dst.write(b[:n])
        return data

    def readall(self):
        data = self.src.readall()
        self.dst.write(data)
        return data

    def flush(self):
        self.src.flush()
        self.dst.flush()

    def readline(self, limit=-1):
        data = self.src.readline(limit)
        self.dst.write(data)
        return data

    def read1(self, amt=None):
        data = self.src.read1(amt)
        self.dst.write(data)
        return data

    def peek(self, amt=None):
        return self.src.peek(amt)

    def fileno(self):
        return self.src.fileno()


class TeeHTTPResponse(HTTPResponse):
    """
    A HTTPResponse which copies all the data read from the socket to a file.

    It still acts like a normal HTTPResponse in all other ways.
    """
    def __init__(self, file, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.fp = TeeReadingFile(src=self.fp, dst=file)


class TeeHTTPConnection(HTTPConnection):
    """
    A HTTPConnection which copies all the data read from the socket to files.

    The files are determined by a filepath_factory, which is a function which
    takes the method, host, port and url and returns a pathlib.Path.

    This class is not safe for concurrent use.
    """
    response_class = TeeHTTPResponse

    def __init__(self, filepath_factory, host, port=None, timeout=socket._GLOBAL_DEFAULT_TIMEOUT,
                 source_address=None, blocksize=8192):
        super().__init__(host, port, timeout, source_address, blocksize)
        self.filepath_factory = filepath_factory

    def request(self, method, url, *args, **kwargs):
        path = self.filepath_factory(method, self.host, self.port, url)
        self._file = open(path, "wb")
        self.response_class = self.response_class_factory()
        return super().request(method, url, *args, **kwargs)

    def response_class_factory(self):
        def response_class(*args, **kwargs):
            return TeeHTTPResponse(self._file, *args, **kwargs)
        return response_class


def filepath_factory(method, host, port, url) -> pathlib.Path:
    path = f"{method}/{host}:{port}/{url}}"
