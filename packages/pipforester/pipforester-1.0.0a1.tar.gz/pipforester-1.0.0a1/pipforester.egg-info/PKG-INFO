Metadata-Version: 2.1
Name: pipforester
Version: 1.0.0a1
Summary: A tool to analyze the dependency graph of a pip package.
Author-email: Jens Klein et al <jk@kleinundpartner.at>
License: BSD 2-Clause License
Project-URL: Homepage, https://github.com/collective/pipforester
Project-URL: Bug Reports, https://github.com/collective/pipforester/issues
Project-URL: Source, https://github.com/collective/pipforester/
Keywords: pip,graph,analysis
Classifier: Development Status :: 3 - Alpha
Classifier: Intended Audience :: Developers
Classifier: Topic :: Software Development :: Build Tools
Classifier: License :: OSI Approved :: BSD License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Requires-Python: >=3.7
Description-Content-Type: text/markdown
Provides-Extra: test
License-File: LICENSE.md

# pipforester

Forester tools for [pipdeptree](https://pypi.org/project/pipdeptree/) outputs to analyze the dependency graph of a pip package.

## Features

- clean up a graph to remove direct dependencies if a transitive dependency exists
- detect transitive cyclic dependencies (and color them in output)

## Usage

Important: *pipdeptree* **MUST** be installed in an environment together with the dependencies you want to check.  If you install *pipdeptree* in virtual environment 1 and then call it in the directory of virtual environment 2, it will only report on its own dependencies, which is not very useful.

First, call *pipdeptree* to create a JSON file of the installed dependencies,
and second call *pipforester* to create a cleaned-up dot file.

```shell
pipdeptree -j >forest.json
pipforester -i forest.json -o forest.dot
```

Finally use a Graphviz DOT-file visualizer, i.e. *xdot* on Linux, to view the graph.
Or use the *dot* command line program to generate an svg or png:

```
dot -Tsvg -o forest.svg forest.dot
dot -Tpng -o forest.png forest.dot
```

To generate a graph containing only cyclic transitive dependencies, use the `--cycles` option:

```shell
pipdeptree -j >forest.json
pipforester -i forest.json -o forest.dot --cycles
```

To detect cyclic transitive dependencies and exit with `1` if there is at least one, use the `--check-cycles` option.
It does not generate an output graph and is meant for usage in CI.

```shell
pipdeptree -j >forest.json
pipforester -i forest.json --check-cycles
```

See `pipforester --help` for details.


## Changes

## 1.0.0a1 (2023-05-15)

- initial code [jensens]
# License

Copyright (c) 2022-2023, mxstack Contributors

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

* Redistributions of source code must retain the above copyright notice, this
  list of conditions and the following disclaimer.

* Redistributions in binary form must reproduce the above copyright notice, this
  list of conditions and the following disclaimer in the documentation and/or
  other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
