# coding: utf-8

"""
    Netilion API Documentation

    Welcome to the Netilion API Documentation, which provides interactive access and documentation to our REST API.  This section contains new endpoints which are still under development. You're welcome to test them but please note that they still can change anytime!   # noqa: E501

    OpenAPI spec version: 01.00.00
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from netilion_lab_tab_api.api_client import ApiClient


class AddOnApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_addon_api_subscription(self, body, api_subscription_id, **kwargs):  # noqa: E501
        """create add on for subscription  # noqa: E501

        Create a new addon  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_addon_api_subscription(body, api_subscription_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AddOnRequest body: Resources that shall be added. (required)
        :param int api_subscription_id: The ID of the API subscription (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_addon_api_subscription_with_http_info(body, api_subscription_id, **kwargs)  # noqa: E501
        else:
            (data) = self.create_addon_api_subscription_with_http_info(body, api_subscription_id, **kwargs)  # noqa: E501
            return data

    def create_addon_api_subscription_with_http_info(self, body, api_subscription_id, **kwargs):  # noqa: E501
        """create add on for subscription  # noqa: E501

        Create a new addon  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_addon_api_subscription_with_http_info(body, api_subscription_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AddOnRequest body: Resources that shall be added. (required)
        :param int api_subscription_id: The ID of the API subscription (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'api_subscription_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_addon_api_subscription" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_addon_api_subscription`")  # noqa: E501
        # verify the required parameter 'api_subscription_id' is set
        if ('api_subscription_id' not in params or
                params['api_subscription_id'] is None):
            raise ValueError("Missing the required parameter `api_subscription_id` when calling `create_addon_api_subscription`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'api_subscription_id' in params:
            path_params['api_subscription_id'] = params['api_subscription_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API-Key', 'Authentication']  # noqa: E501

        return self.api_client.call_api(
            '/api_subscriptions/{api_subscription_id}/add_ons', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_addon_subscription(self, body, subscription_id, **kwargs):  # noqa: E501
        """create add on for subscription  # noqa: E501

        Create a new addon  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_addon_subscription(body, subscription_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AddOnRequest body: Resources that shall be added. (required)
        :param int subscription_id: Id of the subscription (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_addon_subscription_with_http_info(body, subscription_id, **kwargs)  # noqa: E501
        else:
            (data) = self.create_addon_subscription_with_http_info(body, subscription_id, **kwargs)  # noqa: E501
            return data

    def create_addon_subscription_with_http_info(self, body, subscription_id, **kwargs):  # noqa: E501
        """create add on for subscription  # noqa: E501

        Create a new addon  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_addon_subscription_with_http_info(body, subscription_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AddOnRequest body: Resources that shall be added. (required)
        :param int subscription_id: Id of the subscription (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'subscription_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_addon_subscription" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_addon_subscription`")  # noqa: E501
        # verify the required parameter 'subscription_id' is set
        if ('subscription_id' not in params or
                params['subscription_id'] is None):
            raise ValueError("Missing the required parameter `subscription_id` when calling `create_addon_subscription`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'subscription_id' in params:
            path_params['subscription_id'] = params['subscription_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API-Key', 'Authentication']  # noqa: E501

        return self.api_client.call_api(
            '/subscriptions/{subscription_id}/add_ons', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_api_subscription_add_on(self, api_subscription_id, id, **kwargs):  # noqa: E501
        """Delete an add on  # noqa: E501

        Delete a specific add on identified by the id in the URL.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_api_subscription_add_on(api_subscription_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int api_subscription_id: The ID of the API subscription (required)
        :param int id: Id of the add on (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_api_subscription_add_on_with_http_info(api_subscription_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_api_subscription_add_on_with_http_info(api_subscription_id, id, **kwargs)  # noqa: E501
            return data

    def delete_api_subscription_add_on_with_http_info(self, api_subscription_id, id, **kwargs):  # noqa: E501
        """Delete an add on  # noqa: E501

        Delete a specific add on identified by the id in the URL.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_api_subscription_add_on_with_http_info(api_subscription_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int api_subscription_id: The ID of the API subscription (required)
        :param int id: Id of the add on (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_subscription_id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_api_subscription_add_on" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_subscription_id' is set
        if ('api_subscription_id' not in params or
                params['api_subscription_id'] is None):
            raise ValueError("Missing the required parameter `api_subscription_id` when calling `delete_api_subscription_add_on`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_api_subscription_add_on`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'api_subscription_id' in params:
            path_params['api_subscription_id'] = params['api_subscription_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API-Key', 'Authentication']  # noqa: E501

        return self.api_client.call_api(
            '/api_subscriptions/{api_subscription_id}/add_ons/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_subscription_add_on(self, subscription_id, id, **kwargs):  # noqa: E501
        """Delete an add on  # noqa: E501

        Delete a specific add on identified by the id in the URL.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_subscription_add_on(subscription_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int subscription_id: The resource defined in the URL (required)
        :param int id: Id of the add on (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_subscription_add_on_with_http_info(subscription_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_subscription_add_on_with_http_info(subscription_id, id, **kwargs)  # noqa: E501
            return data

    def delete_subscription_add_on_with_http_info(self, subscription_id, id, **kwargs):  # noqa: E501
        """Delete an add on  # noqa: E501

        Delete a specific add on identified by the id in the URL.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_subscription_add_on_with_http_info(subscription_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int subscription_id: The resource defined in the URL (required)
        :param int id: Id of the add on (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['subscription_id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_subscription_add_on" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'subscription_id' is set
        if ('subscription_id' not in params or
                params['subscription_id'] is None):
            raise ValueError("Missing the required parameter `subscription_id` when calling `delete_subscription_add_on`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_subscription_add_on`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'subscription_id' in params:
            path_params['subscription_id'] = params['subscription_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API-Key', 'Authentication']  # noqa: E501

        return self.api_client.call_api(
            '/subscriptions/{subscription_id}/add_ons/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_addons_of_api_subscription(self, api_subscription_id, **kwargs):  # noqa: E501
        """Get all add ons of one api subscription  # noqa: E501

        Returns a list of add ons  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_addons_of_api_subscription(api_subscription_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int api_subscription_id: The ID of the API subscription (required)
        :param int page: Page number to load
        :param int per_page: Number of items to load per page
        :param str name: Filter accepts `*` as wildcard
        :param str product_code: Filter accepts `*` as wildcard
        :param str material_number: Filter accepts `*` as wildcard
        :param str add_on_type: Filter accepts addon or connectivity
        :param str order_by: Order result by attribute value, accepts `id`, `created_at` or `updated_at`. Add `-` as a prefix for descending order. Default value is `id`
        :return: AddOnsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_addons_of_api_subscription_with_http_info(api_subscription_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_addons_of_api_subscription_with_http_info(api_subscription_id, **kwargs)  # noqa: E501
            return data

    def get_addons_of_api_subscription_with_http_info(self, api_subscription_id, **kwargs):  # noqa: E501
        """Get all add ons of one api subscription  # noqa: E501

        Returns a list of add ons  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_addons_of_api_subscription_with_http_info(api_subscription_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int api_subscription_id: The ID of the API subscription (required)
        :param int page: Page number to load
        :param int per_page: Number of items to load per page
        :param str name: Filter accepts `*` as wildcard
        :param str product_code: Filter accepts `*` as wildcard
        :param str material_number: Filter accepts `*` as wildcard
        :param str add_on_type: Filter accepts addon or connectivity
        :param str order_by: Order result by attribute value, accepts `id`, `created_at` or `updated_at`. Add `-` as a prefix for descending order. Default value is `id`
        :return: AddOnsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_subscription_id', 'page', 'per_page', 'name', 'product_code', 'material_number', 'add_on_type', 'order_by']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_addons_of_api_subscription" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_subscription_id' is set
        if ('api_subscription_id' not in params or
                params['api_subscription_id'] is None):
            raise ValueError("Missing the required parameter `api_subscription_id` when calling `get_addons_of_api_subscription`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'api_subscription_id' in params:
            path_params['api_subscription_id'] = params['api_subscription_id']  # noqa: E501

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'per_page' in params:
            query_params.append(('per_page', params['per_page']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'product_code' in params:
            query_params.append(('product_code', params['product_code']))  # noqa: E501
        if 'material_number' in params:
            query_params.append(('material_number', params['material_number']))  # noqa: E501
        if 'add_on_type' in params:
            query_params.append(('add_on_type', params['add_on_type']))  # noqa: E501
        if 'order_by' in params:
            query_params.append(('order_by', params['order_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API-Key', 'Authentication']  # noqa: E501

        return self.api_client.call_api(
            '/api_subscriptions/{api_subscription_id}/add_ons', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AddOnsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_addons_of_subscription(self, subscription_id, **kwargs):  # noqa: E501
        """Get all add ons of one subscription  # noqa: E501

        Returns a list of add ons  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_addons_of_subscription(subscription_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int subscription_id: The resource defined in the URL (required)
        :param int page: Page number to load
        :param int per_page: Number of items to load per page
        :param str name: Filter accepts `*` as wildcard
        :param str product_code: Filter accepts `*` as wildcard
        :param str material_number: Filter accepts `*` as wildcard
        :param str add_on_type: Filter accepts addon or connectivity
        :param str order_by: Order result by attribute value, accepts `id`, `created_at` or `updated_at`. Add `-` as a prefix for descending order. Default value is `id`
        :return: AddOnsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_addons_of_subscription_with_http_info(subscription_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_addons_of_subscription_with_http_info(subscription_id, **kwargs)  # noqa: E501
            return data

    def get_addons_of_subscription_with_http_info(self, subscription_id, **kwargs):  # noqa: E501
        """Get all add ons of one subscription  # noqa: E501

        Returns a list of add ons  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_addons_of_subscription_with_http_info(subscription_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int subscription_id: The resource defined in the URL (required)
        :param int page: Page number to load
        :param int per_page: Number of items to load per page
        :param str name: Filter accepts `*` as wildcard
        :param str product_code: Filter accepts `*` as wildcard
        :param str material_number: Filter accepts `*` as wildcard
        :param str add_on_type: Filter accepts addon or connectivity
        :param str order_by: Order result by attribute value, accepts `id`, `created_at` or `updated_at`. Add `-` as a prefix for descending order. Default value is `id`
        :return: AddOnsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['subscription_id', 'page', 'per_page', 'name', 'product_code', 'material_number', 'add_on_type', 'order_by']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_addons_of_subscription" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'subscription_id' is set
        if ('subscription_id' not in params or
                params['subscription_id'] is None):
            raise ValueError("Missing the required parameter `subscription_id` when calling `get_addons_of_subscription`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'subscription_id' in params:
            path_params['subscription_id'] = params['subscription_id']  # noqa: E501

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'per_page' in params:
            query_params.append(('per_page', params['per_page']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'product_code' in params:
            query_params.append(('product_code', params['product_code']))  # noqa: E501
        if 'material_number' in params:
            query_params.append(('material_number', params['material_number']))  # noqa: E501
        if 'add_on_type' in params:
            query_params.append(('add_on_type', params['add_on_type']))  # noqa: E501
        if 'order_by' in params:
            query_params.append(('order_by', params['order_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API-Key', 'Authentication']  # noqa: E501

        return self.api_client.call_api(
            '/subscriptions/{subscription_id}/add_ons', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AddOnsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_api_subscription_add_on_id(self, api_subscription_id, id, **kwargs):  # noqa: E501
        """Get a single add on of an api subscription  # noqa: E501

        Get a specific add on of an api subscription  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_api_subscription_add_on_id(api_subscription_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int api_subscription_id: The ID of the API subscription (required)
        :param int id: Id of the add on to fetch (required)
        :return: AddOnResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_api_subscription_add_on_id_with_http_info(api_subscription_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_api_subscription_add_on_id_with_http_info(api_subscription_id, id, **kwargs)  # noqa: E501
            return data

    def get_api_subscription_add_on_id_with_http_info(self, api_subscription_id, id, **kwargs):  # noqa: E501
        """Get a single add on of an api subscription  # noqa: E501

        Get a specific add on of an api subscription  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_api_subscription_add_on_id_with_http_info(api_subscription_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int api_subscription_id: The ID of the API subscription (required)
        :param int id: Id of the add on to fetch (required)
        :return: AddOnResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_subscription_id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_api_subscription_add_on_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_subscription_id' is set
        if ('api_subscription_id' not in params or
                params['api_subscription_id'] is None):
            raise ValueError("Missing the required parameter `api_subscription_id` when calling `get_api_subscription_add_on_id`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_api_subscription_add_on_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'api_subscription_id' in params:
            path_params['api_subscription_id'] = params['api_subscription_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API-Key', 'Authentication']  # noqa: E501

        return self.api_client.call_api(
            '/api_subscriptions/{api_subscription_id}/add_ons/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AddOnResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_subscription_add_on_id(self, subscription_id, id, **kwargs):  # noqa: E501
        """Get a single add on of subscription  # noqa: E501

        Get a specific add on of a subscription  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_subscription_add_on_id(subscription_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int subscription_id: The resource defined in the URL (required)
        :param int id: Id of the add on to fetch (required)
        :return: AddOnResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_subscription_add_on_id_with_http_info(subscription_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_subscription_add_on_id_with_http_info(subscription_id, id, **kwargs)  # noqa: E501
            return data

    def get_subscription_add_on_id_with_http_info(self, subscription_id, id, **kwargs):  # noqa: E501
        """Get a single add on of subscription  # noqa: E501

        Get a specific add on of a subscription  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_subscription_add_on_id_with_http_info(subscription_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int subscription_id: The resource defined in the URL (required)
        :param int id: Id of the add on to fetch (required)
        :return: AddOnResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['subscription_id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_subscription_add_on_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'subscription_id' is set
        if ('subscription_id' not in params or
                params['subscription_id'] is None):
            raise ValueError("Missing the required parameter `subscription_id` when calling `get_subscription_add_on_id`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_subscription_add_on_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'subscription_id' in params:
            path_params['subscription_id'] = params['subscription_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API-Key', 'Authentication']  # noqa: E501

        return self.api_client.call_api(
            '/subscriptions/{subscription_id}/add_ons/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AddOnResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_apu_subscription_add_on(self, body, api_subscription_id, id, **kwargs):  # noqa: E501
        """Update an add on of an api subscription  # noqa: E501

        Update a add on  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_apu_subscription_add_on(body, api_subscription_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AddOnRequest body: Parameters that shall be updated. (required)
        :param int api_subscription_id: The ID of the API subscription (required)
        :param int id: Id of the add on to update (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_apu_subscription_add_on_with_http_info(body, api_subscription_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_apu_subscription_add_on_with_http_info(body, api_subscription_id, id, **kwargs)  # noqa: E501
            return data

    def update_apu_subscription_add_on_with_http_info(self, body, api_subscription_id, id, **kwargs):  # noqa: E501
        """Update an add on of an api subscription  # noqa: E501

        Update a add on  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_apu_subscription_add_on_with_http_info(body, api_subscription_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AddOnRequest body: Parameters that shall be updated. (required)
        :param int api_subscription_id: The ID of the API subscription (required)
        :param int id: Id of the add on to update (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'api_subscription_id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_apu_subscription_add_on" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_apu_subscription_add_on`")  # noqa: E501
        # verify the required parameter 'api_subscription_id' is set
        if ('api_subscription_id' not in params or
                params['api_subscription_id'] is None):
            raise ValueError("Missing the required parameter `api_subscription_id` when calling `update_apu_subscription_add_on`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `update_apu_subscription_add_on`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'api_subscription_id' in params:
            path_params['api_subscription_id'] = params['api_subscription_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API-Key', 'Authentication']  # noqa: E501

        return self.api_client.call_api(
            '/api_subscriptions/{api_subscription_id}/add_ons/{id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_subscription_add_on(self, body, subscription_id, id, **kwargs):  # noqa: E501
        """Update an add on of a subscription  # noqa: E501

        Update a add on  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_subscription_add_on(body, subscription_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AddOnRequest body: Parameters that shall be updated. (required)
        :param int subscription_id: The resource defined in the URL (required)
        :param int id: Id of the add on to update (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_subscription_add_on_with_http_info(body, subscription_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_subscription_add_on_with_http_info(body, subscription_id, id, **kwargs)  # noqa: E501
            return data

    def update_subscription_add_on_with_http_info(self, body, subscription_id, id, **kwargs):  # noqa: E501
        """Update an add on of a subscription  # noqa: E501

        Update a add on  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_subscription_add_on_with_http_info(body, subscription_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AddOnRequest body: Parameters that shall be updated. (required)
        :param int subscription_id: The resource defined in the URL (required)
        :param int id: Id of the add on to update (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'subscription_id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_subscription_add_on" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_subscription_add_on`")  # noqa: E501
        # verify the required parameter 'subscription_id' is set
        if ('subscription_id' not in params or
                params['subscription_id'] is None):
            raise ValueError("Missing the required parameter `subscription_id` when calling `update_subscription_add_on`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `update_subscription_add_on`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'subscription_id' in params:
            path_params['subscription_id'] = params['subscription_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API-Key', 'Authentication']  # noqa: E501

        return self.api_client.call_api(
            '/subscriptions/{subscription_id}/add_ons/{id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
