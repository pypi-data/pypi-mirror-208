# coding: utf-8

"""
    Netilion API Documentation

    Welcome to the Netilion API Documentation, which provides interactive access and documentation to our REST API.  This section contains new endpoints which are still under development. You're welcome to test them but please note that they still can change anytime!   # noqa: E501

    OpenAPI spec version: 01.00.00
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ConnectedAssetRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'connection': 'ConnectedAssetRequestConnection',
        'location': 'list[object]',
        'battery': 'list[object]',
        'health_conditions': 'list[object]',
        'firmware': 'ConnectedAssetRequestFirmware',
        'certificate': 'CertificateRenewalRequest',
        'values': 'ConnectedAssetRequestValues',
        'diagnosis': 'str',
        'configuration': 'ConnectedAssetRequestConfiguration'
    }

    attribute_map = {
        'connection': 'connection',
        'location': 'location',
        'battery': 'battery',
        'health_conditions': 'health_conditions',
        'firmware': 'firmware',
        'certificate': 'certificate',
        'values': 'values',
        'diagnosis': 'diagnosis',
        'configuration': 'configuration'
    }

    def __init__(self, connection=None, location=None, battery=None, health_conditions=None, firmware=None, certificate=None, values=None, diagnosis=None, configuration=None):  # noqa: E501
        """ConnectedAssetRequest - a model defined in Swagger"""  # noqa: E501
        self._connection = None
        self._location = None
        self._battery = None
        self._health_conditions = None
        self._firmware = None
        self._certificate = None
        self._values = None
        self._diagnosis = None
        self._configuration = None
        self.discriminator = None
        if connection is not None:
            self.connection = connection
        if location is not None:
            self.location = location
        if battery is not None:
            self.battery = battery
        if health_conditions is not None:
            self.health_conditions = health_conditions
        if firmware is not None:
            self.firmware = firmware
        if certificate is not None:
            self.certificate = certificate
        self.values = values
        if diagnosis is not None:
            self.diagnosis = diagnosis
        if configuration is not None:
            self.configuration = configuration

    @property
    def connection(self):
        """Gets the connection of this ConnectedAssetRequest.  # noqa: E501


        :return: The connection of this ConnectedAssetRequest.  # noqa: E501
        :rtype: ConnectedAssetRequestConnection
        """
        return self._connection

    @connection.setter
    def connection(self, connection):
        """Sets the connection of this ConnectedAssetRequest.


        :param connection: The connection of this ConnectedAssetRequest.  # noqa: E501
        :type: ConnectedAssetRequestConnection
        """

        self._connection = connection

    @property
    def location(self):
        """Gets the location of this ConnectedAssetRequest.  # noqa: E501

        Geolocation of the connected asset as array [latitude, longitude, accuracy(in meters)]  # noqa: E501

        :return: The location of this ConnectedAssetRequest.  # noqa: E501
        :rtype: list[object]
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this ConnectedAssetRequest.

        Geolocation of the connected asset as array [latitude, longitude, accuracy(in meters)]  # noqa: E501

        :param location: The location of this ConnectedAssetRequest.  # noqa: E501
        :type: list[object]
        """

        self._location = location

    @property
    def battery(self):
        """Gets the battery of this ConnectedAssetRequest.  # noqa: E501

        Details about the battery status of the connected asset [level in percent]  # noqa: E501

        :return: The battery of this ConnectedAssetRequest.  # noqa: E501
        :rtype: list[object]
        """
        return self._battery

    @battery.setter
    def battery(self, battery):
        """Sets the battery of this ConnectedAssetRequest.

        Details about the battery status of the connected asset [level in percent]  # noqa: E501

        :param battery: The battery of this ConnectedAssetRequest.  # noqa: E501
        :type: list[object]
        """

        self._battery = battery

    @property
    def health_conditions(self):
        """Gets the health_conditions of this ConnectedAssetRequest.  # noqa: E501

        Source identifiers of health conditions to be set active for the connected asset  # noqa: E501

        :return: The health_conditions of this ConnectedAssetRequest.  # noqa: E501
        :rtype: list[object]
        """
        return self._health_conditions

    @health_conditions.setter
    def health_conditions(self, health_conditions):
        """Sets the health_conditions of this ConnectedAssetRequest.

        Source identifiers of health conditions to be set active for the connected asset  # noqa: E501

        :param health_conditions: The health_conditions of this ConnectedAssetRequest.  # noqa: E501
        :type: list[object]
        """

        self._health_conditions = health_conditions

    @property
    def firmware(self):
        """Gets the firmware of this ConnectedAssetRequest.  # noqa: E501


        :return: The firmware of this ConnectedAssetRequest.  # noqa: E501
        :rtype: ConnectedAssetRequestFirmware
        """
        return self._firmware

    @firmware.setter
    def firmware(self, firmware):
        """Sets the firmware of this ConnectedAssetRequest.


        :param firmware: The firmware of this ConnectedAssetRequest.  # noqa: E501
        :type: ConnectedAssetRequestFirmware
        """

        self._firmware = firmware

    @property
    def certificate(self):
        """Gets the certificate of this ConnectedAssetRequest.  # noqa: E501


        :return: The certificate of this ConnectedAssetRequest.  # noqa: E501
        :rtype: CertificateRenewalRequest
        """
        return self._certificate

    @certificate.setter
    def certificate(self, certificate):
        """Sets the certificate of this ConnectedAssetRequest.


        :param certificate: The certificate of this ConnectedAssetRequest.  # noqa: E501
        :type: CertificateRenewalRequest
        """

        self._certificate = certificate

    @property
    def values(self):
        """Gets the values of this ConnectedAssetRequest.  # noqa: E501


        :return: The values of this ConnectedAssetRequest.  # noqa: E501
        :rtype: ConnectedAssetRequestValues
        """
        return self._values

    @values.setter
    def values(self, values):
        """Sets the values of this ConnectedAssetRequest.


        :param values: The values of this ConnectedAssetRequest.  # noqa: E501
        :type: ConnectedAssetRequestValues
        """
        if values is None:
            raise ValueError("Invalid value for `values`, must not be `None`")  # noqa: E501

        self._values = values

    @property
    def diagnosis(self):
        """Gets the diagnosis of this ConnectedAssetRequest.  # noqa: E501

        Diagnosis result for the last sent diagnosis command. If the value is not text e.g. JSON or XML, the value should be encoded accordingly and converted to string before sending. Maximum length of the string is 6000 chars. The result value will be saved in specification 'eh.connected_assets.diagnosis_result'. The diagnosis command which was evaluated will be moved from specification key 'eh.connected_assets.diagnosis_command' to the key 'eh.connected_assets.last_diagnosis_command'  # noqa: E501

        :return: The diagnosis of this ConnectedAssetRequest.  # noqa: E501
        :rtype: str
        """
        return self._diagnosis

    @diagnosis.setter
    def diagnosis(self, diagnosis):
        """Sets the diagnosis of this ConnectedAssetRequest.

        Diagnosis result for the last sent diagnosis command. If the value is not text e.g. JSON or XML, the value should be encoded accordingly and converted to string before sending. Maximum length of the string is 6000 chars. The result value will be saved in specification 'eh.connected_assets.diagnosis_result'. The diagnosis command which was evaluated will be moved from specification key 'eh.connected_assets.diagnosis_command' to the key 'eh.connected_assets.last_diagnosis_command'  # noqa: E501

        :param diagnosis: The diagnosis of this ConnectedAssetRequest.  # noqa: E501
        :type: str
        """

        self._diagnosis = diagnosis

    @property
    def configuration(self):
        """Gets the configuration of this ConnectedAssetRequest.  # noqa: E501


        :return: The configuration of this ConnectedAssetRequest.  # noqa: E501
        :rtype: ConnectedAssetRequestConfiguration
        """
        return self._configuration

    @configuration.setter
    def configuration(self, configuration):
        """Sets the configuration of this ConnectedAssetRequest.


        :param configuration: The configuration of this ConnectedAssetRequest.  # noqa: E501
        :type: ConnectedAssetRequestConfiguration
        """

        self._configuration = configuration

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConnectedAssetRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConnectedAssetRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
