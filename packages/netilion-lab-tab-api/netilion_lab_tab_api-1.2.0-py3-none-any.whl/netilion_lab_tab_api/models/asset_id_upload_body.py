# coding: utf-8

"""
    Netilion API Documentation

    Welcome to the Netilion API Documentation, which provides interactive access and documentation to our REST API.  This section contains new endpoints which are still under development. You're welcome to test them but please note that they still can change anytime!   # noqa: E501

    OpenAPI spec version: 01.00.00
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AssetIdUploadBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'file': 'str',
        'name': 'str',
        'version': 'str',
        'category': 'str'
    }

    attribute_map = {
        'file': 'file',
        'name': 'name',
        'version': 'version',
        'category': 'category'
    }

    def __init__(self, file=None, name=None, version=None, category=None):  # noqa: E501
        """AssetIdUploadBody - a model defined in Swagger"""  # noqa: E501
        self._file = None
        self._name = None
        self._version = None
        self._category = None
        self.discriminator = None
        self.file = file
        if name is not None:
            self.name = name
        if version is not None:
            self.version = version
        if category is not None:
            self.category = category

    @property
    def file(self):
        """Gets the file of this AssetIdUploadBody.  # noqa: E501

        the file data to upload  # noqa: E501

        :return: The file of this AssetIdUploadBody.  # noqa: E501
        :rtype: str
        """
        return self._file

    @file.setter
    def file(self, file):
        """Sets the file of this AssetIdUploadBody.

        the file data to upload  # noqa: E501

        :param file: The file of this AssetIdUploadBody.  # noqa: E501
        :type: str
        """
        if file is None:
            raise ValueError("Invalid value for `file`, must not be `None`")  # noqa: E501

        self._file = file

    @property
    def name(self):
        """Gets the name of this AssetIdUploadBody.  # noqa: E501

        the name of the document  # noqa: E501

        :return: The name of this AssetIdUploadBody.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AssetIdUploadBody.

        the name of the document  # noqa: E501

        :param name: The name of this AssetIdUploadBody.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def version(self):
        """Gets the version of this AssetIdUploadBody.  # noqa: E501

        the version of the document  # noqa: E501

        :return: The version of this AssetIdUploadBody.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this AssetIdUploadBody.

        the version of the document  # noqa: E501

        :param version: The version of this AssetIdUploadBody.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def category(self):
        """Gets the category of this AssetIdUploadBody.  # noqa: E501

        an existing category code to be assigned to the document  # noqa: E501

        :return: The category of this AssetIdUploadBody.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this AssetIdUploadBody.

        an existing category code to be assigned to the document  # noqa: E501

        :param category: The category of this AssetIdUploadBody.  # noqa: E501
        :type: str
        """

        self._category = category

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AssetIdUploadBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AssetIdUploadBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
