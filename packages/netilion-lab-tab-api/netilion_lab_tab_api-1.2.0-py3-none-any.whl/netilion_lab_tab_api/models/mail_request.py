# coding: utf-8

"""
    Netilion API Documentation

    Welcome to the Netilion API Documentation, which provides interactive access and documentation to our REST API.  This section contains new endpoints which are still under development. You're welcome to test them but please note that they still can change anytime!   # noqa: E501

    OpenAPI spec version: 01.00.00
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MailRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'to': 'list[str]',
        'users': 'list[NestedID]',
        'subject': 'str',
        'message': 'str',
        'locale': 'str',
        'attachments': 'list[MailAttachmentRequest]'
    }

    attribute_map = {
        'to': 'to',
        'users': 'users',
        'subject': 'subject',
        'message': 'message',
        'locale': 'locale',
        'attachments': 'attachments'
    }

    discriminator_value_class_map = {
              }

    def __init__(self, to=None, users=None, subject=None, message=None, locale=None, attachments=None):  # noqa: E501
        """MailRequest - a model defined in Swagger"""  # noqa: E501
        self._to = None
        self._users = None
        self._subject = None
        self._message = None
        self._locale = None
        self._attachments = None
        self.discriminator = 'mailBaseType'
        if to is not None:
            self.to = to
        if users is not None:
            self.users = users
        self.subject = subject
        self.message = message
        if locale is not None:
            self.locale = locale
        if attachments is not None:
            self.attachments = attachments

    @property
    def to(self):
        """Gets the to of this MailRequest.  # noqa: E501

        array of recipient email addresses  # noqa: E501

        :return: The to of this MailRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this MailRequest.

        array of recipient email addresses  # noqa: E501

        :param to: The to of this MailRequest.  # noqa: E501
        :type: list[str]
        """

        self._to = to

    @property
    def users(self):
        """Gets the users of this MailRequest.  # noqa: E501


        :return: The users of this MailRequest.  # noqa: E501
        :rtype: list[NestedID]
        """
        return self._users

    @users.setter
    def users(self, users):
        """Sets the users of this MailRequest.


        :param users: The users of this MailRequest.  # noqa: E501
        :type: list[NestedID]
        """

        self._users = users

    @property
    def subject(self):
        """Gets the subject of this MailRequest.  # noqa: E501

        subject of the mail  # noqa: E501

        :return: The subject of this MailRequest.  # noqa: E501
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this MailRequest.

        subject of the mail  # noqa: E501

        :param subject: The subject of this MailRequest.  # noqa: E501
        :type: str
        """
        if subject is None:
            raise ValueError("Invalid value for `subject`, must not be `None`")  # noqa: E501

        self._subject = subject

    @property
    def message(self):
        """Gets the message of this MailRequest.  # noqa: E501

        markdown message of the mail  # noqa: E501

        :return: The message of this MailRequest.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this MailRequest.

        markdown message of the mail  # noqa: E501

        :param message: The message of this MailRequest.  # noqa: E501
        :type: str
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")  # noqa: E501

        self._message = message

    @property
    def locale(self):
        """Gets the locale of this MailRequest.  # noqa: E501

        locale the mails should be sent in  # noqa: E501

        :return: The locale of this MailRequest.  # noqa: E501
        :rtype: str
        """
        return self._locale

    @locale.setter
    def locale(self, locale):
        """Sets the locale of this MailRequest.

        locale the mails should be sent in  # noqa: E501

        :param locale: The locale of this MailRequest.  # noqa: E501
        :type: str
        """

        self._locale = locale

    @property
    def attachments(self):
        """Gets the attachments of this MailRequest.  # noqa: E501


        :return: The attachments of this MailRequest.  # noqa: E501
        :rtype: list[MailAttachmentRequest]
        """
        return self._attachments

    @attachments.setter
    def attachments(self, attachments):
        """Sets the attachments of this MailRequest.


        :param attachments: The attachments of this MailRequest.  # noqa: E501
        :type: list[MailAttachmentRequest]
        """

        self._attachments = attachments

    def get_real_child_model(self, data):
        """Returns the real base class specified by the discriminator"""
        discriminator_value = data[self.discriminator].lower()
        return self.discriminator_value_class_map.get(discriminator_value)

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MailRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MailRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
