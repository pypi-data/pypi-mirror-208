# coding: utf-8

"""
    Netilion API Documentation

    Welcome to the Netilion API Documentation, which provides interactive access and documentation to our REST API.  This section contains new endpoints which are still under development. You're welcome to test them but please note that they still can change anytime!   # noqa: E501

    OpenAPI spec version: 01.00.00
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from netilion_lab_tab_api.api_client import ApiClient


class ConnectedAssetAPIApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_connected_asset_information(self, asset_id, **kwargs):  # noqa: E501
        """Returns information for a connected asset.  # noqa: E501

        Returns information for a connected asset, containing information like server time, scheduled firmware updates, scheduled certificate updates, etc.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_connected_asset_information(asset_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int asset_id: Id of the connected asset (required)
        :return: ConnectedAssetResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_connected_asset_information_with_http_info(asset_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_connected_asset_information_with_http_info(asset_id, **kwargs)  # noqa: E501
            return data

    def get_connected_asset_information_with_http_info(self, asset_id, **kwargs):  # noqa: E501
        """Returns information for a connected asset.  # noqa: E501

        Returns information for a connected asset, containing information like server time, scheduled firmware updates, scheduled certificate updates, etc.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_connected_asset_information_with_http_info(asset_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int asset_id: Id of the connected asset (required)
        :return: ConnectedAssetResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['asset_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_connected_asset_information" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'asset_id' is set
        if ('asset_id' not in params or
                params['asset_id'] is None):
            raise ValueError("Missing the required parameter `asset_id` when calling `get_connected_asset_information`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'asset_id' in params:
            path_params['asset_id'] = params['asset_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API-Key', 'Authentication']  # noqa: E501

        return self.api_client.call_api(
            '/connected_assets/{asset_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConnectedAssetResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_connected_asset_information(self, body, asset_id, **kwargs):  # noqa: E501
        """Updates the information of a connected asset.  # noqa: E501

        Updates the information of a connected asset and processes all measured values collected by a connected asset: * By adding ```accept: application/json+get``` to the header, the response will contain the updated information  for the connected asset. Otherwise the response will be empty.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_connected_asset_information(body, asset_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConnectedAssetRequest body: New asset values (required)
        :param int asset_id: Id of the connected asset (required)
        :return: ConnectedAssetResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_connected_asset_information_with_http_info(body, asset_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_connected_asset_information_with_http_info(body, asset_id, **kwargs)  # noqa: E501
            return data

    def update_connected_asset_information_with_http_info(self, body, asset_id, **kwargs):  # noqa: E501
        """Updates the information of a connected asset.  # noqa: E501

        Updates the information of a connected asset and processes all measured values collected by a connected asset: * By adding ```accept: application/json+get``` to the header, the response will contain the updated information  for the connected asset. Otherwise the response will be empty.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_connected_asset_information_with_http_info(body, asset_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConnectedAssetRequest body: New asset values (required)
        :param int asset_id: Id of the connected asset (required)
        :return: ConnectedAssetResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'asset_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_connected_asset_information" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_connected_asset_information`")  # noqa: E501
        # verify the required parameter 'asset_id' is set
        if ('asset_id' not in params or
                params['asset_id'] is None):
            raise ValueError("Missing the required parameter `asset_id` when calling `update_connected_asset_information`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'asset_id' in params:
            path_params['asset_id'] = params['asset_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API-Key', 'Authentication']  # noqa: E501

        return self.api_client.call_api(
            '/connected_assets/{asset_id}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConnectedAssetResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def upload_file_by_connected_asset(self, file, name, version, category, asset_id, **kwargs):  # noqa: E501
        """Create and upload a new file attached to the asset  # noqa: E501

        The creation of a file works through a multipart/form-data upload of the file, its name, version and category. This creates a document of the given name, version and category. The uploaded file will then be attached to the document as  attachment. Special characters (&$+,/:;=?@<>[]{}|^~%#) and white spaces in the file name will be replaced with underscores.  Forbidden content-types are - application/xhtml+xml - text/html - application/javascript - text/javascript - application/x-shockwave-flash - application/vnd.adobe.flash.movie - video/x-flv - text/php - application/php - application/x-php - application/x-httpd-php  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upload_file_by_connected_asset(file, name, version, category, asset_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str file: (required)
        :param str name: (required)
        :param str version: (required)
        :param str category: (required)
        :param int asset_id: Id of the asset to assign the document to. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.upload_file_by_connected_asset_with_http_info(file, name, version, category, asset_id, **kwargs)  # noqa: E501
        else:
            (data) = self.upload_file_by_connected_asset_with_http_info(file, name, version, category, asset_id, **kwargs)  # noqa: E501
            return data

    def upload_file_by_connected_asset_with_http_info(self, file, name, version, category, asset_id, **kwargs):  # noqa: E501
        """Create and upload a new file attached to the asset  # noqa: E501

        The creation of a file works through a multipart/form-data upload of the file, its name, version and category. This creates a document of the given name, version and category. The uploaded file will then be attached to the document as  attachment. Special characters (&$+,/:;=?@<>[]{}|^~%#) and white spaces in the file name will be replaced with underscores.  Forbidden content-types are - application/xhtml+xml - text/html - application/javascript - text/javascript - application/x-shockwave-flash - application/vnd.adobe.flash.movie - video/x-flv - text/php - application/php - application/x-php - application/x-httpd-php  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upload_file_by_connected_asset_with_http_info(file, name, version, category, asset_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str file: (required)
        :param str name: (required)
        :param str version: (required)
        :param str category: (required)
        :param int asset_id: Id of the asset to assign the document to. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['file', 'name', 'version', 'category', 'asset_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method upload_file_by_connected_asset" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'file' is set
        if ('file' not in params or
                params['file'] is None):
            raise ValueError("Missing the required parameter `file` when calling `upload_file_by_connected_asset`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `upload_file_by_connected_asset`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `upload_file_by_connected_asset`")  # noqa: E501
        # verify the required parameter 'category' is set
        if ('category' not in params or
                params['category'] is None):
            raise ValueError("Missing the required parameter `category` when calling `upload_file_by_connected_asset`")  # noqa: E501
        # verify the required parameter 'asset_id' is set
        if ('asset_id' not in params or
                params['asset_id'] is None):
            raise ValueError("Missing the required parameter `asset_id` when calling `upload_file_by_connected_asset`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'asset_id' in params:
            path_params['asset_id'] = params['asset_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'file' in params:
            local_var_files['file'] = params['file']  # noqa: E501
        if 'name' in params:
            form_params.append(('name', params['name']))  # noqa: E501
        if 'version' in params:
            form_params.append(('version', params['version']))  # noqa: E501
        if 'category' in params:
            form_params.append(('category', params['category']))  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API-Key', 'Authentication']  # noqa: E501

        return self.api_client.call_api(
            '/connected_assets/{asset_id}/upload', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
