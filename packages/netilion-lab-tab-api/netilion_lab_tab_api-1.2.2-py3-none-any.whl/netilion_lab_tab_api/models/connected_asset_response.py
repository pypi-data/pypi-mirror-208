# coding: utf-8

"""
    Netilion API Documentation

    Welcome to the Netilion API Documentation, which provides interactive access and documentation to our REST API.  This section contains new endpoints which are still under development. You're welcome to test them but please note that they still can change anytime!   # noqa: E501

    OpenAPI spec version: 01.00.00
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ConnectedAssetResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'current_time': 'str',
        'certificate': 'CertificateRenewalResponse',
        'firmware': 'FirmwareResponse',
        'diagnosis_command': 'str',
        'configuration': 'str'
    }

    attribute_map = {
        'current_time': 'current_time',
        'certificate': 'certificate',
        'firmware': 'firmware',
        'diagnosis_command': 'diagnosis_command',
        'configuration': 'configuration'
    }

    def __init__(self, current_time=None, certificate=None, firmware=None, diagnosis_command=None, configuration=None):  # noqa: E501
        """ConnectedAssetResponse - a model defined in Swagger"""  # noqa: E501
        self._current_time = None
        self._certificate = None
        self._firmware = None
        self._diagnosis_command = None
        self._configuration = None
        self.discriminator = None
        if current_time is not None:
            self.current_time = current_time
        if certificate is not None:
            self.certificate = certificate
        if firmware is not None:
            self.firmware = firmware
        if diagnosis_command is not None:
            self.diagnosis_command = diagnosis_command
        if configuration is not None:
            self.configuration = configuration

    @property
    def current_time(self):
        """Gets the current_time of this ConnectedAssetResponse.  # noqa: E501

        current server time in UTC  # noqa: E501

        :return: The current_time of this ConnectedAssetResponse.  # noqa: E501
        :rtype: str
        """
        return self._current_time

    @current_time.setter
    def current_time(self, current_time):
        """Sets the current_time of this ConnectedAssetResponse.

        current server time in UTC  # noqa: E501

        :param current_time: The current_time of this ConnectedAssetResponse.  # noqa: E501
        :type: str
        """

        self._current_time = current_time

    @property
    def certificate(self):
        """Gets the certificate of this ConnectedAssetResponse.  # noqa: E501


        :return: The certificate of this ConnectedAssetResponse.  # noqa: E501
        :rtype: CertificateRenewalResponse
        """
        return self._certificate

    @certificate.setter
    def certificate(self, certificate):
        """Sets the certificate of this ConnectedAssetResponse.


        :param certificate: The certificate of this ConnectedAssetResponse.  # noqa: E501
        :type: CertificateRenewalResponse
        """

        self._certificate = certificate

    @property
    def firmware(self):
        """Gets the firmware of this ConnectedAssetResponse.  # noqa: E501


        :return: The firmware of this ConnectedAssetResponse.  # noqa: E501
        :rtype: FirmwareResponse
        """
        return self._firmware

    @firmware.setter
    def firmware(self, firmware):
        """Sets the firmware of this ConnectedAssetResponse.


        :param firmware: The firmware of this ConnectedAssetResponse.  # noqa: E501
        :type: FirmwareResponse
        """

        self._firmware = firmware

    @property
    def diagnosis_command(self):
        """Gets the diagnosis_command of this ConnectedAssetResponse.  # noqa: E501

        diagnosis command to be sent to the connected asset  # noqa: E501

        :return: The diagnosis_command of this ConnectedAssetResponse.  # noqa: E501
        :rtype: str
        """
        return self._diagnosis_command

    @diagnosis_command.setter
    def diagnosis_command(self, diagnosis_command):
        """Sets the diagnosis_command of this ConnectedAssetResponse.

        diagnosis command to be sent to the connected asset  # noqa: E501

        :param diagnosis_command: The diagnosis_command of this ConnectedAssetResponse.  # noqa: E501
        :type: str
        """

        self._diagnosis_command = diagnosis_command

    @property
    def configuration(self):
        """Gets the configuration of this ConnectedAssetResponse.  # noqa: E501

        All device configuration key/value pairs set by the user that differ from the latest configuration the device sent to the server  # noqa: E501

        :return: The configuration of this ConnectedAssetResponse.  # noqa: E501
        :rtype: str
        """
        return self._configuration

    @configuration.setter
    def configuration(self, configuration):
        """Sets the configuration of this ConnectedAssetResponse.

        All device configuration key/value pairs set by the user that differ from the latest configuration the device sent to the server  # noqa: E501

        :param configuration: The configuration of this ConnectedAssetResponse.  # noqa: E501
        :type: str
        """

        self._configuration = configuration

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConnectedAssetResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConnectedAssetResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
