# coding: utf-8

"""
    Netilion API Documentation

    Welcome to the Netilion API Documentation, which provides interactive access and documentation to our REST API.  This section contains new endpoints which are still under development. You're welcome to test them but please note that they still can change anytime!   # noqa: E501

    OpenAPI spec version: 01.00.00
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ConnectedAssetRequestValues(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'definition': 'list[object]',
        'data': 'list[object]'
    }

    attribute_map = {
        'definition': 'definition',
        'data': 'data'
    }

    def __init__(self, definition=None, data=None):  # noqa: E501
        """ConnectedAssetRequestValues - a model defined in Swagger"""  # noqa: E501
        self._definition = None
        self._data = None
        self.discriminator = None
        if definition is not None:
            self.definition = definition
        if data is not None:
            self.data = data

    @property
    def definition(self):
        """Gets the definition of this ConnectedAssetRequestValues.  # noqa: E501

        definition of the key name, unit and group of the values  # noqa: E501

        :return: The definition of this ConnectedAssetRequestValues.  # noqa: E501
        :rtype: list[object]
        """
        return self._definition

    @definition.setter
    def definition(self, definition):
        """Sets the definition of this ConnectedAssetRequestValues.

        definition of the key name, unit and group of the values  # noqa: E501

        :param definition: The definition of this ConnectedAssetRequestValues.  # noqa: E501
        :type: list[object]
        """

        self._definition = definition

    @property
    def data(self):
        """Gets the data of this ConnectedAssetRequestValues.  # noqa: E501

        timestamp as integer and values for all keys defined in values_definition. To write the the quality attributes, the  value has to be formated the following way: 'value|status|simulated|hold'. The value is mandatory, if one of the other fields are not needed, they have to be transferred as blank e.g. '12|good||true'  # noqa: E501

        :return: The data of this ConnectedAssetRequestValues.  # noqa: E501
        :rtype: list[object]
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this ConnectedAssetRequestValues.

        timestamp as integer and values for all keys defined in values_definition. To write the the quality attributes, the  value has to be formated the following way: 'value|status|simulated|hold'. The value is mandatory, if one of the other fields are not needed, they have to be transferred as blank e.g. '12|good||true'  # noqa: E501

        :param data: The data of this ConnectedAssetRequestValues.  # noqa: E501
        :type: list[object]
        """

        self._data = data

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConnectedAssetRequestValues, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConnectedAssetRequestValues):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
