# coding: utf-8

"""
    Netilion API Documentation

    Welcome to the Netilion API Documentation, which provides interactive access and documentation to our REST API.  This section contains new endpoints which are still under development. You're welcome to test them but please note that they still can change anytime!   # noqa: E501

    OpenAPI spec version: 01.00.00
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SystemTypes(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'system_types': 'list[SystemTypeResponse]',
        'pagination': 'Pagination'
    }

    attribute_map = {
        'system_types': 'system_types',
        'pagination': 'pagination'
    }

    def __init__(self, system_types=None, pagination=None):  # noqa: E501
        """SystemTypes - a model defined in Swagger"""  # noqa: E501
        self._system_types = None
        self._pagination = None
        self.discriminator = None
        if system_types is not None:
            self.system_types = system_types
        if pagination is not None:
            self.pagination = pagination

    @property
    def system_types(self):
        """Gets the system_types of this SystemTypes.  # noqa: E501


        :return: The system_types of this SystemTypes.  # noqa: E501
        :rtype: list[SystemTypeResponse]
        """
        return self._system_types

    @system_types.setter
    def system_types(self, system_types):
        """Sets the system_types of this SystemTypes.


        :param system_types: The system_types of this SystemTypes.  # noqa: E501
        :type: list[SystemTypeResponse]
        """

        self._system_types = system_types

    @property
    def pagination(self):
        """Gets the pagination of this SystemTypes.  # noqa: E501


        :return: The pagination of this SystemTypes.  # noqa: E501
        :rtype: Pagination
        """
        return self._pagination

    @pagination.setter
    def pagination(self, pagination):
        """Sets the pagination of this SystemTypes.


        :param pagination: The pagination of this SystemTypes.  # noqa: E501
        :type: Pagination
        """

        self._pagination = pagination

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SystemTypes, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SystemTypes):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
