# coding: utf-8

"""
    Netilion API Documentation

    Welcome to the Netilion API Documentation, which provides interactive access and documentation to our REST API.  This section contains new endpoints which are still under development. You're welcome to test them but please note that they still can change anytime!   # noqa: E501

    OpenAPI spec version: 01.00.00
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AppInstanceResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'token': 'str',
        'user': 'NestedIDHref',
        'client_application': 'NestedIDHref'
    }

    attribute_map = {
        'id': 'id',
        'token': 'token',
        'user': 'user',
        'client_application': 'client_application'
    }

    def __init__(self, id=None, token=None, user=None, client_application=None):  # noqa: E501
        """AppInstanceResponse - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._token = None
        self._user = None
        self._client_application = None
        self.discriminator = None
        self.id = id
        self.token = token
        self.user = user
        self.client_application = client_application

    @property
    def id(self):
        """Gets the id of this AppInstanceResponse.  # noqa: E501

        Id of object  # noqa: E501

        :return: The id of this AppInstanceResponse.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AppInstanceResponse.

        Id of object  # noqa: E501

        :param id: The id of this AppInstanceResponse.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def token(self):
        """Gets the token of this AppInstanceResponse.  # noqa: E501

        token generated by push notification service  # noqa: E501

        :return: The token of this AppInstanceResponse.  # noqa: E501
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this AppInstanceResponse.

        token generated by push notification service  # noqa: E501

        :param token: The token of this AppInstanceResponse.  # noqa: E501
        :type: str
        """
        if token is None:
            raise ValueError("Invalid value for `token`, must not be `None`")  # noqa: E501

        self._token = token

    @property
    def user(self):
        """Gets the user of this AppInstanceResponse.  # noqa: E501


        :return: The user of this AppInstanceResponse.  # noqa: E501
        :rtype: NestedIDHref
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this AppInstanceResponse.


        :param user: The user of this AppInstanceResponse.  # noqa: E501
        :type: NestedIDHref
        """
        if user is None:
            raise ValueError("Invalid value for `user`, must not be `None`")  # noqa: E501

        self._user = user

    @property
    def client_application(self):
        """Gets the client_application of this AppInstanceResponse.  # noqa: E501


        :return: The client_application of this AppInstanceResponse.  # noqa: E501
        :rtype: NestedIDHref
        """
        return self._client_application

    @client_application.setter
    def client_application(self, client_application):
        """Sets the client_application of this AppInstanceResponse.


        :param client_application: The client_application of this AppInstanceResponse.  # noqa: E501
        :type: NestedIDHref
        """
        if client_application is None:
            raise ValueError("Invalid value for `client_application`, must not be `None`")  # noqa: E501

        self._client_application = client_application

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AppInstanceResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AppInstanceResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
