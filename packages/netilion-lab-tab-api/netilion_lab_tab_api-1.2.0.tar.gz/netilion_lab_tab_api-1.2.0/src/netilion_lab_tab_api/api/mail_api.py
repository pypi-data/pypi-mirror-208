# coding: utf-8

"""
    Netilion API Documentation

    Welcome to the Netilion API Documentation, which provides interactive access and documentation to our REST API.  This section contains new endpoints which are still under development. You're welcome to test them but please note that they still can change anytime!   # noqa: E501

    OpenAPI spec version: 01.00.00
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from netilion_lab_tab_api.api_client import ApiClient


class MailApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def send_mail(self, body, **kwargs):  # noqa: E501
        """Send a mail to given email addresses/users  # noqa: E501

        Sends a mail to the given email addresses/users. At least one email address or one user is required. The message content can be formatted using markdown. Following markdown tags are supported:   * Headers  * Lists  * Links  * Buttons (special tag, e.g.: ```[[Button]](https://netilion.endress.com/)```)  * Paragraphs  All other tags will be ignored and silently striped, especially html is not allowed. Can only be used by technical users of client applications which are allowed to send mails.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.send_mail(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MailRequest body: Mail object to send. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.send_mail_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.send_mail_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def send_mail_with_http_info(self, body, **kwargs):  # noqa: E501
        """Send a mail to given email addresses/users  # noqa: E501

        Sends a mail to the given email addresses/users. At least one email address or one user is required. The message content can be formatted using markdown. Following markdown tags are supported:   * Headers  * Lists  * Links  * Buttons (special tag, e.g.: ```[[Button]](https://netilion.endress.com/)```)  * Paragraphs  All other tags will be ignored and silently striped, especially html is not allowed. Can only be used by technical users of client applications which are allowed to send mails.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.send_mail_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MailRequest body: Mail object to send. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method send_mail" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `send_mail`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API-Key', 'Authentication']  # noqa: E501

        return self.api_client.call_api(
            '/mails', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
