# coding: utf-8

"""
    Netilion API Documentation

    Welcome to the Netilion API Documentation, which provides interactive access and documentation to our REST API.  This section contains new endpoints which are still under development. You're welcome to test them but please note that they still can change anytime!   # noqa: E501

    OpenAPI spec version: 01.00.00
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ConnectedAssetRequestConnection(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'standard': 'str',
        'rssi': 'float',
        'imei': 'str',
        'iccid': 'str',
        'imsi': 'str'
    }

    attribute_map = {
        'type': 'type',
        'standard': 'standard',
        'rssi': 'rssi',
        'imei': 'imei',
        'iccid': 'iccid',
        'imsi': 'imsi'
    }

    def __init__(self, type=None, standard=None, rssi=None, imei=None, iccid=None, imsi=None):  # noqa: E501
        """ConnectedAssetRequestConnection - a model defined in Swagger"""  # noqa: E501
        self._type = None
        self._standard = None
        self._rssi = None
        self._imei = None
        self._iccid = None
        self._imsi = None
        self.discriminator = None
        if type is not None:
            self.type = type
        if standard is not None:
            self.standard = standard
        if rssi is not None:
            self.rssi = rssi
        if imei is not None:
            self.imei = imei
        if iccid is not None:
            self.iccid = iccid
        if imsi is not None:
            self.imsi = imsi

    @property
    def type(self):
        """Gets the type of this ConnectedAssetRequestConnection.  # noqa: E501

        The type of connection (mobile, ethernet or wifi)  # noqa: E501

        :return: The type of this ConnectedAssetRequestConnection.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ConnectedAssetRequestConnection.

        The type of connection (mobile, ethernet or wifi)  # noqa: E501

        :param type: The type of this ConnectedAssetRequestConnection.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def standard(self):
        """Gets the standard of this ConnectedAssetRequestConnection.  # noqa: E501

        The used standard of the connection (wifi: [802.11, 802.11a, 802.11b, 802.11g, 802.11n, 802.11ac, 802.11ax, 802.11be, 802.11ad], ethernet: [802.3, 802.3a, 802.3i, 802.3j, 802.3u, 802.3z, 802.3ab, 802.3ae, 802.3an], mobile: [1G, GSM, GPRS, 2G, EDGE, 3G, UMTS, HSPDA, HSUPA, HSPA+, 4G, LTE, LTE Advanced, LTE Advanced Pro, 5G, NR, NB-IoT, LTE-M])  # noqa: E501

        :return: The standard of this ConnectedAssetRequestConnection.  # noqa: E501
        :rtype: str
        """
        return self._standard

    @standard.setter
    def standard(self, standard):
        """Sets the standard of this ConnectedAssetRequestConnection.

        The used standard of the connection (wifi: [802.11, 802.11a, 802.11b, 802.11g, 802.11n, 802.11ac, 802.11ax, 802.11be, 802.11ad], ethernet: [802.3, 802.3a, 802.3i, 802.3j, 802.3u, 802.3z, 802.3ab, 802.3ae, 802.3an], mobile: [1G, GSM, GPRS, 2G, EDGE, 3G, UMTS, HSPDA, HSUPA, HSPA+, 4G, LTE, LTE Advanced, LTE Advanced Pro, 5G, NR, NB-IoT, LTE-M])  # noqa: E501

        :param standard: The standard of this ConnectedAssetRequestConnection.  # noqa: E501
        :type: str
        """

        self._standard = standard

    @property
    def rssi(self):
        """Gets the rssi of this ConnectedAssetRequestConnection.  # noqa: E501

        Received signal strength indication in dBm  # noqa: E501

        :return: The rssi of this ConnectedAssetRequestConnection.  # noqa: E501
        :rtype: float
        """
        return self._rssi

    @rssi.setter
    def rssi(self, rssi):
        """Sets the rssi of this ConnectedAssetRequestConnection.

        Received signal strength indication in dBm  # noqa: E501

        :param rssi: The rssi of this ConnectedAssetRequestConnection.  # noqa: E501
        :type: float
        """

        self._rssi = rssi

    @property
    def imei(self):
        """Gets the imei of this ConnectedAssetRequestConnection.  # noqa: E501

        International Mobile Equipment Identity (identifier of the asset modem)  # noqa: E501

        :return: The imei of this ConnectedAssetRequestConnection.  # noqa: E501
        :rtype: str
        """
        return self._imei

    @imei.setter
    def imei(self, imei):
        """Sets the imei of this ConnectedAssetRequestConnection.

        International Mobile Equipment Identity (identifier of the asset modem)  # noqa: E501

        :param imei: The imei of this ConnectedAssetRequestConnection.  # noqa: E501
        :type: str
        """

        self._imei = imei

    @property
    def iccid(self):
        """Gets the iccid of this ConnectedAssetRequestConnection.  # noqa: E501

        Integrated circuit card identifier (identifier of the sim card)  # noqa: E501

        :return: The iccid of this ConnectedAssetRequestConnection.  # noqa: E501
        :rtype: str
        """
        return self._iccid

    @iccid.setter
    def iccid(self, iccid):
        """Sets the iccid of this ConnectedAssetRequestConnection.

        Integrated circuit card identifier (identifier of the sim card)  # noqa: E501

        :param iccid: The iccid of this ConnectedAssetRequestConnection.  # noqa: E501
        :type: str
        """

        self._iccid = iccid

    @property
    def imsi(self):
        """Gets the imsi of this ConnectedAssetRequestConnection.  # noqa: E501

        International mobile subscriber identity (identifier of the provider)  # noqa: E501

        :return: The imsi of this ConnectedAssetRequestConnection.  # noqa: E501
        :rtype: str
        """
        return self._imsi

    @imsi.setter
    def imsi(self, imsi):
        """Sets the imsi of this ConnectedAssetRequestConnection.

        International mobile subscriber identity (identifier of the provider)  # noqa: E501

        :param imsi: The imsi of this ConnectedAssetRequestConnection.  # noqa: E501
        :type: str
        """

        self._imsi = imsi

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConnectedAssetRequestConnection, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConnectedAssetRequestConnection):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
