# coding: utf-8

"""
    Netilion API Documentation

    Welcome to the Netilion API Documentation, which provides interactive access and documentation to our REST API.  This section contains new endpoints which are still under development. You're welcome to test them but please note that they still can change anytime!   # noqa: E501

    OpenAPI spec version: 01.00.00
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FirmwareResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'version': 'str',
        'status': 'str',
        'timestamp': 'float',
        'url': 'str',
        'fingerprint': 'str'
    }

    attribute_map = {
        'version': 'version',
        'status': 'status',
        'timestamp': 'timestamp',
        'url': 'url',
        'fingerprint': 'fingerprint'
    }

    def __init__(self, version=None, status=None, timestamp=None, url=None, fingerprint=None):  # noqa: E501
        """FirmwareResponse - a model defined in Swagger"""  # noqa: E501
        self._version = None
        self._status = None
        self._timestamp = None
        self._url = None
        self._fingerprint = None
        self.discriminator = None
        self.version = version
        self.status = status
        self.timestamp = timestamp
        self.url = url
        if fingerprint is not None:
            self.fingerprint = fingerprint

    @property
    def version(self):
        """Gets the version of this FirmwareResponse.  # noqa: E501

        version of the firmware  # noqa: E501

        :return: The version of this FirmwareResponse.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this FirmwareResponse.

        version of the firmware  # noqa: E501

        :param version: The version of this FirmwareResponse.  # noqa: E501
        :type: str
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")  # noqa: E501

        self._version = version

    @property
    def status(self):
        """Gets the status of this FirmwareResponse.  # noqa: E501

        The status of the firmware schedule, either \"update_scheduled\" or \"update_cancelled\". \"update_scheduled\" should trigger an update schedule for a firmware version and \"update_cancelled\" should cancel the update if it already exists on the connected asset.  # noqa: E501

        :return: The status of this FirmwareResponse.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this FirmwareResponse.

        The status of the firmware schedule, either \"update_scheduled\" or \"update_cancelled\". \"update_scheduled\" should trigger an update schedule for a firmware version and \"update_cancelled\" should cancel the update if it already exists on the connected asset.  # noqa: E501

        :param status: The status of this FirmwareResponse.  # noqa: E501
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def timestamp(self):
        """Gets the timestamp of this FirmwareResponse.  # noqa: E501

        The timestamp when the update schedule should take place  # noqa: E501

        :return: The timestamp of this FirmwareResponse.  # noqa: E501
        :rtype: float
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this FirmwareResponse.

        The timestamp when the update schedule should take place  # noqa: E501

        :param timestamp: The timestamp of this FirmwareResponse.  # noqa: E501
        :type: float
        """
        if timestamp is None:
            raise ValueError("Invalid value for `timestamp`, must not be `None`")  # noqa: E501

        self._timestamp = timestamp

    @property
    def url(self):
        """Gets the url of this FirmwareResponse.  # noqa: E501

        The url of the firmware version that is scheduled  # noqa: E501

        :return: The url of this FirmwareResponse.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this FirmwareResponse.

        The url of the firmware version that is scheduled  # noqa: E501

        :param url: The url of this FirmwareResponse.  # noqa: E501
        :type: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")  # noqa: E501

        self._url = url

    @property
    def fingerprint(self):
        """Gets the fingerprint of this FirmwareResponse.  # noqa: E501

        The fingerprint of the firmware file  # noqa: E501

        :return: The fingerprint of this FirmwareResponse.  # noqa: E501
        :rtype: str
        """
        return self._fingerprint

    @fingerprint.setter
    def fingerprint(self, fingerprint):
        """Sets the fingerprint of this FirmwareResponse.

        The fingerprint of the firmware file  # noqa: E501

        :param fingerprint: The fingerprint of this FirmwareResponse.  # noqa: E501
        :type: str
        """

        self._fingerprint = fingerprint

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FirmwareResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FirmwareResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
