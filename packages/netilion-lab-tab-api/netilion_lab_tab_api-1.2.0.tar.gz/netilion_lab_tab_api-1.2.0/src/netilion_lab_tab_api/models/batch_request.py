# coding: utf-8

"""
    Netilion API Documentation

    Welcome to the Netilion API Documentation, which provides interactive access and documentation to our REST API.  This section contains new endpoints which are still under development. You're welcome to test them but please note that they still can change anytime!   # noqa: E501

    OpenAPI spec version: 01.00.00
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from netilion_lab_tab_api.models.batch_base import BatchBase  # noqa: F401,E501

class BatchRequest(BatchBase):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'status': 'NestedID',
        'recipe': 'NestedID',
        'system': 'NestedID',
        'type': 'NestedID',
        'tenant': 'NestedID'
    }
    if hasattr(BatchBase, "swagger_types"):
        swagger_types.update(BatchBase.swagger_types)

    attribute_map = {
        'status': 'status',
        'recipe': 'recipe',
        'system': 'system',
        'type': 'type',
        'tenant': 'tenant'
    }
    if hasattr(BatchBase, "attribute_map"):
        attribute_map.update(BatchBase.attribute_map)

    def __init__(self, status=None, recipe=None, system=None, type=None, tenant=None, *args, **kwargs):  # noqa: E501
        """BatchRequest - a model defined in Swagger"""  # noqa: E501
        self._status = None
        self._recipe = None
        self._system = None
        self._type = None
        self._tenant = None
        self.discriminator = None
        if status is not None:
            self.status = status
        if recipe is not None:
            self.recipe = recipe
        if system is not None:
            self.system = system
        if type is not None:
            self.type = type
        if tenant is not None:
            self.tenant = tenant
        BatchBase.__init__(self, *args, **kwargs)

    @property
    def status(self):
        """Gets the status of this BatchRequest.  # noqa: E501


        :return: The status of this BatchRequest.  # noqa: E501
        :rtype: NestedID
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this BatchRequest.


        :param status: The status of this BatchRequest.  # noqa: E501
        :type: NestedID
        """

        self._status = status

    @property
    def recipe(self):
        """Gets the recipe of this BatchRequest.  # noqa: E501


        :return: The recipe of this BatchRequest.  # noqa: E501
        :rtype: NestedID
        """
        return self._recipe

    @recipe.setter
    def recipe(self, recipe):
        """Sets the recipe of this BatchRequest.


        :param recipe: The recipe of this BatchRequest.  # noqa: E501
        :type: NestedID
        """

        self._recipe = recipe

    @property
    def system(self):
        """Gets the system of this BatchRequest.  # noqa: E501


        :return: The system of this BatchRequest.  # noqa: E501
        :rtype: NestedID
        """
        return self._system

    @system.setter
    def system(self, system):
        """Sets the system of this BatchRequest.


        :param system: The system of this BatchRequest.  # noqa: E501
        :type: NestedID
        """

        self._system = system

    @property
    def type(self):
        """Gets the type of this BatchRequest.  # noqa: E501


        :return: The type of this BatchRequest.  # noqa: E501
        :rtype: NestedID
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this BatchRequest.


        :param type: The type of this BatchRequest.  # noqa: E501
        :type: NestedID
        """

        self._type = type

    @property
    def tenant(self):
        """Gets the tenant of this BatchRequest.  # noqa: E501


        :return: The tenant of this BatchRequest.  # noqa: E501
        :rtype: NestedID
        """
        return self._tenant

    @tenant.setter
    def tenant(self, tenant):
        """Sets the tenant of this BatchRequest.


        :param tenant: The tenant of this BatchRequest.  # noqa: E501
        :type: NestedID
        """

        self._tenant = tenant

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BatchRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BatchRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
