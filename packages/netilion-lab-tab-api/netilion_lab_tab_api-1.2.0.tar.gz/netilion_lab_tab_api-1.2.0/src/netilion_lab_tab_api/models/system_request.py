# coding: utf-8

"""
    Netilion API Documentation

    Welcome to the Netilion API Documentation, which provides interactive access and documentation to our REST API.  This section contains new endpoints which are still under development. You're welcome to test them but please note that they still can change anytime!   # noqa: E501

    OpenAPI spec version: 01.00.00
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from netilion_lab_tab_api.models.system_base import SystemBase  # noqa: F401,E501

class SystemRequest(SystemBase):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'status': 'NestedID',
        'type': 'NestedID',
        'parent': 'NestedID',
        'recipe': 'NestedID',
        'tenant': 'NestedID'
    }
    if hasattr(SystemBase, "swagger_types"):
        swagger_types.update(SystemBase.swagger_types)

    attribute_map = {
        'status': 'status',
        'type': 'type',
        'parent': 'parent',
        'recipe': 'recipe',
        'tenant': 'tenant'
    }
    if hasattr(SystemBase, "attribute_map"):
        attribute_map.update(SystemBase.attribute_map)

    def __init__(self, status=None, type=None, parent=None, recipe=None, tenant=None, *args, **kwargs):  # noqa: E501
        """SystemRequest - a model defined in Swagger"""  # noqa: E501
        self._status = None
        self._type = None
        self._parent = None
        self._recipe = None
        self._tenant = None
        self.discriminator = None
        if status is not None:
            self.status = status
        if type is not None:
            self.type = type
        if parent is not None:
            self.parent = parent
        if recipe is not None:
            self.recipe = recipe
        if tenant is not None:
            self.tenant = tenant
        SystemBase.__init__(self, *args, **kwargs)

    @property
    def status(self):
        """Gets the status of this SystemRequest.  # noqa: E501


        :return: The status of this SystemRequest.  # noqa: E501
        :rtype: NestedID
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this SystemRequest.


        :param status: The status of this SystemRequest.  # noqa: E501
        :type: NestedID
        """

        self._status = status

    @property
    def type(self):
        """Gets the type of this SystemRequest.  # noqa: E501


        :return: The type of this SystemRequest.  # noqa: E501
        :rtype: NestedID
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SystemRequest.


        :param type: The type of this SystemRequest.  # noqa: E501
        :type: NestedID
        """

        self._type = type

    @property
    def parent(self):
        """Gets the parent of this SystemRequest.  # noqa: E501


        :return: The parent of this SystemRequest.  # noqa: E501
        :rtype: NestedID
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """Sets the parent of this SystemRequest.


        :param parent: The parent of this SystemRequest.  # noqa: E501
        :type: NestedID
        """

        self._parent = parent

    @property
    def recipe(self):
        """Gets the recipe of this SystemRequest.  # noqa: E501


        :return: The recipe of this SystemRequest.  # noqa: E501
        :rtype: NestedID
        """
        return self._recipe

    @recipe.setter
    def recipe(self, recipe):
        """Sets the recipe of this SystemRequest.


        :param recipe: The recipe of this SystemRequest.  # noqa: E501
        :type: NestedID
        """

        self._recipe = recipe

    @property
    def tenant(self):
        """Gets the tenant of this SystemRequest.  # noqa: E501


        :return: The tenant of this SystemRequest.  # noqa: E501
        :rtype: NestedID
        """
        return self._tenant

    @tenant.setter
    def tenant(self, tenant):
        """Sets the tenant of this SystemRequest.


        :param tenant: The tenant of this SystemRequest.  # noqa: E501
        :type: NestedID
        """

        self._tenant = tenant

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SystemRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SystemRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
