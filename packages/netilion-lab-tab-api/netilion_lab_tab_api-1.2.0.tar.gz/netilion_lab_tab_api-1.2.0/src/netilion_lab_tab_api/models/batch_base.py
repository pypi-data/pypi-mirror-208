# coding: utf-8

"""
    Netilion API Documentation

    Welcome to the Netilion API Documentation, which provides interactive access and documentation to our REST API.  This section contains new endpoints which are still under development. You're welcome to test them but please note that they still can change anytime!   # noqa: E501

    OpenAPI spec version: 01.00.00
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BatchBase(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'start_date': 'str',
        'end_date': 'str',
        'golden': 'bool'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'start_date': 'start_date',
        'end_date': 'end_date',
        'golden': 'golden'
    }

    discriminator_value_class_map = {
          'BatchResponse': 'BatchResponse',
'BatchRequest': 'BatchRequest'    }

    def __init__(self, name=None, description=None, start_date=None, end_date=None, golden=None):  # noqa: E501
        """BatchBase - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._description = None
        self._start_date = None
        self._end_date = None
        self._golden = None
        self.discriminator = 'BatchBaseType'
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if start_date is not None:
            self.start_date = start_date
        if end_date is not None:
            self.end_date = end_date
        if golden is not None:
            self.golden = golden

    @property
    def name(self):
        """Gets the name of this BatchBase.  # noqa: E501

        Name of the batch.  # noqa: E501

        :return: The name of this BatchBase.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BatchBase.

        Name of the batch.  # noqa: E501

        :param name: The name of this BatchBase.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this BatchBase.  # noqa: E501

        Description of the batch.  # noqa: E501

        :return: The description of this BatchBase.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this BatchBase.

        Description of the batch.  # noqa: E501

        :param description: The description of this BatchBase.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def start_date(self):
        """Gets the start_date of this BatchBase.  # noqa: E501

        Start date of the batch.  # noqa: E501

        :return: The start_date of this BatchBase.  # noqa: E501
        :rtype: str
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this BatchBase.

        Start date of the batch.  # noqa: E501

        :param start_date: The start_date of this BatchBase.  # noqa: E501
        :type: str
        """

        self._start_date = start_date

    @property
    def end_date(self):
        """Gets the end_date of this BatchBase.  # noqa: E501

        End date of the batch.  # noqa: E501

        :return: The end_date of this BatchBase.  # noqa: E501
        :rtype: str
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this BatchBase.

        End date of the batch.  # noqa: E501

        :param end_date: The end_date of this BatchBase.  # noqa: E501
        :type: str
        """

        self._end_date = end_date

    @property
    def golden(self):
        """Gets the golden of this BatchBase.  # noqa: E501

        Golden batch. The default is `false`  # noqa: E501

        :return: The golden of this BatchBase.  # noqa: E501
        :rtype: bool
        """
        return self._golden

    @golden.setter
    def golden(self, golden):
        """Sets the golden of this BatchBase.

        Golden batch. The default is `false`  # noqa: E501

        :param golden: The golden of this BatchBase.  # noqa: E501
        :type: bool
        """

        self._golden = golden

    def get_real_child_model(self, data):
        """Returns the real base class specified by the discriminator"""
        discriminator_value = data[self.discriminator].lower()
        return self.discriminator_value_class_map.get(discriminator_value)

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BatchBase, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BatchBase):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
