# coding: utf-8

"""
    Netilion API Documentation

    Welcome to the Netilion API Documentation, which provides interactive access and documentation to our REST API.  This section contains new endpoints which are still under development. You're welcome to test them but please note that they still can change anytime!   # noqa: E501

    OpenAPI spec version: 01.00.00
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CertificateRenewalRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'status': 'str',
        'csr': 'str'
    }

    attribute_map = {
        'status': 'status',
        'csr': 'csr'
    }

    def __init__(self, status=None, csr=None):  # noqa: E501
        """CertificateRenewalRequest - a model defined in Swagger"""  # noqa: E501
        self._status = None
        self._csr = None
        self.discriminator = None
        self.status = status
        self.csr = csr

    @property
    def status(self):
        """Gets the status of this CertificateRenewalRequest.  # noqa: E501

        The status of the certificate renewal process. \"requesting\" indicates that a csr is sent in the request. \"success\" indicates that the connected asset has installed the new certificate and that the process can be closed. \"failed\" indicates that the connected asset has not installed the new certificate and that the process should be reset.  # noqa: E501

        :return: The status of this CertificateRenewalRequest.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CertificateRenewalRequest.

        The status of the certificate renewal process. \"requesting\" indicates that a csr is sent in the request. \"success\" indicates that the connected asset has installed the new certificate and that the process can be closed. \"failed\" indicates that the connected asset has not installed the new certificate and that the process should be reset.  # noqa: E501

        :param status: The status of this CertificateRenewalRequest.  # noqa: E501
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def csr(self):
        """Gets the csr of this CertificateRenewalRequest.  # noqa: E501

        Must be base64-encoded and contain the serial number as CN=MySerialNumber, needed only with status \"requesting\".  # noqa: E501

        :return: The csr of this CertificateRenewalRequest.  # noqa: E501
        :rtype: str
        """
        return self._csr

    @csr.setter
    def csr(self, csr):
        """Sets the csr of this CertificateRenewalRequest.

        Must be base64-encoded and contain the serial number as CN=MySerialNumber, needed only with status \"requesting\".  # noqa: E501

        :param csr: The csr of this CertificateRenewalRequest.  # noqa: E501
        :type: str
        """
        if csr is None:
            raise ValueError("Invalid value for `csr`, must not be `None`")  # noqa: E501

        self._csr = csr

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CertificateRenewalRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CertificateRenewalRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
