# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.8.0, generator: @autorest/python@5.12.2)
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from enum import Enum
from six import with_metaclass
from azure.core import CaseInsensitiveEnumMeta


class AEVAAssetType(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):

    URI_FILE = "UriFile"
    URI_FOLDER = "UriFolder"
    ML_TABLE = "MLTable"
    CUSTOM_MODEL = "CustomModel"
    ML_FLOW_MODEL = "MLFlowModel"
    TRITON_MODEL = "TritonModel"
    OPEN_AI_MODEL = "OpenAIModel"

class AEVADataStoreMode(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):

    NONE = "None"
    MOUNT = "Mount"
    DOWNLOAD = "Download"
    UPLOAD = "Upload"
    DIRECT = "Direct"
    HDFS = "Hdfs"
    LINK = "Link"

class AEVAIdentityType(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):

    USER_IDENTITY = "UserIdentity"
    MANAGED = "Managed"
    AML_TOKEN = "AMLToken"

class ApplicationEndpointType(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):

    JUPYTER = "Jupyter"
    JUPYTER_LAB = "JupyterLab"
    SSH = "SSH"
    TENSOR_BOARD = "TensorBoard"
    VS_CODE = "VSCode"
    THEIA = "Theia"
    GRAFANA = "Grafana"
    CUSTOM = "Custom"

class ArgumentValueType(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):

    LITERAL = "Literal"
    PARAMETER = "Parameter"
    INPUT = "Input"
    OUTPUT = "Output"
    NESTED_LIST = "NestedList"
    STRING_INTERPOLATION_LIST = "StringInterpolationList"

class AssetScopeTypes(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):

    WORKSPACE = "Workspace"
    GLOBAL_ENUM = "Global"
    FEED = "Feed"
    ALL = "All"

class AssetSourceType(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):

    UNKNOWN = "Unknown"
    LOCAL = "Local"
    GITHUB_FILE = "GithubFile"
    GITHUB_FOLDER = "GithubFolder"
    DEVOPS_ARTIFACTS_ZIP = "DevopsArtifactsZip"

class AssetType(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):

    COMPONENT = "Component"
    MODEL = "Model"
    ENVIRONMENT = "Environment"
    DATASET = "Dataset"
    DATA_STORE = "DataStore"
    SAMPLE_GRAPH = "SampleGraph"

class BuildContextLocationType(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):

    GIT = "Git"
    STORAGE_ACCOUNT = "StorageAccount"

class Communicator(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):

    NONE = "None"
    PARAMETER_SERVER = "ParameterServer"
    GLOO = "Gloo"
    MPI = "Mpi"
    NCCL = "Nccl"
    PARALLEL_TASK = "ParallelTask"

class ComponentRegistrationTypeEnum(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):

    NORMAL = "Normal"
    ANONYMOUS_AML_MODULE = "AnonymousAmlModule"
    ANONYMOUS_AML_MODULE_VERSION = "AnonymousAmlModuleVersion"
    MODULE_ENTITY_ONLY = "ModuleEntityOnly"

class ComputeEnvironmentType(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):

    ACI = "ACI"
    AKS = "AKS"
    AMLCOMPUTE = "AMLCOMPUTE"
    IOT = "IOT"
    AKSENDPOINT = "AKSENDPOINT"
    MIRSINGLEMODEL = "MIRSINGLEMODEL"
    MIRAMLCOMPUTE = "MIRAMLCOMPUTE"
    MIRGA = "MIRGA"
    AMLARC = "AMLARC"
    BATCHAMLCOMPUTE = "BATCHAMLCOMPUTE"
    UNKNOWN = "UNKNOWN"

class ComputeType(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):

    BATCH_AI = "BatchAi"
    MLC = "MLC"
    HDI_CLUSTER = "HdiCluster"
    REMOTE_DOCKER = "RemoteDocker"
    DATABRICKS = "Databricks"
    AISC = "Aisc"

class ConsumeMode(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):

    REFERENCE = "Reference"
    COPY = "Copy"
    COPY_AND_AUTO_UPGRADE = "CopyAndAutoUpgrade"

class ControlFlowType(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):

    NONE = "None"
    DO_WHILE = "DoWhile"

class ControlInputValue(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):

    NONE = "None"
    FALSE = "False"
    TRUE = "True"
    SKIPPED = "Skipped"

class DataCategory(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):

    ALL = "All"
    DATASET = "Dataset"
    MODEL = "Model"

class DataLocationStorageType(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):

    NONE = "None"
    AZURE_BLOB = "AzureBlob"
    ARTIFACT = "Artifact"
    SNAPSHOT = "Snapshot"
    SAVED_AML_DATASET = "SavedAmlDataset"
    ASSET = "Asset"

class DataReferenceType(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):

    NONE = "None"
    AZURE_BLOB = "AzureBlob"
    AZURE_DATA_LAKE = "AzureDataLake"
    AZURE_FILES = "AzureFiles"
    AZURE_SQL_DATABASE = "AzureSqlDatabase"
    AZURE_POSTGRES_DATABASE = "AzurePostgresDatabase"
    AZURE_DATA_LAKE_GEN2 = "AzureDataLakeGen2"
    DBFS = "DBFS"
    AZURE_MY_SQL_DATABASE = "AzureMySqlDatabase"
    CUSTOM = "Custom"
    HDFS = "Hdfs"

class DatasetAccessModes(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):

    DEFAULT = "Default"
    DATASET_IN_DPV2 = "DatasetInDpv2"
    ASSET_IN_DPV2 = "AssetInDpv2"
    DATASET_IN_DESIGNER_UI = "DatasetInDesignerUI"
    DATASET_IN_DPV2_WITH_DATASET_IN_DESIGNER_UI = "DatasetInDpv2WithDatasetInDesignerUI"
    ASSET_IN_DPV2_WITH_DATASET_IN_DESIGNER_UI = "AssetInDpv2WithDatasetInDesignerUI"
    DATASET_AND_ASSET_IN_DPV2_WITH_DATASET_IN_DESIGNER_UI = "DatasetAndAssetInDpv2WithDatasetInDesignerUI"
    ASSET_IN_DESIGNER_UI = "AssetInDesignerUI"
    ASSET_IN_DPV2_WITH_ASSET_IN_DESIGNER_UI = "AssetInDpv2WithAssetInDesignerUI"

class DatasetConsumptionType(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):

    RUN_INPUT = "RunInput"
    REFERENCE = "Reference"

class DatasetDeliveryMechanism(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):

    DIRECT = "Direct"
    MOUNT = "Mount"
    DOWNLOAD = "Download"
    HDFS = "Hdfs"

class DatasetOutputType(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):

    RUN_OUTPUT = "RunOutput"
    REFERENCE = "Reference"

class DatasetType(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):

    FILE = "File"
    TABULAR = "Tabular"

class DataSourceType(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):

    NONE = "None"
    PIPELINE_DATA_SOURCE = "PipelineDataSource"
    AML_DATASET = "AmlDataset"
    GLOBAL_DATASET = "GlobalDataset"
    FEED_MODEL = "FeedModel"
    FEED_DATASET = "FeedDataset"
    AML_DATA_VERSION = "AmlDataVersion"
    AML_MODEL_VERSION = "AMLModelVersion"

class DataStoreMode(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):

    MOUNT = "Mount"
    DOWNLOAD = "Download"
    UPLOAD = "Upload"

class DataTypeMechanism(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):

    ERROR_WHEN_NOT_EXISTING = "ErrorWhenNotExisting"
    REGISTER_WHEN_NOT_EXISTING = "RegisterWhenNotExisting"
    REGISTER_BUILDIN_DATA_TYPE_ONLY = "RegisterBuildinDataTypeOnly"

class DeliveryMechanism(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):

    DIRECT = "Direct"
    MOUNT = "Mount"
    DOWNLOAD = "Download"
    HDFS = "Hdfs"

class EarlyTerminationPolicyType(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):

    BANDIT = "Bandit"
    MEDIAN_STOPPING = "MedianStopping"
    TRUNCATION_SELECTION = "TruncationSelection"

class EntityKind(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):

    INVALID = "Invalid"
    LINEAGE_ROOT = "LineageRoot"
    VERSIONED = "Versioned"
    UNVERSIONED = "Unversioned"

class EntityStatus(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):

    ACTIVE = "Active"
    DEPRECATED = "Deprecated"
    DISABLED = "Disabled"

class ExecutionPhase(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):

    EXECUTION = "Execution"
    INITIALIZATION = "Initialization"
    FINALIZATION = "Finalization"

class FeaturizationMode(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):

    AUTO = "Auto"
    CUSTOM = "Custom"
    OFF = "Off"

class ForecastHorizonMode(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):

    AUTO = "Auto"
    CUSTOM = "Custom"

class Framework(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):

    PYTHON = "Python"
    PY_SPARK = "PySpark"
    CNTK = "Cntk"
    TENSOR_FLOW = "TensorFlow"
    PY_TORCH = "PyTorch"
    PY_SPARK_INTERACTIVE = "PySparkInteractive"
    R = "R"

class Frequency(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):

    MONTH = "Month"
    WEEK = "Week"
    DAY = "Day"
    HOUR = "Hour"
    MINUTE = "Minute"

class GlobalJobDispatcherSupportedComputeType(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):

    AML_COMPUTE = "AmlCompute"
    AML_K8_S = "AmlK8s"

class GraphDatasetsLoadModes(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):

    SKIP_DATASETS_LOAD = "SkipDatasetsLoad"
    V1_REGISTERED_DATASET = "V1RegisteredDataset"
    V1_SAVED_DATASET = "V1SavedDataset"
    PERSIST_DATASETS_INFO = "PersistDatasetsInfo"
    SUBMISSION_NEEDED_UPSTREAM_DATASET_ONLY = "SubmissionNeededUpstreamDatasetOnly"
    SUBMISSION_NEEDED_IN_COMPLETE_DATASET_ONLY = "SubmissionNeededInCompleteDatasetOnly"
    SUBMISSION = "Submission"
    V2_ASSET = "V2Asset"
    ALL_REGISTERED_DATA = "AllRegisteredData"
    ALL_DATA = "AllData"

class GraphSdkCodeType(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):

    PYTHON = "Python"
    JUPYTER_NOTEBOOK = "JupyterNotebook"
    UNKNOWN = "Unknown"

class HttpStatusCode(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):

    CONTINUE_ENUM = "Continue"
    SWITCHING_PROTOCOLS = "SwitchingProtocols"
    PROCESSING = "Processing"
    EARLY_HINTS = "EarlyHints"
    OK = "OK"
    CREATED = "Created"
    ACCEPTED = "Accepted"
    NON_AUTHORITATIVE_INFORMATION = "NonAuthoritativeInformation"
    NO_CONTENT = "NoContent"
    RESET_CONTENT = "ResetContent"
    PARTIAL_CONTENT = "PartialContent"
    MULTI_STATUS = "MultiStatus"
    ALREADY_REPORTED = "AlreadyReported"
    IM_USED = "IMUsed"
    MULTIPLE_CHOICES = "MultipleChoices"
    AMBIGUOUS = "Ambiguous"
    MOVED_PERMANENTLY = "MovedPermanently"
    MOVED = "Moved"
    FOUND = "Found"
    REDIRECT = "Redirect"
    SEE_OTHER = "SeeOther"
    REDIRECT_METHOD = "RedirectMethod"
    NOT_MODIFIED = "NotModified"
    USE_PROXY = "UseProxy"
    UNUSED = "Unused"
    TEMPORARY_REDIRECT = "TemporaryRedirect"
    REDIRECT_KEEP_VERB = "RedirectKeepVerb"
    PERMANENT_REDIRECT = "PermanentRedirect"
    BAD_REQUEST = "BadRequest"
    UNAUTHORIZED = "Unauthorized"
    PAYMENT_REQUIRED = "PaymentRequired"
    FORBIDDEN = "Forbidden"
    NOT_FOUND = "NotFound"
    METHOD_NOT_ALLOWED = "MethodNotAllowed"
    NOT_ACCEPTABLE = "NotAcceptable"
    PROXY_AUTHENTICATION_REQUIRED = "ProxyAuthenticationRequired"
    REQUEST_TIMEOUT = "RequestTimeout"
    CONFLICT = "Conflict"
    GONE = "Gone"
    LENGTH_REQUIRED = "LengthRequired"
    PRECONDITION_FAILED = "PreconditionFailed"
    REQUEST_ENTITY_TOO_LARGE = "RequestEntityTooLarge"
    REQUEST_URI_TOO_LONG = "RequestUriTooLong"
    UNSUPPORTED_MEDIA_TYPE = "UnsupportedMediaType"
    REQUESTED_RANGE_NOT_SATISFIABLE = "RequestedRangeNotSatisfiable"
    EXPECTATION_FAILED = "ExpectationFailed"
    MISDIRECTED_REQUEST = "MisdirectedRequest"
    UNPROCESSABLE_ENTITY = "UnprocessableEntity"
    LOCKED = "Locked"
    FAILED_DEPENDENCY = "FailedDependency"
    UPGRADE_REQUIRED = "UpgradeRequired"
    PRECONDITION_REQUIRED = "PreconditionRequired"
    TOO_MANY_REQUESTS = "TooManyRequests"
    REQUEST_HEADER_FIELDS_TOO_LARGE = "RequestHeaderFieldsTooLarge"
    UNAVAILABLE_FOR_LEGAL_REASONS = "UnavailableForLegalReasons"
    INTERNAL_SERVER_ERROR = "InternalServerError"
    NOT_IMPLEMENTED = "NotImplemented"
    BAD_GATEWAY = "BadGateway"
    SERVICE_UNAVAILABLE = "ServiceUnavailable"
    GATEWAY_TIMEOUT = "GatewayTimeout"
    HTTP_VERSION_NOT_SUPPORTED = "HttpVersionNotSupported"
    VARIANT_ALSO_NEGOTIATES = "VariantAlsoNegotiates"
    INSUFFICIENT_STORAGE = "InsufficientStorage"
    LOOP_DETECTED = "LoopDetected"
    NOT_EXTENDED = "NotExtended"
    NETWORK_AUTHENTICATION_REQUIRED = "NetworkAuthenticationRequired"

class HttpVersionPolicy(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):

    REQUEST_VERSION_OR_LOWER = "RequestVersionOrLower"
    REQUEST_VERSION_OR_HIGHER = "RequestVersionOrHigher"
    REQUEST_VERSION_EXACT = "RequestVersionExact"

class IdentityType(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):

    MANAGED = "Managed"
    SERVICE_PRINCIPAL = "ServicePrincipal"
    AML_TOKEN = "AMLToken"

class KeyType(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):

    PRIMARY = "Primary"
    SECONDARY = "Secondary"

class LogVerbosity(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):

    NOT_SET = "NotSet"
    DEBUG = "Debug"
    INFO = "Info"
    WARNING = "Warning"
    ERROR = "Error"
    CRITICAL = "Critical"

class LongRunningUpdateType(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):

    ENABLE_MODULE = "EnableModule"
    DISABLE_MODULE = "DisableModule"
    UPDATE_DISPLAY_NAME = "UpdateDisplayName"
    UPDATE_DESCRIPTION = "UpdateDescription"
    UPDATE_TAGS = "UpdateTags"

class MetricValueType(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):

    INT = "Int"
    DOUBLE = "Double"
    STRING = "String"
    BOOL = "Bool"
    ARTIFACT = "Artifact"
    HISTOGRAM = "Histogram"
    MALFORMED = "Malformed"

class ModuleDtoFields(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):

    DEFINITION = "Definition"
    YAML_STR = "YamlStr"
    REGISTRATION_CONTEXT = "RegistrationContext"
    MINIMAL = "Minimal"
    BASIC = "Basic"
    RUN_SETTING_PARAMETERS = "RunSettingParameters"
    DEFAULT = "Default"
    RUN_DEFINITION = "RunDefinition"
    ALL = "All"

class ModuleInfoFromYamlStatusEnum(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):

    NEW_MODULE = "NewModule"
    NEW_VERSION = "NewVersion"
    CONFLICT = "Conflict"
    PARSE_ERROR = "ParseError"
    PROCESS_REQUEST_ERROR = "ProcessRequestError"

class ModuleRegistrationStatusEnum(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):

    SUCCEEDED = "Succeeded"
    FAILED = "Failed"

class ModuleRunSettingTypes(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):

    ALL = "All"
    RELEASED = "Released"
    DEFAULT = "Default"
    TESTING = "Testing"
    LEGACY = "Legacy"
    PREVIEW = "Preview"
    INTEGRATION = "Integration"
    UX_INTEGRATION = "UxIntegration"
    UX_FULL = "UxFull"
    FULL = "Full"

class ModuleScope(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):

    ALL = "All"
    GLOBAL_ENUM = "Global"
    WORKSPACE = "Workspace"
    ANONYMOUS = "Anonymous"
    STEP = "Step"
    DRAFT = "Draft"
    FEED = "Feed"
    REGISTRY = "Registry"

class ModuleSourceType(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):

    UNKNOWN = "Unknown"
    LOCAL = "Local"
    GITHUB_FILE = "GithubFile"
    GITHUB_FOLDER = "GithubFolder"
    DEVOPS_ARTIFACTS_ZIP = "DevopsArtifactsZip"
    SERIALIZED_MODULE_INFO = "SerializedModuleInfo"

class ModuleType(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):

    NONE = "None"
    BATCH_INFERENCING = "BatchInferencing"

class ModuleUpdateOperationType(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):

    SET_DEFAULT_VERSION = "SetDefaultVersion"
    ENABLE_MODULE = "EnableModule"
    DISABLE_MODULE = "DisableModule"
    UPDATE_DISPLAY_NAME = "UpdateDisplayName"
    UPDATE_DESCRIPTION = "UpdateDescription"
    UPDATE_TAGS = "UpdateTags"

class ModuleWorkingMechanism(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):

    NORMAL = "Normal"
    OUTPUT_TO_DATASET = "OutputToDataset"

class NCrossValidationMode(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):

    AUTO = "Auto"
    CUSTOM = "Custom"

class NodeCompositionMode(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):

    NONE = "None"
    ONLY_SEQUENTIAL = "OnlySequential"
    FULL = "Full"

class NodesValueType(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):

    ALL = "All"
    CUSTOM = "Custom"

class OutputMechanism(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):

    UPLOAD = "Upload"
    MOUNT = "Mount"
    HDFS = "Hdfs"
    LINK = "Link"
    DIRECT = "Direct"

class ParameterType(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):

    INT = "Int"
    DOUBLE = "Double"
    BOOL = "Bool"
    STRING = "String"
    UNDEFINED = "Undefined"

class ParameterValueType(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):

    LITERAL = "Literal"
    GRAPH_PARAMETER_NAME = "GraphParameterName"
    CONCATENATE = "Concatenate"
    INPUT = "Input"
    DATA_PATH = "DataPath"
    DATA_SET_DEFINITION = "DataSetDefinition"

class PipelineDraftMode(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):

    NONE = "None"
    NORMAL = "Normal"
    CUSTOM = "Custom"

class PipelineRunStatusCode(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):

    NOT_STARTED = "NotStarted"
    RUNNING = "Running"
    FAILED = "Failed"
    FINISHED = "Finished"
    CANCELED = "Canceled"
    QUEUED = "Queued"

class PipelineStatusCode(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):

    NOT_STARTED = "NotStarted"
    IN_DRAFT = "InDraft"
    PREPARING = "Preparing"
    RUNNING = "Running"
    FAILED = "Failed"
    FINISHED = "Finished"
    CANCELED = "Canceled"
    THROTTLED = "Throttled"
    UNKNOWN = "Unknown"

class PipelineType(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):

    TRAINING_PIPELINE = "TrainingPipeline"
    REAL_TIME_INFERENCE_PIPELINE = "RealTimeInferencePipeline"
    BATCH_INFERENCE_PIPELINE = "BatchInferencePipeline"
    UNKNOWN = "Unknown"

class PortAction(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):

    PROMOTE = "Promote"
    VIEW_IN_DATA_STORE = "ViewInDataStore"
    VISUALIZE = "Visualize"
    GET_SCHEMA = "GetSchema"
    CREATE_INFERENCE_GRAPH = "CreateInferenceGraph"
    REGISTER_MODEL = "RegisterModel"
    PROMOTE_AS_TABULAR = "PromoteAsTabular"

class PrimaryMetrics(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):

    AUC_WEIGHTED = "AUCWeighted"
    ACCURACY = "Accuracy"
    NORM_MACRO_RECALL = "NormMacroRecall"
    AVERAGE_PRECISION_SCORE_WEIGHTED = "AveragePrecisionScoreWeighted"
    PRECISION_SCORE_WEIGHTED = "PrecisionScoreWeighted"
    SPEARMAN_CORRELATION = "SpearmanCorrelation"
    NORMALIZED_ROOT_MEAN_SQUARED_ERROR = "NormalizedRootMeanSquaredError"
    R2_SCORE = "R2Score"
    NORMALIZED_MEAN_ABSOLUTE_ERROR = "NormalizedMeanAbsoluteError"
    NORMALIZED_ROOT_MEAN_SQUARED_LOG_ERROR = "NormalizedRootMeanSquaredLogError"
    MEAN_AVERAGE_PRECISION = "MeanAveragePrecision"
    IOU = "Iou"

class RealTimeEndpointInternalStepCode(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):

    ABOUT_TO_DEPLOY = "AboutToDeploy"
    WAIT_AKS_COMPUTE_READY = "WaitAksComputeReady"
    REGISTER_MODELS = "RegisterModels"
    CREATE_SERVICE_FROM_MODELS = "CreateServiceFromModels"
    UPDATE_SERVICE_FROM_MODELS = "UpdateServiceFromModels"
    WAIT_SERVICE_CREATING = "WaitServiceCreating"
    FETCH_SERVICE_RELATED_INFO = "FetchServiceRelatedInfo"
    TEST_WITH_SAMPLE_DATA = "TestWithSampleData"
    ABOUT_TO_DELETE = "AboutToDelete"
    DELETE_DEPLOYMENT = "DeleteDeployment"
    DELETE_ASSET = "DeleteAsset"
    DELETE_IMAGE = "DeleteImage"
    DELETE_MODEL = "DeleteModel"
    DELETE_SERVICE_RECORD = "DeleteServiceRecord"

class RealTimeEndpointOpCode(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):

    CREATE = "Create"
    UPDATE = "Update"
    DELETE = "Delete"

class RealTimeEndpointOpStatusCode(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):

    ONGOING = "Ongoing"
    SUCCEEDED = "Succeeded"
    FAILED = "Failed"
    SUCCEEDED_WITH_WARNING = "SucceededWithWarning"

class RunSettingParameterType(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):

    UNDEFINED = "Undefined"
    INT = "Int"
    DOUBLE = "Double"
    BOOL = "Bool"
    STRING = "String"
    JSON_STRING = "JsonString"
    YAML_STRING = "YamlString"

class RunSettingUIWidgetTypeEnum(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):

    DEFAULT = "Default"
    COMPUTE_SELECTION = "ComputeSelection"
    JSON_EDITOR = "JsonEditor"
    MODE = "Mode"
    SEARCH_SPACE_PARAMETER = "SearchSpaceParameter"
    SECTION_TOGGLE = "SectionToggle"
    YAML_EDITOR = "YamlEditor"
    ENABLE_RUNTIME_SWEEP = "EnableRuntimeSweep"
    DATA_STORE_SELECTION = "DataStoreSelection"

class RunStatus(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):

    NOT_STARTED = "NotStarted"
    UNAPPROVED = "Unapproved"
    PAUSING = "Pausing"
    PAUSED = "Paused"
    STARTING = "Starting"
    PREPARING = "Preparing"
    QUEUED = "Queued"
    RUNNING = "Running"
    FINALIZING = "Finalizing"
    CANCEL_REQUESTED = "CancelRequested"
    COMPLETED = "Completed"
    FAILED = "Failed"
    CANCELED = "Canceled"

class RunType(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):

    HTTP = "HTTP"
    SDK = "SDK"
    SCHEDULE = "Schedule"
    PORTAL = "Portal"

class SamplingAlgorithmType(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):

    GRID = "Grid"
    RANDOM = "Random"
    BAYESIAN = "Bayesian"

class ScheduleProvisioningStatus(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):

    CREATING = "Creating"
    UPDATING = "Updating"
    DELETING = "Deleting"
    SUCCEEDED = "Succeeded"
    FAILED = "Failed"
    CANCELED = "Canceled"

class ScheduleStatus(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):

    ENABLED = "Enabled"
    DISABLED = "Disabled"

class ScopeType(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):

    GLOBAL_ENUM = "Global"
    TENANT = "Tenant"
    SUBSCRIPTION = "Subscription"
    RESOURCE_GROUP = "ResourceGroup"
    WORKSPACE = "Workspace"

class SeasonalityMode(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):

    AUTO = "Auto"
    CUSTOM = "Custom"

class ShortSeriesHandlingConfiguration(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):

    AUTO = "Auto"
    PAD = "Pad"
    DROP = "Drop"

class StackMetaLearnerType(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):

    NONE = "None"
    LOGISTIC_REGRESSION = "LogisticRegression"
    LOGISTIC_REGRESSION_CV = "LogisticRegressionCV"
    LIGHT_GBM_CLASSIFIER = "LightGBMClassifier"
    ELASTIC_NET = "ElasticNet"
    ELASTIC_NET_CV = "ElasticNetCV"
    LIGHT_GBM_REGRESSOR = "LightGBMRegressor"
    LINEAR_REGRESSION = "LinearRegression"

class StoredProcedureParameterType(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):

    STRING = "String"
    INT = "Int"
    DECIMAL = "Decimal"
    GUID = "Guid"
    BOOLEAN = "Boolean"
    DATE = "Date"

class SuccessfulCommandReturnCode(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):

    ZERO = "Zero"
    ZERO_OR_GREATER = "ZeroOrGreater"

class TargetAggregationFunction(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):

    SUM = "Sum"
    MAX = "Max"
    MIN = "Min"
    MEAN = "Mean"

class TargetLagsMode(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):

    AUTO = "Auto"
    CUSTOM = "Custom"

class TargetRollingWindowSizeMode(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):

    AUTO = "Auto"
    CUSTOM = "Custom"

class TaskStatusCode(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):

    NOT_STARTED = "NotStarted"
    QUEUED = "Queued"
    RUNNING = "Running"
    FAILED = "Failed"
    FINISHED = "Finished"
    CANCELED = "Canceled"
    PARTIALLY_EXECUTED = "PartiallyExecuted"
    BYPASSED = "Bypassed"

class TaskType(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):

    CLASSIFICATION = "Classification"
    REGRESSION = "Regression"
    FORECASTING = "Forecasting"
    IMAGE_CLASSIFICATION = "ImageClassification"
    IMAGE_CLASSIFICATION_MULTILABEL = "ImageClassificationMultilabel"
    IMAGE_OBJECT_DETECTION = "ImageObjectDetection"
    IMAGE_INSTANCE_SEGMENTATION = "ImageInstanceSegmentation"
    TEXT_CLASSIFICATION = "TextClassification"
    TEXT_MULTI_LABELING = "TextMultiLabeling"
    TEXT_NER = "TextNER"
    TEXT_CLASSIFICATION_MULTILABEL = "TextClassificationMultilabel"

class TrainingOutputType(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):

    METRICS = "Metrics"
    MODEL = "Model"

class TriggerOperationType(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):

    CREATE = "Create"
    UPDATE = "Update"
    DELETE = "Delete"
    CREATE_OR_UPDATE = "CreateOrUpdate"

class TriggerType(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):

    RECURRENCE = "Recurrence"
    CRON = "Cron"

class UIInputDataDeliveryMode(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):

    READ_ONLY_MOUNT = "Read-only mount"
    READ_WRITE_MOUNT = "Read-write mount"
    DOWNLOAD = "Download"
    DIRECT = "Direct"
    EVALUATE_MOUNT = "Evaluate mount"
    EVALUATE_DOWNLOAD = "Evaluate download"
    HDFS = "Hdfs"

class UIScriptLanguageEnum(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):

    NONE = "None"
    PYTHON = "Python"
    R = "R"
    JSON = "Json"
    SQL = "Sql"

class UIWidgetTypeEnum(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):

    DEFAULT = "Default"
    MODE = "Mode"
    COLUMN_PICKER = "ColumnPicker"
    CREDENTIAL = "Credential"
    SCRIPT = "Script"
    COMPUTE_SELECTION = "ComputeSelection"
    JSON_EDITOR = "JsonEditor"
    SEARCH_SPACE_PARAMETER = "SearchSpaceParameter"
    SECTION_TOGGLE = "SectionToggle"
    YAML_EDITOR = "YamlEditor"
    ENABLE_RUNTIME_SWEEP = "EnableRuntimeSweep"
    DATA_STORE_SELECTION = "DataStoreSelection"
    INSTANCE_TYPE_SELECTION = "InstanceTypeSelection"

class UploadState(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):

    UPLOADING = "Uploading"
    COMPLETED = "Completed"
    CANCELED = "Canceled"
    FAILED = "Failed"

class UserType(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):

    USER = "User"
    APPLICATION = "Application"
    MANAGED_IDENTITY = "ManagedIdentity"
    KEY = "Key"

class UseStl(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):

    SEASON = "Season"
    SEASON_TREND = "SeasonTrend"

class VmPriority(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):

    DEDICATED = "Dedicated"
    LOWPRIORITY = "Lowpriority"

class WebServiceState(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):

    TRANSITIONING = "Transitioning"
    HEALTHY = "Healthy"
    UNHEALTHY = "Unhealthy"
    FAILED = "Failed"
    UNSCHEDULABLE = "Unschedulable"

class WeekDays(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):

    MONDAY = "Monday"
    TUESDAY = "Tuesday"
    WEDNESDAY = "Wednesday"
    THURSDAY = "Thursday"
    FRIDAY = "Friday"
    SATURDAY = "Saturday"
    SUNDAY = "Sunday"

class YarnDeployMode(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):

    NONE = "None"
    CLIENT = "Client"
    CLUSTER = "Cluster"
