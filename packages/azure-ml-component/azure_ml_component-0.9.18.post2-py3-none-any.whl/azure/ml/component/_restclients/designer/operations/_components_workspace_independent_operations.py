# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.8.0, generator: @autorest/python@5.12.2)
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import functools
from typing import TYPE_CHECKING
import warnings

from azure.core.exceptions import ClientAuthenticationError, HttpResponseError, ResourceExistsError, \
    ResourceNotFoundError, map_error
from azure.core.paging import ItemPaged
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import HttpResponse
from azure.core.rest import HttpRequest
from azure.core.tracing.decorator import distributed_trace
from msrest import Serializer

from .. import models as _models
from .._vendor import _convert_request, _format_url_section

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from typing import Any, Callable, Dict, Generic, IO, Iterable, List, Optional, TypeVar, Union

    T = TypeVar('T')
    ClsType = Optional[Callable[[PipelineResponse[HttpRequest, HttpResponse], T, Dict[str, Any]], Any]]

_SERIALIZER = Serializer()
_SERIALIZER.client_side_validation = False


# fmt: off

def build_get_component_run_setting_parameters_mapping_request(
        **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    run_setting_type = kwargs.pop('run_setting_type',
                                  None)  # type: Optional[Union[str, "_models.ModuleRunSettingTypes"]]

    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/component/v1.0/admin/RunSettingParametersMapping')

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    if run_setting_type is not None:
        query_parameters['runSettingType'] = _SERIALIZER.query("run_setting_type", run_setting_type, 'str')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_get_pipeline_level_run_setting_parameters_request(
        **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    run_setting_type = kwargs.pop('run_setting_type',
                                  None)  # type: Optional[Union[str, "_models.ModuleRunSettingTypes"]]

    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/component/v1.0/admin/PipelineLevelRunSettingParameters')

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    if run_setting_type is not None:
        query_parameters['runSettingType'] = _SERIALIZER.query("run_setting_type", run_setting_type, 'str')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_list_registry_components_request(
        **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    registry_names = kwargs.pop('registry_names', None)  # type: Optional[List[str]]
    name = kwargs.pop('name', None)  # type: Optional[str]
    continuation_token_parameter = kwargs.pop('continuation_token_parameter', None)  # type: Optional[str]
    continuation_token1 = kwargs.pop('continuation_token1', None)  # type: Optional[str]
    count = kwargs.pop('count', 500)  # type: Optional[int]
    active_only = kwargs.pop('active_only', True)  # type: Optional[bool]
    run_setting_type = kwargs.pop('run_setting_type',
                                  None)  # type: Optional[Union[str, "_models.ModuleRunSettingTypes"]]
    module_dto_fields = kwargs.pop('module_dto_fields', None)  # type: Optional[Union[str, "_models.ModuleDtoFields"]]

    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/component/v1.0/admin/registry')

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    if registry_names is not None:
        query_parameters['registryNames'] = _SERIALIZER.query("registry_names", registry_names, '[str]', div=',')
    if name is not None:
        query_parameters['name'] = _SERIALIZER.query("name", name, 'str')
    if continuation_token_parameter is not None:
        query_parameters['continuationToken'] = _SERIALIZER.query("continuation_token_parameter",
                                                                  continuation_token_parameter, 'str')
    if count is not None:
        query_parameters['count'] = _SERIALIZER.query("count", count, 'int')
    if active_only is not None:
        query_parameters['activeOnly'] = _SERIALIZER.query("active_only", active_only, 'bool')
    if run_setting_type is not None:
        query_parameters['runSettingType'] = _SERIALIZER.query("run_setting_type", run_setting_type, 'str')
    if module_dto_fields is not None:
        query_parameters['moduleDtoFields'] = _SERIALIZER.query("module_dto_fields", module_dto_fields, 'str')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if continuation_token1 is not None:
        header_parameters['continuationToken'] = _SERIALIZER.header("continuation_token1", continuation_token1, 'str')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_register_registry_component_request(
        **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    content_type = kwargs.pop('content_type', None)  # type: Optional[str]
    validate_only = kwargs.pop('validate_only', False)  # type: Optional[bool]
    upgrade_if_exists = kwargs.pop('upgrade_if_exists', False)  # type: Optional[bool]
    set_as_default_version = kwargs.pop('set_as_default_version', True)  # type: Optional[bool]
    overwrite_component_version = kwargs.pop('overwrite_component_version', None)  # type: Optional[str]

    accept = "text/plain, application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/component/v1.0/admin/registry')

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    if validate_only is not None:
        query_parameters['validateOnly'] = _SERIALIZER.query("validate_only", validate_only, 'bool')
    if upgrade_if_exists is not None:
        query_parameters['upgradeIfExists'] = _SERIALIZER.query("upgrade_if_exists", upgrade_if_exists, 'bool')
    if set_as_default_version is not None:
        query_parameters['setAsDefaultVersion'] = _SERIALIZER.query("set_as_default_version", set_as_default_version,
                                                                    'bool')
    if overwrite_component_version is not None:
        query_parameters['overwriteComponentVersion'] = _SERIALIZER.query("overwrite_component_version",
                                                                          overwrite_component_version, 'str')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if content_type is not None:
        header_parameters['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_update_registry_component_request(
        **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    content_type = kwargs.pop('content_type', None)  # type: Optional[str]

    accept = "text/plain, application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/component/v1.0/admin/registry')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if content_type is not None:
        header_parameters['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="PATCH",
        url=url,
        headers=header_parameters,
        **kwargs
    )


def build_get_component_by_asset_id_request(
        asset_id,  # type: str
        **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    get_yaml = kwargs.pop('get_yaml', False)  # type: Optional[bool]
    run_setting_type = kwargs.pop('run_setting_type',
                                  None)  # type: Optional[Union[str, "_models.ModuleRunSettingTypes"]]
    module_dto_fields = kwargs.pop('module_dto_fields', None)  # type: Optional[Union[str, "_models.ModuleDtoFields"]]

    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/component/v1.0/admin/id/{assetId}')
    path_format_arguments = {
        "assetId": _SERIALIZER.url("asset_id", asset_id, 'str'),
    }

    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    if get_yaml is not None:
        query_parameters['getYaml'] = _SERIALIZER.query("get_yaml", get_yaml, 'bool')
    if run_setting_type is not None:
        query_parameters['runSettingType'] = _SERIALIZER.query("run_setting_type", run_setting_type, 'str')
    if module_dto_fields is not None:
        query_parameters['moduleDtoFields'] = _SERIALIZER.query("module_dto_fields", module_dto_fields, 'str')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_update_registry_component_long_running_operation_request(
        **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    content_type = kwargs.pop('content_type', None)  # type: Optional[str]

    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/component/v1.0/admin/registry/longRunningOperation')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if content_type is not None:
        header_parameters['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="PATCH",
        url=url,
        headers=header_parameters,
        **kwargs
    )


# fmt: on
class ComponentsWorkspaceIndependentOperations(object):
    """ComponentsWorkspaceIndependentOperations operations.

    You should not instantiate this class directly. Instead, you should create a Client instance that
    instantiates it for you and attaches it as an attribute.

    :ivar models: Alias to model classes used in this operation group.
    :type models: ~designer.models
    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    models = _models

    def __init__(self, client, config, serializer, deserializer):
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    @distributed_trace
    def get_component_run_setting_parameters_mapping(
            self,
            run_setting_type=None,  # type: Optional[Union[str, "_models.ModuleRunSettingTypes"]]
            **kwargs  # type: Any
    ):
        # type: (...) -> Dict[str, List["_models.RunSettingParameter"]]
        """get_component_run_setting_parameters_mapping.

        :param run_setting_type:
        :type run_setting_type: str or ~designer.models.ModuleRunSettingTypes
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: dict mapping str to list of RunSettingParameter, or the result of cls(response)
        :rtype: dict[str, list[~designer.models.RunSettingParameter]]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[Dict[str, List["_models.RunSettingParameter"]]]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        request = build_get_component_run_setting_parameters_mapping_request(
            run_setting_type=run_setting_type,
            template_url=self.get_component_run_setting_parameters_mapping.metadata['url'],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize('{[RunSettingParameter]}', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_component_run_setting_parameters_mapping.metadata = {
        'url': '/component/v1.0/admin/RunSettingParametersMapping'}  # type: ignore

    @distributed_trace
    def get_pipeline_level_run_setting_parameters(
            self,
            run_setting_type=None,  # type: Optional[Union[str, "_models.ModuleRunSettingTypes"]]
            **kwargs  # type: Any
    ):
        # type: (...) -> List["_models.RunSettingParameter"]
        """get_pipeline_level_run_setting_parameters.

        :param run_setting_type:
        :type run_setting_type: str or ~designer.models.ModuleRunSettingTypes
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: list of RunSettingParameter, or the result of cls(response)
        :rtype: list[~designer.models.RunSettingParameter]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[List["_models.RunSettingParameter"]]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        request = build_get_pipeline_level_run_setting_parameters_request(
            run_setting_type=run_setting_type,
            template_url=self.get_pipeline_level_run_setting_parameters.metadata['url'],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize('[RunSettingParameter]', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_pipeline_level_run_setting_parameters.metadata = {
        'url': '/component/v1.0/admin/PipelineLevelRunSettingParameters'}  # type: ignore

    @distributed_trace
    def list_registry_components(
            self,
            registry_names=None,  # type: Optional[List[str]]
            name=None,  # type: Optional[str]
            continuation_token_parameter=None,  # type: Optional[str]
            continuation_token1=None,  # type: Optional[str]
            count=500,  # type: Optional[int]
            active_only=True,  # type: Optional[bool]
            run_setting_type=None,  # type: Optional[Union[str, "_models.ModuleRunSettingTypes"]]
            module_dto_fields=None,  # type: Optional[Union[str, "_models.ModuleDtoFields"]]
            **kwargs  # type: Any
    ):
        # type: (...) -> Iterable["_models.PaginatedModuleDtoList"]
        """list_registry_components.

        :param registry_names:
        :type registry_names: list[str]
        :param name:
        :type name: str
        :param continuation_token_parameter:
        :type continuation_token_parameter: str
        :param continuation_token1:
        :type continuation_token1: str
        :param count:
        :type count: int
        :param active_only:
        :type active_only: bool
        :param run_setting_type:
        :type run_setting_type: str or ~designer.models.ModuleRunSettingTypes
        :param module_dto_fields:
        :type module_dto_fields: str or ~designer.models.ModuleDtoFields
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either PaginatedModuleDtoList or the result of
         cls(response)
        :rtype: ~azure.core.paging.ItemPaged[~designer.models.PaginatedModuleDtoList]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.PaginatedModuleDtoList"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        def prepare_request(next_link=None):
            if not next_link:

                request = build_list_registry_components_request(
                    registry_names=registry_names,
                    name=name,
                    continuation_token_parameter=continuation_token_parameter,
                    continuation_token1=continuation_token1,
                    count=count,
                    active_only=active_only,
                    run_setting_type=run_setting_type,
                    module_dto_fields=module_dto_fields,
                    template_url=self.list_registry_components.metadata['url'],
                )
                request = _convert_request(request)
                request.url = self._client.format_url(request.url)

            else:

                request = build_list_registry_components_request(
                    registry_names=registry_names,
                    name=name,
                    continuation_token_parameter=continuation_token_parameter,
                    continuation_token1=continuation_token1,
                    count=count,
                    active_only=active_only,
                    run_setting_type=run_setting_type,
                    module_dto_fields=module_dto_fields,
                    template_url=next_link,
                )
                request = _convert_request(request)
                request.url = self._client.format_url(request.url)
                request.method = "GET"
            return request

        def extract_data(pipeline_response):
            deserialized = self._deserialize("PaginatedModuleDtoList", pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.continuation_token or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
                raise HttpResponseError(response=response, model=error)

            return pipeline_response

        return ItemPaged(
            get_next, extract_data
        )

    list_registry_components.metadata = {'url': '/component/v1.0/admin/registry'}  # type: ignore

    @distributed_trace
    def register_registry_component(
            self,
            validate_only=False,  # type: Optional[bool]
            upgrade_if_exists=False,  # type: Optional[bool]
            set_as_default_version=True,  # type: Optional[bool]
            overwrite_component_version=None,  # type: Optional[str]
            snapshot_source_zip_file=None,  # type: Optional[IO]
            properties=None,  # type: Optional[str]
            **kwargs  # type: Any
    ):
        # type: (...) -> str
        """register_registry_component.

        :param validate_only:
        :type validate_only: bool
        :param upgrade_if_exists:
        :type upgrade_if_exists: bool
        :param set_as_default_version:
        :type set_as_default_version: bool
        :param overwrite_component_version:
        :type overwrite_component_version: str
        :param snapshot_source_zip_file: SnapshotSourceZipFile: binary.
        :type snapshot_source_zip_file: IO
        :param properties: RegistryName: string, SnapshotId: string, ModuleSourceType: , YamlFile:
         string, DevopsArtifactsZipUrl: string, ModuleWorkingMechanism: , IsPrivateRepo: boolean,
         DataTypeMechanism: , BlobFileInfo.DataStoreName: string, BlobFileInfo.RootBlobUri: string,
         SerializedModuleInfo: string.
        :type properties: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: str, or the result of cls(response)
        :rtype: str
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[str]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        content_type = kwargs.pop('content_type', None)  # type: Optional[str]

        # Construct form data
        _files = {
            "SnapshotSourceZipFile": snapshot_source_zip_file,
            "properties": properties,
        }

        request = build_register_registry_component_request(
            content_type=content_type,
            files=_files,
            validate_only=validate_only,
            upgrade_if_exists=upgrade_if_exists,
            set_as_default_version=set_as_default_version,
            overwrite_component_version=overwrite_component_version,
            template_url=self.register_registry_component.metadata['url'],
        )
        request = _convert_request(request, _files)
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [202]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize('str', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    register_registry_component.metadata = {'url': '/component/v1.0/admin/registry'}  # type: ignore

    @distributed_trace
    def update_registry_component(
            self,
            body=None,  # type: Optional["_models.UpdateRegistryComponentRequest"]
            **kwargs  # type: Any
    ):
        # type: (...) -> str
        """update_registry_component.

        :param body:
        :type body: ~designer.models.UpdateRegistryComponentRequest
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: str, or the result of cls(response)
        :rtype: str
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[str]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        content_type = kwargs.pop('content_type', "application/json-patch+json")  # type: Optional[str]

        if body is not None:
            _json = self._serialize.body(body, 'UpdateRegistryComponentRequest')
        else:
            _json = None

        request = build_update_registry_component_request(
            content_type=content_type,
            json=_json,
            template_url=self.update_registry_component.metadata['url'],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize('str', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    update_registry_component.metadata = {'url': '/component/v1.0/admin/registry'}  # type: ignore

    @distributed_trace
    def get_component_by_asset_id(
            self,
            asset_id,  # type: str
            get_yaml=False,  # type: Optional[bool]
            run_setting_type=None,  # type: Optional[Union[str, "_models.ModuleRunSettingTypes"]]
            module_dto_fields=None,  # type: Optional[Union[str, "_models.ModuleDtoFields"]]
            **kwargs  # type: Any
    ):
        # type: (...) -> "_models.ModuleDto"
        """get_component_by_asset_id.

        :param asset_id:
        :type asset_id: str
        :param get_yaml:
        :type get_yaml: bool
        :param run_setting_type:
        :type run_setting_type: str or ~designer.models.ModuleRunSettingTypes
        :param module_dto_fields:
        :type module_dto_fields: str or ~designer.models.ModuleDtoFields
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: ModuleDto, or the result of cls(response)
        :rtype: ~designer.models.ModuleDto
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.ModuleDto"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        request = build_get_component_by_asset_id_request(
            asset_id=asset_id,
            get_yaml=get_yaml,
            run_setting_type=run_setting_type,
            module_dto_fields=module_dto_fields,
            template_url=self.get_component_by_asset_id.metadata['url'],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize('ModuleDto', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_component_by_asset_id.metadata = {'url': '/component/v1.0/admin/id/{assetId}'}  # type: ignore

    @distributed_trace
    def update_registry_component_long_running_operation(
            self,
            body=None,  # type: Optional["_models.LongRunningUpdateRegistryComponentRequest"]
            **kwargs  # type: Any
    ):
        # type: (...) -> "_models.LongRunningOperationUriResponse"
        """update_registry_component_long_running_operation.

        :param body:
        :type body: ~designer.models.LongRunningUpdateRegistryComponentRequest
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: LongRunningOperationUriResponse, or the result of cls(response)
        :rtype: ~designer.models.LongRunningOperationUriResponse
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.LongRunningOperationUriResponse"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        content_type = kwargs.pop('content_type', "application/json-patch+json")  # type: Optional[str]

        if body is not None:
            _json = self._serialize.body(body, 'LongRunningUpdateRegistryComponentRequest')
        else:
            _json = None

        request = build_update_registry_component_long_running_operation_request(
            content_type=content_type,
            json=_json,
            template_url=self.update_registry_component_long_running_operation.metadata['url'],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize('LongRunningOperationUriResponse', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    update_registry_component_long_running_operation.metadata = {
        'url': '/component/v1.0/admin/registry/longRunningOperation'}  # type: ignore

