# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.8.0, generator: @autorest/python@5.12.2)
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import functools
from typing import TYPE_CHECKING
import warnings

from azure.core.exceptions import ClientAuthenticationError, HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.paging import ItemPaged
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import HttpResponse
from azure.core.rest import HttpRequest
from azure.core.tracing.decorator import distributed_trace
from msrest import Serializer

from .. import models as _models
from .._vendor import _convert_request, _format_url_section

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from typing import Any, Callable, Dict, Generic, IO, Iterable, List, Optional, TypeVar, Union
    T = TypeVar('T')
    ClsType = Optional[Callable[[PipelineResponse[HttpRequest, HttpResponse], T, Dict[str, Any]], Any]]

_SERIALIZER = Serializer()
_SERIALIZER.client_side_validation = False
# fmt: off

def build_list_modules_request(
    subscription_id,  # type: str
    resource_group_name,  # type: str
    workspace_name,  # type: str
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    continuation_token_parameter = kwargs.pop('continuation_token_parameter', None)  # type: Optional[str]
    continuation_token1 = kwargs.pop('continuation_token1', None)  # type: Optional[str]
    count = kwargs.pop('count', 500)  # type: Optional[int]
    active_only = kwargs.pop('active_only', True)  # type: Optional[bool]
    module_scope = kwargs.pop('module_scope', None)  # type: Optional[Union[str, "_models.ModuleScope"]]
    include_empty_namespace = kwargs.pop('include_empty_namespace', False)  # type: Optional[bool]
    include_run_setting_params = kwargs.pop('include_run_setting_params', True)  # type: Optional[bool]
    order_by = kwargs.pop('order_by', "Name")  # type: Optional[str]
    search_string = kwargs.pop('search_string', None)  # type: Optional[str]
    get_yaml = kwargs.pop('get_yaml', False)  # type: Optional[bool]

    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/module/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/workspaces/{workspaceName}')
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, 'str'),
        "resourceGroupName": _SERIALIZER.url("resource_group_name", resource_group_name, 'str'),
        "workspaceName": _SERIALIZER.url("workspace_name", workspace_name, 'str'),
    }

    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    if continuation_token_parameter is not None:
        query_parameters['continuationToken'] = _SERIALIZER.query("continuation_token_parameter", continuation_token_parameter, 'str')
    if count is not None:
        query_parameters['count'] = _SERIALIZER.query("count", count, 'int')
    if active_only is not None:
        query_parameters['activeOnly'] = _SERIALIZER.query("active_only", active_only, 'bool')
    if module_scope is not None:
        query_parameters['ModuleScope'] = _SERIALIZER.query("module_scope", module_scope, 'str')
    if include_empty_namespace is not None:
        query_parameters['includeEmptyNamespace'] = _SERIALIZER.query("include_empty_namespace", include_empty_namespace, 'bool')
    if include_run_setting_params is not None:
        query_parameters['includeRunSettingParams'] = _SERIALIZER.query("include_run_setting_params", include_run_setting_params, 'bool')
    if order_by is not None:
        query_parameters['orderBy'] = _SERIALIZER.query("order_by", order_by, 'str')
    if search_string is not None:
        query_parameters['searchString'] = _SERIALIZER.query("search_string", search_string, 'str')
    if get_yaml is not None:
        query_parameters['getYaml'] = _SERIALIZER.query("get_yaml", get_yaml, 'bool')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if continuation_token1 is not None:
        header_parameters['continuationToken'] = _SERIALIZER.header("continuation_token1", continuation_token1, 'str')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_register_module_request(
    subscription_id,  # type: str
    resource_group_name,  # type: str
    workspace_name,  # type: str
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    content_type = kwargs.pop('content_type', None)  # type: Optional[str]
    validate_only = kwargs.pop('validate_only', False)  # type: Optional[bool]
    anonymous_registration = kwargs.pop('anonymous_registration', False)  # type: Optional[bool]
    upgrade_if_exists = kwargs.pop('upgrade_if_exists', False)  # type: Optional[bool]
    set_as_default_version = kwargs.pop('set_as_default_version', True)  # type: Optional[bool]
    include_run_setting_params = kwargs.pop('include_run_setting_params', True)  # type: Optional[bool]
    overwrite_module_version = kwargs.pop('overwrite_module_version', None)  # type: Optional[str]
    get_yaml = kwargs.pop('get_yaml', False)  # type: Optional[bool]
    x_ms_github_token = kwargs.pop('x_ms_github_token', None)  # type: Optional[str]
    x_ms_github_code = kwargs.pop('x_ms_github_code', None)  # type: Optional[str]
    remove_client_not_used_fields = kwargs.pop('remove_client_not_used_fields', True)  # type: Optional[bool]
    keep_complete_parameters = kwargs.pop('keep_complete_parameters', False)  # type: Optional[bool]

    accept = "application/json, text/plain"
    # Construct URL
    url = kwargs.pop("template_url", '/module/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/workspaces/{workspaceName}')
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, 'str'),
        "resourceGroupName": _SERIALIZER.url("resource_group_name", resource_group_name, 'str'),
        "workspaceName": _SERIALIZER.url("workspace_name", workspace_name, 'str'),
    }

    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    if validate_only is not None:
        query_parameters['validateOnly'] = _SERIALIZER.query("validate_only", validate_only, 'bool')
    if anonymous_registration is not None:
        query_parameters['anonymousRegistration'] = _SERIALIZER.query("anonymous_registration", anonymous_registration, 'bool')
    if upgrade_if_exists is not None:
        query_parameters['upgradeIfExists'] = _SERIALIZER.query("upgrade_if_exists", upgrade_if_exists, 'bool')
    if set_as_default_version is not None:
        query_parameters['setAsDefaultVersion'] = _SERIALIZER.query("set_as_default_version", set_as_default_version, 'bool')
    if include_run_setting_params is not None:
        query_parameters['includeRunSettingParams'] = _SERIALIZER.query("include_run_setting_params", include_run_setting_params, 'bool')
    if overwrite_module_version is not None:
        query_parameters['overwriteModuleVersion'] = _SERIALIZER.query("overwrite_module_version", overwrite_module_version, 'str')
    if get_yaml is not None:
        query_parameters['getYaml'] = _SERIALIZER.query("get_yaml", get_yaml, 'bool')
    if remove_client_not_used_fields is not None:
        query_parameters['removeClientNotUsedFields'] = _SERIALIZER.query("remove_client_not_used_fields", remove_client_not_used_fields, 'bool')
    if keep_complete_parameters is not None:
        query_parameters['keepCompleteParameters'] = _SERIALIZER.query("keep_complete_parameters", keep_complete_parameters, 'bool')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if x_ms_github_token is not None:
        header_parameters['x-ms-github-token'] = _SERIALIZER.header("x_ms_github_token", x_ms_github_token, 'str')
    if x_ms_github_code is not None:
        header_parameters['x-ms-github-code'] = _SERIALIZER.header("x_ms_github_code", x_ms_github_code, 'str')
    if content_type is not None:
        header_parameters['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_get_module_request(
    subscription_id,  # type: str
    resource_group_name,  # type: str
    workspace_name,  # type: str
    module_namespace,  # type: str
    module_name,  # type: str
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    version = kwargs.pop('version', None)  # type: Optional[str]
    include_run_setting_params = kwargs.pop('include_run_setting_params', True)  # type: Optional[bool]
    get_yaml = kwargs.pop('get_yaml', False)  # type: Optional[bool]
    remove_client_not_used_fields = kwargs.pop('remove_client_not_used_fields', True)  # type: Optional[bool]

    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/module/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/workspaces/{workspaceName}/namespaces/{moduleNamespace}/modules/{moduleName}')
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, 'str'),
        "resourceGroupName": _SERIALIZER.url("resource_group_name", resource_group_name, 'str'),
        "workspaceName": _SERIALIZER.url("workspace_name", workspace_name, 'str'),
        "moduleNamespace": _SERIALIZER.url("module_namespace", module_namespace, 'str'),
        "moduleName": _SERIALIZER.url("module_name", module_name, 'str'),
    }

    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    if version is not None:
        query_parameters['version'] = _SERIALIZER.query("version", version, 'str')
    if include_run_setting_params is not None:
        query_parameters['includeRunSettingParams'] = _SERIALIZER.query("include_run_setting_params", include_run_setting_params, 'bool')
    if get_yaml is not None:
        query_parameters['getYaml'] = _SERIALIZER.query("get_yaml", get_yaml, 'bool')
    if remove_client_not_used_fields is not None:
        query_parameters['removeClientNotUsedFields'] = _SERIALIZER.query("remove_client_not_used_fields", remove_client_not_used_fields, 'bool')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_upgrade_module_request(
    subscription_id,  # type: str
    resource_group_name,  # type: str
    workspace_name,  # type: str
    module_namespace,  # type: str
    module_name,  # type: str
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    content_type = kwargs.pop('content_type', None)  # type: Optional[str]
    validate_only = kwargs.pop('validate_only', False)  # type: Optional[bool]
    overwrite_module_version = kwargs.pop('overwrite_module_version', None)  # type: Optional[str]
    x_ms_github_token = kwargs.pop('x_ms_github_token', None)  # type: Optional[str]
    x_ms_github_code = kwargs.pop('x_ms_github_code', None)  # type: Optional[str]
    get_yaml = kwargs.pop('get_yaml', False)  # type: Optional[bool]

    accept = "application/json, text/plain"
    # Construct URL
    url = kwargs.pop("template_url", '/module/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/workspaces/{workspaceName}/namespaces/{moduleNamespace}/modules/{moduleName}')
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, 'str'),
        "resourceGroupName": _SERIALIZER.url("resource_group_name", resource_group_name, 'str'),
        "workspaceName": _SERIALIZER.url("workspace_name", workspace_name, 'str'),
        "moduleNamespace": _SERIALIZER.url("module_namespace", module_namespace, 'str'),
        "moduleName": _SERIALIZER.url("module_name", module_name, 'str'),
    }

    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    if validate_only is not None:
        query_parameters['validateOnly'] = _SERIALIZER.query("validate_only", validate_only, 'bool')
    if overwrite_module_version is not None:
        query_parameters['overwriteModuleVersion'] = _SERIALIZER.query("overwrite_module_version", overwrite_module_version, 'str')
    if get_yaml is not None:
        query_parameters['getYaml'] = _SERIALIZER.query("get_yaml", get_yaml, 'bool')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if x_ms_github_token is not None:
        header_parameters['x-ms-github-token'] = _SERIALIZER.header("x_ms_github_token", x_ms_github_token, 'str')
    if x_ms_github_code is not None:
        header_parameters['x-ms-github-code'] = _SERIALIZER.header("x_ms_github_code", x_ms_github_code, 'str')
    if content_type is not None:
        header_parameters['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="PUT",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_update_module_request(
    subscription_id,  # type: str
    resource_group_name,  # type: str
    workspace_name,  # type: str
    module_namespace,  # type: str
    module_name,  # type: str
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    content_type = kwargs.pop('content_type', None)  # type: Optional[str]
    get_yaml = kwargs.pop('get_yaml', False)  # type: Optional[bool]

    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/module/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/workspaces/{workspaceName}/namespaces/{moduleNamespace}/modules/{moduleName}')
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, 'str'),
        "resourceGroupName": _SERIALIZER.url("resource_group_name", resource_group_name, 'str'),
        "workspaceName": _SERIALIZER.url("workspace_name", workspace_name, 'str'),
        "moduleNamespace": _SERIALIZER.url("module_namespace", module_namespace, 'str'),
        "moduleName": _SERIALIZER.url("module_name", module_name, 'str'),
    }

    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    if get_yaml is not None:
        query_parameters['getYaml'] = _SERIALIZER.query("get_yaml", get_yaml, 'bool')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if content_type is not None:
        header_parameters['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="PATCH",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_get_module_versions_request(
    subscription_id,  # type: str
    resource_group_name,  # type: str
    workspace_name,  # type: str
    module_namespace,  # type: str
    module_name,  # type: str
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    include_run_setting_params = kwargs.pop('include_run_setting_params', True)  # type: Optional[bool]
    get_yaml = kwargs.pop('get_yaml', False)  # type: Optional[bool]

    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/module/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/workspaces/{workspaceName}/namespaces/{moduleNamespace}/modules/{moduleName}/versions')
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, 'str'),
        "resourceGroupName": _SERIALIZER.url("resource_group_name", resource_group_name, 'str'),
        "workspaceName": _SERIALIZER.url("workspace_name", workspace_name, 'str'),
        "moduleNamespace": _SERIALIZER.url("module_namespace", module_namespace, 'str'),
        "moduleName": _SERIALIZER.url("module_name", module_name, 'str'),
    }

    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    if include_run_setting_params is not None:
        query_parameters['includeRunSettingParams'] = _SERIALIZER.query("include_run_setting_params", include_run_setting_params, 'bool')
    if get_yaml is not None:
        query_parameters['getYaml'] = _SERIALIZER.query("get_yaml", get_yaml, 'bool')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_get_module_snapshot_url_request(
    subscription_id,  # type: str
    resource_group_name,  # type: str
    workspace_name,  # type: str
    module_namespace,  # type: str
    module_name,  # type: str
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    version = kwargs.pop('version', None)  # type: Optional[str]

    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/module/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/workspaces/{workspaceName}/namespaces/{moduleNamespace}/modules/{moduleName}/snapshotUrl')
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, 'str'),
        "resourceGroupName": _SERIALIZER.url("resource_group_name", resource_group_name, 'str'),
        "workspaceName": _SERIALIZER.url("workspace_name", workspace_name, 'str'),
        "moduleNamespace": _SERIALIZER.url("module_namespace", module_namespace, 'str'),
        "moduleName": _SERIALIZER.url("module_name", module_name, 'str'),
    }

    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    if version is not None:
        query_parameters['version'] = _SERIALIZER.query("version", version, 'str')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_get_module_yaml_request(
    subscription_id,  # type: str
    resource_group_name,  # type: str
    workspace_name,  # type: str
    module_namespace,  # type: str
    module_name,  # type: str
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    version = kwargs.pop('version', None)  # type: Optional[str]

    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/module/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/workspaces/{workspaceName}/namespaces/{moduleNamespace}/modules/{moduleName}/yaml')
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, 'str'),
        "resourceGroupName": _SERIALIZER.url("resource_group_name", resource_group_name, 'str'),
        "workspaceName": _SERIALIZER.url("workspace_name", workspace_name, 'str'),
        "moduleNamespace": _SERIALIZER.url("module_namespace", module_namespace, 'str'),
        "moduleName": _SERIALIZER.url("module_name", module_name, 'str'),
    }

    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    if version is not None:
        query_parameters['version'] = _SERIALIZER.query("version", version, 'str')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_validate_module_request(
    subscription_id,  # type: str
    resource_group_name,  # type: str
    workspace_name,  # type: str
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    content_type = kwargs.pop('content_type', None)  # type: Optional[str]
    x_ms_github_token = kwargs.pop('x_ms_github_token', None)  # type: Optional[str]
    x_ms_github_code = kwargs.pop('x_ms_github_code', None)  # type: Optional[str]

    accept = "application/json, text/plain"
    # Construct URL
    url = kwargs.pop("template_url", '/module/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/workspaces/{workspaceName}/validate')
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, 'str'),
        "resourceGroupName": _SERIALIZER.url("resource_group_name", resource_group_name, 'str'),
        "workspaceName": _SERIALIZER.url("workspace_name", workspace_name, 'str'),
    }

    url = _format_url_section(url, **path_format_arguments)

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if x_ms_github_token is not None:
        header_parameters['x-ms-github-token'] = _SERIALIZER.header("x_ms_github_token", x_ms_github_token, 'str')
    if x_ms_github_code is not None:
        header_parameters['x-ms-github-code'] = _SERIALIZER.header("x_ms_github_code", x_ms_github_code, 'str')
    if content_type is not None:
        header_parameters['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=url,
        headers=header_parameters,
        **kwargs
    )


def build_parse_module_request(
    subscription_id,  # type: str
    resource_group_name,  # type: str
    workspace_name,  # type: str
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    content_type = kwargs.pop('content_type', None)  # type: Optional[str]
    x_ms_github_token = kwargs.pop('x_ms_github_token', None)  # type: Optional[str]
    x_ms_github_code = kwargs.pop('x_ms_github_code', None)  # type: Optional[str]
    get_yaml = kwargs.pop('get_yaml', False)  # type: Optional[bool]

    accept = "application/json, text/plain"
    # Construct URL
    url = kwargs.pop("template_url", '/module/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/workspaces/{workspaceName}/parse')
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, 'str'),
        "resourceGroupName": _SERIALIZER.url("resource_group_name", resource_group_name, 'str'),
        "workspaceName": _SERIALIZER.url("workspace_name", workspace_name, 'str'),
    }

    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    if get_yaml is not None:
        query_parameters['getYaml'] = _SERIALIZER.query("get_yaml", get_yaml, 'bool')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if x_ms_github_token is not None:
        header_parameters['x-ms-github-token'] = _SERIALIZER.header("x_ms_github_token", x_ms_github_token, 'str')
    if x_ms_github_code is not None:
        header_parameters['x-ms-github-code'] = _SERIALIZER.header("x_ms_github_code", x_ms_github_code, 'str')
    if content_type is not None:
        header_parameters['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_get_default_version_of_modules_request(
    subscription_id,  # type: str
    resource_group_name,  # type: str
    workspace_name,  # type: str
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    content_type = kwargs.pop('content_type', None)  # type: Optional[str]

    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/module/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/workspaces/{workspaceName}/defaultVersion')
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, 'str'),
        "resourceGroupName": _SERIALIZER.url("resource_group_name", resource_group_name, 'str'),
        "workspaceName": _SERIALIZER.url("workspace_name", workspace_name, 'str'),
    }

    url = _format_url_section(url, **path_format_arguments)

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if content_type is not None:
        header_parameters['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=url,
        headers=header_parameters,
        **kwargs
    )

# fmt: on
class ModuleOperations(object):
    """ModuleOperations operations.

    You should not instantiate this class directly. Instead, you should create a Client instance that
    instantiates it for you and attaches it as an attribute.

    :ivar models: Alias to model classes used in this operation group.
    :type models: ~designer.models
    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    models = _models

    def __init__(self, client, config, serializer, deserializer):
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    @distributed_trace
    def list_modules(
        self,
        subscription_id,  # type: str
        resource_group_name,  # type: str
        workspace_name,  # type: str
        continuation_token_parameter=None,  # type: Optional[str]
        continuation_token1=None,  # type: Optional[str]
        count=500,  # type: Optional[int]
        active_only=True,  # type: Optional[bool]
        module_scope=None,  # type: Optional[Union[str, "_models.ModuleScope"]]
        include_empty_namespace=False,  # type: Optional[bool]
        include_run_setting_params=True,  # type: Optional[bool]
        order_by="Name",  # type: Optional[str]
        search_string=None,  # type: Optional[str]
        get_yaml=False,  # type: Optional[bool]
        **kwargs  # type: Any
    ):
        # type: (...) -> Iterable["_models.PaginatedModuleDtoList"]
        """list_modules.

        :param subscription_id: The Azure Subscription ID.
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located.
        :type resource_group_name: str
        :param workspace_name: The name of the workspace.
        :type workspace_name: str
        :param continuation_token_parameter:
        :type continuation_token_parameter: str
        :param continuation_token1:
        :type continuation_token1: str
        :param count:
        :type count: int
        :param active_only:
        :type active_only: bool
        :param module_scope:
        :type module_scope: str or ~designer.models.ModuleScope
        :param include_empty_namespace:
        :type include_empty_namespace: bool
        :param include_run_setting_params:
        :type include_run_setting_params: bool
        :param order_by:
        :type order_by: str
        :param search_string:
        :type search_string: str
        :param get_yaml:
        :type get_yaml: bool
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either PaginatedModuleDtoList or the result of
         cls(response)
        :rtype: ~azure.core.paging.ItemPaged[~designer.models.PaginatedModuleDtoList]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.PaginatedModuleDtoList"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        def prepare_request(next_link=None):
            if not next_link:
                
                request = build_list_modules_request(
                    subscription_id=subscription_id,
                    resource_group_name=resource_group_name,
                    workspace_name=workspace_name,
                    continuation_token_parameter=continuation_token_parameter,
                    continuation_token1=continuation_token1,
                    count=count,
                    active_only=active_only,
                    module_scope=module_scope,
                    include_empty_namespace=include_empty_namespace,
                    include_run_setting_params=include_run_setting_params,
                    order_by=order_by,
                    search_string=search_string,
                    get_yaml=get_yaml,
                    template_url=self.list_modules.metadata['url'],
                )
                request = _convert_request(request)
                request.url = self._client.format_url(request.url)

            else:
                
                request = build_list_modules_request(
                    subscription_id=subscription_id,
                    resource_group_name=resource_group_name,
                    workspace_name=workspace_name,
                    continuation_token_parameter=continuation_token_parameter,
                    continuation_token1=continuation_token1,
                    count=count,
                    active_only=active_only,
                    module_scope=module_scope,
                    include_empty_namespace=include_empty_namespace,
                    include_run_setting_params=include_run_setting_params,
                    order_by=order_by,
                    search_string=search_string,
                    get_yaml=get_yaml,
                    template_url=next_link,
                )
                request = _convert_request(request)
                request.url = self._client.format_url(request.url)
                request.method = "GET"
            return request

        def extract_data(pipeline_response):
            deserialized = self._deserialize("PaginatedModuleDtoList", pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.continuation_token or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
                raise HttpResponseError(response=response, model=error)

            return pipeline_response


        return ItemPaged(
            get_next, extract_data
        )
    list_modules.metadata = {'url': '/module/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/workspaces/{workspaceName}'}  # type: ignore

    @distributed_trace
    def register_module(
        self,
        subscription_id,  # type: str
        resource_group_name,  # type: str
        workspace_name,  # type: str
        validate_only=False,  # type: Optional[bool]
        anonymous_registration=False,  # type: Optional[bool]
        upgrade_if_exists=False,  # type: Optional[bool]
        set_as_default_version=True,  # type: Optional[bool]
        include_run_setting_params=True,  # type: Optional[bool]
        overwrite_module_version=None,  # type: Optional[str]
        get_yaml=False,  # type: Optional[bool]
        x_ms_github_token=None,  # type: Optional[str]
        x_ms_github_code=None,  # type: Optional[str]
        remove_client_not_used_fields=True,  # type: Optional[bool]
        keep_complete_parameters=False,  # type: Optional[bool]
        snapshot_source_zip_file=None,  # type: Optional[IO]
        properties=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> Union["_models.ModuleDto", str]
        """register_module.

        :param subscription_id: The Azure Subscription ID.
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located.
        :type resource_group_name: str
        :param workspace_name: The name of the workspace.
        :type workspace_name: str
        :param validate_only:
        :type validate_only: bool
        :param anonymous_registration:
        :type anonymous_registration: bool
        :param upgrade_if_exists:
        :type upgrade_if_exists: bool
        :param set_as_default_version:
        :type set_as_default_version: bool
        :param include_run_setting_params:
        :type include_run_setting_params: bool
        :param overwrite_module_version:
        :type overwrite_module_version: str
        :param get_yaml:
        :type get_yaml: bool
        :param x_ms_github_token:
        :type x_ms_github_token: str
        :param x_ms_github_code:
        :type x_ms_github_code: str
        :param remove_client_not_used_fields:
        :type remove_client_not_used_fields: bool
        :param keep_complete_parameters:
        :type keep_complete_parameters: bool
        :param snapshot_source_zip_file: SnapshotSourceZipFile: binary.
        :type snapshot_source_zip_file: IO
        :param properties: ModuleSourceType: , YamlFile: string, DevopsArtifactsZipUrl: string,
         ModuleWorkingMechanism: , IsPrivateRepo: boolean, DataTypeMechanism: ,
         BlobFileInfo.DataStoreName: string, BlobFileInfo.RootBlobUri: string, SerializedModuleInfo:
         string.
        :type properties: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: ModuleDto or str, or the result of cls(response)
        :rtype: ~designer.models.ModuleDto or str
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[Union["_models.ModuleDto", str]]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        content_type = kwargs.pop('content_type', None)  # type: Optional[str]

        # Construct form data
        _files = {
            "SnapshotSourceZipFile": snapshot_source_zip_file,
            "properties": properties,
        }

        request = build_register_module_request(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            content_type=content_type,
            files=_files,
            validate_only=validate_only,
            anonymous_registration=anonymous_registration,
            upgrade_if_exists=upgrade_if_exists,
            set_as_default_version=set_as_default_version,
            include_run_setting_params=include_run_setting_params,
            overwrite_module_version=overwrite_module_version,
            get_yaml=get_yaml,
            x_ms_github_token=x_ms_github_token,
            x_ms_github_code=x_ms_github_code,
            remove_client_not_used_fields=remove_client_not_used_fields,
            keep_complete_parameters=keep_complete_parameters,
            template_url=self.register_module.metadata['url'],
        )
        request = _convert_request(request, _files)
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200, 302]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        if response.status_code == 200:
            deserialized = self._deserialize('ModuleDto', pipeline_response)

        if response.status_code == 302:
            deserialized = self._deserialize('str', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    register_module.metadata = {'url': '/module/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/workspaces/{workspaceName}'}  # type: ignore


    @distributed_trace
    def get_module(
        self,
        subscription_id,  # type: str
        resource_group_name,  # type: str
        workspace_name,  # type: str
        module_namespace,  # type: str
        module_name,  # type: str
        version=None,  # type: Optional[str]
        include_run_setting_params=True,  # type: Optional[bool]
        get_yaml=False,  # type: Optional[bool]
        remove_client_not_used_fields=True,  # type: Optional[bool]
        **kwargs  # type: Any
    ):
        # type: (...) -> "_models.ModuleDto"
        """get_module.

        :param subscription_id: The Azure Subscription ID.
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located.
        :type resource_group_name: str
        :param workspace_name: The name of the workspace.
        :type workspace_name: str
        :param module_namespace:
        :type module_namespace: str
        :param module_name:
        :type module_name: str
        :param version:
        :type version: str
        :param include_run_setting_params:
        :type include_run_setting_params: bool
        :param get_yaml:
        :type get_yaml: bool
        :param remove_client_not_used_fields:
        :type remove_client_not_used_fields: bool
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: ModuleDto, or the result of cls(response)
        :rtype: ~designer.models.ModuleDto
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.ModuleDto"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        
        request = build_get_module_request(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            module_namespace=module_namespace,
            module_name=module_name,
            version=version,
            include_run_setting_params=include_run_setting_params,
            get_yaml=get_yaml,
            remove_client_not_used_fields=remove_client_not_used_fields,
            template_url=self.get_module.metadata['url'],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize('ModuleDto', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_module.metadata = {'url': '/module/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/workspaces/{workspaceName}/namespaces/{moduleNamespace}/modules/{moduleName}'}  # type: ignore


    @distributed_trace
    def upgrade_module(
        self,
        subscription_id,  # type: str
        resource_group_name,  # type: str
        workspace_name,  # type: str
        module_namespace,  # type: str
        module_name,  # type: str
        validate_only=False,  # type: Optional[bool]
        overwrite_module_version=None,  # type: Optional[str]
        x_ms_github_token=None,  # type: Optional[str]
        x_ms_github_code=None,  # type: Optional[str]
        get_yaml=False,  # type: Optional[bool]
        snapshot_source_zip_file=None,  # type: Optional[IO]
        properties=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> Union["_models.ModuleDto", str]
        """upgrade_module.

        :param subscription_id: The Azure Subscription ID.
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located.
        :type resource_group_name: str
        :param workspace_name: The name of the workspace.
        :type workspace_name: str
        :param module_namespace:
        :type module_namespace: str
        :param module_name:
        :type module_name: str
        :param validate_only:
        :type validate_only: bool
        :param overwrite_module_version:
        :type overwrite_module_version: str
        :param x_ms_github_token:
        :type x_ms_github_token: str
        :param x_ms_github_code:
        :type x_ms_github_code: str
        :param get_yaml:
        :type get_yaml: bool
        :param snapshot_source_zip_file: SnapshotSourceZipFile: binary.
        :type snapshot_source_zip_file: IO
        :param properties: SetAsDefaultVersion: boolean, ModuleSourceType: , YamlFile: string,
         DevopsArtifactsZipUrl: string, ModuleWorkingMechanism: , IsPrivateRepo: boolean,
         DataTypeMechanism: , BlobFileInfo.DataStoreName: string, BlobFileInfo.RootBlobUri: string,
         SerializedModuleInfo: string.
        :type properties: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: ModuleDto or str, or the result of cls(response)
        :rtype: ~designer.models.ModuleDto or str
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[Union["_models.ModuleDto", str]]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        content_type = kwargs.pop('content_type', None)  # type: Optional[str]

        # Construct form data
        _files = {
            "SnapshotSourceZipFile": snapshot_source_zip_file,
            "properties": properties,
        }

        request = build_upgrade_module_request(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            module_namespace=module_namespace,
            module_name=module_name,
            content_type=content_type,
            files=_files,
            validate_only=validate_only,
            overwrite_module_version=overwrite_module_version,
            x_ms_github_token=x_ms_github_token,
            x_ms_github_code=x_ms_github_code,
            get_yaml=get_yaml,
            template_url=self.upgrade_module.metadata['url'],
        )
        request = _convert_request(request, _files)
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200, 302]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        if response.status_code == 200:
            deserialized = self._deserialize('ModuleDto', pipeline_response)

        if response.status_code == 302:
            deserialized = self._deserialize('str', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    upgrade_module.metadata = {'url': '/module/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/workspaces/{workspaceName}/namespaces/{moduleNamespace}/modules/{moduleName}'}  # type: ignore


    @distributed_trace
    def update_module(
        self,
        subscription_id,  # type: str
        resource_group_name,  # type: str
        workspace_name,  # type: str
        module_namespace,  # type: str
        module_name,  # type: str
        get_yaml=False,  # type: Optional[bool]
        body=None,  # type: Optional["_models.UpdateModuleRequest"]
        **kwargs  # type: Any
    ):
        # type: (...) -> "_models.ModuleDto"
        """update_module.

        :param subscription_id: The Azure Subscription ID.
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located.
        :type resource_group_name: str
        :param workspace_name: The name of the workspace.
        :type workspace_name: str
        :param module_namespace:
        :type module_namespace: str
        :param module_name:
        :type module_name: str
        :param get_yaml:
        :type get_yaml: bool
        :param body:
        :type body: ~designer.models.UpdateModuleRequest
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: ModuleDto, or the result of cls(response)
        :rtype: ~designer.models.ModuleDto
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.ModuleDto"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        content_type = kwargs.pop('content_type', "application/json-patch+json")  # type: Optional[str]

        if body is not None:
            _json = self._serialize.body(body, 'UpdateModuleRequest')
        else:
            _json = None

        request = build_update_module_request(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            module_namespace=module_namespace,
            module_name=module_name,
            content_type=content_type,
            json=_json,
            get_yaml=get_yaml,
            template_url=self.update_module.metadata['url'],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize('ModuleDto', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    update_module.metadata = {'url': '/module/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/workspaces/{workspaceName}/namespaces/{moduleNamespace}/modules/{moduleName}'}  # type: ignore


    @distributed_trace
    def get_module_versions(
        self,
        subscription_id,  # type: str
        resource_group_name,  # type: str
        workspace_name,  # type: str
        module_namespace,  # type: str
        module_name,  # type: str
        include_run_setting_params=True,  # type: Optional[bool]
        get_yaml=False,  # type: Optional[bool]
        **kwargs  # type: Any
    ):
        # type: (...) -> Dict[str, "_models.ModuleDto"]
        """get_module_versions.

        :param subscription_id: The Azure Subscription ID.
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located.
        :type resource_group_name: str
        :param workspace_name: The name of the workspace.
        :type workspace_name: str
        :param module_namespace:
        :type module_namespace: str
        :param module_name:
        :type module_name: str
        :param include_run_setting_params:
        :type include_run_setting_params: bool
        :param get_yaml:
        :type get_yaml: bool
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: dict mapping str to ModuleDto, or the result of cls(response)
        :rtype: dict[str, ~designer.models.ModuleDto]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[Dict[str, "_models.ModuleDto"]]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        
        request = build_get_module_versions_request(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            module_namespace=module_namespace,
            module_name=module_name,
            include_run_setting_params=include_run_setting_params,
            get_yaml=get_yaml,
            template_url=self.get_module_versions.metadata['url'],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize('{ModuleDto}', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_module_versions.metadata = {'url': '/module/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/workspaces/{workspaceName}/namespaces/{moduleNamespace}/modules/{moduleName}/versions'}  # type: ignore


    @distributed_trace
    def get_module_snapshot_url(
        self,
        subscription_id,  # type: str
        resource_group_name,  # type: str
        workspace_name,  # type: str
        module_namespace,  # type: str
        module_name,  # type: str
        version=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> str
        """get_module_snapshot_url.

        :param subscription_id: The Azure Subscription ID.
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located.
        :type resource_group_name: str
        :param workspace_name: The name of the workspace.
        :type workspace_name: str
        :param module_namespace:
        :type module_namespace: str
        :param module_name:
        :type module_name: str
        :param version:
        :type version: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: str, or the result of cls(response)
        :rtype: str
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[str]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        
        request = build_get_module_snapshot_url_request(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            module_namespace=module_namespace,
            module_name=module_name,
            version=version,
            template_url=self.get_module_snapshot_url.metadata['url'],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize('str', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_module_snapshot_url.metadata = {'url': '/module/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/workspaces/{workspaceName}/namespaces/{moduleNamespace}/modules/{moduleName}/snapshotUrl'}  # type: ignore


    @distributed_trace
    def get_module_yaml(
        self,
        subscription_id,  # type: str
        resource_group_name,  # type: str
        workspace_name,  # type: str
        module_namespace,  # type: str
        module_name,  # type: str
        version=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> str
        """get_module_yaml.

        :param subscription_id: The Azure Subscription ID.
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located.
        :type resource_group_name: str
        :param workspace_name: The name of the workspace.
        :type workspace_name: str
        :param module_namespace:
        :type module_namespace: str
        :param module_name:
        :type module_name: str
        :param version:
        :type version: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: str, or the result of cls(response)
        :rtype: str
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[str]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        
        request = build_get_module_yaml_request(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            module_namespace=module_namespace,
            module_name=module_name,
            version=version,
            template_url=self.get_module_yaml.metadata['url'],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize('str', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_module_yaml.metadata = {'url': '/module/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/workspaces/{workspaceName}/namespaces/{moduleNamespace}/modules/{moduleName}/yaml'}  # type: ignore


    @distributed_trace
    def validate_module(
        self,
        subscription_id,  # type: str
        resource_group_name,  # type: str
        workspace_name,  # type: str
        x_ms_github_token=None,  # type: Optional[str]
        x_ms_github_code=None,  # type: Optional[str]
        snapshot_source_zip_file=None,  # type: Optional[IO]
        properties=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> Union["_models.ModuleDtoWithValidateStatus", str]
        """validate_module.

        :param subscription_id: The Azure Subscription ID.
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located.
        :type resource_group_name: str
        :param workspace_name: The name of the workspace.
        :type workspace_name: str
        :param x_ms_github_token:
        :type x_ms_github_token: str
        :param x_ms_github_code:
        :type x_ms_github_code: str
        :param snapshot_source_zip_file: SnapshotSourceZipFile: binary.
        :type snapshot_source_zip_file: IO
        :param properties: ModuleSourceType: , YamlFile: string, DevopsArtifactsZipUrl: string,
         ModuleWorkingMechanism: , IsPrivateRepo: boolean, DataTypeMechanism: ,
         BlobFileInfo.DataStoreName: string, BlobFileInfo.RootBlobUri: string, SerializedModuleInfo:
         string.
        :type properties: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: ModuleDtoWithValidateStatus or str, or the result of cls(response)
        :rtype: ~designer.models.ModuleDtoWithValidateStatus or str
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[Union["_models.ModuleDtoWithValidateStatus", str]]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        content_type = kwargs.pop('content_type', None)  # type: Optional[str]

        # Construct form data
        _files = {
            "SnapshotSourceZipFile": snapshot_source_zip_file,
            "properties": properties,
        }

        request = build_validate_module_request(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            content_type=content_type,
            files=_files,
            x_ms_github_token=x_ms_github_token,
            x_ms_github_code=x_ms_github_code,
            template_url=self.validate_module.metadata['url'],
        )
        request = _convert_request(request, _files)
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200, 302]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        if response.status_code == 200:
            deserialized = self._deserialize('ModuleDtoWithValidateStatus', pipeline_response)

        if response.status_code == 302:
            deserialized = self._deserialize('str', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    validate_module.metadata = {'url': '/module/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/workspaces/{workspaceName}/validate'}  # type: ignore


    @distributed_trace
    def parse_module(
        self,
        subscription_id,  # type: str
        resource_group_name,  # type: str
        workspace_name,  # type: str
        x_ms_github_token=None,  # type: Optional[str]
        x_ms_github_code=None,  # type: Optional[str]
        get_yaml=False,  # type: Optional[bool]
        snapshot_source_zip_file=None,  # type: Optional[IO]
        properties=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> Union["_models.ModuleDto", str]
        """parse_module.

        :param subscription_id: The Azure Subscription ID.
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located.
        :type resource_group_name: str
        :param workspace_name: The name of the workspace.
        :type workspace_name: str
        :param x_ms_github_token:
        :type x_ms_github_token: str
        :param x_ms_github_code:
        :type x_ms_github_code: str
        :param get_yaml:
        :type get_yaml: bool
        :param snapshot_source_zip_file: SnapshotSourceZipFile: binary.
        :type snapshot_source_zip_file: IO
        :param properties: ModuleSourceType: , YamlFile: string, DevopsArtifactsZipUrl: string,
         ModuleWorkingMechanism: , IsPrivateRepo: boolean, DataTypeMechanism: ,
         BlobFileInfo.DataStoreName: string, BlobFileInfo.RootBlobUri: string, SerializedModuleInfo:
         string.
        :type properties: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: ModuleDto or str, or the result of cls(response)
        :rtype: ~designer.models.ModuleDto or str
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[Union["_models.ModuleDto", str]]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        content_type = kwargs.pop('content_type', None)  # type: Optional[str]

        # Construct form data
        _files = {
            "SnapshotSourceZipFile": snapshot_source_zip_file,
            "properties": properties,
        }

        request = build_parse_module_request(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            content_type=content_type,
            files=_files,
            x_ms_github_token=x_ms_github_token,
            x_ms_github_code=x_ms_github_code,
            get_yaml=get_yaml,
            template_url=self.parse_module.metadata['url'],
        )
        request = _convert_request(request, _files)
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200, 302]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        if response.status_code == 200:
            deserialized = self._deserialize('ModuleDto', pipeline_response)

        if response.status_code == 302:
            deserialized = self._deserialize('str', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    parse_module.metadata = {'url': '/module/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/workspaces/{workspaceName}/parse'}  # type: ignore


    @distributed_trace
    def get_default_version_of_modules(
        self,
        subscription_id,  # type: str
        resource_group_name,  # type: str
        workspace_name,  # type: str
        body=None,  # type: Optional[List["_models.AmlModuleNameMetaInfo"]]
        **kwargs  # type: Any
    ):
        # type: (...) -> List["_models.AmlModuleNameAndDefaultVersion"]
        """get_default_version_of_modules.

        :param subscription_id: The Azure Subscription ID.
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located.
        :type resource_group_name: str
        :param workspace_name: The name of the workspace.
        :type workspace_name: str
        :param body:
        :type body: list[~designer.models.AmlModuleNameMetaInfo]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: list of AmlModuleNameAndDefaultVersion, or the result of cls(response)
        :rtype: list[~designer.models.AmlModuleNameAndDefaultVersion]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[List["_models.AmlModuleNameAndDefaultVersion"]]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        content_type = kwargs.pop('content_type', "application/json")  # type: Optional[str]

        if body is not None:
            _json = self._serialize.body(body, '[AmlModuleNameMetaInfo]')
        else:
            _json = None

        request = build_get_default_version_of_modules_request(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            content_type=content_type,
            json=_json,
            template_url=self.get_default_version_of_modules.metadata['url'],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize('[AmlModuleNameAndDefaultVersion]', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_default_version_of_modules.metadata = {'url': '/module/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/workspaces/{workspaceName}/defaultVersion'}  # type: ignore

