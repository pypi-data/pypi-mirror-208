# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.8.0, generator: @autorest/python@5.12.2)
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import functools
from typing import TYPE_CHECKING
import warnings

from azure.core.exceptions import ClientAuthenticationError, HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import HttpResponse
from azure.core.rest import HttpRequest
from azure.core.tracing.decorator import distributed_trace
from msrest import Serializer

from .. import models as _models
from .._vendor import _convert_request, _format_url_section

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from typing import Any, Callable, Dict, Generic, Optional, TypeVar, Union
    T = TypeVar('T')
    ClsType = Optional[Callable[[PipelineResponse[HttpRequest, HttpResponse], T, Dict[str, Any]], Any]]

_SERIALIZER = Serializer()
_SERIALIZER.client_side_validation = False
# fmt: off

def build_register_component_request(
    subscription_id,  # type: str
    resource_group_name,  # type: str
    workspace_name,  # type: str
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    content_type = kwargs.pop('content_type', None)  # type: Optional[str]
    validate_only = kwargs.pop('validate_only', False)  # type: Optional[bool]
    upgrade_if_exists = kwargs.pop('upgrade_if_exists', False)  # type: Optional[bool]
    include_run_setting_params = kwargs.pop('include_run_setting_params', True)  # type: Optional[bool]
    overwrite_component_version = kwargs.pop('overwrite_component_version', None)  # type: Optional[str]
    get_yaml = kwargs.pop('get_yaml', False)  # type: Optional[bool]
    remove_client_not_used_fields = kwargs.pop('remove_client_not_used_fields', True)  # type: Optional[bool]
    keep_complete_parameters = kwargs.pop('keep_complete_parameters', False)  # type: Optional[bool]
    run_setting_type = kwargs.pop('run_setting_type', None)  # type: Optional[Union[str, "_models.ModuleRunSettingTypes"]]

    accept = "application/json, text/plain"
    # Construct URL
    url = kwargs.pop("template_url", '/component/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/PipelineComponent')
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, 'str'),
        "resourceGroupName": _SERIALIZER.url("resource_group_name", resource_group_name, 'str'),
        "workspaceName": _SERIALIZER.url("workspace_name", workspace_name, 'str'),
    }

    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    if validate_only is not None:
        query_parameters['validateOnly'] = _SERIALIZER.query("validate_only", validate_only, 'bool')
    if upgrade_if_exists is not None:
        query_parameters['upgradeIfExists'] = _SERIALIZER.query("upgrade_if_exists", upgrade_if_exists, 'bool')
    if include_run_setting_params is not None:
        query_parameters['includeRunSettingParams'] = _SERIALIZER.query("include_run_setting_params", include_run_setting_params, 'bool')
    if overwrite_component_version is not None:
        query_parameters['overwriteComponentVersion'] = _SERIALIZER.query("overwrite_component_version", overwrite_component_version, 'str')
    if get_yaml is not None:
        query_parameters['getYaml'] = _SERIALIZER.query("get_yaml", get_yaml, 'bool')
    if remove_client_not_used_fields is not None:
        query_parameters['removeClientNotUsedFields'] = _SERIALIZER.query("remove_client_not_used_fields", remove_client_not_used_fields, 'bool')
    if keep_complete_parameters is not None:
        query_parameters['keepCompleteParameters'] = _SERIALIZER.query("keep_complete_parameters", keep_complete_parameters, 'bool')
    if run_setting_type is not None:
        query_parameters['runSettingType'] = _SERIALIZER.query("run_setting_type", run_setting_type, 'str')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if content_type is not None:
        header_parameters['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_validate_component_request(
    subscription_id,  # type: str
    resource_group_name,  # type: str
    workspace_name,  # type: str
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    content_type = kwargs.pop('content_type', None)  # type: Optional[str]
    run_setting_type = kwargs.pop('run_setting_type', None)  # type: Optional[Union[str, "_models.ModuleRunSettingTypes"]]

    accept = "application/json, text/plain"
    # Construct URL
    url = kwargs.pop("template_url", '/component/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/PipelineComponent/validate')
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, 'str'),
        "resourceGroupName": _SERIALIZER.url("resource_group_name", resource_group_name, 'str'),
        "workspaceName": _SERIALIZER.url("workspace_name", workspace_name, 'str'),
    }

    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    if run_setting_type is not None:
        query_parameters['runSettingType'] = _SERIALIZER.query("run_setting_type", run_setting_type, 'str')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if content_type is not None:
        header_parameters['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_parse_component_request(
    subscription_id,  # type: str
    resource_group_name,  # type: str
    workspace_name,  # type: str
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    content_type = kwargs.pop('content_type', None)  # type: Optional[str]
    get_yaml = kwargs.pop('get_yaml', False)  # type: Optional[bool]
    run_setting_type = kwargs.pop('run_setting_type', None)  # type: Optional[Union[str, "_models.ModuleRunSettingTypes"]]

    accept = "application/json, text/plain"
    # Construct URL
    url = kwargs.pop("template_url", '/component/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/PipelineComponent/parse')
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, 'str'),
        "resourceGroupName": _SERIALIZER.url("resource_group_name", resource_group_name, 'str'),
        "workspaceName": _SERIALIZER.url("workspace_name", workspace_name, 'str'),
    }

    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    if get_yaml is not None:
        query_parameters['getYaml'] = _SERIALIZER.query("get_yaml", get_yaml, 'bool')
    if run_setting_type is not None:
        query_parameters['runSettingType'] = _SERIALIZER.query("run_setting_type", run_setting_type, 'str')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if content_type is not None:
        header_parameters['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_upgrade_component_request(
    subscription_id,  # type: str
    resource_group_name,  # type: str
    workspace_name,  # type: str
    component_name,  # type: str
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    content_type = kwargs.pop('content_type', None)  # type: Optional[str]
    validate_only = kwargs.pop('validate_only', False)  # type: Optional[bool]
    overwrite_component_version = kwargs.pop('overwrite_component_version', None)  # type: Optional[str]
    get_yaml = kwargs.pop('get_yaml', False)  # type: Optional[bool]
    run_setting_type = kwargs.pop('run_setting_type', None)  # type: Optional[Union[str, "_models.ModuleRunSettingTypes"]]

    accept = "application/json, text/plain"
    # Construct URL
    url = kwargs.pop("template_url", '/component/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/PipelineComponent/{componentName}')
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, 'str'),
        "resourceGroupName": _SERIALIZER.url("resource_group_name", resource_group_name, 'str'),
        "workspaceName": _SERIALIZER.url("workspace_name", workspace_name, 'str'),
        "componentName": _SERIALIZER.url("component_name", component_name, 'str'),
    }

    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    if validate_only is not None:
        query_parameters['validateOnly'] = _SERIALIZER.query("validate_only", validate_only, 'bool')
    if overwrite_component_version is not None:
        query_parameters['overwriteComponentVersion'] = _SERIALIZER.query("overwrite_component_version", overwrite_component_version, 'str')
    if get_yaml is not None:
        query_parameters['getYaml'] = _SERIALIZER.query("get_yaml", get_yaml, 'bool')
    if run_setting_type is not None:
        query_parameters['runSettingType'] = _SERIALIZER.query("run_setting_type", run_setting_type, 'str')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if content_type is not None:
        header_parameters['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="PUT",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_get_pipeline_component_graph_request(
    subscription_id,  # type: str
    resource_group_name,  # type: str
    workspace_name,  # type: str
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    graph_id = kwargs.pop('graph_id', None)  # type: Optional[str]
    graph_draft_id = kwargs.pop('graph_draft_id', None)  # type: Optional[str]
    include_run_setting_params = kwargs.pop('include_run_setting_params', False)  # type: Optional[bool]
    has_namespace_concept = kwargs.pop('has_namespace_concept', False)  # type: Optional[bool]
    skip_dataset_load = kwargs.pop('skip_dataset_load', True)  # type: Optional[bool]
    referenced_node_id = kwargs.pop('referenced_node_id', None)  # type: Optional[str]
    fetch_nested_graphs = kwargs.pop('fetch_nested_graphs', False)  # type: Optional[bool]
    resolve_final_value = kwargs.pop('resolve_final_value', True)  # type: Optional[bool]
    remove_client_not_used_fields = kwargs.pop('remove_client_not_used_fields', True)  # type: Optional[bool]

    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/component/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/PipelineComponent/graph')
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, 'str'),
        "resourceGroupName": _SERIALIZER.url("resource_group_name", resource_group_name, 'str'),
        "workspaceName": _SERIALIZER.url("workspace_name", workspace_name, 'str'),
    }

    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    if graph_id is not None:
        query_parameters['graphId'] = _SERIALIZER.query("graph_id", graph_id, 'str')
    if graph_draft_id is not None:
        query_parameters['graphDraftId'] = _SERIALIZER.query("graph_draft_id", graph_draft_id, 'str')
    if include_run_setting_params is not None:
        query_parameters['includeRunSettingParams'] = _SERIALIZER.query("include_run_setting_params", include_run_setting_params, 'bool')
    if has_namespace_concept is not None:
        query_parameters['hasNamespaceConcept'] = _SERIALIZER.query("has_namespace_concept", has_namespace_concept, 'bool')
    if skip_dataset_load is not None:
        query_parameters['skipDatasetLoad'] = _SERIALIZER.query("skip_dataset_load", skip_dataset_load, 'bool')
    if referenced_node_id is not None:
        query_parameters['referencedNodeId'] = _SERIALIZER.query("referenced_node_id", referenced_node_id, 'str')
    if fetch_nested_graphs is not None:
        query_parameters['fetchNestedGraphs'] = _SERIALIZER.query("fetch_nested_graphs", fetch_nested_graphs, 'bool')
    if resolve_final_value is not None:
        query_parameters['resolveFinalValue'] = _SERIALIZER.query("resolve_final_value", resolve_final_value, 'bool')
    if remove_client_not_used_fields is not None:
        query_parameters['removeClientNotUsedFields'] = _SERIALIZER.query("remove_client_not_used_fields", remove_client_not_used_fields, 'bool')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )

# fmt: on
class PipelineComponentOperations(object):
    """PipelineComponentOperations operations.

    You should not instantiate this class directly. Instead, you should create a Client instance that
    instantiates it for you and attaches it as an attribute.

    :ivar models: Alias to model classes used in this operation group.
    :type models: ~designer.models
    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    models = _models

    def __init__(self, client, config, serializer, deserializer):
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    @distributed_trace
    def register_component(
        self,
        subscription_id,  # type: str
        resource_group_name,  # type: str
        workspace_name,  # type: str
        validate_only=False,  # type: Optional[bool]
        upgrade_if_exists=False,  # type: Optional[bool]
        include_run_setting_params=True,  # type: Optional[bool]
        overwrite_component_version=None,  # type: Optional[str]
        get_yaml=False,  # type: Optional[bool]
        remove_client_not_used_fields=True,  # type: Optional[bool]
        keep_complete_parameters=False,  # type: Optional[bool]
        run_setting_type=None,  # type: Optional[Union[str, "_models.ModuleRunSettingTypes"]]
        body=None,  # type: Optional["_models.GeneratePipelineComponentRequest"]
        **kwargs  # type: Any
    ):
        # type: (...) -> Union["_models.ModuleDto", str]
        """register_component.

        :param subscription_id: The Azure Subscription ID.
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located.
        :type resource_group_name: str
        :param workspace_name: The name of the workspace.
        :type workspace_name: str
        :param validate_only:
        :type validate_only: bool
        :param upgrade_if_exists:
        :type upgrade_if_exists: bool
        :param include_run_setting_params:
        :type include_run_setting_params: bool
        :param overwrite_component_version:
        :type overwrite_component_version: str
        :param get_yaml:
        :type get_yaml: bool
        :param remove_client_not_used_fields:
        :type remove_client_not_used_fields: bool
        :param keep_complete_parameters:
        :type keep_complete_parameters: bool
        :param run_setting_type:
        :type run_setting_type: str or ~designer.models.ModuleRunSettingTypes
        :param body:
        :type body: ~designer.models.GeneratePipelineComponentRequest
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: ModuleDto or str, or the result of cls(response)
        :rtype: ~designer.models.ModuleDto or str
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[Union["_models.ModuleDto", str]]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        content_type = kwargs.pop('content_type', "application/json")  # type: Optional[str]

        if body is not None:
            _json = self._serialize.body(body, 'GeneratePipelineComponentRequest')
        else:
            _json = None

        request = build_register_component_request(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            content_type=content_type,
            json=_json,
            validate_only=validate_only,
            upgrade_if_exists=upgrade_if_exists,
            include_run_setting_params=include_run_setting_params,
            overwrite_component_version=overwrite_component_version,
            get_yaml=get_yaml,
            remove_client_not_used_fields=remove_client_not_used_fields,
            keep_complete_parameters=keep_complete_parameters,
            run_setting_type=run_setting_type,
            template_url=self.register_component.metadata['url'],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200, 302]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        if response.status_code == 200:
            deserialized = self._deserialize('ModuleDto', pipeline_response)

        if response.status_code == 302:
            deserialized = self._deserialize('str', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    register_component.metadata = {'url': '/component/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/PipelineComponent'}  # type: ignore


    @distributed_trace
    def validate_component(
        self,
        subscription_id,  # type: str
        resource_group_name,  # type: str
        workspace_name,  # type: str
        run_setting_type=None,  # type: Optional[Union[str, "_models.ModuleRunSettingTypes"]]
        body=None,  # type: Optional["_models.GeneratePipelineComponentRequest"]
        **kwargs  # type: Any
    ):
        # type: (...) -> Union["_models.ModuleDtoWithValidateStatus", str]
        """validate_component.

        :param subscription_id: The Azure Subscription ID.
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located.
        :type resource_group_name: str
        :param workspace_name: The name of the workspace.
        :type workspace_name: str
        :param run_setting_type:
        :type run_setting_type: str or ~designer.models.ModuleRunSettingTypes
        :param body:
        :type body: ~designer.models.GeneratePipelineComponentRequest
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: ModuleDtoWithValidateStatus or str, or the result of cls(response)
        :rtype: ~designer.models.ModuleDtoWithValidateStatus or str
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[Union["_models.ModuleDtoWithValidateStatus", str]]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        content_type = kwargs.pop('content_type', "application/json")  # type: Optional[str]

        if body is not None:
            _json = self._serialize.body(body, 'GeneratePipelineComponentRequest')
        else:
            _json = None

        request = build_validate_component_request(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            content_type=content_type,
            json=_json,
            run_setting_type=run_setting_type,
            template_url=self.validate_component.metadata['url'],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200, 302]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        if response.status_code == 200:
            deserialized = self._deserialize('ModuleDtoWithValidateStatus', pipeline_response)

        if response.status_code == 302:
            deserialized = self._deserialize('str', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    validate_component.metadata = {'url': '/component/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/PipelineComponent/validate'}  # type: ignore


    @distributed_trace
    def parse_component(
        self,
        subscription_id,  # type: str
        resource_group_name,  # type: str
        workspace_name,  # type: str
        get_yaml=False,  # type: Optional[bool]
        run_setting_type=None,  # type: Optional[Union[str, "_models.ModuleRunSettingTypes"]]
        body=None,  # type: Optional["_models.GeneratePipelineComponentRequest"]
        **kwargs  # type: Any
    ):
        # type: (...) -> Union["_models.ModuleDto", str]
        """parse_component.

        :param subscription_id: The Azure Subscription ID.
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located.
        :type resource_group_name: str
        :param workspace_name: The name of the workspace.
        :type workspace_name: str
        :param get_yaml:
        :type get_yaml: bool
        :param run_setting_type:
        :type run_setting_type: str or ~designer.models.ModuleRunSettingTypes
        :param body:
        :type body: ~designer.models.GeneratePipelineComponentRequest
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: ModuleDto or str, or the result of cls(response)
        :rtype: ~designer.models.ModuleDto or str
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[Union["_models.ModuleDto", str]]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        content_type = kwargs.pop('content_type', "application/json")  # type: Optional[str]

        if body is not None:
            _json = self._serialize.body(body, 'GeneratePipelineComponentRequest')
        else:
            _json = None

        request = build_parse_component_request(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            content_type=content_type,
            json=_json,
            get_yaml=get_yaml,
            run_setting_type=run_setting_type,
            template_url=self.parse_component.metadata['url'],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200, 302]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        if response.status_code == 200:
            deserialized = self._deserialize('ModuleDto', pipeline_response)

        if response.status_code == 302:
            deserialized = self._deserialize('str', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    parse_component.metadata = {'url': '/component/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/PipelineComponent/parse'}  # type: ignore


    @distributed_trace
    def upgrade_component(
        self,
        subscription_id,  # type: str
        resource_group_name,  # type: str
        workspace_name,  # type: str
        component_name,  # type: str
        validate_only=False,  # type: Optional[bool]
        overwrite_component_version=None,  # type: Optional[str]
        get_yaml=False,  # type: Optional[bool]
        run_setting_type=None,  # type: Optional[Union[str, "_models.ModuleRunSettingTypes"]]
        body=None,  # type: Optional["_models.GeneratePipelineComponentRequest"]
        **kwargs  # type: Any
    ):
        # type: (...) -> Union["_models.ModuleDto", str]
        """upgrade_component.

        :param subscription_id: The Azure Subscription ID.
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located.
        :type resource_group_name: str
        :param workspace_name: The name of the workspace.
        :type workspace_name: str
        :param component_name:
        :type component_name: str
        :param validate_only:
        :type validate_only: bool
        :param overwrite_component_version:
        :type overwrite_component_version: str
        :param get_yaml:
        :type get_yaml: bool
        :param run_setting_type:
        :type run_setting_type: str or ~designer.models.ModuleRunSettingTypes
        :param body:
        :type body: ~designer.models.GeneratePipelineComponentRequest
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: ModuleDto or str, or the result of cls(response)
        :rtype: ~designer.models.ModuleDto or str
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[Union["_models.ModuleDto", str]]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        content_type = kwargs.pop('content_type', "application/json")  # type: Optional[str]

        if body is not None:
            _json = self._serialize.body(body, 'GeneratePipelineComponentRequest')
        else:
            _json = None

        request = build_upgrade_component_request(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            component_name=component_name,
            content_type=content_type,
            json=_json,
            validate_only=validate_only,
            overwrite_component_version=overwrite_component_version,
            get_yaml=get_yaml,
            run_setting_type=run_setting_type,
            template_url=self.upgrade_component.metadata['url'],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200, 302]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        if response.status_code == 200:
            deserialized = self._deserialize('ModuleDto', pipeline_response)

        if response.status_code == 302:
            deserialized = self._deserialize('str', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    upgrade_component.metadata = {'url': '/component/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/PipelineComponent/{componentName}'}  # type: ignore


    @distributed_trace
    def get_pipeline_component_graph(
        self,
        subscription_id,  # type: str
        resource_group_name,  # type: str
        workspace_name,  # type: str
        graph_id=None,  # type: Optional[str]
        graph_draft_id=None,  # type: Optional[str]
        include_run_setting_params=False,  # type: Optional[bool]
        has_namespace_concept=False,  # type: Optional[bool]
        skip_dataset_load=True,  # type: Optional[bool]
        referenced_node_id=None,  # type: Optional[str]
        fetch_nested_graphs=False,  # type: Optional[bool]
        resolve_final_value=True,  # type: Optional[bool]
        remove_client_not_used_fields=True,  # type: Optional[bool]
        **kwargs  # type: Any
    ):
        # type: (...) -> "_models.PipelineGraph"
        """get_pipeline_component_graph.

        :param subscription_id: The Azure Subscription ID.
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located.
        :type resource_group_name: str
        :param workspace_name: The name of the workspace.
        :type workspace_name: str
        :param graph_id:
        :type graph_id: str
        :param graph_draft_id:
        :type graph_draft_id: str
        :param include_run_setting_params:
        :type include_run_setting_params: bool
        :param has_namespace_concept:
        :type has_namespace_concept: bool
        :param skip_dataset_load:
        :type skip_dataset_load: bool
        :param referenced_node_id:
        :type referenced_node_id: str
        :param fetch_nested_graphs:
        :type fetch_nested_graphs: bool
        :param resolve_final_value:
        :type resolve_final_value: bool
        :param remove_client_not_used_fields:
        :type remove_client_not_used_fields: bool
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: PipelineGraph, or the result of cls(response)
        :rtype: ~designer.models.PipelineGraph
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.PipelineGraph"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        
        request = build_get_pipeline_component_graph_request(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            graph_id=graph_id,
            graph_draft_id=graph_draft_id,
            include_run_setting_params=include_run_setting_params,
            has_namespace_concept=has_namespace_concept,
            skip_dataset_load=skip_dataset_load,
            referenced_node_id=referenced_node_id,
            fetch_nested_graphs=fetch_nested_graphs,
            resolve_final_value=resolve_final_value,
            remove_client_not_used_fields=remove_client_not_used_fields,
            template_url=self.get_pipeline_component_graph.metadata['url'],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize('PipelineGraph', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_pipeline_component_graph.metadata = {'url': '/component/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/PipelineComponent/graph'}  # type: ignore

