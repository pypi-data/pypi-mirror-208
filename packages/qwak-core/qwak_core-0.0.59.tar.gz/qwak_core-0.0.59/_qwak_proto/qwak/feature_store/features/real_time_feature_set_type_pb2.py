# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: qwak/feature_store/features/real_time_feature_set_type.proto
"""Generated protocol buffer code."""
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


from _qwak_proto.qwak.feature_store.features import execution_pb2 as qwak_dot_feature__store_dot_features_dot_execution__pb2


DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\n<qwak/feature_store/features/real_time_feature_set_type.proto\x12\x1bqwak.feature.store.features\x1a+qwak/feature_store/features/execution.proto\"\x81\x02\n\x12RealTimeFeatureSet\x12K\n\x12real_time_artifact\x18\x01 \x01(\x0b\x32/.qwak.feature.store.features.ExtractionArtifact\x12P\n\x12\x64\x65pendency_manager\x18\x02 \x01(\x0b\x32\x34.qwak.feature.store.features.PythonDependencyManager\x12L\n\x0e\x65xecution_spec\x18\x03 \x01(\x0b\x32\x34.qwak.feature.store.features.execution.ExecutionSpec\"l\n\x12\x45xtractionArtifact\x12\x15\n\rartifact_path\x18\x01 \x01(\t\x12\x34\n\x06\x61ws_s3\x18\x02 \x01(\x0b\x32\".qwak.feature.store.features.AwsS3H\x00\x42\t\n\x07\x66s_type\"\x07\n\x05\x41wsS3\"\xe3\x01\n\x17PythonDependencyManager\x12J\n\nvirtualenv\x18\x01 \x01(\x0b\x32\x34.qwak.feature.store.features.VirtualEnvironmentBuildH\x00\x12\x38\n\x05\x63onda\x18\x02 \x01(\x0b\x32\'.qwak.feature.store.features.CondaBuildH\x00\x12:\n\x06poetry\x18\x03 \x01(\x0b\x32(.qwak.feature.store.features.PoetryBuildH\x00\x42\x06\n\x04type\"(\n\nCondaBuild\x12\x1a\n\x12\x65ncoded_conda_file\x18\x01 \x01(\t\"@\n\x0bPoetryBuild\x12\x16\n\x0epython_version\x18\x01 \x01(\t\x12\x19\n\x11\x65ncoded_lock_file\x18\x02 \x01(\t\"S\n\x17VirtualEnvironmentBuild\x12\x16\n\x0epython_version\x18\x01 \x01(\t\x12 \n\x18\x65ncoded_requirements_txt\x18\x02 \x01(\tB[\n&com.qwak.ai.feature.store.features.apiP\x01Z/qwak/featurestore/features;featurestorefeaturesb\x06proto3')



_REALTIMEFEATURESET = DESCRIPTOR.message_types_by_name['RealTimeFeatureSet']
_EXTRACTIONARTIFACT = DESCRIPTOR.message_types_by_name['ExtractionArtifact']
_AWSS3 = DESCRIPTOR.message_types_by_name['AwsS3']
_PYTHONDEPENDENCYMANAGER = DESCRIPTOR.message_types_by_name['PythonDependencyManager']
_CONDABUILD = DESCRIPTOR.message_types_by_name['CondaBuild']
_POETRYBUILD = DESCRIPTOR.message_types_by_name['PoetryBuild']
_VIRTUALENVIRONMENTBUILD = DESCRIPTOR.message_types_by_name['VirtualEnvironmentBuild']
RealTimeFeatureSet = _reflection.GeneratedProtocolMessageType('RealTimeFeatureSet', (_message.Message,), {
  'DESCRIPTOR' : _REALTIMEFEATURESET,
  '__module__' : 'qwak.feature_store.features.real_time_feature_set_type_pb2'
  # @@protoc_insertion_point(class_scope:qwak.feature.store.features.RealTimeFeatureSet)
  })
_sym_db.RegisterMessage(RealTimeFeatureSet)

ExtractionArtifact = _reflection.GeneratedProtocolMessageType('ExtractionArtifact', (_message.Message,), {
  'DESCRIPTOR' : _EXTRACTIONARTIFACT,
  '__module__' : 'qwak.feature_store.features.real_time_feature_set_type_pb2'
  # @@protoc_insertion_point(class_scope:qwak.feature.store.features.ExtractionArtifact)
  })
_sym_db.RegisterMessage(ExtractionArtifact)

AwsS3 = _reflection.GeneratedProtocolMessageType('AwsS3', (_message.Message,), {
  'DESCRIPTOR' : _AWSS3,
  '__module__' : 'qwak.feature_store.features.real_time_feature_set_type_pb2'
  # @@protoc_insertion_point(class_scope:qwak.feature.store.features.AwsS3)
  })
_sym_db.RegisterMessage(AwsS3)

PythonDependencyManager = _reflection.GeneratedProtocolMessageType('PythonDependencyManager', (_message.Message,), {
  'DESCRIPTOR' : _PYTHONDEPENDENCYMANAGER,
  '__module__' : 'qwak.feature_store.features.real_time_feature_set_type_pb2'
  # @@protoc_insertion_point(class_scope:qwak.feature.store.features.PythonDependencyManager)
  })
_sym_db.RegisterMessage(PythonDependencyManager)

CondaBuild = _reflection.GeneratedProtocolMessageType('CondaBuild', (_message.Message,), {
  'DESCRIPTOR' : _CONDABUILD,
  '__module__' : 'qwak.feature_store.features.real_time_feature_set_type_pb2'
  # @@protoc_insertion_point(class_scope:qwak.feature.store.features.CondaBuild)
  })
_sym_db.RegisterMessage(CondaBuild)

PoetryBuild = _reflection.GeneratedProtocolMessageType('PoetryBuild', (_message.Message,), {
  'DESCRIPTOR' : _POETRYBUILD,
  '__module__' : 'qwak.feature_store.features.real_time_feature_set_type_pb2'
  # @@protoc_insertion_point(class_scope:qwak.feature.store.features.PoetryBuild)
  })
_sym_db.RegisterMessage(PoetryBuild)

VirtualEnvironmentBuild = _reflection.GeneratedProtocolMessageType('VirtualEnvironmentBuild', (_message.Message,), {
  'DESCRIPTOR' : _VIRTUALENVIRONMENTBUILD,
  '__module__' : 'qwak.feature_store.features.real_time_feature_set_type_pb2'
  # @@protoc_insertion_point(class_scope:qwak.feature.store.features.VirtualEnvironmentBuild)
  })
_sym_db.RegisterMessage(VirtualEnvironmentBuild)

if _descriptor._USE_C_DESCRIPTORS == False:

  DESCRIPTOR._options = None
  DESCRIPTOR._serialized_options = b'\n&com.qwak.ai.feature.store.features.apiP\001Z/qwak/featurestore/features;featurestorefeatures'
  _REALTIMEFEATURESET._serialized_start=139
  _REALTIMEFEATURESET._serialized_end=396
  _EXTRACTIONARTIFACT._serialized_start=398
  _EXTRACTIONARTIFACT._serialized_end=506
  _AWSS3._serialized_start=508
  _AWSS3._serialized_end=515
  _PYTHONDEPENDENCYMANAGER._serialized_start=518
  _PYTHONDEPENDENCYMANAGER._serialized_end=745
  _CONDABUILD._serialized_start=747
  _CONDABUILD._serialized_end=787
  _POETRYBUILD._serialized_start=789
  _POETRYBUILD._serialized_end=853
  _VIRTUALENVIRONMENTBUILD._serialized_start=855
  _VIRTUALENVIRONMENTBUILD._serialized_end=938
# @@protoc_insertion_point(module_scope)
