"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.protobuf.descriptor
import google.protobuf.message
import qwak.feature_store.features.execution_pb2
import sys

if sys.version_info >= (3, 8):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

class RealTimeFeatureSet(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    REAL_TIME_ARTIFACT_FIELD_NUMBER: builtins.int
    DEPENDENCY_MANAGER_FIELD_NUMBER: builtins.int
    EXECUTION_SPEC_FIELD_NUMBER: builtins.int
    @property
    def real_time_artifact(self) -> global___ExtractionArtifact:
        """Extraction artifact field containing all relevant information related to the code's artifact"""
    @property
    def dependency_manager(self) -> global___PythonDependencyManager:
        """Python dependency manager"""
    @property
    def execution_spec(self) -> qwak.feature_store.features.execution_pb2.ExecutionSpec:
        """Execution spec of the featureset"""
    def __init__(
        self,
        *,
        real_time_artifact: global___ExtractionArtifact | None = ...,
        dependency_manager: global___PythonDependencyManager | None = ...,
        execution_spec: qwak.feature_store.features.execution_pb2.ExecutionSpec | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["dependency_manager", b"dependency_manager", "execution_spec", b"execution_spec", "real_time_artifact", b"real_time_artifact"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["dependency_manager", b"dependency_manager", "execution_spec", b"execution_spec", "real_time_artifact", b"real_time_artifact"]) -> None: ...

global___RealTimeFeatureSet = RealTimeFeatureSet

class ExtractionArtifact(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ARTIFACT_PATH_FIELD_NUMBER: builtins.int
    AWS_S3_FIELD_NUMBER: builtins.int
    artifact_path: builtins.str
    """Path where the artifact can be found and downloaded from"""
    @property
    def aws_s3(self) -> global___AwsS3:
        """AWS S3 filesystem"""
    def __init__(
        self,
        *,
        artifact_path: builtins.str = ...,
        aws_s3: global___AwsS3 | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["aws_s3", b"aws_s3", "fs_type", b"fs_type"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["artifact_path", b"artifact_path", "aws_s3", b"aws_s3", "fs_type", b"fs_type"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["fs_type", b"fs_type"]) -> typing_extensions.Literal["aws_s3"] | None: ...

global___ExtractionArtifact = ExtractionArtifact

class AwsS3(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    def __init__(
        self,
    ) -> None: ...

global___AwsS3 = AwsS3

class PythonDependencyManager(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    VIRTUALENV_FIELD_NUMBER: builtins.int
    CONDA_FIELD_NUMBER: builtins.int
    POETRY_FIELD_NUMBER: builtins.int
    @property
    def virtualenv(self) -> global___VirtualEnvironmentBuild:
        """virtualenv"""
    @property
    def conda(self) -> global___CondaBuild:
        """conda"""
    @property
    def poetry(self) -> global___PoetryBuild:
        """poetry"""
    def __init__(
        self,
        *,
        virtualenv: global___VirtualEnvironmentBuild | None = ...,
        conda: global___CondaBuild | None = ...,
        poetry: global___PoetryBuild | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["conda", b"conda", "poetry", b"poetry", "type", b"type", "virtualenv", b"virtualenv"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["conda", b"conda", "poetry", b"poetry", "type", b"type", "virtualenv", b"virtualenv"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["type", b"type"]) -> typing_extensions.Literal["virtualenv", "conda", "poetry"] | None: ...

global___PythonDependencyManager = PythonDependencyManager

class CondaBuild(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ENCODED_CONDA_FILE_FIELD_NUMBER: builtins.int
    encoded_conda_file: builtins.str
    """Encoded contents of a conda file"""
    def __init__(
        self,
        *,
        encoded_conda_file: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["encoded_conda_file", b"encoded_conda_file"]) -> None: ...

global___CondaBuild = CondaBuild

class PoetryBuild(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    PYTHON_VERSION_FIELD_NUMBER: builtins.int
    ENCODED_LOCK_FILE_FIELD_NUMBER: builtins.int
    python_version: builtins.str
    encoded_lock_file: builtins.str
    """Encoded contents of a poetry lock file"""
    def __init__(
        self,
        *,
        python_version: builtins.str = ...,
        encoded_lock_file: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["encoded_lock_file", b"encoded_lock_file", "python_version", b"python_version"]) -> None: ...

global___PoetryBuild = PoetryBuild

class VirtualEnvironmentBuild(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    PYTHON_VERSION_FIELD_NUMBER: builtins.int
    ENCODED_REQUIREMENTS_TXT_FIELD_NUMBER: builtins.int
    python_version: builtins.str
    encoded_requirements_txt: builtins.str
    """Encoded contents of a requirements file"""
    def __init__(
        self,
        *,
        python_version: builtins.str = ...,
        encoded_requirements_txt: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["encoded_requirements_txt", b"encoded_requirements_txt", "python_version", b"python_version"]) -> None: ...

global___VirtualEnvironmentBuild = VirtualEnvironmentBuild
