# -*- coding: utf-8 -*-
import edxml

from lxml import etree
from edxml.ontology import OntologyElement


class EventTypeAttachment(OntologyElement):

    NAME_PATTERN = ...
    DISPLAY_NAME_PATTERN = ...

    def __init__(self, event_type, name='default', media_type='text/plain', display_name_singular='attachment',
                 display_name_plural=None, description=None, encode_base64=False) -> None:

        self._attr = ...
        self._event_type = ...  # type: edxml.ontology.EventType

    def _child_modified_callback(self) -> 'EventTypeAttachment': ...

    def _set_attr(self, key: str, value): ...

    def get_name(self) -> str: ...

    def get_description(self) -> str: ...

    def get_display_name_singular(self) -> str: ...

    def get_display_name_plural(self) -> str: ...

    def get_media_type(self) -> str: ...

    def get_encoding(self) -> str: ...

    def is_unicode_string(self) -> bool: ...

    def is_base64_string(self) -> bool: ...

    def set_description(self, description: str) -> 'EventTypeAttachment': ...

    def set_display_name(self, singular: str, plural: str=None) -> 'EventTypeAttachment': ...

    def set_media_type(self, media_type: str) -> 'EventTypeAttachment': ...

    def set_encoding(self, encoding: str) -> 'EventTypeAttachment': ...

    def set_encoding_unicode(self) -> 'EventTypeAttachment': ...

    def set_encoding_base64(self) -> 'EventTypeAttachment': ...

    def validate(self) -> 'EventTypeAttachment': ...

    @classmethod
    def create_from_xml(cls, attachment_element: etree.Element,
                        event_type: edxml.ontology.EventType) -> 'EventTypeAttachment': ...

    def update(self, attachment: 'EventTypeAttachment') -> 'EventTypeAttachment': ...

    def generate_xml(self) -> etree.Element: ...
