# Copyright 2015 Oxford Nanopore Technologies PLC

"""
This script sets up configuration files. It is primarily called by the installer, but it can be
called manually as well. Several command line options are provided to drive the setup process.
Default command line arguments should be set in a way useful during development.

Definitions:

- 'default native value': the default configuration value generated by configuration editor application

This script is able to modify the configuration depending on its input (command line arguments)
and the previous configuration.

- If the --load-conf option is defined:
    - The script looks for configuration files already present in the system;
    - If no files are found default configuration files are used (strictly speaking
        C++ default constructed configuration structures)
- If the --load-conf is not defined the configuration is regenerated starting from a default constructed
    configuration;

Command line arguments:

- --output-dir (optional): if defined it must be one of the following values:
    - 'default': the root of output directory is set to the default one;
    - 'no_change': the output directories are copied from existing configuration. If no configuration file
        is found the default native values are used;
- --custom-output-dir (optional): allow to set a custom root for output directories.
    output-dir and custom-output-dir are mutually exclusive. If no option is defined the default behaviour is
    output-dir 'default';
- --load-conf (optional): if defined the configuration is loaded from disk if it exists and
    used as a base to generate a new configuration. This argument does not interfere with other arguments:
    it just means that a configuration has to be loaded from the disk before applying any other editing
    driven by other arguments
- --installation-type-ping-url(optional): if defined sets the ping url to that one specified by the
    installation type. If not defined the ping-url is reset to the default value
- --installation-type (optional): sets the installation type, which must be one of 'nc', 'ont', 'prod', 'q_release', 'ond_release' or 'offline'.
    The installation type affects fields described in INSTALLATION_TYPES. If reset-ping-url is set,
    the ping-url specific to the installation type is discarded;
- --version (optional): Deprecated.
- --make-intermediate-dir-absolute (optional): Control if the intermediate dir should be made absolute, rather than relative to the base dir.

Note: the default values are tuned in a way such that if the script is run manually it creates a configuration
for ONT internal use. In particular the ping url is reset and installation type is considered 'ont'

This script makes the following assumptions:

- Config files should be in conf.CONF_DIR folder;
- The C++ application able to edit configuration files is conf.conf_editor_application().
"""

import argparse, os.path, sys, subprocess
from minknow import conf

# output dir command choices
DEFAULT_CHOICE = "default"
NO_CHANGE_CHOICE = "nochange"


def stringify(s):
    return '"' + s + '"'


def get_output_dir_help(default_output_dir):
    """Useful just for help displaying"""

    ret = "How to set the output directory for MinKNOW. "
    ret += (
        "If "
        + stringify(DEFAULT_CHOICE)
        + " the output directory is set to "
        + default_output_dir
        + "."
    )
    ret += (
        "If "
        + stringify(NO_CHANGE_CHOICE)
        + " the output directory is the same as the existing configuration file(s)."
    )

    return ret


def main():
    parser = argparse.ArgumentParser("Configuration files setup.")
    default_output_dir = conf.get_default_output_dir()

    # output directory commands
    group = parser.add_mutually_exclusive_group()
    group.add_argument(
        "--output-dir",
        choices=[DEFAULT_CHOICE, NO_CHANGE_CHOICE],
        help=get_output_dir_help(default_output_dir),
        default=DEFAULT_CHOICE,
    )
    group.add_argument("--custom-output-dir", help="Override the output directory.")

    # if this option is set, ping url is reset to the default native value
    parser.add_argument(
        "--installation-type-ping-url",
        default=False,
        action="store_true",
        help="Use the installation-type-dependent ping URL instead of the default \
development-environment one. Should only be used when generating installers (or on customer \
machines).",
    )

    # if defined loads a configuration file before applying any other editing
    parser.add_argument(
        "--load-conf",
        default=False,
        action="store_true",
        help="Loads configuration from disk before applying any other editing. Some key settings \
(including most of the user_conf) will be preserved.",
    )

    # sets the installation type
    parser.add_argument(
        "--installation-type",
        "--type",
        choices=sorted(conf.INSTALLATION_TYPES.keys()),
        help='Set installation type (default dev). If --installation-type-ping-url is not \
specified, "dev" and "ont" are the same except that "dev" does not require Bream to be installed \
to work.',
        default="dev",
    )

    parser.add_argument("--version", default=None, help="Deprecated.")

    parser.add_argument(
        "--only-user-conf",
        action="store_true",
        help="Only configure the user config, app_conf and sys_conf are left in place. "
        "If used in combination with --load-conf the user config is upgraded rather than overwritten.",
    )

    parser.add_argument(
        "--make-intermediate-dir-absolute",
        action="store_true",
        help="Make intermediate data directory absolute, rather than relative to the base dir",
    )

    args = parser.parse_args()

    if args.version:
        print("WARNING: the --version argument has been deprecated.")

    if args.output_dir == NO_CHANGE_CHOICE and not args.load_conf:
        print(
            "ERROR: output-dir can't be set to "
            + NO_CHANGE_CHOICE
            + " if load-conf flag is not set"
        )
        exit(1)

    output_dir = None  # means 'no change'

    if args.custom_output_dir is not None:
        output_dir = args.custom_output_dir
    elif args.output_dir == DEFAULT_CHOICE:
        output_dir = default_output_dir

    if output_dir != None:
        output_dir = os.path.normpath(output_dir)
        current_output_dir = os.path.expandvars(os.path.expanduser(output_dir))

    conf_file_names = conf.default_config_full_filenames()

    conf.upgrade_user_config(
        args.load_conf,
        conf_file_names[conf.USER_CONF_TAG],
        output_dir,
        args.installation_type,
        args.make_intermediate_dir_absolute,
    )

    if not args.only_user_conf:
        conf.build_application_config(
            conf_file_names[conf.APPLICATION_CONF_TAG],
            args.installation_type,
        )

        conf.build_system_config(
            conf_file_names[conf.USER_CONF_TAG],
            conf_file_names[conf.SYSTEM_CONF_TAG],
            args.installation_type,
            args.installation_type_ping_url,
        )


if __name__ == "__main__":
    main()
