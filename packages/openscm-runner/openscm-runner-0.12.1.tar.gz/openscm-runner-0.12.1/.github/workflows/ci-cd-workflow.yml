name: OpenSCM-Runner CI-CD
on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  pull_request:

jobs:
  linting-and-docs:

    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    - name: Setup python
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dev dependencies
      run: |
        pip install --upgrade pip wheel
        pip install -e .[dev]
    - name: Formatting and linters
      run: |
        black --check src tests setup.py
        isort --check-only --quiet --recursive src tests setup.py
        pydocstyle src
        bandit -c .bandit.yml -r src
        flake8 src tests setup.py
        pylint src
    - name: Build docs
      # treat warnings as errors (-W)...
      # ...but not when being nitpicky (-n)
      run: |
          sphinx-build -M html docs/source docs/build -qW
          sphinx-build -M html docs/source docs/build -Eqn -b coverage
          if [[ -s docs/build/html/python.txt ]]
          then
              echo
              echo \"Error: Documentation missing:\"
              echo
              cat docs/build/html/python.txt
              exit 1
          fi

  build:
    runs-on: ${{ matrix.os }}
    environment: CI
    strategy:
      matrix:
        # no mac binary for CICERO so fails code coverage
        os: ["ubuntu-latest", "macos-latest", "windows-latest"]
        python-version: [3.7, 3.8, 3.9, "3.10", 3.11]
    env:
      MIN_COVERAGE: 90

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    - name: Setup python
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}
    - name: Download MAGICC non-windows
      if: runner.os != 'Windows'
      run: |
        mkdir -p bin/magicc/magicc-v7.5.3
        wget -O "bin/magicc/magicc-v7.5.3.tar.gz" "${{ secrets.MAGICC_LINK_FROM_MAGICC_DOT_ORG }}"
        tar -xf bin/magicc/magicc-v7.5.3.tar.gz -C bin/magicc/magicc-v7.5.3
    - name: Install test dependencies
      run: |
        pip install --upgrade pip wheel
        pip install -e .[tests,models]
    - name: Test with pytest Linux
      if: runner.os == 'Linux'
      env:
        MAGICC_EXECUTABLE_7: bin/magicc/magicc-v7.5.3/bin/magicc
      run: |
          pytest tests -r a --cov=openscm_runner --cov-report='term-missing' --cov-fail-under=$MIN_COVERAGE
    - name: Test with pytest macOS
      if: runner.os == 'macOS'
      env:
        MAGICC_EXECUTABLE_7: bin/magicc/magicc-v7.5.3/bin/magicc-darwin-amd64
      run: |
          # Locate the gfortran library. The location can change when the image is updated
          GFORTRAN_LIBS=$(find /usr/local/Cellar/gcc@11 -name libgfortran.5.dylib | head -n 1 | xargs dirname)
          echo $GFORTRAN_LIBS
          export DYLD_LIBRARY_PATH=$GFORTRAN_LIBS:$DYLD_LIBRARY_PATH
          # Not testing coverage for macOS due to the CIRERO binary being unavailable
          pytest tests -r a
    - name: Test with pytest Windows
      if: runner.os == 'Windows'
      run: |
          # Not strictly testing coverage under windows as MAGICC isn't available
          pytest tests -r a --cov=openscm_runner --cov-report='term-missing' --cov-fail-under=70

  test-notebooks:
    runs-on: ubuntu-latest
    environment: CI
    strategy:
      matrix:
        python-version: [3.7, 3.8, 3.9, "3.10", 3.11]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    - name: Setup python
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}
    - name: Download MAGICC
      run: |
        mkdir -p bin/magicc/magicc-v7.5.3
        wget -O "bin/magicc/magicc-v7.5.3.tar.gz" "${{ secrets.MAGICC_LINK_FROM_MAGICC_DOT_ORG }}"
        tar -xf bin/magicc/magicc-v7.5.3.tar.gz -C bin/magicc/magicc-v7.5.3
    - name: Install notebook dependencies
      run: |
        pip install --upgrade pip wheel
        pip install -e .[tests,models,notebooks]
    - name: Test notebooks with nbval
      run: |
          pytest notebooks -r a --nbval-lax --sanitize-with tests/notebook-tests.cfg --no-cov
    - name: Test notebooks strictly
      if: matrix.python-version == 3.7
      run: |
        pytest notebooks -r a --nbval --sanitize-with tests/notebook-tests.cfg --no-cov

  test-install:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.7, 3.8, 3.9, "3.10", 3.11]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    - name: Setup python
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}
    - name: Test installation
      run: |
        pip install --upgrade pip wheel
        pip install .
        python scripts/test_install.py

  deploy-pypi:
    needs: [linting-and-docs,build,test-notebooks,test-install]
    if: startsWith(github.ref, 'refs/tags/v')

    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.7]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    - name: Setup python
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        pip install --upgrade pip wheel
        pip install -e .[dev]
    - name: Create package
      run: |
        python setup.py sdist bdist_wheel --universal
        for f in adapters/fair_adapter/natural-emissions-and-forcing.csv adapters/ciceroscm_adapter/utils_templates/gases_v1RCMIP.txt adapters/ciceroscm_adapter/utils_templates/run_dir/scm_vCH4fb adapters/ciceroscm_adapter/utils_templates/run_dir/input_RF/RFSUN/solar_IPCC.txt
        do
          if ! tar -tvf dist/openscm-runner*.tar.gz | grep "$f"
          then
              echo
              echo "${f} csv not correctly packaged"
              exit 1
          fi
        done
    - name: Publish package to PyPI
      uses: pypa/gh-action-pypi-publish@master
      with:
        user: __token__
        password: ${{ secrets.pypi_password }}
