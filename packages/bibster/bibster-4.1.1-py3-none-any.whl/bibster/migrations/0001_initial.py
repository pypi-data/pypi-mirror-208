# Generated by Django 4.1.7 on 2023-03-07 11:38

import bibster.blocks
import bibster.mixins
import bibster.models
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django_auxiliaries.model_fields
import modelcluster.contrib.taggit
import modelcluster.fields
import wagtail.fields
import wagtail.search.index
import wagtail_block_model_field.fields
import wagtail_switch_block.blocks


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('taggit', '0005_auto_20220424_2025'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('officekit', '0002_add_address_formats'),
    ]

    operations = [
        migrations.CreateModel(
            name='Publication',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('author_names', models.CharField(blank=True, default='', max_length=512)),
                ('editor_names', models.CharField(blank=True, default='', max_length=512)),
                ('publisher_name', models.CharField(blank=True, default='', max_length=512)),
                ('publication_title', models.TextField(blank=True, default='', max_length=512)),
                ('container_title', models.TextField(blank=True, default='', max_length=512)),
                ('short_container_title', models.TextField(blank=True, default='', max_length=512)),
                ('year', models.PositiveSmallIntegerField(blank=True, default=None, null=True)),
                ('edition', models.PositiveSmallIntegerField(blank=True, default=None, null=True)),
                ('identifier', models.CharField(blank=True, default=None, max_length=256, null=True)),
                ('medium', models.CharField(blank=True, default=None, max_length=256, null=True)),
                ('series', models.CharField(blank=True, default=None, max_length=512, null=True)),
                ('scale', models.CharField(blank=True, default=None, max_length=128, null=True)),
                ('isbn', models.CharField(blank=True, default=None, max_length=48, null=True)),
                ('doi', models.CharField(blank=True, default=None, max_length=256, null=True)),
                ('url', models.CharField(blank=True, default=None, max_length=512, null=True)),
                ('url_access_date', models.CharField(blank=True, default=None, max_length=48, null=True)),
                ('live', models.BooleanField(default=True, verbose_name='live')),
                ('reference', wagtail_block_model_field.fields.BlockModelField(bibster.blocks.ReferenceBlock(), wagtail_switch_block.blocks.SwitchValue, default={})),
                ('summary', wagtail.fields.RichTextField(blank=True, default='')),
                ('media', wagtail_block_model_field.fields.BlockModelField(bibster.blocks.PublicationMediaBlock(required=False), wagtail_switch_block.blocks.SwitchValue)),
                ('markup_cache_storage', models.TextField(blank=True, default='{}')),
            ],
            options={
                'verbose_name': 'Publication',
                'verbose_name_plural': 'Publications',
            },
            bases=(wagtail.search.index.Indexed, models.Model),
        ),
        migrations.CreateModel(
            name='ReferenceFormat',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('identifier', models.CharField(max_length=128, validators=[django.core.validators.RegexValidator('^[A-Za-z_][A-Za-z_0-9]*$', code='invalid_identifier', message='A valid identifier starts with an alphanumeric letter or underscore and contains only alphanumeric letters, underscores or digits.')])),
                ('format_file', django_auxiliaries.model_fields.AutoDeleteFileField(blank=True, null=True, upload_to=bibster.models.get_format_upload_path)),
                ('created_at', models.DateTimeField(default=None, editable=False, verbose_name='created at')),
                ('created_by_user', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='created by user')),
            ],
            options={
                'verbose_name': 'Reference Format',
                'verbose_name_plural': 'Reference Formats',
            },
            bases=(bibster.mixins.StorageMixin, models.Model),
        ),
        migrations.CreateModel(
            name='PublicationTag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content_object', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='tagged_items', to='bibster.publication')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(app_label)s_%(class)s_items', to='taggit.tag')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='publication',
            name='tags',
            field=modelcluster.contrib.taggit.ClusterTaggableManager(blank=True, help_text='A comma-separated list of tags.', through='bibster.PublicationTag', to='taggit.Tag', verbose_name='Tags'),
        ),
        migrations.CreateModel(
            name='NameInPublication',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('family_name', models.CharField(default='', max_length=192, verbose_name='Family Name')),
                ('given_names_and_initials', models.CharField(default='', max_length=192, verbose_name='Given Name(s) and Initial(s)')),
                ('role', django_auxiliaries.model_fields.MultipleChoiceField(blank=True, choices=[('author', 'Author'), ('editor', 'Editor'), ('inventor', 'Inventor')], default='author', max_length=64)),
                ('person', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='publications', to='officekit.person')),
                ('publication', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='name_index', to='bibster.publication')),
            ],
            options={
                'verbose_name': 'Name in Publication',
                'verbose_name_plural': 'Names in Publication',
                'ordering': ['sort_order'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MarkupFormat',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('identifier', models.CharField(max_length=128, validators=[django.core.validators.RegexValidator('^[A-Za-z_][A-Za-z_0-9]*$', code='invalid_identifier', message='A valid identifier starts with an alphanumeric letter or underscore and contains only alphanumeric letters, underscores or digits.')])),
                ('format_file', django_auxiliaries.model_fields.AutoDeleteFileField(blank=True, null=True, upload_to=bibster.models.get_format_upload_path)),
                ('created_at', models.DateTimeField(default=None, editable=False, verbose_name='created at')),
                ('created_by_user', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='created by user')),
            ],
            options={
                'verbose_name': 'Markup Format',
                'verbose_name_plural': 'Markup Formats',
            },
        ),
        migrations.AddConstraint(
            model_name='referenceformat',
            constraint=models.UniqueConstraint(fields=('identifier',), name='unique_bibster_referenceformat.identifier'),
        ),
        migrations.AddConstraint(
            model_name='nameinpublication',
            constraint=models.UniqueConstraint(fields=('publication', 'family_name', 'given_names_and_initials'), name='unique_bibster_nameinpublication.name_assignment'),
        ),
        migrations.AddConstraint(
            model_name='markupformat',
            constraint=models.UniqueConstraint(fields=('identifier',), name='unique_bibster_markupformat.identifier'),
        ),
    ]
