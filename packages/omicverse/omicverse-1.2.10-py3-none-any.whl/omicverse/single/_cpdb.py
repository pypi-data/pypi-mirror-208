r"""
The downanlysis of cellphonedb
"""

import ktplotspy as kpy
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
import networkx as nx
import matplotlib.patches as mpatches
import scanpy as sc

def cpdb_network_cal(adata,pvals,celltype_key):
    r"""
    Calculate a CPDB (Cell Phone Database) network using gene expression data and return a dictionary of results.

    Parameters
    ----------
    - adata : `anndata.AnnData`
        An AnnData object containing gene expression data.
    - pvals : `list` or `array`
        A list or array of p-values for each gene in the expression data.
    - celltype_key : `str`
        The name of the cell type key in adata.obs.

    Returns
    -------
    - cpdb_dict: `dict`
        A dictionary of results generated by `kpy.plot_cpdb_heatmap()` from the `ktplotspy` library.
    """
    cpdb_dict=kpy.plot_cpdb_heatmap(
        adata = adata,
        pvals = pvals,
        celltype_key = celltype_key,
        figsize = (1,1),
        title = "",
        symmetrical = False,
        return_tables=True,
    )
    return cpdb_dict


def cpdb_plot_network(adata,interaction_edges,celltype_key,nodecolor_dict=None,
                      edgeswidth_scale=10,nodesize_scale=1,
                      pos_scale=1,pos_size=10,figsize=(5,5),title='',
                      legend_ncol=3,legend_bbox=(1,0.2),legend_fontsize=10,
                     return_graph=False):
    r"""
    Plot a network of interactions between cell types using gene expression data.

    Parameters
    ----------
    - adata : `anndata.AnnData`
        An AnnData object containing gene expression data.
    - interaction_edges : `pandas.DataFrame`
        A DataFrame containing the edges of the network, including the source, target, and count of interactions.
    - celltype_key : `str`
        The name of the cell type key in adata.obs.
    - nodecolor_dict : `dict`, optional
        A dictionary mapping cell type names to node colors. If not provided, uses the colors specified in adata.uns.
    - edgeswidth_scale : `int`, optional
        The scaling factor for edge width. Default is 10.
    - nodesize_scale : `int`, optional
        The scaling factor for node size. Default is 1.
    - pos_scale : `int`, optional
        The scaling factor for node positions. Default is 1.
    - pos_size : `int`, optional
        The size of the node positions. Default is 10.
    - figsize : `tuple`, optional
        The size of the plot. Default is (5,5).
    - title : str, optional
        The title of the plot. Default is ''.
    - legend_ncol : `int`, optional
        The number of columns in the legend. Default is 3.
    - legend_bbox : `tuple`, optional
        The location of the legend. Default is (1,0.2).
    - legend_fontsize : `int`, optional
        The font size of the legend. Default is 10.
    - return_graph : `bool`, optional
        If True, returns the network graph. Default is False.

    Returns
    -------
    - ax or G: `matplotlib.axes._subplots.AxesSubplot` or `networkx.classes.digraph.DiGraph`
        The plot if `return_graph` is False, otherwise the network graph.
    """

    #set Digraph of cellphonedb
    G=nx.DiGraph()
    for i in interaction_edges.index:
        G.add_edge(interaction_edges.loc[i,'SOURCE'],
                   interaction_edges.loc[i,'TARGET'],
                   weight=interaction_edges.loc[i,'COUNT'],)
    
    #set celltypekey's color
    if nodecolor_dict!=None:
        type_color_all=nodecolor_dict
    else:
        if '{}_colors'.format(celltype_key) in adata.uns:
            type_color_all=dict(zip(adata.obs[celltype_key].cat.categories,adata.uns['{}_colors'.format(celltype_key)]))
        else:
            if len(adata.obs[celltype_key].cat.categories)>28:
                type_color_all=dict(zip(adata.obs[celltype_key].cat.categories,sc.pl.palettes.default_102))
            else:
                type_color_all=dict(zip(adata.obs[celltype_key].cat.categories,sc.pl.palettes.zeileis_28))
    
    #set G_nodes_dict
    nodes=[]
    G_degree=dict(G.degree(G.nodes()))


    G_nodes_dict={}
    links = []
    for i in G.edges:
        if i[0] not in G_nodes_dict.keys():
            G_nodes_dict[i[0]]=0
        if i[1] not in G_nodes_dict.keys():
            G_nodes_dict[i[1]]=0
        links.append({"source": i[0], "target": i[1]})
        weight=G.get_edge_data(i[0],i[1])['weight']
        G_nodes_dict[i[0]]+=weight
        G_nodes_dict[i[1]]+=weight
        
    #plot
    fig, ax = plt.subplots(figsize=figsize) 
    pos = nx.spring_layout(G, scale=pos_scale, k=(pos_size)/np.sqrt(G.order()))
    p=dict(G.nodes)

    nodesize=np.array([G_nodes_dict[u] for u in G.nodes()])/nodesize_scale
    nodecolos=[type_color_all[u] for u in G.nodes()]
    nx.draw_networkx_nodes(G, pos, nodelist=p,node_size=nodesize,node_color=nodecolos)

    edgewidth = np.array([G.get_edge_data(u, v)['weight'] for u, v in G.edges()])/edgeswidth_scale
    nx.draw_networkx_edges(G, pos,width=edgewidth)


    #label_options = {"ec": "white", "fc": "white", "alpha": 0.6}
    #nx.draw_networkx_labels(G, pos, font_size=10,) #bbox=label_options)
    plt.grid(False)
    plt.axis("off")
    plt.xlim(-2,2)
    plt.ylim(-2,1.5)

    labels = adata.obs[celltype_key].cat.categories
    #用label和color列表生成mpatches.Patch对象，它将作为句柄来生成legend
    color = [type_color_all[u] for u in labels]
    patches = [mpatches.Patch(color=type_color_all[u], label=u) for u in labels ] 

    #plt.xlim(-0.05, 1.05)
    #plt.ylim(-0.05, 1.05)
    plt.axis("off")
    plt.title(title)
    plt.legend(handles=patches,
               bbox_to_anchor=legend_bbox, 
               ncol=legend_ncol,
               fontsize=legend_fontsize)
    if return_graph==True:
        return G
    else:
        return ax
    #return {'Graph':G,'ax':ax}

def cpdb_plot_interaction(adata,cell_type1,cell_type2,means,pvals,celltype_key,genes=None,
                         keep_significant_only=True,figsize = (4,8),title="",
                         max_size=1,highlight_size = 0.75,standard_scale = True,cmap_name='viridis',
                         ytickslabel_fontsize=8,xtickslabel_fontsize=8,title_fontsize=10):
    r"""
    Plot a CellPhoneDB interaction.

    Parameters
    ----------
    - adata : `AnnData object`
        AnnData object containing the data.
    - cell_type1 : `str`
        Name of cell type 1.
    - cell_type2 : `str`
        Name of cell type 2.
    - means : `pandas.DataFrame`
        DataFrame containing the means for each interaction.
    - pvals : `pandas.DataFrame`
        DataFrame containing the p-values for each interaction.
    - celltype_key : `str`
        Key in adata.obs that contains the cell type information.
    - genes : `list` of `str` or None, optional (default: None)
        List of genes to include in the plot. If None, all genes are included.
    - keep_significant_only : `bool`, optional (default: True)
        Whether to keep only significant interactions.
    - figsize : `tuple`, optional (default: (4,8))
        Figure size.
    - title : `str`, optional (default: "")
        Title of the plot.
    - max_size : `float`, optional (default: 1)
        Maximum size of the dots in the plot.
    - highlight_size : `float`, optional (default: 0.75)
        Size of the dots in the plot that correspond to the selected genes.
    - standard_scale : `bool`, optional (default: True)
        Whether to standard scale the data.
    - cmap_name : `str`, optional (default: 'viridis')
        Name of the colormap to use.
    - ytickslabel_fontsize : `int`, optional (default: 8)
        Font size of the y-tick labels.
    - xtickslabel_fontsize : `int`, optional (default: 8)
        Font size of the x-tick labels.
    - title_fontsize : `int`, optional (default: 10)
        Font size of the title.

    Returns
    -------
    - ax: `matplotlib.axes.Axes`
        The axes containing the plot.
    """

    fig=kpy.plot_cpdb(
        adata = adata,
        cell_type1 = cell_type1,
        cell_type2 = cell_type2, 
        means = means,
        pvals = pvals,
        celltype_key = celltype_key,
        genes = genes,
        keep_significant_only=keep_significant_only,
        figsize = figsize,
        title = "",
        max_size = max_size,
        highlight_size = highlight_size,
        standard_scale = standard_scale,
        cmap_name=cmap_name
    ).draw()
    
    #ytickslabels
    labels=fig.get_axes()[0].yaxis.get_ticklabels()
    plt.setp(labels, fontsize=ytickslabel_fontsize)

    #xtickslabels
    labels=fig.get_axes()[0].xaxis.get_ticklabels()
    plt.setp(labels, fontsize=xtickslabel_fontsize)

    fig.get_axes()[0].set_title(title,fontsize=title_fontsize)
    
    return fig.get_axes()[0]

def cpdb_submeans_exacted(means,cell_names,cell_type='ligand'):
    r"""
    Returns a subset of the means DataFrame for a given cell type and cell name.

    Parameters
    ----------
    - means : `pandas.DataFrame`
        DataFrame containing the means for each interaction.
    - cell_names : `str`
        Name of the cell type.
    - cell_type : `str`, optional (default: 'ligand')
        Whether the cell type is a ligand or a receptor.

    Returns
    -------
    - means : `pandas.DataFrame`
        Subset of the means DataFrame for a given cell type and cell name.
    """
    if cell_type=='ligand':
        means_columns=means.columns[:11].tolist()+means.columns[means.columns.str.contains('{}\|'.format(cell_names))].tolist()
    elif cell_type=='receptor':
        means_columns=means.columns[:11].tolist()+means.columns[means.columns.str.contains('\|{}'.format(cell_names))].tolist()
    else:
        raise ValueError('cell_type must be ligand or receptor')
    return means.loc[:,means_columns]

def cpdb_interaction_filtered(adata,cell_type1,cell_type2,means,pvals,celltype_key,genes=None,
                         keep_significant_only=True,figsize = (0,0),
                         max_size=1,highlight_size = 0.75,standard_scale = True,cmap_name='viridis',):
    r"""
    Returns a list of unique interaction groups from a CellPhoneDB analysis filtered by significance.
    
    Parameters
    ----------
    - adata: `AnnData`
        Annotated data matrix containing normalized gene expression data.
    - cell_type1: `str`
        The cell type name for the first interacting partner.
    - cell_type2: `str`
        The cell type name for the second interacting partner.
    - means: `pandas.DataFrame`
        Dataframe containing the means of gene expression for each interaction.
    - pvals: `pandas.DataFrame`
        Dataframe containing the p-values for each interaction.
    - celltype_key: `str`
        The column name in the `adata.obs` dataframe containing cell type annotations.
    - genes: `list` or None, optional (default: None)
        List of gene names to filter on. If None, no filtering is applied.
    - keep_significant_only: `bool`, optional (default: True)
        Whether to filter on significant interactions only (i.e. interactions with FDR < 0.05).
    - figsize: tuple of `int`, optional (default: (0,0))
        Width and height of the figure in inches. 
    - max_size: `float`, optional (default: 1)
        Maximum size of the markers in the plot.
    - highlight_size: `float`, optional (default: 0.75)
        Size of the markers for significant interactions in the plot.
    - standard_scale: `bool`, optional (default: True)
        Whether to standard scale the gene expression values.
    - cmap_name: `str`, optional (default: 'viridis')
        Name of the colormap to use in the plot.
        
    Returns
    -------
    - genes: `list` of str
        A list of unique interaction groups from the CellPhoneDB analysis filtered by significance.
    """
    res=kpy.plot_cpdb(
        adata = adata,
        cell_type1 = cell_type1,
        cell_type2 = cell_type2, 
        means = means,
        pvals = pvals,
        celltype_key = celltype_key,
        genes = genes,
        keep_significant_only=keep_significant_only,
        figsize = figsize,
        title = "",
        max_size = max_size,
        highlight_size = highlight_size,
        standard_scale = standard_scale,
        cmap_name=cmap_name,
        return_table=True
    )

    return list(set(res['interaction_group']))