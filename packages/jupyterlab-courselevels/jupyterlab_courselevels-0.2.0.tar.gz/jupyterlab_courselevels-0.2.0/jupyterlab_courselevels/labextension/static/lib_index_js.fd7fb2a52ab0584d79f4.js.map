{"version":3,"file":"lib_index_js.fd7fb2a52ab0584d79f4.js","mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACuD;AACC;AACA;AACH;AACqB;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,iEAAe,EAAE,kEAAgB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,kEAAM;AAC9B,wBAAwB,qEAAS;AACjC;AACA;AACA,wBAAwB,qEAAS;AACjC,wBAAwB,qEAAS;AACjC,wBAAwB,qEAAS;AACjC;AACA;AACA;AACA,wBAAwB,kEAAM;AAC9B,wBAAwB,qEAAS;AACjC;AACA;AACA,wBAAwB,qEAAS;AACjC,wBAAwB,qEAAS;AACjC,wBAAwB,qEAAS;AACjC;AACA;AACA;AACA,wBAAwB,kEAAM;AAC9B,wBAAwB,qEAAS;AACjC;AACA;AACA,wBAAwB,qEAAS;AACjC,wBAAwB,qEAAS;AACjC,wBAAwB,qEAAS;AACjC;AACA;AACA;AACA,oBAAoB,qEAAS;AAC7B,oBAAoB,qEAAS;AAC7B,oBAAoB,qEAAS;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,MAAM;AACzD;AACA,iCAAiC,OAAO;AACxC;AACA,aAAa;AACb,8BAA8B,mCAAmC;AACjE,yCAAyC,gDAAgD;AACzF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,kEAAM;AACtB,gBAAgB,qEAAS;AACzB;AACA;AACA,gBAAgB,qEAAS;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,0BAA0B,mCAAmC;AAC7D,qCAAqC,qDAAqD;AAC1F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,kEAAM;AACtB,gBAAgB,qEAAS;AACzB;AACA;AACA,gBAAgB,qEAAS;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,0BAA0B,mCAAmC;AAC7D,qCAAqC,qDAAqD;AAC1F;AACA;AACA;AACA;AACA,mCAAmC,+DAAa;AAChD;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,2BAA2B,kEAAkB;AAC7C;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,mCAAmC,+DAAa;AAChD;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,2BAA2B,kEAAkB;AAC7C;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,mCAAmC,+DAAa;AAChD;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,2BAA2B,kEAAkB;AAC7C;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,mCAAmC,+DAAa;AAChD;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,2BAA2B,kEAAkB;AAC7C;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,iEAAe,MAAM,EAAC","sources":["webpack://jupyterlab-courselevels/./lib/index.js"],"sourcesContent":["/*\n * for attaching keybindings later on, see\n * https://towardsdatascience.com/how-to-customize-jupyterlab-keyboard-shortcuts-72321f73753d\n */\nimport { ICommandPalette } from '@jupyterlab/apputils';\nimport { INotebookTracker } from '@jupyterlab/notebook';\nimport { DisposableDelegate } from '@lumino/disposable';\nimport { ToolbarButton } from '@jupyterlab/apputils';\nimport { md_has, md_insert, md_remove } from 'jupyterlab-celltagsclasses';\n/**\n * Initialization data for the jupyterlab-courselevels extension.\n */\nconst plugin = {\n    id: 'jupyterlab-courselevels:plugin',\n    autoStart: true,\n    requires: [ICommandPalette, INotebookTracker],\n    activate: (app, palette, notebookTracker) => {\n        console.log('JupyterLab extension jupyterlab-courselevels is activating');\n        // https://lumino.readthedocs.io/en/1.x/api/commands/interfaces/commandregistry.ikeybindingoptions.html\n        // The supported modifiers are: Accel, Alt, Cmd, Ctrl, and Shift. The Accel\n        // modifier is translated to Cmd on Mac and Ctrl on all other platforms. The\n        // Cmd modifier is ignored on non-Mac platforms.\n        // Alt is option on mac\n        const cell_toggle_level = (cell, level) => {\n            switch (level) {\n                case 'basic':\n                    if (md_has(cell, 'tags', 'level_basic')) {\n                        md_remove(cell, 'tags', 'level_basic');\n                    }\n                    else {\n                        md_insert(cell, 'tags', 'level_basic');\n                        md_remove(cell, 'tags', 'level_intermediate');\n                        md_remove(cell, 'tags', 'level_advanced');\n                    }\n                    break;\n                case 'intermediate':\n                    if (md_has(cell, 'tags', 'level_intermediate')) {\n                        md_remove(cell, 'tags', 'level_intermediate');\n                    }\n                    else {\n                        md_remove(cell, 'tags', 'level_basic');\n                        md_insert(cell, 'tags', 'level_intermediate');\n                        md_remove(cell, 'tags', 'level_advanced');\n                    }\n                    break;\n                case 'advanced':\n                    if (md_has(cell, 'tags', 'level_advanced')) {\n                        md_remove(cell, 'tags', 'level_advanced');\n                    }\n                    else {\n                        md_remove(cell, 'tags', 'level_basic');\n                        md_remove(cell, 'tags', 'level_intermediate');\n                        md_insert(cell, 'tags', 'level_advanced');\n                    }\n                    break;\n                default:\n                    md_remove(cell, 'tags', 'level_basic');\n                    md_remove(cell, 'tags', 'level_intermediate');\n                    md_remove(cell, 'tags', 'level_advanced');\n            }\n        };\n        const toggle_level = (level) => {\n            var _a;\n            const notebook = (_a = notebookTracker.currentWidget) === null || _a === void 0 ? void 0 : _a.content;\n            if (notebook === undefined) {\n                return;\n            }\n            const activeCell = notebook.activeCell;\n            if (activeCell === null) {\n                return;\n            }\n            cell_toggle_level(activeCell, level);\n        };\n        let command;\n        for (const [level, key] of [\n            ['basic', 'Ctrl X'],\n            ['intermediate', 'Ctrl Y'],\n            ['advanced', 'Ctrl Z'],\n        ]) {\n            command = `courselevels:toggle-level-${level}`;\n            app.commands.addCommand(command, {\n                label: `toggle ${level} level`,\n                execute: () => toggle_level(level)\n            });\n            palette.addItem({ command, category: 'CourseLevels' });\n            app.commands.addKeyBinding({ command, keys: [key], selector: '.jp-Notebook' });\n        }\n        const toggle_frame = () => {\n            var _a;\n            const notebook = (_a = notebookTracker.currentWidget) === null || _a === void 0 ? void 0 : _a.content;\n            if (notebook === undefined) {\n                return;\n            }\n            const activeCell = notebook.activeCell;\n            if (activeCell === null) {\n                return;\n            }\n            if (md_has(activeCell, 'tags', 'framed_cell')) {\n                md_remove(activeCell, 'tags', 'framed_cell');\n            }\n            else {\n                md_insert(activeCell, 'tags', 'framed_cell');\n            }\n        };\n        command = 'courselevels:toggle-frame';\n        app.commands.addCommand(command, {\n            label: 'toggle frame',\n            execute: () => toggle_frame()\n        });\n        palette.addItem({ command, category: 'CourseLevels' });\n        app.commands.addKeyBinding({ command, keys: ['Ctrl M'], selector: '.jp-Notebook' });\n        const toggle_licence = () => {\n            var _a;\n            const notebook = (_a = notebookTracker.currentWidget) === null || _a === void 0 ? void 0 : _a.content;\n            if (notebook === undefined) {\n                return;\n            }\n            const activeCell = notebook.activeCell;\n            if (activeCell === null) {\n                return;\n            }\n            if (md_has(activeCell, 'tags', 'licence')) {\n                md_remove(activeCell, 'tags', 'licence');\n            }\n            else {\n                md_insert(activeCell, 'tags', 'licence');\n            }\n        };\n        command = 'courselevels:toggle-licence';\n        app.commands.addCommand(command, {\n            label: 'toggle licence',\n            execute: () => toggle_licence()\n        });\n        palette.addItem({ command, category: 'CourseLevels' });\n        app.commands.addKeyBinding({ command, keys: ['Ctrl L'], selector: '.jp-Notebook' });\n        // the buttons in the toolbar\n        const index = 10;\n        class BasicButton {\n            createNew(panel, context) {\n                const button = new ToolbarButton({\n                    className: 'courselevels-button',\n                    iconClass: 'far fa-hand-pointer',\n                    onClick: () => toggle_level('basic'),\n                    tooltip: 'Toggle basic level',\n                });\n                // compute where to insert them\n                // let spacer = panel.toolbar.children.find((item) => item.className === 'jp-Toolbar-spacer')\n                // let index = panel.toolbar.children.indexOf(spacer) + 1\n                console.log(`panel.toolbar.children`, panel.toolbar.children());\n                panel.toolbar.insertItem(index, 'basicLevel', button);\n                return new DisposableDelegate(() => {\n                    button.dispose();\n                });\n            }\n        }\n        app.docRegistry.addWidgetExtension('Notebook', new BasicButton());\n        class IntermediateButton {\n            createNew(panel, context) {\n                const button = new ToolbarButton({\n                    className: 'courselevels-button',\n                    iconClass: 'far fa-hand-peace',\n                    onClick: () => toggle_level('intermediate'),\n                    tooltip: 'Toggle intermediate level',\n                });\n                // compute where to insert them\n                // let spacer = panel.toolbar.children.find((item) => item.className === 'jp-Toolbar-spacer')\n                // let index = panel.toolbar.children.indexOf(spacer) + 1\n                panel.toolbar.insertItem(index, 'intermediateLevel', button);\n                return new DisposableDelegate(() => {\n                    button.dispose();\n                });\n            }\n        }\n        app.docRegistry.addWidgetExtension('Notebook', new IntermediateButton());\n        class AdvancedButton {\n            createNew(panel, context) {\n                const button = new ToolbarButton({\n                    className: 'courselevels-button',\n                    iconClass: 'far fa-hand-spock',\n                    onClick: () => toggle_level('advanced'),\n                    tooltip: 'Toggle advanced level',\n                });\n                // compute where to insert them\n                // let spacer = panel.toolbar.children.find((item) => item.className === 'jp-Toolbar-spacer')\n                // let index = panel.toolbar.children.indexOf(spacer) + 1\n                panel.toolbar.insertItem(index, 'advancedLevel', button);\n                return new DisposableDelegate(() => {\n                    button.dispose();\n                });\n            }\n        }\n        app.docRegistry.addWidgetExtension('Notebook', new AdvancedButton());\n        class FrameButton {\n            createNew(panel, context) {\n                const button = new ToolbarButton({\n                    className: 'courselevels-button',\n                    iconClass: 'fas fa-crop-alt',\n                    onClick: () => toggle_frame(),\n                    tooltip: 'Toggle frame around cell',\n                });\n                // compute where to insert them\n                // let spacer = panel.toolbar.children.find((item) => item.className === 'jp-Toolbar-spacer')\n                // let index = panel.toolbar.children.indexOf(spacer) + 1\n                panel.toolbar.insertItem(index, 'frameLevel', button);\n                return new DisposableDelegate(() => {\n                    button.dispose();\n                });\n            }\n        }\n        app.docRegistry.addWidgetExtension('Notebook', new FrameButton());\n    }\n};\nexport default plugin;\n"],"names":[],"sourceRoot":""}