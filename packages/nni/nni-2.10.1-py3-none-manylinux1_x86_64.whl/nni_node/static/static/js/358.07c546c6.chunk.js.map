{"version":3,"file":"static/js/358.07c546c6.chunk.js","mappings":"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","sources":["components/common/CopyButton.tsx","components/experiment/overview/Title.tsx","components/experiment/overview/TitleContext.tsx","static/model/experimentsManager.ts","components/experimentManagement/expFunction.ts","components/experimentManagement/experimentConst.ts","components/experimentManagement/Header.tsx","components/experimentManagement/TrialIdColumn.tsx","components/experimentManagement/FilterBtns.tsx","components/experimentManagement/ExperimentManagerIndex.tsx"],"sourcesContent":["import React, { useRef } from 'react';\nimport copy from 'copy-to-clipboard';\nimport { IconButton, FontSizes, TooltipHost } from '@fluentui/react';\nimport { TOOLTIPSTYLE } from '@static/const';\n\ninterface CopyButtonProps {\n    value: string;\n    hideTooltip?: boolean;\n}\n\nconst COPIED_TOOLTIP_CLOSE_DELAY = 1000;\n\nconst CopyButton = (props: CopyButtonProps): any => {\n    const { value, hideTooltip } = props;\n    const ref = useRef(null);\n    return (\n        <div>\n            <IconButton\n                iconProps={{ iconName: 'Copy' }}\n                styles={{ icon: [{ fontSize: FontSizes.small }] }}\n                onClick={(event: React.SyntheticEvent<EventTarget>): void => {\n                    event.stopPropagation();\n                    copy(value);\n                    ref.current && (ref as any).current.show();\n                    setTimeout(() => {\n                        ref.current !== null && (ref as any).current.dismiss();\n                    }, COPIED_TOOLTIP_CLOSE_DELAY);\n                }}\n                onMouseDown={(e): void => {\n                    e.stopPropagation();\n                }}\n                onMouseUp={(e): void => {\n                    e.stopPropagation();\n                }}\n            />\n            <TooltipHost\n                hidden={hideTooltip}\n                content='Copied'\n                componentRef={ref}\n                delay={0}\n                tooltipProps={TOOLTIPSTYLE}\n            />\n        </div>\n    );\n};\n\nexport default CopyButton;\n","import React from 'react';\nimport { Stack, Icon } from '@fluentui/react';\nimport { TitleContext } from './TitleContext';\nimport '@style/experiment/overview/overviewTitle.scss';\n\nexport const Title = (): any => (\n    <TitleContext.Consumer>\n        {(value): React.ReactNode => (\n            <Stack horizontal className='panelTitle'>\n                <Icon iconName={value.icon} />\n                <span className='fontColor333'>{value.text}</span>\n            </Stack>\n        )}\n    </TitleContext.Consumer>\n);\n","import * as React from 'react';\n\nexport const TitleContext = React.createContext({\n    text: '',\n    icon: ''\n});\n","import { MANAGER_IP } from '../const';\nimport { AllExperimentList } from '../interface';\nimport { requestAxios } from '../function';\n\nclass ExperimentsManager {\n    private experimentList: AllExperimentList[] = [];\n    private platform: string[] = [];\n    private errorMessage: string = '';\n\n    public getExperimentList(): AllExperimentList[] {\n        return this.experimentList;\n    }\n\n    public getPlatformList(): string[] {\n        return this.platform;\n    }\n\n    public getExpErrorMessage(): string {\n        return this.errorMessage;\n    }\n\n    public async init(): Promise<void> {\n        await requestAxios(`${MANAGER_IP}/experiments-info`)\n            .then(data => {\n                const platforms: Set<string> = new Set();\n                for (const item of data) {\n                    if (item.port !== undefined) {\n                        if (typeof item.port === 'string') {\n                            item.port = JSON.parse(item.port);\n                        }\n                    }\n                    platforms.add(item.platform);\n                }\n                // this.experimentList = data.reverse();\n                this.experimentList = data.sort((a, b) => b.startTime - a.startTime);\n                this.platform = Array.from(platforms);\n            })\n            .catch(error => {\n                this.errorMessage = error.message;\n            });\n    }\n}\n\nexport { ExperimentsManager };\n","import { AllExperimentList, SortInfo } from '@static/interface';\nimport { copyAndSort } from '@static/function';\n\nfunction compareDate(date1: Date, date2: Date): boolean {\n    if (date1 !== undefined && date2 !== undefined) {\n        if (date1.getFullYear() === date2.getFullYear()) {\n            if (date1.getMonth() === date2.getMonth()) {\n                if (date1.getDate() === date2.getDate()) {\n                    return true;\n                }\n            }\n        }\n    }\n\n    return false;\n}\n\nconst filterByStatusOrPlatform = (\n    val: string | string[],\n    type: string,\n    data: AllExperimentList[]\n): AllExperimentList[] => {\n    if (typeof val === 'string' && val !== '') {\n        return data.filter(temp => temp[type] === val);\n    }\n\n    if (Array.isArray(val) && val.length !== 0) {\n        return data.filter(temp => val.includes(temp[type]));\n    }\n\n    return data;\n};\n\nfunction fillOptions(arr: string[]): any {\n    return arr.map(item => ({ key: item, text: item }));\n}\n\nfunction getSortedSource(source: AllExperimentList[], sortInfo: SortInfo): AllExperimentList[] {\n    const keepSortedSource = copyAndSort(source, sortInfo.field, sortInfo.isDescend);\n    return keepSortedSource;\n}\n\nexport { compareDate, filterByStatusOrPlatform, fillOptions, getSortedSource };\n","const MAXSCREENCOLUMNWIDHT = 180;\nconst MINSCREENCOLUMNWIDHT = 139;\n\nexport { MAXSCREENCOLUMNWIDHT, MINSCREENCOLUMNWIDHT };\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Stack, StackItem, CommandBarButton } from '@fluentui/react';\nimport { RevToggleKey } from '../fluent/Icon';\nimport { NNILOGO } from '../nav/slideNav/NNItabs';\nimport { gap15, stackStyle } from '../fluent/ChildrenGap';\n\nexport const Hearder = (): any => (\n    <div className='header'>\n        <div className='headerCon'>\n            <Stack className='nav' horizontal>\n                <StackItem grow={30} styles={{ root: { minWidth: 300, display: 'flex', verticalAlign: 'center' } }}>\n                    <span className='desktop-logo'>{NNILOGO}</span>\n                    <span className='logoTitle'>Neural Network Intelligence</span>\n                </StackItem>\n                <StackItem grow={70} className='navOptions'>\n                    <Stack horizontal horizontalAlign='end' tokens={gap15} styles={stackStyle}>\n                        <Link to='/oview' className='experiment'>\n                            <CommandBarButton iconProps={RevToggleKey} text='Back to the experiment' />\n                        </Link>\n                    </Stack>\n                </StackItem>\n            </Stack>\n        </div>\n    </div>\n);\n","import * as React from 'react';\nimport { Stack } from '@fluentui/react';\nimport { AllExperimentList } from '@static/interface';\nimport CopyButton from '../common/CopyButton';\n\ninterface TrialIdColumnProps {\n    item: AllExperimentList;\n}\n\nclass TrialIdColumn extends React.Component<TrialIdColumnProps, {}> {\n    constructor(props: TrialIdColumnProps) {\n        super(props);\n    }\n\n    render(): React.ReactNode {\n        const { item } = this.props;\n        const hostname = window.location.hostname;\n        const protocol = window.location.protocol;\n        const webuiPortal =\n            item.prefixUrl === null\n                ? `${protocol}//${hostname}:${item.port}/oview`\n                : `${protocol}//${hostname}:${item.port}/${this.formatPrefix(item.prefixUrl)}/oview`;\n        return (\n            <Stack horizontal className='ellipsis idCopy'>\n                {item.status === 'STOPPED' ? (\n                    <div className='idColor'>{item.id}</div>\n                ) : (\n                    <a href={webuiPortal} className='link' target='_blank' rel='noopener noreferrer'>\n                        {item.id}\n                    </a>\n                )}\n                <CopyButton value={item.id} />\n            </Stack>\n        );\n    }\n\n    private formatPrefix(prefix): string {\n        if (prefix.startsWith('/')) {\n            prefix = prefix.slice(1);\n        }\n\n        if (prefix.endsWith('/')) {\n            prefix = prefix.slice(0, prefix.length - 1);\n        }\n\n        return prefix;\n    }\n}\n\nexport default TrialIdColumn;\n","import * as React from 'react';\nimport { DefaultButton, Icon, Dropdown, DatePicker, DayOfWeek } from '@fluentui/react';\nimport { EXPERIMENTSTATUS } from '@static/const';\nimport { fillOptions } from './expFunction';\n\ninterface FilterBtnsProps {\n    platform: string[];\n    selectedStatus: string[];\n    selectedPlatform: string;\n    selectedStartDate: Date;\n    selectedEndDate: Date;\n    selectStatus: (_event: React.FormEvent<HTMLDivElement>, item: any) => void;\n    selectPlatform: (_event: React.FormEvent<HTMLDivElement>, item: any) => void;\n    getSelectedData: (type: string, date: Date | null | undefined) => void;\n    setSearchSource: () => void;\n}\n\nclass FilterBtns extends React.Component<FilterBtnsProps, {}> {\n    constructor(props: FilterBtnsProps) {\n        super(props);\n    }\n\n    render(): React.ReactNode {\n        const {\n            platform,\n            selectedStatus,\n            selectedPlatform,\n            selectedStartDate,\n            selectedEndDate,\n            selectStatus,\n            selectPlatform,\n            getSelectedData,\n            setSearchSource\n        } = this.props;\n\n        return (\n            <React.Fragment>\n                <Dropdown\n                    label='Status'\n                    selectedKeys={selectedStatus}\n                    multiSelect\n                    onChange={selectStatus.bind(this)}\n                    placeholder='Select an option'\n                    options={fillOptions(EXPERIMENTSTATUS)}\n                    className='filter-condition-status'\n                />\n                <Dropdown\n                    label='Platform'\n                    selectedKey={selectedPlatform}\n                    onChange={selectPlatform.bind(this)}\n                    placeholder='Select an option'\n                    options={fillOptions(platform)}\n                    className='filter-condition-platform'\n                />\n                <DatePicker\n                    label='Start time'\n                    firstDayOfWeek={DayOfWeek.Sunday}\n                    showMonthPickerAsOverlay={true}\n                    placeholder='Select a date...'\n                    ariaLabel='Select a date'\n                    value={selectedStartDate}\n                    onSelectDate={getSelectedData.bind(this, 'start')}\n                    className='filter-condition-date'\n                />\n                <DatePicker\n                    label='End time'\n                    firstDayOfWeek={DayOfWeek.Sunday}\n                    showMonthPickerAsOverlay={true}\n                    placeholder='Select a date...'\n                    ariaLabel='Select a date'\n                    value={selectedEndDate}\n                    onSelectDate={getSelectedData.bind(this, 'end')}\n                    className='filter-condition-date'\n                />\n                <DefaultButton onClick={setSearchSource.bind(this)} className='reset'>\n                    <Icon iconName='Refresh' />\n                    <span className='margin'>Reset</span>\n                </DefaultButton>\n            </React.Fragment>\n        );\n    }\n}\n\nexport default FilterBtns;\n","import * as React from 'react';\nimport { Stack, DetailsList, DefaultButton, Icon, SearchBox, IColumn, IStackTokens } from '@fluentui/react';\nimport { ExperimentsManager } from '@model/experimentsManager';\nimport { expformatTimestamp, copyAndSort } from '@static/function';\nimport { AllExperimentList, SortInfo } from '@static/interface';\nimport MessageInfo from '@components/common/MessageInfo';\nimport { compareDate, filterByStatusOrPlatform, getSortedSource } from './expFunction';\nimport { MAXSCREENCOLUMNWIDHT, MINSCREENCOLUMNWIDHT } from './experimentConst';\nimport { Hearder } from './Header';\nimport TrialIdColumn from './TrialIdColumn';\nimport FilterBtns from './FilterBtns';\nimport { TitleContext } from '../experiment/overview/TitleContext';\nimport { Title } from '../experiment/overview/Title';\nimport '@style/App.scss';\nimport '@style/nav/nav.scss';\nimport '@style/common/common.scss';\nimport '@style/common/experimentStatusColor.scss';\nimport '@style/common/trialStatus.css';\nimport '@style/experimentManagement/experiment.scss';\n\nconst expTokens: IStackTokens = {\n    childrenGap: 25\n};\n\ninterface ExpListState {\n    columns: IColumn[];\n    platform: string[];\n    errorMessage: string;\n    hideFilter: boolean;\n    searchInputVal: string;\n    selectedStatus: string[];\n    selectedPlatform: string;\n    selectedStartDate?: Date;\n    selectedEndDate?: Date;\n    sortInfo: SortInfo;\n    source: AllExperimentList[];\n    originExperimentList: AllExperimentList[];\n    searchSource: AllExperimentList[];\n}\n\nclass Experiment extends React.Component<{}, ExpListState> {\n    constructor(props) {\n        super(props);\n        this.state = {\n            platform: [],\n            columns: this.columns,\n            errorMessage: '',\n            hideFilter: true,\n            searchInputVal: '',\n            selectedStatus: [],\n            selectedPlatform: '',\n            source: [], // data in table\n            originExperimentList: [], // api /experiments-info\n            searchSource: [], // search box search result\n            sortInfo: { field: '', isDescend: false }\n        };\n    }\n\n    async componentDidMount(): Promise<void> {\n        const EXPERIMENTMANAGER = new ExperimentsManager();\n        await EXPERIMENTMANAGER.init();\n        const result = EXPERIMENTMANAGER.getExperimentList();\n        this.setState(() => ({\n            source: result,\n            originExperimentList: result,\n            searchSource: result,\n            platform: EXPERIMENTMANAGER.getPlatformList(),\n            errorMessage: EXPERIMENTMANAGER.getExpErrorMessage()\n        }));\n    }\n\n    render(): React.ReactNode {\n        const {\n            platform,\n            hideFilter,\n            selectedStatus,\n            source,\n            selectedPlatform,\n            selectedStartDate,\n            selectedEndDate,\n            errorMessage\n        } = this.state;\n        return (\n            <Stack className='nni' style={{ minHeight: window.innerHeight }}>\n                <Hearder />\n                {errorMessage !== undefined ? (\n                    <div className='warning'>\n                        <MessageInfo info={errorMessage} typeInfo='error' />\n                    </div>\n                ) : null}\n                <Stack className='contentBox expBackground'>\n                    {/* 56px: navBarHeight; 48: marginTop & Bottom */}\n                    <Stack className='content' styles={{ root: { minHeight: window.innerHeight - 104 } }}>\n                        <Stack className='experimentList'>\n                            <TitleContext.Provider value={{ text: 'All experiments', icon: 'CustomList' }}>\n                                <Title />\n                            </TitleContext.Provider>\n                            <Stack className='box' horizontal>\n                                <div className='search'>\n                                    <SearchBox\n                                        className='search-input'\n                                        placeholder='Search the experiment by name or ID'\n                                        onEscape={this.setOriginSource.bind(this)}\n                                        onClear={this.setOriginSource.bind(this)}\n                                        onChange={this.searchNameAndId.bind(this)}\n                                    />\n                                </div>\n                                <div className='filter'>\n                                    <DefaultButton\n                                        onClick={this.clickFilter.bind(this)}\n                                        className={`${!hideFilter ? 'filter-button-open' : null}`}\n                                    >\n                                        <Icon iconName='Equalizer' />\n                                        <span className='margin'>Filter</span>\n                                    </DefaultButton>\n                                </div>\n                            </Stack>\n                            <Stack\n                                className={`${hideFilter ? 'hidden' : ''} filter-condition`}\n                                horizontal\n                                tokens={expTokens}\n                            >\n                                <FilterBtns\n                                    platform={platform}\n                                    selectedStatus={selectedStatus}\n                                    selectedPlatform={selectedPlatform}\n                                    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                                    selectedStartDate={selectedStartDate!}\n                                    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                                    selectedEndDate={selectedEndDate!}\n                                    selectStatus={this.selectStatus.bind(this)}\n                                    selectPlatform={this.selectPlatform.bind(this)}\n                                    getSelectedData={this.getSelectedData.bind(this)}\n                                    setSearchSource={this.setSearchSource.bind(this)}\n                                />\n                            </Stack>\n                            <DetailsList\n                                columns={this.columns}\n                                items={source}\n                                setKey='set'\n                                compact={true}\n                                selectionMode={0} // close selector function\n                                className='table'\n                            />\n                        </Stack>\n                    </Stack>\n                </Stack>\n            </Stack>\n        );\n    }\n\n    private onColumnClick = (_ev: React.MouseEvent<HTMLElement>, getColumn: IColumn): void => {\n        const { columns, source } = this.state;\n        const newColumns: IColumn[] = columns.slice();\n        const currColumn: IColumn = newColumns.filter(item => getColumn.key === item.key)[0];\n        newColumns.forEach((newCol: IColumn) => {\n            if (newCol === currColumn) {\n                currColumn.isSortedDescending = !currColumn.isSortedDescending;\n                currColumn.isSorted = true;\n            } else {\n                newCol.isSorted = false;\n                newCol.isSortedDescending = true;\n            }\n        });\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        const newItems = copyAndSort(source, currColumn.fieldName!, currColumn.isSortedDescending);\n        this.setState(() => ({\n            columns: newColumns,\n            source: newItems,\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            sortInfo: { field: currColumn.fieldName!, isDescend: currColumn.isSortedDescending }\n        }));\n    };\n\n    private columns: IColumn[] = [\n        {\n            name: 'Name',\n            key: 'experimentName',\n            fieldName: 'experimentName', // required!\n            minWidth: MINSCREENCOLUMNWIDHT,\n            maxWidth: MAXSCREENCOLUMNWIDHT,\n            isResizable: true,\n            data: 'number',\n            onColumnClick: this.onColumnClick,\n            onRender: (item: any): React.ReactNode => <div>{item.experimentName}</div>\n        },\n        {\n            name: 'ID',\n            key: 'id',\n            fieldName: 'id',\n            minWidth: MINSCREENCOLUMNWIDHT,\n            maxWidth: MAXSCREENCOLUMNWIDHT,\n            isResizable: true,\n            className: 'tableHead leftTitle',\n            data: 'string',\n            onColumnClick: this.onColumnClick,\n            onRender: (item: any): React.ReactNode => <TrialIdColumn item={item} />\n        },\n        {\n            name: 'Status',\n            key: 'status',\n            fieldName: 'status',\n            minWidth: MINSCREENCOLUMNWIDHT,\n            maxWidth: MAXSCREENCOLUMNWIDHT,\n            isResizable: true,\n            onColumnClick: this.onColumnClick,\n            onRender: (item: any): React.ReactNode => <div className={`${item.status} commonStyle`}>{item.status}</div>\n        },\n        {\n            name: 'Port',\n            key: 'port',\n            fieldName: 'port',\n            minWidth: MINSCREENCOLUMNWIDHT - 15,\n            maxWidth: MAXSCREENCOLUMNWIDHT - 30,\n            isResizable: true,\n            data: 'number',\n            onColumnClick: this.onColumnClick,\n            onRender: (item: any): React.ReactNode => (\n                <div className={item.status === 'STOPPED' ? 'gray-port' : ''}>\n                    {item.port !== undefined ? item.port : '--'}\n                </div>\n            )\n        },\n        {\n            name: 'Platform',\n            key: 'platform',\n            fieldName: 'platform',\n            minWidth: MINSCREENCOLUMNWIDHT - 15,\n            maxWidth: MAXSCREENCOLUMNWIDHT - 30,\n            isResizable: true,\n            data: 'string',\n            onColumnClick: this.onColumnClick,\n            onRender: (item: any): React.ReactNode => <div className='commonStyle'>{item.platform}</div>\n        },\n        {\n            name: 'Start time',\n            key: 'startTime',\n            fieldName: 'startTime',\n            minWidth: MINSCREENCOLUMNWIDHT + 15,\n            maxWidth: MAXSCREENCOLUMNWIDHT + 30,\n            isResizable: true,\n            data: 'number',\n            onColumnClick: this.onColumnClick,\n            onRender: (item: any): React.ReactNode => <div>{expformatTimestamp(item.startTime)}</div>\n        },\n        {\n            name: 'End time',\n            key: 'endTime',\n            fieldName: 'endTime',\n            minWidth: MINSCREENCOLUMNWIDHT + 15,\n            maxWidth: MAXSCREENCOLUMNWIDHT + 30,\n            isResizable: true,\n            data: 'number',\n            onColumnClick: this.onColumnClick,\n            onRender: (item: any): React.ReactNode => <div>{expformatTimestamp(item.endTime)}</div>\n        }\n    ];\n\n    private clickFilter(_e: any): void {\n        const { hideFilter } = this.state;\n        if (!hideFilter === true) {\n            this.setSearchSource();\n        }\n        this.setState(() => ({ hideFilter: !hideFilter }));\n    }\n\n    private setOriginSource(): void {\n        let { originExperimentList } = this.state;\n        const { sortInfo } = this.state;\n        if (originExperimentList !== undefined) {\n            originExperimentList = this.commonSelectString(originExperimentList, '');\n            const sortedData = getSortedSource(originExperimentList, sortInfo);\n            this.setState(() => ({\n                source: sortedData\n            }));\n        }\n    }\n\n    private searchNameAndId(_event, newValue): void {\n        const { originExperimentList, sortInfo } = this.state;\n        if (newValue !== undefined) {\n            if (newValue === '') {\n                this.setOriginSource();\n            } else {\n                const searchInput = newValue.trim();\n                let result = originExperimentList.filter(\n                    item =>\n                        (item.experimentName !== null &&\n                            item.experimentName.toLowerCase().includes(searchInput.toLowerCase())) ||\n                        item.id.toLowerCase().includes(searchInput.toLowerCase())\n                );\n                result = this.commonSelectString(result, '');\n                const sortedResult = getSortedSource(result, sortInfo);\n                this.setState(() => ({\n                    source: sortedResult,\n                    searchSource: sortedResult\n                }));\n            }\n            this.setState(() => ({\n                searchInputVal: newValue.trim()\n            }));\n        }\n    }\n\n    /***\n     * status, platform\n     * param\n     * data: searchSource\n     * field: no care selected filed\n     */\n    private commonSelectString = (data: AllExperimentList[], field: string): AllExperimentList[] => {\n        const { selectedStatus, selectedPlatform, selectedStartDate, selectedEndDate } = this.state;\n\n        if (field === 'status') {\n            data = filterByStatusOrPlatform(selectedPlatform, 'platform', data);\n        }\n        if (field === 'platform') {\n            data = filterByStatusOrPlatform(selectedStatus, 'status', data);\n        }\n\n        if (field === '') {\n            data = Array.from(\n                new Set([\n                    ...filterByStatusOrPlatform(selectedPlatform, 'platform', data),\n                    ...filterByStatusOrPlatform(selectedStatus, 'status', data)\n                ])\n            );\n        }\n\n        data = data.filter(\n            item =>\n                (selectedStartDate === undefined || compareDate(new Date(item.startTime), selectedStartDate)) &&\n                (selectedEndDate === undefined || compareDate(new Date(item.endTime), selectedEndDate))\n        );\n\n        return data;\n    };\n\n    // status platform startTime endTime\n    private selectStatus = (_event: React.FormEvent<HTMLDivElement>, item: any): void => {\n        if (item !== undefined) {\n            const { searchSource, sortInfo, selectedStatus } = this.state;\n            const newSelectedStatus = item.selected\n                ? [...selectedStatus, item.key as string]\n                : selectedStatus.filter(key => key !== item.key);\n            let result = filterByStatusOrPlatform(newSelectedStatus, 'status', searchSource);\n            result = this.commonSelectString(result, 'status');\n            this.setState({\n                selectedStatus: newSelectedStatus,\n                source: getSortedSource(result, sortInfo)\n            });\n        }\n    };\n\n    private selectPlatform = (_event: React.FormEvent<HTMLDivElement>, item: any): void => {\n        if (item !== undefined) {\n            const { searchSource, sortInfo } = this.state;\n            let result = filterByStatusOrPlatform(item.key, 'platform', searchSource);\n            result = this.commonSelectString(result, 'platform');\n            this.setState({ selectedPlatform: item.key, source: getSortedSource(result, sortInfo) });\n        }\n    };\n\n    private getSelectedData(type: string, date: Date | null | undefined): void {\n        if (date !== null && date !== undefined) {\n            const { selectedStatus, selectedPlatform, selectedStartDate, selectedEndDate, searchSource, sortInfo } =\n                this.state;\n            const hasPlatform = selectedPlatform === '' ? false : true;\n\n            // filter status, platform\n            let result = filterByStatusOrPlatform(selectedStatus, 'status', searchSource);\n            if (hasPlatform) {\n                result = result.filter(temp => temp.platform === selectedPlatform);\n            }\n\n            if (type === 'start') {\n                result = result.filter(\n                    item =>\n                        compareDate(new Date(item.startTime), date) &&\n                        (selectedEndDate === undefined || compareDate(new Date(item.endTime), selectedEndDate))\n                );\n                this.setState(() => ({\n                    source: getSortedSource(result, sortInfo),\n                    selectedStartDate: date\n                }));\n            } else {\n                result = result.filter(\n                    item =>\n                        compareDate(new Date(item.endTime), date) &&\n                        (selectedStartDate === undefined || compareDate(new Date(item.startTime), selectedStartDate))\n                );\n                this.setState(() => ({\n                    source: getSortedSource(result, sortInfo),\n                    selectedEndDate: date\n                }));\n            }\n        }\n    }\n\n    // reset\n    private setSearchSource(): void {\n        const { sortInfo, originExperimentList } = this.state;\n        let { searchInputVal } = this.state;\n        let result = JSON.parse(JSON.stringify(originExperimentList));\n        searchInputVal = searchInputVal.trim();\n        // user input some value to filter trial [name, id] first...\n        if (searchInputVal !== '') {\n            // reset experiments list to first filter result\n            result = originExperimentList.filter(\n                item =>\n                    item.id.toLowerCase().includes(searchInputVal.toLowerCase()) ||\n                    (item.experimentName !== null &&\n                        item.experimentName.toLowerCase().includes(searchInputVal.toLowerCase()))\n            );\n        }\n        this.setState(() => ({\n            source: getSortedSource(result, sortInfo),\n            selectedStatus: [],\n            selectedPlatform: '',\n            selectedStartDate: undefined,\n            selectedEndDate: undefined\n        }));\n    }\n}\n\nexport default Experiment;\n"],"names":["props","value","hideTooltip","ref","useRef","iconProps","iconName","styles","icon","fontSize","FontSizes","onClick","event","stopPropagation","copy","current","show","setTimeout","dismiss","onMouseDown","e","onMouseUp","hidden","content","componentRef","delay","tooltipProps","TOOLTIPSTYLE","Title","horizontal","className","text","TitleContext","React","ExperimentsManager","experimentList","platform","errorMessage","getExperimentList","this","getPlatformList","getExpErrorMessage","requestAxios","MANAGER_IP","then","data","platforms","Set","item","undefined","port","JSON","parse","add","sort","a","b","startTime","Array","from","catch","error","message","compareDate","date1","date2","getFullYear","getMonth","getDate","filterByStatusOrPlatform","val","type","filter","temp","isArray","length","includes","fillOptions","arr","map","key","getSortedSource","source","sortInfo","copyAndSort","field","isDescend","MAXSCREENCOLUMNWIDHT","MINSCREENCOLUMNWIDHT","Hearder","Stack","StackItem","grow","root","minWidth","display","verticalAlign","NNILOGO","horizontalAlign","tokens","gap15","stackStyle","to","CommandBarButton","RevToggleKey","TrialIdColumn","constructor","super","render","hostname","window","location","protocol","webuiPortal","prefixUrl","formatPrefix","status","id","href","target","rel","CopyButton","prefix","startsWith","slice","endsWith","FilterBtns","selectedStatus","selectedPlatform","selectedStartDate","selectedEndDate","selectStatus","selectPlatform","getSelectedData","setSearchSource","Dropdown","label","selectedKeys","multiSelect","onChange","bind","placeholder","options","EXPERIMENTSTATUS","selectedKey","DatePicker","firstDayOfWeek","DayOfWeek","showMonthPickerAsOverlay","ariaLabel","onSelectDate","DefaultButton","Icon","expTokens","childrenGap","Experiment","state","columns","hideFilter","searchInputVal","originExperimentList","searchSource","async","EXPERIMENTMANAGER","init","result","setState","style","minHeight","innerHeight","MessageInfo","info","typeInfo","SearchBox","onEscape","setOriginSource","onClear","searchNameAndId","clickFilter","DetailsList","items","setKey","compact","selectionMode","onColumnClick","_ev","getColumn","newColumns","currColumn","forEach","newCol","isSortedDescending","isSorted","newItems","fieldName","name","maxWidth","isResizable","onRender","experimentName","expformatTimestamp","endTime","_e","commonSelectString","sortedData","_event","newValue","searchInput","trim","toLowerCase","sortedResult","Date","newSelectedStatus","selected","date","hasPlatform","stringify"],"sourceRoot":""}