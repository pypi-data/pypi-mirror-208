# coding: utf-8

"""
    Zadara VPSA Storage Array REST API

     # Overview  This document outlines the methods available for administrating your Zadara Storage VPSA™. The Zadara Storage Array REST API   supports form-encoded, JSON, and XML requests, and can return either JSON or XML responses.  ## Usage  The majority of the APIs available require authentication which requires an API token to use. You can retrieve this token through the   Users section of your VPSA, or through the API using the “Return a user’s access key” API in the Users Section below.  ## Authentication Methods  The authentication token can be passed either through the access_key parameter inside of the body of the REST API request, or   through the X-Access-Key header.  ## Timeouts  By default, all operations that don’t complete within five seconds will return a message informing you that the action may take some  time to complete. When using the API, this can cause some actions, such as large volume creation, to be undesirably asynchronous.  You can specify your own timeout with the timeout parameter, in seconds, and a timeout value of -1 specifies an infinite timeout.  ## Specific Fields For Product  Some of the fields/actions used in the API should be used only for a specific product. The following tags are used to mark which   product responds to the fields/actions  VPSA Flash Array - All Flash Array VPSA  VPSA Storage Array - Hybrid VPSA  ## Questions  If you have any questions or need support involving the REST API, please contact for assistance.   # noqa: E501

    OpenAPI spec version: v23.8.4
    Contact: support@zadarastorage.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from Vpsa.configuration import Configuration


class BodyGetLogs(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'severity': 'int',
        'sort': 'str',
        'limit': 'int',
        'start': 'int'
    }

    attribute_map = {
        'severity': 'severity',
        'sort': 'sort',
        'limit': 'limit',
        'start': 'start'
    }

    def __init__(self, severity=None, sort=None, limit=None, start=None, _configuration=None):  # noqa: E501
        """BodyGetLogs - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._severity = None
        self._sort = None
        self._limit = None
        self._start = None
        self.discriminator = None

        if severity is not None:
            self.severity = severity
        if sort is not None:
            self.sort = sort
        if limit is not None:
            self.limit = limit
        if start is not None:
            self.start = start

    @property
    def severity(self):
        """Gets the severity of this BodyGetLogs.  # noqa: E501


        :return: The severity of this BodyGetLogs.  # noqa: E501
        :rtype: int
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this BodyGetLogs.


        :param severity: The severity of this BodyGetLogs.  # noqa: E501
        :type: int
        """

        self._severity = severity

    @property
    def sort(self):
        """Gets the sort of this BodyGetLogs.  # noqa: E501


        :return: The sort of this BodyGetLogs.  # noqa: E501
        :rtype: str
        """
        return self._sort

    @sort.setter
    def sort(self, sort):
        """Sets the sort of this BodyGetLogs.


        :param sort: The sort of this BodyGetLogs.  # noqa: E501
        :type: str
        """

        self._sort = sort

    @property
    def limit(self):
        """Gets the limit of this BodyGetLogs.  # noqa: E501


        :return: The limit of this BodyGetLogs.  # noqa: E501
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this BodyGetLogs.


        :param limit: The limit of this BodyGetLogs.  # noqa: E501
        :type: int
        """

        self._limit = limit

    @property
    def start(self):
        """Gets the start of this BodyGetLogs.  # noqa: E501


        :return: The start of this BodyGetLogs.  # noqa: E501
        :rtype: int
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this BodyGetLogs.


        :param start: The start of this BodyGetLogs.  # noqa: E501
        :type: int
        """

        self._start = start

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BodyGetLogs, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BodyGetLogs):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BodyGetLogs):
            return True

        return self.to_dict() != other.to_dict()
