# coding: utf-8

"""
    Zadara VPSA Storage Array REST API

     # Overview  This document outlines the methods available for administrating your Zadara Storage VPSA™. The Zadara Storage Array REST API   supports form-encoded, JSON, and XML requests, and can return either JSON or XML responses.  ## Usage  The majority of the APIs available require authentication which requires an API token to use. You can retrieve this token through the   Users section of your VPSA, or through the API using the “Return a user’s access key” API in the Users Section below.  ## Authentication Methods  The authentication token can be passed either through the access_key parameter inside of the body of the REST API request, or   through the X-Access-Key header.  ## Timeouts  By default, all operations that don’t complete within five seconds will return a message informing you that the action may take some  time to complete. When using the API, this can cause some actions, such as large volume creation, to be undesirably asynchronous.  You can specify your own timeout with the timeout parameter, in seconds, and a timeout value of -1 specifies an infinite timeout.  ## Specific Fields For Product  Some of the fields/actions used in the API should be used only for a specific product. The following tags are used to mark which   product responds to the fields/actions  VPSA Flash Array - All Flash Array VPSA  VPSA Storage Array - Hybrid VPSA  ## Questions  If you have any questions or need support involving the REST API, please contact for assistance.   # noqa: E501

    OpenAPI spec version: v23.8.4
    Contact: support@zadarastorage.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from Vpsa.configuration import Configuration


class InlineResponse200164ResponseProperties(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'status': 'int',
        'scan_schedule': 'str',
        'enable_scan_archive': 'str',
        'enable_scan_subfolder': 'str',
        'primary_action': 'str',
        'secondary_action': 'str',
        'exclude_folder': 'InlineResponse200114ResponseWwnn',
        'include_filetypes_toscan': 'InlineResponse200114ResponseWwnn',
        'exclude_filetypes_toscan': 'str',
        'filetypes_toscan': 'str'
    }

    attribute_map = {
        'status': 'status',
        'scan_schedule': 'scan_schedule',
        'enable_scan_archive': 'enable_scan_archive',
        'enable_scan_subfolder': 'enable_scan_subfolder',
        'primary_action': 'primary_action',
        'secondary_action': 'secondary_action',
        'exclude_folder': 'exclude_folder',
        'include_filetypes_toscan': 'include_filetypes_toscan',
        'exclude_filetypes_toscan': 'exclude_filetypes_toscan',
        'filetypes_toscan': 'filetypes_toscan'
    }

    def __init__(self, status=None, scan_schedule=None, enable_scan_archive=None, enable_scan_subfolder=None, primary_action=None, secondary_action=None, exclude_folder=None, include_filetypes_toscan=None, exclude_filetypes_toscan=None, filetypes_toscan=None, _configuration=None):  # noqa: E501
        """InlineResponse200164ResponseProperties - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._status = None
        self._scan_schedule = None
        self._enable_scan_archive = None
        self._enable_scan_subfolder = None
        self._primary_action = None
        self._secondary_action = None
        self._exclude_folder = None
        self._include_filetypes_toscan = None
        self._exclude_filetypes_toscan = None
        self._filetypes_toscan = None
        self.discriminator = None

        if status is not None:
            self.status = status
        if scan_schedule is not None:
            self.scan_schedule = scan_schedule
        if enable_scan_archive is not None:
            self.enable_scan_archive = enable_scan_archive
        if enable_scan_subfolder is not None:
            self.enable_scan_subfolder = enable_scan_subfolder
        if primary_action is not None:
            self.primary_action = primary_action
        if secondary_action is not None:
            self.secondary_action = secondary_action
        if exclude_folder is not None:
            self.exclude_folder = exclude_folder
        if include_filetypes_toscan is not None:
            self.include_filetypes_toscan = include_filetypes_toscan
        if exclude_filetypes_toscan is not None:
            self.exclude_filetypes_toscan = exclude_filetypes_toscan
        if filetypes_toscan is not None:
            self.filetypes_toscan = filetypes_toscan

    @property
    def status(self):
        """Gets the status of this InlineResponse200164ResponseProperties.  # noqa: E501


        :return: The status of this InlineResponse200164ResponseProperties.  # noqa: E501
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this InlineResponse200164ResponseProperties.


        :param status: The status of this InlineResponse200164ResponseProperties.  # noqa: E501
        :type: int
        """

        self._status = status

    @property
    def scan_schedule(self):
        """Gets the scan_schedule of this InlineResponse200164ResponseProperties.  # noqa: E501


        :return: The scan_schedule of this InlineResponse200164ResponseProperties.  # noqa: E501
        :rtype: str
        """
        return self._scan_schedule

    @scan_schedule.setter
    def scan_schedule(self, scan_schedule):
        """Sets the scan_schedule of this InlineResponse200164ResponseProperties.


        :param scan_schedule: The scan_schedule of this InlineResponse200164ResponseProperties.  # noqa: E501
        :type: str
        """

        self._scan_schedule = scan_schedule

    @property
    def enable_scan_archive(self):
        """Gets the enable_scan_archive of this InlineResponse200164ResponseProperties.  # noqa: E501


        :return: The enable_scan_archive of this InlineResponse200164ResponseProperties.  # noqa: E501
        :rtype: str
        """
        return self._enable_scan_archive

    @enable_scan_archive.setter
    def enable_scan_archive(self, enable_scan_archive):
        """Sets the enable_scan_archive of this InlineResponse200164ResponseProperties.


        :param enable_scan_archive: The enable_scan_archive of this InlineResponse200164ResponseProperties.  # noqa: E501
        :type: str
        """

        self._enable_scan_archive = enable_scan_archive

    @property
    def enable_scan_subfolder(self):
        """Gets the enable_scan_subfolder of this InlineResponse200164ResponseProperties.  # noqa: E501


        :return: The enable_scan_subfolder of this InlineResponse200164ResponseProperties.  # noqa: E501
        :rtype: str
        """
        return self._enable_scan_subfolder

    @enable_scan_subfolder.setter
    def enable_scan_subfolder(self, enable_scan_subfolder):
        """Sets the enable_scan_subfolder of this InlineResponse200164ResponseProperties.


        :param enable_scan_subfolder: The enable_scan_subfolder of this InlineResponse200164ResponseProperties.  # noqa: E501
        :type: str
        """

        self._enable_scan_subfolder = enable_scan_subfolder

    @property
    def primary_action(self):
        """Gets the primary_action of this InlineResponse200164ResponseProperties.  # noqa: E501


        :return: The primary_action of this InlineResponse200164ResponseProperties.  # noqa: E501
        :rtype: str
        """
        return self._primary_action

    @primary_action.setter
    def primary_action(self, primary_action):
        """Sets the primary_action of this InlineResponse200164ResponseProperties.


        :param primary_action: The primary_action of this InlineResponse200164ResponseProperties.  # noqa: E501
        :type: str
        """

        self._primary_action = primary_action

    @property
    def secondary_action(self):
        """Gets the secondary_action of this InlineResponse200164ResponseProperties.  # noqa: E501


        :return: The secondary_action of this InlineResponse200164ResponseProperties.  # noqa: E501
        :rtype: str
        """
        return self._secondary_action

    @secondary_action.setter
    def secondary_action(self, secondary_action):
        """Sets the secondary_action of this InlineResponse200164ResponseProperties.


        :param secondary_action: The secondary_action of this InlineResponse200164ResponseProperties.  # noqa: E501
        :type: str
        """

        self._secondary_action = secondary_action

    @property
    def exclude_folder(self):
        """Gets the exclude_folder of this InlineResponse200164ResponseProperties.  # noqa: E501


        :return: The exclude_folder of this InlineResponse200164ResponseProperties.  # noqa: E501
        :rtype: InlineResponse200114ResponseWwnn
        """
        return self._exclude_folder

    @exclude_folder.setter
    def exclude_folder(self, exclude_folder):
        """Sets the exclude_folder of this InlineResponse200164ResponseProperties.


        :param exclude_folder: The exclude_folder of this InlineResponse200164ResponseProperties.  # noqa: E501
        :type: InlineResponse200114ResponseWwnn
        """

        self._exclude_folder = exclude_folder

    @property
    def include_filetypes_toscan(self):
        """Gets the include_filetypes_toscan of this InlineResponse200164ResponseProperties.  # noqa: E501


        :return: The include_filetypes_toscan of this InlineResponse200164ResponseProperties.  # noqa: E501
        :rtype: InlineResponse200114ResponseWwnn
        """
        return self._include_filetypes_toscan

    @include_filetypes_toscan.setter
    def include_filetypes_toscan(self, include_filetypes_toscan):
        """Sets the include_filetypes_toscan of this InlineResponse200164ResponseProperties.


        :param include_filetypes_toscan: The include_filetypes_toscan of this InlineResponse200164ResponseProperties.  # noqa: E501
        :type: InlineResponse200114ResponseWwnn
        """

        self._include_filetypes_toscan = include_filetypes_toscan

    @property
    def exclude_filetypes_toscan(self):
        """Gets the exclude_filetypes_toscan of this InlineResponse200164ResponseProperties.  # noqa: E501


        :return: The exclude_filetypes_toscan of this InlineResponse200164ResponseProperties.  # noqa: E501
        :rtype: str
        """
        return self._exclude_filetypes_toscan

    @exclude_filetypes_toscan.setter
    def exclude_filetypes_toscan(self, exclude_filetypes_toscan):
        """Sets the exclude_filetypes_toscan of this InlineResponse200164ResponseProperties.


        :param exclude_filetypes_toscan: The exclude_filetypes_toscan of this InlineResponse200164ResponseProperties.  # noqa: E501
        :type: str
        """

        self._exclude_filetypes_toscan = exclude_filetypes_toscan

    @property
    def filetypes_toscan(self):
        """Gets the filetypes_toscan of this InlineResponse200164ResponseProperties.  # noqa: E501


        :return: The filetypes_toscan of this InlineResponse200164ResponseProperties.  # noqa: E501
        :rtype: str
        """
        return self._filetypes_toscan

    @filetypes_toscan.setter
    def filetypes_toscan(self, filetypes_toscan):
        """Sets the filetypes_toscan of this InlineResponse200164ResponseProperties.


        :param filetypes_toscan: The filetypes_toscan of this InlineResponse200164ResponseProperties.  # noqa: E501
        :type: str
        """

        self._filetypes_toscan = filetypes_toscan

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse200164ResponseProperties, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse200164ResponseProperties):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InlineResponse200164ResponseProperties):
            return True

        return self.to_dict() != other.to_dict()
