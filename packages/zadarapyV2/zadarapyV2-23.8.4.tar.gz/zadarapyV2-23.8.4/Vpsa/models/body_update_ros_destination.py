# coding: utf-8

"""
    Zadara VPSA Storage Array REST API

     # Overview  This document outlines the methods available for administrating your Zadara Storage VPSA™. The Zadara Storage Array REST API   supports form-encoded, JSON, and XML requests, and can return either JSON or XML responses.  ## Usage  The majority of the APIs available require authentication which requires an API token to use. You can retrieve this token through the   Users section of your VPSA, or through the API using the “Return a user’s access key” API in the Users Section below.  ## Authentication Methods  The authentication token can be passed either through the access_key parameter inside of the body of the REST API request, or   through the X-Access-Key header.  ## Timeouts  By default, all operations that don’t complete within five seconds will return a message informing you that the action may take some  time to complete. When using the API, this can cause some actions, such as large volume creation, to be undesirably asynchronous.  You can specify your own timeout with the timeout parameter, in seconds, and a timeout value of -1 specifies an infinite timeout.  ## Specific Fields For Product  Some of the fields/actions used in the API should be used only for a specific product. The following tags are used to mark which   product responds to the fields/actions  VPSA Flash Array - All Flash Array VPSA  VPSA Storage Array - Hybrid VPSA  ## Questions  If you have any questions or need support involving the REST API, please contact for assistance.   # noqa: E501

    OpenAPI spec version: v23.8.4
    Contact: support@zadarastorage.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from Vpsa.configuration import Configuration


class BodyUpdateRosDestination(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bucket': 'str',
        'endpoint': 'str',
        'username': 'str',
        'password': 'str',
        'connect_via': 'str',
        'proxyhost': 'str',
        'proxyport': 'str',
        'proxyuser': 'str',
        'proxypassword': 'str',
        'use_proxy': 'str'
    }

    attribute_map = {
        'bucket': 'bucket',
        'endpoint': 'endpoint',
        'username': 'username',
        'password': 'password',
        'connect_via': 'connectVia',
        'proxyhost': 'proxyhost',
        'proxyport': 'proxyport',
        'proxyuser': 'proxyuser',
        'proxypassword': 'proxypassword',
        'use_proxy': 'use_proxy'
    }

    def __init__(self, bucket=None, endpoint=None, username=None, password=None, connect_via=None, proxyhost=None, proxyport=None, proxyuser=None, proxypassword=None, use_proxy=None, _configuration=None):  # noqa: E501
        """BodyUpdateRosDestination - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._bucket = None
        self._endpoint = None
        self._username = None
        self._password = None
        self._connect_via = None
        self._proxyhost = None
        self._proxyport = None
        self._proxyuser = None
        self._proxypassword = None
        self._use_proxy = None
        self.discriminator = None

        if bucket is not None:
            self.bucket = bucket
        if endpoint is not None:
            self.endpoint = endpoint
        if username is not None:
            self.username = username
        if password is not None:
            self.password = password
        if connect_via is not None:
            self.connect_via = connect_via
        if proxyhost is not None:
            self.proxyhost = proxyhost
        if proxyport is not None:
            self.proxyport = proxyport
        if proxyuser is not None:
            self.proxyuser = proxyuser
        if proxypassword is not None:
            self.proxypassword = proxypassword
        if use_proxy is not None:
            self.use_proxy = use_proxy

    @property
    def bucket(self):
        """Gets the bucket of this BodyUpdateRosDestination.  # noqa: E501

        Azure cloud container name.  # noqa: E501

        :return: The bucket of this BodyUpdateRosDestination.  # noqa: E501
        :rtype: str
        """
        return self._bucket

    @bucket.setter
    def bucket(self, bucket):
        """Sets the bucket of this BodyUpdateRosDestination.

        Azure cloud container name.  # noqa: E501

        :param bucket: The bucket of this BodyUpdateRosDestination.  # noqa: E501
        :type: str
        """

        self._bucket = bucket

    @property
    def endpoint(self):
        """Gets the endpoint of this BodyUpdateRosDestination.  # noqa: E501

        Endpoint for remote object storage  # noqa: E501

        :return: The endpoint of this BodyUpdateRosDestination.  # noqa: E501
        :rtype: str
        """
        return self._endpoint

    @endpoint.setter
    def endpoint(self, endpoint):
        """Sets the endpoint of this BodyUpdateRosDestination.

        Endpoint for remote object storage  # noqa: E501

        :param endpoint: The endpoint of this BodyUpdateRosDestination.  # noqa: E501
        :type: str
        """

        self._endpoint = endpoint

    @property
    def username(self):
        """Gets the username of this BodyUpdateRosDestination.  # noqa: E501

        Account in Azure cloud.  # noqa: E501

        :return: The username of this BodyUpdateRosDestination.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this BodyUpdateRosDestination.

        Account in Azure cloud.  # noqa: E501

        :param username: The username of this BodyUpdateRosDestination.  # noqa: E501
        :type: str
        """

        self._username = username

    @property
    def password(self):
        """Gets the password of this BodyUpdateRosDestination.  # noqa: E501

        Storage account key in Azure cloud.  # noqa: E501

        :return: The password of this BodyUpdateRosDestination.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this BodyUpdateRosDestination.

        Storage account key in Azure cloud.  # noqa: E501

        :param password: The password of this BodyUpdateRosDestination.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def connect_via(self):
        """Gets the connect_via of this BodyUpdateRosDestination.  # noqa: E501

        Connection method to Azure cloud.  # noqa: E501

        :return: The connect_via of this BodyUpdateRosDestination.  # noqa: E501
        :rtype: str
        """
        return self._connect_via

    @connect_via.setter
    def connect_via(self, connect_via):
        """Sets the connect_via of this BodyUpdateRosDestination.

        Connection method to Azure cloud.  # noqa: E501

        :param connect_via: The connect_via of this BodyUpdateRosDestination.  # noqa: E501
        :type: str
        """

        self._connect_via = connect_via

    @property
    def proxyhost(self):
        """Gets the proxyhost of this BodyUpdateRosDestination.  # noqa: E501

        Proxy host  # noqa: E501

        :return: The proxyhost of this BodyUpdateRosDestination.  # noqa: E501
        :rtype: str
        """
        return self._proxyhost

    @proxyhost.setter
    def proxyhost(self, proxyhost):
        """Sets the proxyhost of this BodyUpdateRosDestination.

        Proxy host  # noqa: E501

        :param proxyhost: The proxyhost of this BodyUpdateRosDestination.  # noqa: E501
        :type: str
        """

        self._proxyhost = proxyhost

    @property
    def proxyport(self):
        """Gets the proxyport of this BodyUpdateRosDestination.  # noqa: E501

        Port for proxy  # noqa: E501

        :return: The proxyport of this BodyUpdateRosDestination.  # noqa: E501
        :rtype: str
        """
        return self._proxyport

    @proxyport.setter
    def proxyport(self, proxyport):
        """Sets the proxyport of this BodyUpdateRosDestination.

        Port for proxy  # noqa: E501

        :param proxyport: The proxyport of this BodyUpdateRosDestination.  # noqa: E501
        :type: str
        """

        self._proxyport = proxyport

    @property
    def proxyuser(self):
        """Gets the proxyuser of this BodyUpdateRosDestination.  # noqa: E501

        Username for proxy  # noqa: E501

        :return: The proxyuser of this BodyUpdateRosDestination.  # noqa: E501
        :rtype: str
        """
        return self._proxyuser

    @proxyuser.setter
    def proxyuser(self, proxyuser):
        """Sets the proxyuser of this BodyUpdateRosDestination.

        Username for proxy  # noqa: E501

        :param proxyuser: The proxyuser of this BodyUpdateRosDestination.  # noqa: E501
        :type: str
        """

        self._proxyuser = proxyuser

    @property
    def proxypassword(self):
        """Gets the proxypassword of this BodyUpdateRosDestination.  # noqa: E501

        Password for proxy  # noqa: E501

        :return: The proxypassword of this BodyUpdateRosDestination.  # noqa: E501
        :rtype: str
        """
        return self._proxypassword

    @proxypassword.setter
    def proxypassword(self, proxypassword):
        """Sets the proxypassword of this BodyUpdateRosDestination.

        Password for proxy  # noqa: E501

        :param proxypassword: The proxypassword of this BodyUpdateRosDestination.  # noqa: E501
        :type: str
        """

        self._proxypassword = proxypassword

    @property
    def use_proxy(self):
        """Gets the use_proxy of this BodyUpdateRosDestination.  # noqa: E501


        :return: The use_proxy of this BodyUpdateRosDestination.  # noqa: E501
        :rtype: str
        """
        return self._use_proxy

    @use_proxy.setter
    def use_proxy(self, use_proxy):
        """Sets the use_proxy of this BodyUpdateRosDestination.


        :param use_proxy: The use_proxy of this BodyUpdateRosDestination.  # noqa: E501
        :type: str
        """

        self._use_proxy = use_proxy

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BodyUpdateRosDestination, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BodyUpdateRosDestination):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BodyUpdateRosDestination):
            return True

        return self.to_dict() != other.to_dict()
