# coding: utf-8

"""
    Command Center operations

    Command Center operations  # noqa: E501

    OpenAPI spec version: v23.8.4
    Contact: support@zadarastorage.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from CommandCenter.configuration import Configuration


class BodyRenameCloud(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'package': 'str',
        'settings_file': 'str'
    }

    attribute_map = {
        'package': 'package',
        'settings_file': 'settings_file'
    }

    def __init__(self, package=None, settings_file=None, _configuration=None):  # noqa: E501
        """BodyRenameCloud - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._package = None
        self._settings_file = None
        self.discriminator = None

        self.package = package
        self.settings_file = settings_file

    @property
    def package(self):
        """Gets the package of this BodyRenameCloud.  # noqa: E501


        :return: The package of this BodyRenameCloud.  # noqa: E501
        :rtype: str
        """
        return self._package

    @package.setter
    def package(self, package):
        """Sets the package of this BodyRenameCloud.


        :param package: The package of this BodyRenameCloud.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and package is None:
            raise ValueError("Invalid value for `package`, must not be `None`")  # noqa: E501

        self._package = package

    @property
    def settings_file(self):
        """Gets the settings_file of this BodyRenameCloud.  # noqa: E501

        Settings file  # noqa: E501

        :return: The settings_file of this BodyRenameCloud.  # noqa: E501
        :rtype: str
        """
        return self._settings_file

    @settings_file.setter
    def settings_file(self, settings_file):
        """Sets the settings_file of this BodyRenameCloud.

        Settings file  # noqa: E501

        :param settings_file: The settings_file of this BodyRenameCloud.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and settings_file is None:
            raise ValueError("Invalid value for `settings_file`, must not be `None`")  # noqa: E501

        self._settings_file = settings_file

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BodyRenameCloud, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BodyRenameCloud):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BodyRenameCloud):
            return True

        return self.to_dict() != other.to_dict()
