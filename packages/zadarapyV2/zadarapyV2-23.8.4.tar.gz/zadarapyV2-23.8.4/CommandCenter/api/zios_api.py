# coding: utf-8

"""
    Command Center operations

    Command Center operations  # noqa: E501

    OpenAPI spec version: v23.8.4
    Contact: support@zadarastorage.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from CommandCenter.api_client import ApiClient


class ZIOSApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_drives_to_zios(self, cloud_name, id, body_add_drives_to_zios, **kwargs):  # noqa: E501
        """add_drives_to_zios  # noqa: E501

        Add drives to ZIOS.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_drives_to_zios(cloud_name, id, body_add_drives_to_zios, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_name: (required)
        :param str id: (required)
        :param BodyAddDrivesToZios body_add_drives_to_zios: (required)
        :return: InlineResponse20099
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_drives_to_zios_with_http_info(cloud_name, id, body_add_drives_to_zios, **kwargs)  # noqa: E501
        else:
            (data) = self.add_drives_to_zios_with_http_info(cloud_name, id, body_add_drives_to_zios, **kwargs)  # noqa: E501
            return data

    def add_drives_to_zios_with_http_info(self, cloud_name, id, body_add_drives_to_zios, **kwargs):  # noqa: E501
        """add_drives_to_zios  # noqa: E501

        Add drives to ZIOS.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_drives_to_zios_with_http_info(cloud_name, id, body_add_drives_to_zios, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_name: (required)
        :param str id: (required)
        :param BodyAddDrivesToZios body_add_drives_to_zios: (required)
        :return: InlineResponse20099
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cloud_name', 'id', 'body_add_drives_to_zios']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_drives_to_zios" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cloud_name' is set
        if self.api_client.client_side_validation and ('cloud_name' not in params or
                                                       params['cloud_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cloud_name` when calling `add_drives_to_zios`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `add_drives_to_zios`")  # noqa: E501
        # verify the required parameter 'body_add_drives_to_zios' is set
        if self.api_client.client_side_validation and ('body_add_drives_to_zios' not in params or
                                                       params['body_add_drives_to_zios'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body_add_drives_to_zios` when calling `add_drives_to_zios`")  # noqa: E501

        if self.api_client.client_side_validation and ('id' in params and not re.search(r'vsa-[0-9a-z]+|[0-9]+', params['id'])):  # noqa: E501
            raise ValueError("Invalid value for parameter `id` when calling `add_drives_to_zios`, must conform to the pattern `/vsa-[0-9a-z]+|[0-9]+/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'cloud_name' in params:
            path_params['cloud_name'] = params['cloud_name']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body_add_drives_to_zios' in params:
            body_params = params['body_add_drives_to_zios']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/clouds/{cloud_name}/zioses/{id}/drives.json', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20099',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_proxy_virtual_controller_zios(self, cloud_name, id, body_add_proxy_virtual_controller_zios, **kwargs):  # noqa: E501
        """add_proxy_virtual_controller_zios  # noqa: E501

        Add proxy virtual controller to ZIOS.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_proxy_virtual_controller_zios(cloud_name, id, body_add_proxy_virtual_controller_zios, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_name: (required)
        :param str id: (required)
        :param BodyAddProxyVirtualControllerZios body_add_proxy_virtual_controller_zios: (required)
        :return: InlineResponse200108
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_proxy_virtual_controller_zios_with_http_info(cloud_name, id, body_add_proxy_virtual_controller_zios, **kwargs)  # noqa: E501
        else:
            (data) = self.add_proxy_virtual_controller_zios_with_http_info(cloud_name, id, body_add_proxy_virtual_controller_zios, **kwargs)  # noqa: E501
            return data

    def add_proxy_virtual_controller_zios_with_http_info(self, cloud_name, id, body_add_proxy_virtual_controller_zios, **kwargs):  # noqa: E501
        """add_proxy_virtual_controller_zios  # noqa: E501

        Add proxy virtual controller to ZIOS.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_proxy_virtual_controller_zios_with_http_info(cloud_name, id, body_add_proxy_virtual_controller_zios, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_name: (required)
        :param str id: (required)
        :param BodyAddProxyVirtualControllerZios body_add_proxy_virtual_controller_zios: (required)
        :return: InlineResponse200108
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cloud_name', 'id', 'body_add_proxy_virtual_controller_zios']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_proxy_virtual_controller_zios" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cloud_name' is set
        if self.api_client.client_side_validation and ('cloud_name' not in params or
                                                       params['cloud_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cloud_name` when calling `add_proxy_virtual_controller_zios`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `add_proxy_virtual_controller_zios`")  # noqa: E501
        # verify the required parameter 'body_add_proxy_virtual_controller_zios' is set
        if self.api_client.client_side_validation and ('body_add_proxy_virtual_controller_zios' not in params or
                                                       params['body_add_proxy_virtual_controller_zios'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body_add_proxy_virtual_controller_zios` when calling `add_proxy_virtual_controller_zios`")  # noqa: E501

        if self.api_client.client_side_validation and ('id' in params and not re.search(r'vsa-[0-9a-z]+|[0-9]+', params['id'])):  # noqa: E501
            raise ValueError("Invalid value for parameter `id` when calling `add_proxy_virtual_controller_zios`, must conform to the pattern `/vsa-[0-9a-z]+|[0-9]+/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'cloud_name' in params:
            path_params['cloud_name'] = params['cloud_name']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body_add_proxy_virtual_controller_zios' in params:
            body_params = params['body_add_proxy_virtual_controller_zios']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/clouds/{cloud_name}/zioses/{id}/proxy_vcs.json', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200108',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_virtual_nets_to_zios(self, cloud_name, id, body_add_virtual_nets_to_zios, **kwargs):  # noqa: E501
        """add_virtual_nets_to_zios  # noqa: E501

        Add Virtual Network to ZIOS.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_virtual_nets_to_zios(cloud_name, id, body_add_virtual_nets_to_zios, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_name: (required)
        :param str id: (required)
        :param BodyAddVirtualNetsToZios body_add_virtual_nets_to_zios: (required)
        :return: InlineResponse20010
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_virtual_nets_to_zios_with_http_info(cloud_name, id, body_add_virtual_nets_to_zios, **kwargs)  # noqa: E501
        else:
            (data) = self.add_virtual_nets_to_zios_with_http_info(cloud_name, id, body_add_virtual_nets_to_zios, **kwargs)  # noqa: E501
            return data

    def add_virtual_nets_to_zios_with_http_info(self, cloud_name, id, body_add_virtual_nets_to_zios, **kwargs):  # noqa: E501
        """add_virtual_nets_to_zios  # noqa: E501

        Add Virtual Network to ZIOS.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_virtual_nets_to_zios_with_http_info(cloud_name, id, body_add_virtual_nets_to_zios, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_name: (required)
        :param str id: (required)
        :param BodyAddVirtualNetsToZios body_add_virtual_nets_to_zios: (required)
        :return: InlineResponse20010
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cloud_name', 'id', 'body_add_virtual_nets_to_zios']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_virtual_nets_to_zios" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cloud_name' is set
        if self.api_client.client_side_validation and ('cloud_name' not in params or
                                                       params['cloud_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cloud_name` when calling `add_virtual_nets_to_zios`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `add_virtual_nets_to_zios`")  # noqa: E501
        # verify the required parameter 'body_add_virtual_nets_to_zios' is set
        if self.api_client.client_side_validation and ('body_add_virtual_nets_to_zios' not in params or
                                                       params['body_add_virtual_nets_to_zios'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body_add_virtual_nets_to_zios` when calling `add_virtual_nets_to_zios`")  # noqa: E501

        if self.api_client.client_side_validation and ('id' in params and not re.search(r'vsa-[0-9a-z]+|[0-9]+', params['id'])):  # noqa: E501
            raise ValueError("Invalid value for parameter `id` when calling `add_virtual_nets_to_zios`, must conform to the pattern `/vsa-[0-9a-z]+|[0-9]+/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'cloud_name' in params:
            path_params['cloud_name'] = params['cloud_name']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body_add_virtual_nets_to_zios' in params:
            body_params = params['body_add_virtual_nets_to_zios']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/clouds/{cloud_name}/zioses/{id}/add_virtual_network_interface.json', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20010',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_zios_endpoints_configs_for_upload_types(self, cloud_name, id, body_add_zios_endpoints_configs_for_upload_types, **kwargs):  # noqa: E501
        """add_zios_endpoints_configs_for_upload_types  # noqa: E501

        Adds more zios endpoints configurations for upload type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_zios_endpoints_configs_for_upload_types(cloud_name, id, body_add_zios_endpoints_configs_for_upload_types, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_name: (required)
        :param str id: (required)
        :param BodyAddZiosEndpointsConfigsForUploadTypes body_add_zios_endpoints_configs_for_upload_types: (required)
        :return: InlineResponse200116
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_zios_endpoints_configs_for_upload_types_with_http_info(cloud_name, id, body_add_zios_endpoints_configs_for_upload_types, **kwargs)  # noqa: E501
        else:
            (data) = self.add_zios_endpoints_configs_for_upload_types_with_http_info(cloud_name, id, body_add_zios_endpoints_configs_for_upload_types, **kwargs)  # noqa: E501
            return data

    def add_zios_endpoints_configs_for_upload_types_with_http_info(self, cloud_name, id, body_add_zios_endpoints_configs_for_upload_types, **kwargs):  # noqa: E501
        """add_zios_endpoints_configs_for_upload_types  # noqa: E501

        Adds more zios endpoints configurations for upload type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_zios_endpoints_configs_for_upload_types_with_http_info(cloud_name, id, body_add_zios_endpoints_configs_for_upload_types, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_name: (required)
        :param str id: (required)
        :param BodyAddZiosEndpointsConfigsForUploadTypes body_add_zios_endpoints_configs_for_upload_types: (required)
        :return: InlineResponse200116
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cloud_name', 'id', 'body_add_zios_endpoints_configs_for_upload_types']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_zios_endpoints_configs_for_upload_types" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cloud_name' is set
        if self.api_client.client_side_validation and ('cloud_name' not in params or
                                                       params['cloud_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cloud_name` when calling `add_zios_endpoints_configs_for_upload_types`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `add_zios_endpoints_configs_for_upload_types`")  # noqa: E501
        # verify the required parameter 'body_add_zios_endpoints_configs_for_upload_types' is set
        if self.api_client.client_side_validation and ('body_add_zios_endpoints_configs_for_upload_types' not in params or
                                                       params['body_add_zios_endpoints_configs_for_upload_types'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body_add_zios_endpoints_configs_for_upload_types` when calling `add_zios_endpoints_configs_for_upload_types`")  # noqa: E501

        if self.api_client.client_side_validation and ('id' in params and not re.search(r'vsa-[0-9a-z]+|[0-9]+', params['id'])):  # noqa: E501
            raise ValueError("Invalid value for parameter `id` when calling `add_zios_endpoints_configs_for_upload_types`, must conform to the pattern `/vsa-[0-9a-z]+|[0-9]+/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'cloud_name' in params:
            path_params['cloud_name'] = params['cloud_name']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body_add_zios_endpoints_configs_for_upload_types' in params:
            body_params = params['body_add_zios_endpoints_configs_for_upload_types']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/clouds/{cloud_name}/zioses/{id}/endpoints_config.json', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200116',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def assign_public_ip_zios(self, cloud_name, id, **kwargs):  # noqa: E501
        """assign_public_ip_zios  # noqa: E501

        Assign public ip to ZIOS.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assign_public_ip_zios(cloud_name, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_name: (required)
        :param str id: (required)
        :return: InlineResponse20074
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.assign_public_ip_zios_with_http_info(cloud_name, id, **kwargs)  # noqa: E501
        else:
            (data) = self.assign_public_ip_zios_with_http_info(cloud_name, id, **kwargs)  # noqa: E501
            return data

    def assign_public_ip_zios_with_http_info(self, cloud_name, id, **kwargs):  # noqa: E501
        """assign_public_ip_zios  # noqa: E501

        Assign public ip to ZIOS.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assign_public_ip_zios_with_http_info(cloud_name, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_name: (required)
        :param str id: (required)
        :return: InlineResponse20074
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cloud_name', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method assign_public_ip_zios" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cloud_name' is set
        if self.api_client.client_side_validation and ('cloud_name' not in params or
                                                       params['cloud_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cloud_name` when calling `assign_public_ip_zios`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `assign_public_ip_zios`")  # noqa: E501

        if self.api_client.client_side_validation and ('id' in params and not re.search(r'vsa-[0-9a-z]+|[0-9]+', params['id'])):  # noqa: E501
            raise ValueError("Invalid value for parameter `id` when calling `assign_public_ip_zios`, must conform to the pattern `/vsa-[0-9a-z]+|[0-9]+/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'cloud_name' in params:
            path_params['cloud_name'] = params['cloud_name']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/clouds/{cloud_name}/zioses/{id}/public_ip/assign.json', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20074',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def change_engine_type_zios(self, cloud_name, id, body_change_engine_type_zios, **kwargs):  # noqa: E501
        """change_engine_type_zios  # noqa: E501

        Changes ZIOS engine from ZIOS_MINI to ZIOS.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.change_engine_type_zios(cloud_name, id, body_change_engine_type_zios, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_name: (required)
        :param str id: (required)
        :param BodyChangeEngineTypeZios body_change_engine_type_zios: (required)
        :return: InlineResponse20013
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.change_engine_type_zios_with_http_info(cloud_name, id, body_change_engine_type_zios, **kwargs)  # noqa: E501
        else:
            (data) = self.change_engine_type_zios_with_http_info(cloud_name, id, body_change_engine_type_zios, **kwargs)  # noqa: E501
            return data

    def change_engine_type_zios_with_http_info(self, cloud_name, id, body_change_engine_type_zios, **kwargs):  # noqa: E501
        """change_engine_type_zios  # noqa: E501

        Changes ZIOS engine from ZIOS_MINI to ZIOS.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.change_engine_type_zios_with_http_info(cloud_name, id, body_change_engine_type_zios, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_name: (required)
        :param str id: (required)
        :param BodyChangeEngineTypeZios body_change_engine_type_zios: (required)
        :return: InlineResponse20013
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cloud_name', 'id', 'body_change_engine_type_zios']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method change_engine_type_zios" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cloud_name' is set
        if self.api_client.client_side_validation and ('cloud_name' not in params or
                                                       params['cloud_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cloud_name` when calling `change_engine_type_zios`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `change_engine_type_zios`")  # noqa: E501
        # verify the required parameter 'body_change_engine_type_zios' is set
        if self.api_client.client_side_validation and ('body_change_engine_type_zios' not in params or
                                                       params['body_change_engine_type_zios'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body_change_engine_type_zios` when calling `change_engine_type_zios`")  # noqa: E501

        if self.api_client.client_side_validation and ('id' in params and not re.search(r'vsa-[0-9a-z]+|[0-9]+', params['id'])):  # noqa: E501
            raise ValueError("Invalid value for parameter `id` when calling `change_engine_type_zios`, must conform to the pattern `/vsa-[0-9a-z]+|[0-9]+/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'cloud_name' in params:
            path_params['cloud_name'] = params['cloud_name']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body_change_engine_type_zios' in params:
            body_params = params['body_change_engine_type_zios']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/clouds/{cloud_name}/vpsas/{id}/change_engine_type.json', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20013',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def continue_policy_rebalance_zios(self, cloud_name, id, body_continue_policy_rebalance_zios, **kwargs):  # noqa: E501
        """continue_policy_rebalance_zios  # noqa: E501

        Continue a storage policy rebalance.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.continue_policy_rebalance_zios(cloud_name, id, body_continue_policy_rebalance_zios, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_name: (required)
        :param str id: (required)
        :param BodyContinuePolicyRebalanceZios body_continue_policy_rebalance_zios: (required)
        :return: InlineResponse200110
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.continue_policy_rebalance_zios_with_http_info(cloud_name, id, body_continue_policy_rebalance_zios, **kwargs)  # noqa: E501
        else:
            (data) = self.continue_policy_rebalance_zios_with_http_info(cloud_name, id, body_continue_policy_rebalance_zios, **kwargs)  # noqa: E501
            return data

    def continue_policy_rebalance_zios_with_http_info(self, cloud_name, id, body_continue_policy_rebalance_zios, **kwargs):  # noqa: E501
        """continue_policy_rebalance_zios  # noqa: E501

        Continue a storage policy rebalance.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.continue_policy_rebalance_zios_with_http_info(cloud_name, id, body_continue_policy_rebalance_zios, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_name: (required)
        :param str id: (required)
        :param BodyContinuePolicyRebalanceZios body_continue_policy_rebalance_zios: (required)
        :return: InlineResponse200110
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cloud_name', 'id', 'body_continue_policy_rebalance_zios']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method continue_policy_rebalance_zios" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cloud_name' is set
        if self.api_client.client_side_validation and ('cloud_name' not in params or
                                                       params['cloud_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cloud_name` when calling `continue_policy_rebalance_zios`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `continue_policy_rebalance_zios`")  # noqa: E501
        # verify the required parameter 'body_continue_policy_rebalance_zios' is set
        if self.api_client.client_side_validation and ('body_continue_policy_rebalance_zios' not in params or
                                                       params['body_continue_policy_rebalance_zios'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body_continue_policy_rebalance_zios` when calling `continue_policy_rebalance_zios`")  # noqa: E501

        if self.api_client.client_side_validation and ('id' in params and not re.search(r'vsa-[0-9a-z]+|[0-9]+', params['id'])):  # noqa: E501
            raise ValueError("Invalid value for parameter `id` when calling `continue_policy_rebalance_zios`, must conform to the pattern `/vsa-[0-9a-z]+|[0-9]+/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'cloud_name' in params:
            path_params['cloud_name'] = params['cloud_name']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body_continue_policy_rebalance_zios' in params:
            body_params = params['body_continue_policy_rebalance_zios']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/clouds/{cloud_name}/zioses/{id}/policy_continue_rebalance.json', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200110',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_storage_policy_zios(self, cloud_name, id, create_plc_body, **kwargs):  # noqa: E501
        """create_storage_policy_zios  # noqa: E501

        Creates a new policy to ZIOS.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_storage_policy_zios(cloud_name, id, create_plc_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_name: The cloud 'name' as returned by get_all_clouds (required)
        :param str id: The ZIOS 'id' value as returned by get_all_zios_objects (required)
        :param CreatePlcBody create_plc_body: (required)
        :return: InlineResponse20010
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_storage_policy_zios_with_http_info(cloud_name, id, create_plc_body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_storage_policy_zios_with_http_info(cloud_name, id, create_plc_body, **kwargs)  # noqa: E501
            return data

    def create_storage_policy_zios_with_http_info(self, cloud_name, id, create_plc_body, **kwargs):  # noqa: E501
        """create_storage_policy_zios  # noqa: E501

        Creates a new policy to ZIOS.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_storage_policy_zios_with_http_info(cloud_name, id, create_plc_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_name: The cloud 'name' as returned by get_all_clouds (required)
        :param str id: The ZIOS 'id' value as returned by get_all_zios_objects (required)
        :param CreatePlcBody create_plc_body: (required)
        :return: InlineResponse20010
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cloud_name', 'id', 'create_plc_body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_storage_policy_zios" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cloud_name' is set
        if self.api_client.client_side_validation and ('cloud_name' not in params or
                                                       params['cloud_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cloud_name` when calling `create_storage_policy_zios`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `create_storage_policy_zios`")  # noqa: E501
        # verify the required parameter 'create_plc_body' is set
        if self.api_client.client_side_validation and ('create_plc_body' not in params or
                                                       params['create_plc_body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `create_plc_body` when calling `create_storage_policy_zios`")  # noqa: E501

        if self.api_client.client_side_validation and ('id' in params and not re.search(r'vsa-[0-9a-z]+|[0-9]+', params['id'])):  # noqa: E501
            raise ValueError("Invalid value for parameter `id` when calling `create_storage_policy_zios`, must conform to the pattern `/vsa-[0-9a-z]+|[0-9]+/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'cloud_name' in params:
            path_params['cloud_name'] = params['cloud_name']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'create_plc_body' in params:
            body_params = params['create_plc_body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/clouds/{cloud_name}/zioses/{id}/policy.json', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20010',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_zios_endpoints_configs_for_upload_types(self, cloud_name, id, body_create_zios_endpoints_configs_for_upload_types, **kwargs):  # noqa: E501
        """create_zios_endpoints_configs_for_upload_types  # noqa: E501

        Creates zios endpoints configurations for upload type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_zios_endpoints_configs_for_upload_types(cloud_name, id, body_create_zios_endpoints_configs_for_upload_types, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_name: (required)
        :param str id: (required)
        :param BodyCreateZiosEndpointsConfigsForUploadTypes body_create_zios_endpoints_configs_for_upload_types: (required)
        :return: InlineResponse200117
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_zios_endpoints_configs_for_upload_types_with_http_info(cloud_name, id, body_create_zios_endpoints_configs_for_upload_types, **kwargs)  # noqa: E501
        else:
            (data) = self.create_zios_endpoints_configs_for_upload_types_with_http_info(cloud_name, id, body_create_zios_endpoints_configs_for_upload_types, **kwargs)  # noqa: E501
            return data

    def create_zios_endpoints_configs_for_upload_types_with_http_info(self, cloud_name, id, body_create_zios_endpoints_configs_for_upload_types, **kwargs):  # noqa: E501
        """create_zios_endpoints_configs_for_upload_types  # noqa: E501

        Creates zios endpoints configurations for upload type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_zios_endpoints_configs_for_upload_types_with_http_info(cloud_name, id, body_create_zios_endpoints_configs_for_upload_types, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_name: (required)
        :param str id: (required)
        :param BodyCreateZiosEndpointsConfigsForUploadTypes body_create_zios_endpoints_configs_for_upload_types: (required)
        :return: InlineResponse200117
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cloud_name', 'id', 'body_create_zios_endpoints_configs_for_upload_types']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_zios_endpoints_configs_for_upload_types" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cloud_name' is set
        if self.api_client.client_side_validation and ('cloud_name' not in params or
                                                       params['cloud_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cloud_name` when calling `create_zios_endpoints_configs_for_upload_types`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `create_zios_endpoints_configs_for_upload_types`")  # noqa: E501
        # verify the required parameter 'body_create_zios_endpoints_configs_for_upload_types' is set
        if self.api_client.client_side_validation and ('body_create_zios_endpoints_configs_for_upload_types' not in params or
                                                       params['body_create_zios_endpoints_configs_for_upload_types'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body_create_zios_endpoints_configs_for_upload_types` when calling `create_zios_endpoints_configs_for_upload_types`")  # noqa: E501

        if self.api_client.client_side_validation and ('id' in params and not re.search(r'vsa-[0-9a-z]+|[0-9]+', params['id'])):  # noqa: E501
            raise ValueError("Invalid value for parameter `id` when calling `create_zios_endpoints_configs_for_upload_types`, must conform to the pattern `/vsa-[0-9a-z]+|[0-9]+/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'cloud_name' in params:
            path_params['cloud_name'] = params['cloud_name']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body_create_zios_endpoints_configs_for_upload_types' in params:
            body_params = params['body_create_zios_endpoints_configs_for_upload_types']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/clouds/{cloud_name}/zioses/{id}/endpoints_config.json', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200117',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_zios_upload_endpoint(self, cloud_name, id, body_create_zios_upload_endpoint, **kwargs):  # noqa: E501
        """create_zios_upload_endpoint  # noqa: E501

        Creates a new zios upload endpoint  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_zios_upload_endpoint(cloud_name, id, body_create_zios_upload_endpoint, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_name: (required)
        :param str id: (required)
        :param BodyCreateZiosUploadEndpoint body_create_zios_upload_endpoint: (required)
        :return: InlineResponse200113
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_zios_upload_endpoint_with_http_info(cloud_name, id, body_create_zios_upload_endpoint, **kwargs)  # noqa: E501
        else:
            (data) = self.create_zios_upload_endpoint_with_http_info(cloud_name, id, body_create_zios_upload_endpoint, **kwargs)  # noqa: E501
            return data

    def create_zios_upload_endpoint_with_http_info(self, cloud_name, id, body_create_zios_upload_endpoint, **kwargs):  # noqa: E501
        """create_zios_upload_endpoint  # noqa: E501

        Creates a new zios upload endpoint  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_zios_upload_endpoint_with_http_info(cloud_name, id, body_create_zios_upload_endpoint, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_name: (required)
        :param str id: (required)
        :param BodyCreateZiosUploadEndpoint body_create_zios_upload_endpoint: (required)
        :return: InlineResponse200113
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cloud_name', 'id', 'body_create_zios_upload_endpoint']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_zios_upload_endpoint" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cloud_name' is set
        if self.api_client.client_side_validation and ('cloud_name' not in params or
                                                       params['cloud_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cloud_name` when calling `create_zios_upload_endpoint`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `create_zios_upload_endpoint`")  # noqa: E501
        # verify the required parameter 'body_create_zios_upload_endpoint' is set
        if self.api_client.client_side_validation and ('body_create_zios_upload_endpoint' not in params or
                                                       params['body_create_zios_upload_endpoint'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body_create_zios_upload_endpoint` when calling `create_zios_upload_endpoint`")  # noqa: E501

        if self.api_client.client_side_validation and ('id' in params and not re.search(r'vsa-[0-9a-z]+|[0-9]+', params['id'])):  # noqa: E501
            raise ValueError("Invalid value for parameter `id` when calling `create_zios_upload_endpoint`, must conform to the pattern `/vsa-[0-9a-z]+|[0-9]+/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'cloud_name' in params:
            path_params['cloud_name'] = params['cloud_name']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body_create_zios_upload_endpoint' in params:
            body_params = params['body_create_zios_upload_endpoint']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/clouds/{cloud_name}/zioses/{id}/endpoints.json', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200113',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_zsnap_zios(self, cloud_name, id, body_create_zsnap_zios, **kwargs):  # noqa: E501
        """create_zsnap_zios  # noqa: E501

        Create a ZIOS Zsnap.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_zsnap_zios(cloud_name, id, body_create_zsnap_zios, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_name: (required)
        :param str id: (required)
        :param BodyCreateZsnapZios body_create_zsnap_zios: (required)
        :return: InlineResponse20010
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_zsnap_zios_with_http_info(cloud_name, id, body_create_zsnap_zios, **kwargs)  # noqa: E501
        else:
            (data) = self.create_zsnap_zios_with_http_info(cloud_name, id, body_create_zsnap_zios, **kwargs)  # noqa: E501
            return data

    def create_zsnap_zios_with_http_info(self, cloud_name, id, body_create_zsnap_zios, **kwargs):  # noqa: E501
        """create_zsnap_zios  # noqa: E501

        Create a ZIOS Zsnap.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_zsnap_zios_with_http_info(cloud_name, id, body_create_zsnap_zios, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_name: (required)
        :param str id: (required)
        :param BodyCreateZsnapZios body_create_zsnap_zios: (required)
        :return: InlineResponse20010
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cloud_name', 'id', 'body_create_zsnap_zios']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_zsnap_zios" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cloud_name' is set
        if self.api_client.client_side_validation and ('cloud_name' not in params or
                                                       params['cloud_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cloud_name` when calling `create_zsnap_zios`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `create_zsnap_zios`")  # noqa: E501
        # verify the required parameter 'body_create_zsnap_zios' is set
        if self.api_client.client_side_validation and ('body_create_zsnap_zios' not in params or
                                                       params['body_create_zsnap_zios'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body_create_zsnap_zios` when calling `create_zsnap_zios`")  # noqa: E501

        if self.api_client.client_side_validation and ('id' in params and not re.search(r'vsa-[0-9a-z]+|[0-9]+', params['id'])):  # noqa: E501
            raise ValueError("Invalid value for parameter `id` when calling `create_zsnap_zios`, must conform to the pattern `/vsa-[0-9a-z]+|[0-9]+/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'cloud_name' in params:
            path_params['cloud_name'] = params['cloud_name']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body_create_zsnap_zios' in params:
            body_params = params['body_create_zsnap_zios']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/clouds/{cloud_name}/zioses/{id}/zsnap.json', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20010',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_zios_endpoints_config_for_upload_types(self, cloud_name, id, body_delete_zios_endpoints_config_for_upload_types, **kwargs):  # noqa: E501
        """delete_zios_endpoints_config_for_upload_types  # noqa: E501

        Deletes an existing zios endpoint configuration for upload type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_zios_endpoints_config_for_upload_types(cloud_name, id, body_delete_zios_endpoints_config_for_upload_types, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_name: (required)
        :param str id: (required)
        :param BodyDeleteZiosEndpointsConfigForUploadTypes body_delete_zios_endpoints_config_for_upload_types: (required)
        :return: InlineResponse200118
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_zios_endpoints_config_for_upload_types_with_http_info(cloud_name, id, body_delete_zios_endpoints_config_for_upload_types, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_zios_endpoints_config_for_upload_types_with_http_info(cloud_name, id, body_delete_zios_endpoints_config_for_upload_types, **kwargs)  # noqa: E501
            return data

    def delete_zios_endpoints_config_for_upload_types_with_http_info(self, cloud_name, id, body_delete_zios_endpoints_config_for_upload_types, **kwargs):  # noqa: E501
        """delete_zios_endpoints_config_for_upload_types  # noqa: E501

        Deletes an existing zios endpoint configuration for upload type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_zios_endpoints_config_for_upload_types_with_http_info(cloud_name, id, body_delete_zios_endpoints_config_for_upload_types, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_name: (required)
        :param str id: (required)
        :param BodyDeleteZiosEndpointsConfigForUploadTypes body_delete_zios_endpoints_config_for_upload_types: (required)
        :return: InlineResponse200118
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cloud_name', 'id', 'body_delete_zios_endpoints_config_for_upload_types']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_zios_endpoints_config_for_upload_types" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cloud_name' is set
        if self.api_client.client_side_validation and ('cloud_name' not in params or
                                                       params['cloud_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cloud_name` when calling `delete_zios_endpoints_config_for_upload_types`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `delete_zios_endpoints_config_for_upload_types`")  # noqa: E501
        # verify the required parameter 'body_delete_zios_endpoints_config_for_upload_types' is set
        if self.api_client.client_side_validation and ('body_delete_zios_endpoints_config_for_upload_types' not in params or
                                                       params['body_delete_zios_endpoints_config_for_upload_types'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body_delete_zios_endpoints_config_for_upload_types` when calling `delete_zios_endpoints_config_for_upload_types`")  # noqa: E501

        if self.api_client.client_side_validation and ('id' in params and not re.search(r'vsa-[0-9a-z]+|[0-9]+', params['id'])):  # noqa: E501
            raise ValueError("Invalid value for parameter `id` when calling `delete_zios_endpoints_config_for_upload_types`, must conform to the pattern `/vsa-[0-9a-z]+|[0-9]+/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'cloud_name' in params:
            path_params['cloud_name'] = params['cloud_name']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body_delete_zios_endpoints_config_for_upload_types' in params:
            body_params = params['body_delete_zios_endpoints_config_for_upload_types']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/clouds/{cloud_name}/zioses/{id}/endpoints_config.json', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200118',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_zios_upload_endpoint(self, cloud_name, id, body_delete_zios_upload_endpoint, **kwargs):  # noqa: E501
        """delete_zios_upload_endpoint  # noqa: E501

        Deletes an existing zios upload endpoint  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_zios_upload_endpoint(cloud_name, id, body_delete_zios_upload_endpoint, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_name: (required)
        :param str id: (required)
        :param BodyDeleteZiosUploadEndpoint body_delete_zios_upload_endpoint: (required)
        :return: InlineResponse200114
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_zios_upload_endpoint_with_http_info(cloud_name, id, body_delete_zios_upload_endpoint, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_zios_upload_endpoint_with_http_info(cloud_name, id, body_delete_zios_upload_endpoint, **kwargs)  # noqa: E501
            return data

    def delete_zios_upload_endpoint_with_http_info(self, cloud_name, id, body_delete_zios_upload_endpoint, **kwargs):  # noqa: E501
        """delete_zios_upload_endpoint  # noqa: E501

        Deletes an existing zios upload endpoint  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_zios_upload_endpoint_with_http_info(cloud_name, id, body_delete_zios_upload_endpoint, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_name: (required)
        :param str id: (required)
        :param BodyDeleteZiosUploadEndpoint body_delete_zios_upload_endpoint: (required)
        :return: InlineResponse200114
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cloud_name', 'id', 'body_delete_zios_upload_endpoint']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_zios_upload_endpoint" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cloud_name' is set
        if self.api_client.client_side_validation and ('cloud_name' not in params or
                                                       params['cloud_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cloud_name` when calling `delete_zios_upload_endpoint`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `delete_zios_upload_endpoint`")  # noqa: E501
        # verify the required parameter 'body_delete_zios_upload_endpoint' is set
        if self.api_client.client_side_validation and ('body_delete_zios_upload_endpoint' not in params or
                                                       params['body_delete_zios_upload_endpoint'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body_delete_zios_upload_endpoint` when calling `delete_zios_upload_endpoint`")  # noqa: E501

        if self.api_client.client_side_validation and ('id' in params and not re.search(r'vsa-[0-9a-z]+|[0-9]+', params['id'])):  # noqa: E501
            raise ValueError("Invalid value for parameter `id` when calling `delete_zios_upload_endpoint`, must conform to the pattern `/vsa-[0-9a-z]+|[0-9]+/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'cloud_name' in params:
            path_params['cloud_name'] = params['cloud_name']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body_delete_zios_upload_endpoint' in params:
            body_params = params['body_delete_zios_upload_endpoint']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/clouds/{cloud_name}/zioses/{id}/endpoints.json', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200114',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def disable_elastic_load_balancer_zios(self, cloud_name, id, **kwargs):  # noqa: E501
        """disable_elastic_load_balancer_zios  # noqa: E501

        Disable Elastic Load Balancer in ZIOS..  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.disable_elastic_load_balancer_zios(cloud_name, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_name: (required)
        :param str id: (required)
        :return: InlineResponse20013
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.disable_elastic_load_balancer_zios_with_http_info(cloud_name, id, **kwargs)  # noqa: E501
        else:
            (data) = self.disable_elastic_load_balancer_zios_with_http_info(cloud_name, id, **kwargs)  # noqa: E501
            return data

    def disable_elastic_load_balancer_zios_with_http_info(self, cloud_name, id, **kwargs):  # noqa: E501
        """disable_elastic_load_balancer_zios  # noqa: E501

        Disable Elastic Load Balancer in ZIOS..  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.disable_elastic_load_balancer_zios_with_http_info(cloud_name, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_name: (required)
        :param str id: (required)
        :return: InlineResponse20013
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cloud_name', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method disable_elastic_load_balancer_zios" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cloud_name' is set
        if self.api_client.client_side_validation and ('cloud_name' not in params or
                                                       params['cloud_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cloud_name` when calling `disable_elastic_load_balancer_zios`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `disable_elastic_load_balancer_zios`")  # noqa: E501

        if self.api_client.client_side_validation and ('id' in params and not re.search(r'vsa-[0-9a-z]+|[0-9]+', params['id'])):  # noqa: E501
            raise ValueError("Invalid value for parameter `id` when calling `disable_elastic_load_balancer_zios`, must conform to the pattern `/vsa-[0-9a-z]+|[0-9]+/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'cloud_name' in params:
            path_params['cloud_name'] = params['cloud_name']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/clouds/{cloud_name}/zioses/{id}/disable_external_load_balancer.json', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20013',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def enable_elastic_load_balancer_zios(self, cloud_name, id, **kwargs):  # noqa: E501
        """enable_elastic_load_balancer_zios  # noqa: E501

        Enable Elastic Load Balancer in ZIOS..  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.enable_elastic_load_balancer_zios(cloud_name, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_name: (required)
        :param str id: (required)
        :return: InlineResponse20013
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.enable_elastic_load_balancer_zios_with_http_info(cloud_name, id, **kwargs)  # noqa: E501
        else:
            (data) = self.enable_elastic_load_balancer_zios_with_http_info(cloud_name, id, **kwargs)  # noqa: E501
            return data

    def enable_elastic_load_balancer_zios_with_http_info(self, cloud_name, id, **kwargs):  # noqa: E501
        """enable_elastic_load_balancer_zios  # noqa: E501

        Enable Elastic Load Balancer in ZIOS..  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.enable_elastic_load_balancer_zios_with_http_info(cloud_name, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_name: (required)
        :param str id: (required)
        :return: InlineResponse20013
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cloud_name', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enable_elastic_load_balancer_zios" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cloud_name' is set
        if self.api_client.client_side_validation and ('cloud_name' not in params or
                                                       params['cloud_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cloud_name` when calling `enable_elastic_load_balancer_zios`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `enable_elastic_load_balancer_zios`")  # noqa: E501

        if self.api_client.client_side_validation and ('id' in params and not re.search(r'vsa-[0-9a-z]+|[0-9]+', params['id'])):  # noqa: E501
            raise ValueError("Invalid value for parameter `id` when calling `enable_elastic_load_balancer_zios`, must conform to the pattern `/vsa-[0-9a-z]+|[0-9]+/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'cloud_name' in params:
            path_params['cloud_name'] = params['cloud_name']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/clouds/{cloud_name}/zioses/{id}/enable_external_load_balancer.json', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20013',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_vpsaos(self, cloud_name, **kwargs):  # noqa: E501
        """get_all_vpsaos  # noqa: E501

        Returns a list of all ZIOS Object stores.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_vpsaos(cloud_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_name: (required)
        :return: InlineResponse20096
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_vpsaos_with_http_info(cloud_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_vpsaos_with_http_info(cloud_name, **kwargs)  # noqa: E501
            return data

    def get_all_vpsaos_with_http_info(self, cloud_name, **kwargs):  # noqa: E501
        """get_all_vpsaos  # noqa: E501

        Returns a list of all ZIOS Object stores.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_vpsaos_with_http_info(cloud_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_name: (required)
        :return: InlineResponse20096
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cloud_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_vpsaos" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cloud_name' is set
        if self.api_client.client_side_validation and ('cloud_name' not in params or
                                                       params['cloud_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cloud_name` when calling `get_all_vpsaos`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cloud_name' in params:
            path_params['cloud_name'] = params['cloud_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/clouds/{cloud_name}/zioses.json', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20096',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_zios_drives_from_cc(self, cloud_name, id, **kwargs):  # noqa: E501
        """get_all_zios_drives_from_cc  # noqa: E501

        Returns the list of a ZIOS drives.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_zios_drives_from_cc(cloud_name, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_name: (required)
        :param str id: (required)
        :return: InlineResponse20098
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_zios_drives_from_cc_with_http_info(cloud_name, id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_zios_drives_from_cc_with_http_info(cloud_name, id, **kwargs)  # noqa: E501
            return data

    def get_all_zios_drives_from_cc_with_http_info(self, cloud_name, id, **kwargs):  # noqa: E501
        """get_all_zios_drives_from_cc  # noqa: E501

        Returns the list of a ZIOS drives.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_zios_drives_from_cc_with_http_info(cloud_name, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_name: (required)
        :param str id: (required)
        :return: InlineResponse20098
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cloud_name', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_zios_drives_from_cc" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cloud_name' is set
        if self.api_client.client_side_validation and ('cloud_name' not in params or
                                                       params['cloud_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cloud_name` when calling `get_all_zios_drives_from_cc`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `get_all_zios_drives_from_cc`")  # noqa: E501

        if self.api_client.client_side_validation and ('id' in params and not re.search(r'vsa-[0-9a-z]+|[0-9]+', params['id'])):  # noqa: E501
            raise ValueError("Invalid value for parameter `id` when calling `get_all_zios_drives_from_cc`, must conform to the pattern `/vsa-[0-9a-z]+|[0-9]+/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'cloud_name' in params:
            path_params['cloud_name'] = params['cloud_name']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/clouds/{cloud_name}/zioses/{id}/drives.json', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20098',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_load_balancer(self, cloud_name, id, **kwargs):  # noqa: E501
        """get_load_balancer  # noqa: E501

        Returns the list of a ZIOS load balancers.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_load_balancer(cloud_name, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_name: (required)
        :param str id: (required)
        :return: InlineResponse200102
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_load_balancer_with_http_info(cloud_name, id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_load_balancer_with_http_info(cloud_name, id, **kwargs)  # noqa: E501
            return data

    def get_load_balancer_with_http_info(self, cloud_name, id, **kwargs):  # noqa: E501
        """get_load_balancer  # noqa: E501

        Returns the list of a ZIOS load balancers.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_load_balancer_with_http_info(cloud_name, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_name: (required)
        :param str id: (required)
        :return: InlineResponse200102
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cloud_name', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_load_balancer" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cloud_name' is set
        if self.api_client.client_side_validation and ('cloud_name' not in params or
                                                       params['cloud_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cloud_name` when calling `get_load_balancer`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `get_load_balancer`")  # noqa: E501

        if self.api_client.client_side_validation and ('id' in params and not re.search(r'vsa-[0-9a-z]+|[0-9]+', params['id'])):  # noqa: E501
            raise ValueError("Invalid value for parameter `id` when calling `get_load_balancer`, must conform to the pattern `/vsa-[0-9a-z]+|[0-9]+/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'cloud_name' in params:
            path_params['cloud_name'] = params['cloud_name']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/clouds/{cloud_name}/zioses/{id}/load_balancer.json', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200102',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_vpsaos_accounts(self, cloud_name, id, **kwargs):  # noqa: E501
        """get_vpsaos_accounts  # noqa: E501

        Returns the list of a ZIOS accounts.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_vpsaos_accounts(cloud_name, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_name: (required)
        :param str id: (required)
        :return: InlineResponse200103
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_vpsaos_accounts_with_http_info(cloud_name, id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_vpsaos_accounts_with_http_info(cloud_name, id, **kwargs)  # noqa: E501
            return data

    def get_vpsaos_accounts_with_http_info(self, cloud_name, id, **kwargs):  # noqa: E501
        """get_vpsaos_accounts  # noqa: E501

        Returns the list of a ZIOS accounts.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_vpsaos_accounts_with_http_info(cloud_name, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_name: (required)
        :param str id: (required)
        :return: InlineResponse200103
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cloud_name', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_vpsaos_accounts" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cloud_name' is set
        if self.api_client.client_side_validation and ('cloud_name' not in params or
                                                       params['cloud_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cloud_name` when calling `get_vpsaos_accounts`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `get_vpsaos_accounts`")  # noqa: E501

        if self.api_client.client_side_validation and ('id' in params and not re.search(r'vsa-[0-9a-z]+|[0-9]+', params['id'])):  # noqa: E501
            raise ValueError("Invalid value for parameter `id` when calling `get_vpsaos_accounts`, must conform to the pattern `/vsa-[0-9a-z]+|[0-9]+/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'cloud_name' in params:
            path_params['cloud_name'] = params['cloud_name']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/clouds/{cloud_name}/zioses/{id}/accounts.json', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200103',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_vpsaos_comments(self, cloud_name, id, **kwargs):  # noqa: E501
        """get_vpsaos_comments  # noqa: E501

        Returns the list of a ZIOSes Comments.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_vpsaos_comments(cloud_name, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_name: (required)
        :param str id: (required)
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_vpsaos_comments_with_http_info(cloud_name, id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_vpsaos_comments_with_http_info(cloud_name, id, **kwargs)  # noqa: E501
            return data

    def get_vpsaos_comments_with_http_info(self, cloud_name, id, **kwargs):  # noqa: E501
        """get_vpsaos_comments  # noqa: E501

        Returns the list of a ZIOSes Comments.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_vpsaos_comments_with_http_info(cloud_name, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_name: (required)
        :param str id: (required)
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cloud_name', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_vpsaos_comments" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cloud_name' is set
        if self.api_client.client_side_validation and ('cloud_name' not in params or
                                                       params['cloud_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cloud_name` when calling `get_vpsaos_comments`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `get_vpsaos_comments`")  # noqa: E501

        if self.api_client.client_side_validation and ('id' in params and not re.search(r'vsa-[0-9a-z]+|[0-9]+', params['id'])):  # noqa: E501
            raise ValueError("Invalid value for parameter `id` when calling `get_vpsaos_comments`, must conform to the pattern `/vsa-[0-9a-z]+|[0-9]+/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'cloud_name' in params:
            path_params['cloud_name'] = params['cloud_name']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/clouds/{cloud_name}/zioses/{id}/comments.json', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2004',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_vpsaos_sps(self, cloud_name, id, **kwargs):  # noqa: E501
        """get_vpsaos_sps  # noqa: E501

        Returns the list of a ZIOS storage policies.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_vpsaos_sps(cloud_name, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_name: (required)
        :param str id: (required)
        :return: InlineResponse200101
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_vpsaos_sps_with_http_info(cloud_name, id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_vpsaos_sps_with_http_info(cloud_name, id, **kwargs)  # noqa: E501
            return data

    def get_vpsaos_sps_with_http_info(self, cloud_name, id, **kwargs):  # noqa: E501
        """get_vpsaos_sps  # noqa: E501

        Returns the list of a ZIOS storage policies.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_vpsaos_sps_with_http_info(cloud_name, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_name: (required)
        :param str id: (required)
        :return: InlineResponse200101
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cloud_name', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_vpsaos_sps" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cloud_name' is set
        if self.api_client.client_side_validation and ('cloud_name' not in params or
                                                       params['cloud_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cloud_name` when calling `get_vpsaos_sps`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `get_vpsaos_sps`")  # noqa: E501

        if self.api_client.client_side_validation and ('id' in params and not re.search(r'vsa-[0-9a-z]+|[0-9]+', params['id'])):  # noqa: E501
            raise ValueError("Invalid value for parameter `id` when calling `get_vpsaos_sps`, must conform to the pattern `/vsa-[0-9a-z]+|[0-9]+/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'cloud_name' in params:
            path_params['cloud_name'] = params['cloud_name']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/clouds/{cloud_name}/zioses/{id}/storage_policies.json', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200101',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_vpsaos_vcs(self, cloud_name, id, **kwargs):  # noqa: E501
        """get_vpsaos_vcs  # noqa: E501

        Returns the list of a ZIOS virtual controllers.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_vpsaos_vcs(cloud_name, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_name: (required)
        :param str id: (required)
        :return: InlineResponse200100
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_vpsaos_vcs_with_http_info(cloud_name, id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_vpsaos_vcs_with_http_info(cloud_name, id, **kwargs)  # noqa: E501
            return data

    def get_vpsaos_vcs_with_http_info(self, cloud_name, id, **kwargs):  # noqa: E501
        """get_vpsaos_vcs  # noqa: E501

        Returns the list of a ZIOS virtual controllers.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_vpsaos_vcs_with_http_info(cloud_name, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_name: (required)
        :param str id: (required)
        :return: InlineResponse200100
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cloud_name', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_vpsaos_vcs" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cloud_name' is set
        if self.api_client.client_side_validation and ('cloud_name' not in params or
                                                       params['cloud_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cloud_name` when calling `get_vpsaos_vcs`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `get_vpsaos_vcs`")  # noqa: E501

        if self.api_client.client_side_validation and ('id' in params and not re.search(r'vsa-[0-9a-z]+|[0-9]+', params['id'])):  # noqa: E501
            raise ValueError("Invalid value for parameter `id` when calling `get_vpsaos_vcs`, must conform to the pattern `/vsa-[0-9a-z]+|[0-9]+/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'cloud_name' in params:
            path_params['cloud_name'] = params['cloud_name']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/clouds/{cloud_name}/zioses/{id}/virtual_controllers.json', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200100',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_zios_from_cloud(self, cloud_name, id, **kwargs):  # noqa: E501
        """get_zios_from_cloud  # noqa: E501

        Returns the details for a single ZIOS.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_zios_from_cloud(cloud_name, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_name: (required)
        :param str id: (required)
        :return: InlineResponse20097
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_zios_from_cloud_with_http_info(cloud_name, id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_zios_from_cloud_with_http_info(cloud_name, id, **kwargs)  # noqa: E501
            return data

    def get_zios_from_cloud_with_http_info(self, cloud_name, id, **kwargs):  # noqa: E501
        """get_zios_from_cloud  # noqa: E501

        Returns the details for a single ZIOS.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_zios_from_cloud_with_http_info(cloud_name, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_name: (required)
        :param str id: (required)
        :return: InlineResponse20097
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cloud_name', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_zios_from_cloud" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cloud_name' is set
        if self.api_client.client_side_validation and ('cloud_name' not in params or
                                                       params['cloud_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cloud_name` when calling `get_zios_from_cloud`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `get_zios_from_cloud`")  # noqa: E501

        if self.api_client.client_side_validation and ('id' in params and not re.search(r'vsa-[0-9a-z]+|[0-9]+', params['id'])):  # noqa: E501
            raise ValueError("Invalid value for parameter `id` when calling `get_zios_from_cloud`, must conform to the pattern `/vsa-[0-9a-z]+|[0-9]+/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'cloud_name' in params:
            path_params['cloud_name'] = params['cloud_name']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/clouds/{cloud_name}/zioses/{id}.json', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20097',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_zios_upload_endpoints(self, cloud_name, id, body_get_zios_upload_endpoints, **kwargs):  # noqa: E501
        """get_zios_upload_endpoints  # noqa: E501

        Gets all zios upload endpoints including default endpoints  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_zios_upload_endpoints(cloud_name, id, body_get_zios_upload_endpoints, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_name: (required)
        :param str id: (required)
        :param BodyGetZiosUploadEndpoints body_get_zios_upload_endpoints: (required)
        :return: InlineResponse200111
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_zios_upload_endpoints_with_http_info(cloud_name, id, body_get_zios_upload_endpoints, **kwargs)  # noqa: E501
        else:
            (data) = self.get_zios_upload_endpoints_with_http_info(cloud_name, id, body_get_zios_upload_endpoints, **kwargs)  # noqa: E501
            return data

    def get_zios_upload_endpoints_with_http_info(self, cloud_name, id, body_get_zios_upload_endpoints, **kwargs):  # noqa: E501
        """get_zios_upload_endpoints  # noqa: E501

        Gets all zios upload endpoints including default endpoints  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_zios_upload_endpoints_with_http_info(cloud_name, id, body_get_zios_upload_endpoints, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_name: (required)
        :param str id: (required)
        :param BodyGetZiosUploadEndpoints body_get_zios_upload_endpoints: (required)
        :return: InlineResponse200111
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cloud_name', 'id', 'body_get_zios_upload_endpoints']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_zios_upload_endpoints" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cloud_name' is set
        if self.api_client.client_side_validation and ('cloud_name' not in params or
                                                       params['cloud_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cloud_name` when calling `get_zios_upload_endpoints`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `get_zios_upload_endpoints`")  # noqa: E501
        # verify the required parameter 'body_get_zios_upload_endpoints' is set
        if self.api_client.client_side_validation and ('body_get_zios_upload_endpoints' not in params or
                                                       params['body_get_zios_upload_endpoints'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body_get_zios_upload_endpoints` when calling `get_zios_upload_endpoints`")  # noqa: E501

        if self.api_client.client_side_validation and ('id' in params and not re.search(r'vsa-[0-9a-z]+|[0-9]+', params['id'])):  # noqa: E501
            raise ValueError("Invalid value for parameter `id` when calling `get_zios_upload_endpoints`, must conform to the pattern `/vsa-[0-9a-z]+|[0-9]+/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'cloud_name' in params:
            path_params['cloud_name'] = params['cloud_name']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body_get_zios_upload_endpoints' in params:
            body_params = params['body_get_zios_upload_endpoints']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/clouds/{cloud_name}/zioses/{id}/endpoints.json', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200111',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def hibernate_zios(self, cloud_name, id, **kwargs):  # noqa: E501
        """hibernate_zios  # noqa: E501

        Hibernate ZIOS.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.hibernate_zios(cloud_name, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_name: (required)
        :param str id: (required)
        :return: InlineResponse200106
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.hibernate_zios_with_http_info(cloud_name, id, **kwargs)  # noqa: E501
        else:
            (data) = self.hibernate_zios_with_http_info(cloud_name, id, **kwargs)  # noqa: E501
            return data

    def hibernate_zios_with_http_info(self, cloud_name, id, **kwargs):  # noqa: E501
        """hibernate_zios  # noqa: E501

        Hibernate ZIOS.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.hibernate_zios_with_http_info(cloud_name, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_name: (required)
        :param str id: (required)
        :return: InlineResponse200106
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cloud_name', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method hibernate_zios" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cloud_name' is set
        if self.api_client.client_side_validation and ('cloud_name' not in params or
                                                       params['cloud_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cloud_name` when calling `hibernate_zios`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `hibernate_zios`")  # noqa: E501

        if self.api_client.client_side_validation and ('id' in params and not re.search(r'vsa-[0-9a-z]+|[0-9]+', params['id'])):  # noqa: E501
            raise ValueError("Invalid value for parameter `id` when calling `hibernate_zios`, must conform to the pattern `/vsa-[0-9a-z]+|[0-9]+/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'cloud_name' in params:
            path_params['cloud_name'] = params['cloud_name']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/clouds/{cloud_name}/zioses/{id}/hibernate.json', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200106',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_availiables_virtual_net_to_add_vpsa(self, cloud_name, id, **kwargs):  # noqa: E501
        """list_availiables_virtual_net_to_add_vpsa  # noqa: E501

        Returns the list of a available Virtual Networks to be added to VPSA.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_availiables_virtual_net_to_add_vpsa(cloud_name, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_name: (required)
        :param str id: (required)
        :return: InlineResponse20070
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_availiables_virtual_net_to_add_vpsa_with_http_info(cloud_name, id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_availiables_virtual_net_to_add_vpsa_with_http_info(cloud_name, id, **kwargs)  # noqa: E501
            return data

    def list_availiables_virtual_net_to_add_vpsa_with_http_info(self, cloud_name, id, **kwargs):  # noqa: E501
        """list_availiables_virtual_net_to_add_vpsa  # noqa: E501

        Returns the list of a available Virtual Networks to be added to VPSA.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_availiables_virtual_net_to_add_vpsa_with_http_info(cloud_name, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_name: (required)
        :param str id: (required)
        :return: InlineResponse20070
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cloud_name', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_availiables_virtual_net_to_add_vpsa" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cloud_name' is set
        if self.api_client.client_side_validation and ('cloud_name' not in params or
                                                       params['cloud_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cloud_name` when calling `list_availiables_virtual_net_to_add_vpsa`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `list_availiables_virtual_net_to_add_vpsa`")  # noqa: E501

        if self.api_client.client_side_validation and ('id' in params and not re.search(r'vsa-[0-9a-z]+|[0-9]+', params['id'])):  # noqa: E501
            raise ValueError("Invalid value for parameter `id` when calling `list_availiables_virtual_net_to_add_vpsa`, must conform to the pattern `/vsa-[0-9a-z]+|[0-9]+/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'cloud_name' in params:
            path_params['cloud_name'] = params['cloud_name']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/clouds/{cloud_name}/zioses/{id}/compatible_virtual_networks.json', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20070',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_vpsa_virtual_nets(self, cloud_name, id, **kwargs):  # noqa: E501
        """list_vpsa_virtual_nets  # noqa: E501

        Returns the list of a Virtual Networks that belongs to a VPSA.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_vpsa_virtual_nets(cloud_name, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_name: (required)
        :param str id: (required)
        :return: InlineResponse200104
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_vpsa_virtual_nets_with_http_info(cloud_name, id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_vpsa_virtual_nets_with_http_info(cloud_name, id, **kwargs)  # noqa: E501
            return data

    def list_vpsa_virtual_nets_with_http_info(self, cloud_name, id, **kwargs):  # noqa: E501
        """list_vpsa_virtual_nets  # noqa: E501

        Returns the list of a Virtual Networks that belongs to a VPSA.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_vpsa_virtual_nets_with_http_info(cloud_name, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_name: (required)
        :param str id: (required)
        :return: InlineResponse200104
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cloud_name', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_vpsa_virtual_nets" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cloud_name' is set
        if self.api_client.client_side_validation and ('cloud_name' not in params or
                                                       params['cloud_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cloud_name` when calling `list_vpsa_virtual_nets`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `list_vpsa_virtual_nets`")  # noqa: E501

        if self.api_client.client_side_validation and ('id' in params and not re.search(r'vsa-[0-9a-z]+|[0-9]+', params['id'])):  # noqa: E501
            raise ValueError("Invalid value for parameter `id` when calling `list_vpsa_virtual_nets`, must conform to the pattern `/vsa-[0-9a-z]+|[0-9]+/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'cloud_name' in params:
            path_params['cloud_name'] = params['cloud_name']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/clouds/{cloud_name}/zioses/{id}/virtual_network_interfaces.json', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200104',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_zios_endpoints_configs_by_upload_types(self, cloud_name, id, body_list_zios_endpoints_configs_by_upload_types, **kwargs):  # noqa: E501
        """list_zios_endpoints_configs_by_upload_types  # noqa: E501

        Gets zios endpoint configs by upload types  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_zios_endpoints_configs_by_upload_types(cloud_name, id, body_list_zios_endpoints_configs_by_upload_types, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_name: (required)
        :param str id: (required)
        :param BodyListZiosEndpointsConfigsByUploadTypes body_list_zios_endpoints_configs_by_upload_types: (required)
        :return: InlineResponse200115
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_zios_endpoints_configs_by_upload_types_with_http_info(cloud_name, id, body_list_zios_endpoints_configs_by_upload_types, **kwargs)  # noqa: E501
        else:
            (data) = self.list_zios_endpoints_configs_by_upload_types_with_http_info(cloud_name, id, body_list_zios_endpoints_configs_by_upload_types, **kwargs)  # noqa: E501
            return data

    def list_zios_endpoints_configs_by_upload_types_with_http_info(self, cloud_name, id, body_list_zios_endpoints_configs_by_upload_types, **kwargs):  # noqa: E501
        """list_zios_endpoints_configs_by_upload_types  # noqa: E501

        Gets zios endpoint configs by upload types  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_zios_endpoints_configs_by_upload_types_with_http_info(cloud_name, id, body_list_zios_endpoints_configs_by_upload_types, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_name: (required)
        :param str id: (required)
        :param BodyListZiosEndpointsConfigsByUploadTypes body_list_zios_endpoints_configs_by_upload_types: (required)
        :return: InlineResponse200115
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cloud_name', 'id', 'body_list_zios_endpoints_configs_by_upload_types']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_zios_endpoints_configs_by_upload_types" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cloud_name' is set
        if self.api_client.client_side_validation and ('cloud_name' not in params or
                                                       params['cloud_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cloud_name` when calling `list_zios_endpoints_configs_by_upload_types`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `list_zios_endpoints_configs_by_upload_types`")  # noqa: E501
        # verify the required parameter 'body_list_zios_endpoints_configs_by_upload_types' is set
        if self.api_client.client_side_validation and ('body_list_zios_endpoints_configs_by_upload_types' not in params or
                                                       params['body_list_zios_endpoints_configs_by_upload_types'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body_list_zios_endpoints_configs_by_upload_types` when calling `list_zios_endpoints_configs_by_upload_types`")  # noqa: E501

        if self.api_client.client_side_validation and ('id' in params and not re.search(r'vsa-[0-9a-z]+|[0-9]+', params['id'])):  # noqa: E501
            raise ValueError("Invalid value for parameter `id` when calling `list_zios_endpoints_configs_by_upload_types`, must conform to the pattern `/vsa-[0-9a-z]+|[0-9]+/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'cloud_name' in params:
            path_params['cloud_name'] = params['cloud_name']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body_list_zios_endpoints_configs_by_upload_types' in params:
            body_params = params['body_list_zios_endpoints_configs_by_upload_types']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/clouds/{cloud_name}/zioses/{id}/endpoints_config.json', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200115',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def pause_policy_rebalance_zios(self, cloud_name, id, body_pause_policy_rebalance_zios, **kwargs):  # noqa: E501
        """pause_policy_rebalance_zios  # noqa: E501

        Pause a storage policy rebalance.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pause_policy_rebalance_zios(cloud_name, id, body_pause_policy_rebalance_zios, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_name: (required)
        :param str id: (required)
        :param BodyPausePolicyRebalanceZios body_pause_policy_rebalance_zios: (required)
        :return: InlineResponse200109
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.pause_policy_rebalance_zios_with_http_info(cloud_name, id, body_pause_policy_rebalance_zios, **kwargs)  # noqa: E501
        else:
            (data) = self.pause_policy_rebalance_zios_with_http_info(cloud_name, id, body_pause_policy_rebalance_zios, **kwargs)  # noqa: E501
            return data

    def pause_policy_rebalance_zios_with_http_info(self, cloud_name, id, body_pause_policy_rebalance_zios, **kwargs):  # noqa: E501
        """pause_policy_rebalance_zios  # noqa: E501

        Pause a storage policy rebalance.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pause_policy_rebalance_zios_with_http_info(cloud_name, id, body_pause_policy_rebalance_zios, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_name: (required)
        :param str id: (required)
        :param BodyPausePolicyRebalanceZios body_pause_policy_rebalance_zios: (required)
        :return: InlineResponse200109
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cloud_name', 'id', 'body_pause_policy_rebalance_zios']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method pause_policy_rebalance_zios" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cloud_name' is set
        if self.api_client.client_side_validation and ('cloud_name' not in params or
                                                       params['cloud_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cloud_name` when calling `pause_policy_rebalance_zios`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `pause_policy_rebalance_zios`")  # noqa: E501
        # verify the required parameter 'body_pause_policy_rebalance_zios' is set
        if self.api_client.client_side_validation and ('body_pause_policy_rebalance_zios' not in params or
                                                       params['body_pause_policy_rebalance_zios'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body_pause_policy_rebalance_zios` when calling `pause_policy_rebalance_zios`")  # noqa: E501

        if self.api_client.client_side_validation and ('id' in params and not re.search(r'vsa-[0-9a-z]+|[0-9]+', params['id'])):  # noqa: E501
            raise ValueError("Invalid value for parameter `id` when calling `pause_policy_rebalance_zios`, must conform to the pattern `/vsa-[0-9a-z]+|[0-9]+/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'cloud_name' in params:
            path_params['cloud_name'] = params['cloud_name']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body_pause_policy_rebalance_zios' in params:
            body_params = params['body_pause_policy_rebalance_zios']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/clouds/{cloud_name}/zioses/{id}/policy_pause_rebalance.json', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200109',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def remove_virtual_nets_from_zios(self, cloud_name, id, body_remove_virtual_nets_from_zios, **kwargs):  # noqa: E501
        """remove_virtual_nets_from_zios  # noqa: E501

        Remove Virtual Network from ZIOS.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_virtual_nets_from_zios(cloud_name, id, body_remove_virtual_nets_from_zios, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_name: (required)
        :param str id: (required)
        :param BodyRemoveVirtualNetsFromZios body_remove_virtual_nets_from_zios: (required)
        :return: InlineResponse20010
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.remove_virtual_nets_from_zios_with_http_info(cloud_name, id, body_remove_virtual_nets_from_zios, **kwargs)  # noqa: E501
        else:
            (data) = self.remove_virtual_nets_from_zios_with_http_info(cloud_name, id, body_remove_virtual_nets_from_zios, **kwargs)  # noqa: E501
            return data

    def remove_virtual_nets_from_zios_with_http_info(self, cloud_name, id, body_remove_virtual_nets_from_zios, **kwargs):  # noqa: E501
        """remove_virtual_nets_from_zios  # noqa: E501

        Remove Virtual Network from ZIOS.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_virtual_nets_from_zios_with_http_info(cloud_name, id, body_remove_virtual_nets_from_zios, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_name: (required)
        :param str id: (required)
        :param BodyRemoveVirtualNetsFromZios body_remove_virtual_nets_from_zios: (required)
        :return: InlineResponse20010
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cloud_name', 'id', 'body_remove_virtual_nets_from_zios']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_virtual_nets_from_zios" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cloud_name' is set
        if self.api_client.client_side_validation and ('cloud_name' not in params or
                                                       params['cloud_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cloud_name` when calling `remove_virtual_nets_from_zios`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `remove_virtual_nets_from_zios`")  # noqa: E501
        # verify the required parameter 'body_remove_virtual_nets_from_zios' is set
        if self.api_client.client_side_validation and ('body_remove_virtual_nets_from_zios' not in params or
                                                       params['body_remove_virtual_nets_from_zios'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body_remove_virtual_nets_from_zios` when calling `remove_virtual_nets_from_zios`")  # noqa: E501

        if self.api_client.client_side_validation and ('id' in params and not re.search(r'vsa-[0-9a-z]+|[0-9]+', params['id'])):  # noqa: E501
            raise ValueError("Invalid value for parameter `id` when calling `remove_virtual_nets_from_zios`, must conform to the pattern `/vsa-[0-9a-z]+|[0-9]+/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'cloud_name' in params:
            path_params['cloud_name'] = params['cloud_name']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body_remove_virtual_nets_from_zios' in params:
            body_params = params['body_remove_virtual_nets_from_zios']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/clouds/{cloud_name}/zioses/{id}/remove_virtual_network_interface.json', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20010',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def restore_zios(self, cloud_name, id, **kwargs):  # noqa: E501
        """restore_zios  # noqa: E501

        Restore ZIOS from hibernation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.restore_zios(cloud_name, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_name: (required)
        :param str id: (required)
        :return: InlineResponse200107
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.restore_zios_with_http_info(cloud_name, id, **kwargs)  # noqa: E501
        else:
            (data) = self.restore_zios_with_http_info(cloud_name, id, **kwargs)  # noqa: E501
            return data

    def restore_zios_with_http_info(self, cloud_name, id, **kwargs):  # noqa: E501
        """restore_zios  # noqa: E501

        Restore ZIOS from hibernation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.restore_zios_with_http_info(cloud_name, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_name: (required)
        :param str id: (required)
        :return: InlineResponse200107
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cloud_name', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method restore_zios" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cloud_name' is set
        if self.api_client.client_side_validation and ('cloud_name' not in params or
                                                       params['cloud_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cloud_name` when calling `restore_zios`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `restore_zios`")  # noqa: E501

        if self.api_client.client_side_validation and ('id' in params and not re.search(r'vsa-[0-9a-z]+|[0-9]+', params['id'])):  # noqa: E501
            raise ValueError("Invalid value for parameter `id` when calling `restore_zios`, must conform to the pattern `/vsa-[0-9a-z]+|[0-9]+/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'cloud_name' in params:
            path_params['cloud_name'] = params['cloud_name']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/clouds/{cloud_name}/zioses/{id}/restore.json', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200107',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def unassign_public_ip_zios(self, cloud_name, id, **kwargs):  # noqa: E501
        """unassign_public_ip_zios  # noqa: E501

        Unassign public ip from ZIOS.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.unassign_public_ip_zios(cloud_name, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_name: (required)
        :param str id: (required)
        :return: InlineResponse200105
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.unassign_public_ip_zios_with_http_info(cloud_name, id, **kwargs)  # noqa: E501
        else:
            (data) = self.unassign_public_ip_zios_with_http_info(cloud_name, id, **kwargs)  # noqa: E501
            return data

    def unassign_public_ip_zios_with_http_info(self, cloud_name, id, **kwargs):  # noqa: E501
        """unassign_public_ip_zios  # noqa: E501

        Unassign public ip from ZIOS.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.unassign_public_ip_zios_with_http_info(cloud_name, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_name: (required)
        :param str id: (required)
        :return: InlineResponse200105
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cloud_name', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method unassign_public_ip_zios" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cloud_name' is set
        if self.api_client.client_side_validation and ('cloud_name' not in params or
                                                       params['cloud_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cloud_name` when calling `unassign_public_ip_zios`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `unassign_public_ip_zios`")  # noqa: E501

        if self.api_client.client_side_validation and ('id' in params and not re.search(r'vsa-[0-9a-z]+|[0-9]+', params['id'])):  # noqa: E501
            raise ValueError("Invalid value for parameter `id` when calling `unassign_public_ip_zios`, must conform to the pattern `/vsa-[0-9a-z]+|[0-9]+/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'cloud_name' in params:
            path_params['cloud_name'] = params['cloud_name']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/clouds/{cloud_name}/zioses/{id}/public_ip/unassign.json', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200105',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_zios_upload_endpoint(self, cloud_name, id, body_update_zios_upload_endpoint, **kwargs):  # noqa: E501
        """update_zios_upload_endpoint  # noqa: E501

        Updates an existing zios upload endpoint  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_zios_upload_endpoint(cloud_name, id, body_update_zios_upload_endpoint, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_name: (required)
        :param str id: (required)
        :param BodyUpdateZiosUploadEndpoint body_update_zios_upload_endpoint: (required)
        :return: InlineResponse200112
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_zios_upload_endpoint_with_http_info(cloud_name, id, body_update_zios_upload_endpoint, **kwargs)  # noqa: E501
        else:
            (data) = self.update_zios_upload_endpoint_with_http_info(cloud_name, id, body_update_zios_upload_endpoint, **kwargs)  # noqa: E501
            return data

    def update_zios_upload_endpoint_with_http_info(self, cloud_name, id, body_update_zios_upload_endpoint, **kwargs):  # noqa: E501
        """update_zios_upload_endpoint  # noqa: E501

        Updates an existing zios upload endpoint  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_zios_upload_endpoint_with_http_info(cloud_name, id, body_update_zios_upload_endpoint, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_name: (required)
        :param str id: (required)
        :param BodyUpdateZiosUploadEndpoint body_update_zios_upload_endpoint: (required)
        :return: InlineResponse200112
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cloud_name', 'id', 'body_update_zios_upload_endpoint']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_zios_upload_endpoint" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cloud_name' is set
        if self.api_client.client_side_validation and ('cloud_name' not in params or
                                                       params['cloud_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cloud_name` when calling `update_zios_upload_endpoint`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `update_zios_upload_endpoint`")  # noqa: E501
        # verify the required parameter 'body_update_zios_upload_endpoint' is set
        if self.api_client.client_side_validation and ('body_update_zios_upload_endpoint' not in params or
                                                       params['body_update_zios_upload_endpoint'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body_update_zios_upload_endpoint` when calling `update_zios_upload_endpoint`")  # noqa: E501

        if self.api_client.client_side_validation and ('id' in params and not re.search(r'vsa-[0-9a-z]+|[0-9]+', params['id'])):  # noqa: E501
            raise ValueError("Invalid value for parameter `id` when calling `update_zios_upload_endpoint`, must conform to the pattern `/vsa-[0-9a-z]+|[0-9]+/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'cloud_name' in params:
            path_params['cloud_name'] = params['cloud_name']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body_update_zios_upload_endpoint' in params:
            body_params = params['body_update_zios_upload_endpoint']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/clouds/{cloud_name}/zioses/{id}/endpoints.json', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200112',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def upgrade_zios(self, cloud_name, id, body_upgrade_zios, **kwargs):  # noqa: E501
        """upgrade_zios  # noqa: E501

        Upgrade a ZIOS software to a specified image.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upgrade_zios(cloud_name, id, body_upgrade_zios, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_name: (required)
        :param str id: (required)
        :param BodyUpgradeZios body_upgrade_zios: (required)
        :return: InlineResponse20010
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.upgrade_zios_with_http_info(cloud_name, id, body_upgrade_zios, **kwargs)  # noqa: E501
        else:
            (data) = self.upgrade_zios_with_http_info(cloud_name, id, body_upgrade_zios, **kwargs)  # noqa: E501
            return data

    def upgrade_zios_with_http_info(self, cloud_name, id, body_upgrade_zios, **kwargs):  # noqa: E501
        """upgrade_zios  # noqa: E501

        Upgrade a ZIOS software to a specified image.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upgrade_zios_with_http_info(cloud_name, id, body_upgrade_zios, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_name: (required)
        :param str id: (required)
        :param BodyUpgradeZios body_upgrade_zios: (required)
        :return: InlineResponse20010
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cloud_name', 'id', 'body_upgrade_zios']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method upgrade_zios" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cloud_name' is set
        if self.api_client.client_side_validation and ('cloud_name' not in params or
                                                       params['cloud_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cloud_name` when calling `upgrade_zios`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `upgrade_zios`")  # noqa: E501
        # verify the required parameter 'body_upgrade_zios' is set
        if self.api_client.client_side_validation and ('body_upgrade_zios' not in params or
                                                       params['body_upgrade_zios'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body_upgrade_zios` when calling `upgrade_zios`")  # noqa: E501

        if self.api_client.client_side_validation and ('id' in params and not re.search(r'vsa-[0-9a-z]+|[0-9]+', params['id'])):  # noqa: E501
            raise ValueError("Invalid value for parameter `id` when calling `upgrade_zios`, must conform to the pattern `/vsa-[0-9a-z]+|[0-9]+/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'cloud_name' in params:
            path_params['cloud_name'] = params['cloud_name']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body_upgrade_zios' in params:
            body_params = params['body_upgrade_zios']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/clouds/{cloud_name}/zioses/{id}/upgrade.json', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20010',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
