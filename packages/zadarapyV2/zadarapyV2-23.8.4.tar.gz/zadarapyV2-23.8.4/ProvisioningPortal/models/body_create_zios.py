# coding: utf-8

"""
    Zadara Provisioning Portal API

     # Overview  This document outlines the methods available for creation and high-level administration of Zadara Storage VPSAs via a Zadara Storage Provisioning Portal. This API supports form-encoded requests, and can return either JSON or XML responses.  ## Endpoint  The base URL for the requests is the Provisioning Portal URL you created your VPSA through - for example: https://manage.zadarastorage.com/, and all APIs will be prefixed with /api as noted in the documentation below.  ## Authentication  To use this API, an authentication token is required. The API for retrieving this token can be found below in the Authentication section. You may pass this token in requests either via the the X-Token header or via basic authentication (base64 encoded) in Authorization header.  ## Questions  If you have any questions or need support involving the REST API, please contact for assistance.   # noqa: E501

    OpenAPI spec version: v23.8.4
    Contact: support@zadarastorage.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from ProvisioningPortal.configuration import Configuration


class BodyCreateZios(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'provider': 'str',
        'description': 'str',
        'vpsa_zone_group_storage_policy_type_id': 'int',
        'cloud': 'str',
        'custom_network_id': 'int',
        'kind': 'str',
        'drives': 'list[ZiosJsonDrives]',
        'allocation_zone': 'str'
    }

    attribute_map = {
        'name': 'name',
        'provider': 'provider',
        'description': 'description',
        'vpsa_zone_group_storage_policy_type_id': 'vpsa_zone_group_storage_policy_type_id',
        'cloud': 'cloud',
        'custom_network_id': 'custom_network_id',
        'kind': 'kind',
        'drives': 'drives',
        'allocation_zone': 'allocation_zone'
    }

    def __init__(self, name=None, provider=None, description=None, vpsa_zone_group_storage_policy_type_id=None, cloud=None, custom_network_id=None, kind=None, drives=None, allocation_zone=None, _configuration=None):  # noqa: E501
        """BodyCreateZios - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._name = None
        self._provider = None
        self._description = None
        self._vpsa_zone_group_storage_policy_type_id = None
        self._cloud = None
        self._custom_network_id = None
        self._kind = None
        self._drives = None
        self._allocation_zone = None
        self.discriminator = None

        self.name = name
        self.provider = provider
        if description is not None:
            self.description = description
        self.vpsa_zone_group_storage_policy_type_id = vpsa_zone_group_storage_policy_type_id
        if cloud is not None:
            self.cloud = cloud
        self.custom_network_id = custom_network_id
        if kind is not None:
            self.kind = kind
        self.drives = drives
        if allocation_zone is not None:
            self.allocation_zone = allocation_zone

    @property
    def name(self):
        """Gets the name of this BodyCreateZios.  # noqa: E501

        Your VPSA Object Storage name.  # noqa: E501

        :return: The name of this BodyCreateZios.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BodyCreateZios.

        Your VPSA Object Storage name.  # noqa: E501

        :param name: The name of this BodyCreateZios.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def provider(self):
        """Gets the provider of this BodyCreateZios.  # noqa: E501


        :return: The provider of this BodyCreateZios.  # noqa: E501
        :rtype: str
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this BodyCreateZios.


        :param provider: The provider of this BodyCreateZios.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and provider is None:
            raise ValueError("Invalid value for `provider`, must not be `None`")  # noqa: E501

        self._provider = provider

    @property
    def description(self):
        """Gets the description of this BodyCreateZios.  # noqa: E501

        Your VPSA Object Storage description.  # noqa: E501

        :return: The description of this BodyCreateZios.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this BodyCreateZios.

        Your VPSA Object Storage description.  # noqa: E501

        :param description: The description of this BodyCreateZios.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def vpsa_zone_group_storage_policy_type_id(self):
        """Gets the vpsa_zone_group_storage_policy_type_id of this BodyCreateZios.  # noqa: E501


        :return: The vpsa_zone_group_storage_policy_type_id of this BodyCreateZios.  # noqa: E501
        :rtype: int
        """
        return self._vpsa_zone_group_storage_policy_type_id

    @vpsa_zone_group_storage_policy_type_id.setter
    def vpsa_zone_group_storage_policy_type_id(self, vpsa_zone_group_storage_policy_type_id):
        """Sets the vpsa_zone_group_storage_policy_type_id of this BodyCreateZios.


        :param vpsa_zone_group_storage_policy_type_id: The vpsa_zone_group_storage_policy_type_id of this BodyCreateZios.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and vpsa_zone_group_storage_policy_type_id is None:
            raise ValueError("Invalid value for `vpsa_zone_group_storage_policy_type_id`, must not be `None`")  # noqa: E501

        self._vpsa_zone_group_storage_policy_type_id = vpsa_zone_group_storage_policy_type_id

    @property
    def cloud(self):
        """Gets the cloud of this BodyCreateZios.  # noqa: E501

        The key for your desired Cloud (Provider).  # noqa: E501

        :return: The cloud of this BodyCreateZios.  # noqa: E501
        :rtype: str
        """
        return self._cloud

    @cloud.setter
    def cloud(self, cloud):
        """Sets the cloud of this BodyCreateZios.

        The key for your desired Cloud (Provider).  # noqa: E501

        :param cloud: The cloud of this BodyCreateZios.  # noqa: E501
        :type: str
        """

        self._cloud = cloud

    @property
    def custom_network_id(self):
        """Gets the custom_network_id of this BodyCreateZios.  # noqa: E501


        :return: The custom_network_id of this BodyCreateZios.  # noqa: E501
        :rtype: int
        """
        return self._custom_network_id

    @custom_network_id.setter
    def custom_network_id(self, custom_network_id):
        """Sets the custom_network_id of this BodyCreateZios.


        :param custom_network_id: The custom_network_id of this BodyCreateZios.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and custom_network_id is None:
            raise ValueError("Invalid value for `custom_network_id`, must not be `None`")  # noqa: E501

        self._custom_network_id = custom_network_id

    @property
    def kind(self):
        """Gets the kind of this BodyCreateZios.  # noqa: E501


        :return: The kind of this BodyCreateZios.  # noqa: E501
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this BodyCreateZios.


        :param kind: The kind of this BodyCreateZios.  # noqa: E501
        :type: str
        """

        self._kind = kind

    @property
    def drives(self):
        """Gets the drives of this BodyCreateZios.  # noqa: E501


        :return: The drives of this BodyCreateZios.  # noqa: E501
        :rtype: list[ZiosJsonDrives]
        """
        return self._drives

    @drives.setter
    def drives(self, drives):
        """Sets the drives of this BodyCreateZios.


        :param drives: The drives of this BodyCreateZios.  # noqa: E501
        :type: list[ZiosJsonDrives]
        """
        if self._configuration.client_side_validation and drives is None:
            raise ValueError("Invalid value for `drives`, must not be `None`")  # noqa: E501

        self._drives = drives

    @property
    def allocation_zone(self):
        """Gets the allocation_zone of this BodyCreateZios.  # noqa: E501


        :return: The allocation_zone of this BodyCreateZios.  # noqa: E501
        :rtype: str
        """
        return self._allocation_zone

    @allocation_zone.setter
    def allocation_zone(self, allocation_zone):
        """Sets the allocation_zone of this BodyCreateZios.


        :param allocation_zone: The allocation_zone of this BodyCreateZios.  # noqa: E501
        :type: str
        """

        self._allocation_zone = allocation_zone

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BodyCreateZios, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BodyCreateZios):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BodyCreateZios):
            return True

        return self.to_dict() != other.to_dict()
