ast            : parse_json(NULL)
raw expr       : parse_json(NULL)
checked expr   : parse_json<String NULL>(CAST(NULL AS String NULL))
optimized expr : NULL
output type    : Variant NULL
output domain  : {NULL}
output         : NULL


error: 
  --> SQL:1:1
  |
1 | parse_json('nuLL')
  | ^^^^^^^^^^^^^^^^^^ expected ident, pos 3 while evaluating function `parse_json('nuLL')`



ast            : parse_json('null')
raw expr       : parse_json('null')
checked expr   : parse_json<String>("null")
optimized expr : 0x2000000000000000
output type    : Variant
output domain  : Undefined
output         : null


error: 
  --> SQL:1:1
  |
1 | parse_json('  ')
  | ^^^^^^^^^^^^^^^^ EOF while parsing a value, pos 2 while evaluating function `parse_json('  ')`



ast            : parse_json('true')
raw expr       : parse_json('true')
checked expr   : parse_json<String>("true")
optimized expr : 0x2000000040000000
output type    : Variant
output domain  : Undefined
output         : true


ast            : parse_json('false')
raw expr       : parse_json('false')
checked expr   : parse_json<String>("false")
optimized expr : 0x2000000030000000
output type    : Variant
output domain  : Undefined
output         : false


ast            : parse_json('"测试"')
raw expr       : parse_json('"测试"')
checked expr   : parse_json<String>("\"测试\"")
optimized expr : 0x2000000010000006e6b58be8af95
output type    : Variant
output domain  : Undefined
output         : "测试"


ast            : parse_json('1234')
raw expr       : parse_json('1234')
checked expr   : parse_json<String>("1234")
optimized expr : 0x20000000200000035004d2
output type    : Variant
output domain  : Undefined
output         : 1234


ast            : parse_json('[1,2,3,4]')
raw expr       : parse_json('[1,2,3,4]')
checked expr   : parse_json<String>("[1,2,3,4]")
optimized expr : 0x80000004200000022000000220000002200000025001500250035004
output type    : Variant
output domain  : Undefined
output         : [1,2,3,4]


ast            : parse_json('{"a":"b","c":"d"}')
raw expr       : parse_json('{"a":"b","c":"d"}')
checked expr   : parse_json<String>("{\"a\":\"b\",\"c\":\"d\"}")
optimized expr : 0x400000021000000110000001100000011000000161636264
output type    : Variant
output domain  : Undefined
output         : {"a":"b","c":"d"}


ast            : parse_json(s)
raw expr       : parse_json(s::String)
checked expr   : parse_json<String>(s)
evaluation:
+--------+-----------------------------------------------------------+-----------------------+
|        | s                                                         | Output                |
+--------+-----------------------------------------------------------+-----------------------+
| Type   | String                                                    | Variant               |
| Domain | {"\"\\\\\\\"abc\\\\\\\"\""..="{\"k\":\"v\",\"a\":\"b\"}"} | Unknown               |
| Row 0  | 'null'                                                    | null                  |
| Row 1  | 'true'                                                    | true                  |
| Row 2  | '9223372036854775807'                                     | 9223372036854775807   |
| Row 3  | '-32768'                                                  | -32768                |
| Row 4  | '1234.5678'                                               | 1234.5678             |
| Row 5  | '1.912e2'                                                 | 191.2                 |
| Row 6  | '"\\\"abc\\\""'                                           | "\"abc\""             |
| Row 7  | '"databend"'                                              | "databend"            |
| Row 8  | '{"k":"v","a":"b"}'                                       | {"a":"b","k":"v"}     |
| Row 9  | '[1,2,3,["a","b","c"]]'                                   | [1,2,3,["a","b","c"]] |
+--------+-----------------------------------------------------------+-----------------------+
evaluation (internal):
+--------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                                                                                                                                                                                                                                                                                                                                                  |
+--------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| s      | StringColumn { data: 0x6e756c6c74727565393232333337323033363835343737353830372d3332373638313233342e35363738312e3931326532225c5c5c226162635c5c5c2222226461746162656e64227b226b223a2276222c2261223a2262227d5b312c322c332c5b2261222c2262222c2263225d5d, offsets: [0, 4, 8, 27, 33, 42, 49, 62, 72, 89, 110] }                                                                                                                                            |
| Output | StringColumn { data: 0x200000000000000020000000400000002000000020000009507fffffffffffffff200000002000000340800020000000200000096040934a456d5cfaad2000000020000009604067e6666666666620000000100000075c226162635c2220000000100000086461746162656e644000000210000001100000011000000110000001616b6276800000042000000220000002200000025000001350015002500380000003100000011000000110000001616263, offsets: [0, 8, 16, 33, 44, 61, 78, 93, 109, 133, 178] } |
+--------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+


ast            : parse_json(s)
raw expr       : parse_json(s::String NULL)
checked expr   : parse_json<String NULL>(s)
evaluation:
+--------+------------------------+--------------+
|        | s                      | Output       |
+--------+------------------------+--------------+
| Type   | String NULL            | Variant NULL |
| Domain | {""..="true"} ∪ {NULL} | Unknown      |
| Row 0  | 'true'                 | true         |
| Row 1  | 'false'                | false        |
| Row 2  | NULL                   | NULL         |
| Row 3  | '1234'                 | 1234         |
+--------+------------------------+--------------+
evaluation (internal):
+--------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                                                            |
+--------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------+
| s      | NullableColumn { column: StringColumn { data: 0x7472756566616c736531323334, offsets: [0, 4, 9, 9, 13] }, validity: [0b____1011] }                               |
| Output | NullableColumn { column: StringColumn { data: 0x2000000040000000200000003000000020000000200000035004d2, offsets: [0, 8, 16, 16, 27] }, validity: [0b____1011] } |
+--------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------+


ast            : try_parse_json(NULL)
raw expr       : try_parse_json(NULL)
checked expr   : try_parse_json<String NULL>(CAST(NULL AS String NULL))
optimized expr : NULL
output type    : Variant NULL
output domain  : {NULL}
output         : NULL


ast            : try_parse_json('nuLL')
raw expr       : try_parse_json('nuLL')
checked expr   : try_parse_json<String>("nuLL")
optimized expr : NULL
output type    : Variant NULL
output domain  : {NULL}
output         : NULL


ast            : try_parse_json('null')
raw expr       : try_parse_json('null')
checked expr   : try_parse_json<String>("null")
optimized expr : 0x2000000000000000
output type    : Variant NULL
output domain  : Undefined
output         : null


ast            : try_parse_json('true')
raw expr       : try_parse_json('true')
checked expr   : try_parse_json<String>("true")
optimized expr : 0x2000000040000000
output type    : Variant NULL
output domain  : Undefined
output         : true


ast            : try_parse_json('false')
raw expr       : try_parse_json('false')
checked expr   : try_parse_json<String>("false")
optimized expr : 0x2000000030000000
output type    : Variant NULL
output domain  : Undefined
output         : false


ast            : try_parse_json('"测试"')
raw expr       : try_parse_json('"测试"')
checked expr   : try_parse_json<String>("\"测试\"")
optimized expr : 0x2000000010000006e6b58be8af95
output type    : Variant NULL
output domain  : Undefined
output         : "测试"


ast            : try_parse_json('1234')
raw expr       : try_parse_json('1234')
checked expr   : try_parse_json<String>("1234")
optimized expr : 0x20000000200000035004d2
output type    : Variant NULL
output domain  : Undefined
output         : 1234


ast            : try_parse_json('[1,2,3,4]')
raw expr       : try_parse_json('[1,2,3,4]')
checked expr   : try_parse_json<String>("[1,2,3,4]")
optimized expr : 0x80000004200000022000000220000002200000025001500250035004
output type    : Variant NULL
output domain  : Undefined
output         : [1,2,3,4]


ast            : try_parse_json('{"a":"b","c":"d"}')
raw expr       : try_parse_json('{"a":"b","c":"d"}')
checked expr   : try_parse_json<String>("{\"a\":\"b\",\"c\":\"d\"}")
optimized expr : 0x400000021000000110000001100000011000000161636264
output type    : Variant NULL
output domain  : Undefined
output         : {"a":"b","c":"d"}


ast            : try_parse_json(s)
raw expr       : try_parse_json(s::String)
checked expr   : try_parse_json<String>(s)
evaluation:
+--------+-----------------------------------------------------------+-----------------------+
|        | s                                                         | Output                |
+--------+-----------------------------------------------------------+-----------------------+
| Type   | String                                                    | Variant NULL          |
| Domain | {"\"\\\\\\\"abc\\\\\\\"\""..="{\"k\":\"v\",\"a\":\"b\"}"} | Undefined ∪ {NULL}    |
| Row 0  | 'null'                                                    | null                  |
| Row 1  | 'true'                                                    | true                  |
| Row 2  | '9223372036854775807'                                     | 9223372036854775807   |
| Row 3  | '-32768'                                                  | -32768                |
| Row 4  | '1234.5678'                                               | 1234.5678             |
| Row 5  | '1.912e2'                                                 | 191.2                 |
| Row 6  | '"\\\"abc\\\""'                                           | "\"abc\""             |
| Row 7  | '"databend"'                                              | "databend"            |
| Row 8  | '{"k":"v","a":"b"}'                                       | {"a":"b","k":"v"}     |
| Row 9  | '[1,2,3,["a","b","c"]]'                                   | [1,2,3,["a","b","c"]] |
+--------+-----------------------------------------------------------+-----------------------+
evaluation (internal):

| Column | Data                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 |
+--------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| s      | StringColumn { data: 0x6e756c6c74727565393232333337323033363835343737353830372d3332373638313233342e35363738312e3931326532225c5c5c226162635c5c5c2222226461746162656e64227b226b223a2276222c2261223a2262227d5b312c322c332c5b2261222c2262222c2263225d5d, offsets: [0, 4, 8, 27, 33, 42, 49, 62, 72, 89, 110] }                                                                                                                                                                                                           |
| Output | NullableColumn { column: StringColumn { data: 0x200000000000000020000000400000002000000020000009507fffffffffffffff200000002000000340800020000000200000096040934a456d5cfaad2000000020000009604067e6666666666620000000100000075c226162635c2220000000100000086461746162656e644000000210000001100000011000000110000001616b6276800000042000000220000002200000025000001350015002500380000003100000011000000110000001616263, offsets: [0, 8, 16, 33, 44, 61, 78, 93, 109, 133, 178] }, validity: [0b11111111, 0b______11] } |



ast            : try_parse_json(s)
raw expr       : try_parse_json(s::String NULL)
checked expr   : try_parse_json<String NULL>(s)
evaluation:
+--------+-----------------------+--------------------+
|        | s                     | Output             |
+--------+-----------------------+--------------------+
| Type   | String NULL           | Variant NULL       |
| Domain | {""..="ttt"} ∪ {NULL} | Undefined ∪ {NULL} |
| Row 0  | 'true'                | true               |
| Row 1  | 'ttt'                 | NULL               |
| Row 2  | NULL                  | NULL               |
| Row 3  | '1234'                | 1234               |
+--------+-----------------------+--------------------+
evaluation (internal):
+--------+-----------------------------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                                          |
+--------+-----------------------------------------------------------------------------------------------------------------------------------------------+
| s      | NullableColumn { column: StringColumn { data: 0x7472756574747431323334, offsets: [0, 4, 7, 7, 11] }, validity: [0b____1011] }                 |
| Output | NullableColumn { column: StringColumn { data: 0x200000004000000020000000200000035004d2, offsets: [0, 8, 8, 8, 19] }, validity: [0b____1001] } |
+--------+-----------------------------------------------------------------------------------------------------------------------------------------------+


ast            : check_json(NULL)
raw expr       : check_json(NULL)
checked expr   : check_json<String NULL>(CAST(NULL AS String NULL))
optimized expr : NULL
output type    : String NULL
output domain  : {NULL}
output         : NULL


ast            : check_json('true')
raw expr       : check_json('true')
checked expr   : check_json<String>("true")
optimized expr : NULL
output type    : String NULL
output domain  : {NULL}
output         : NULL


ast            : check_json('nuLL')
raw expr       : check_json('nuLL')
checked expr   : check_json<String>("nuLL")
optimized expr : "expected ident, pos 3"
output type    : String NULL
output domain  : {"expected ident, pos 3"..="expected ident, pos 3"}
output         : 'expected ident, pos 3'


ast            : check_json(s)
raw expr       : check_json(s::String)
checked expr   : check_json<String>(s)
evaluation:
+--------+------------------+-------------------------+
|        | s                | Output                  |
+--------+------------------+-------------------------+
| Type   | String           | String NULL             |
| Domain | {"abc"..="true"} | {""..} ∪ {NULL}         |
| Row 0  | 'null'           | NULL                    |
| Row 1  | 'abc'            | 'expected value, pos 1' |
| Row 2  | 'true'           | NULL                    |
+--------+------------------+-------------------------+
evaluation (internal):
+--------+-------------------------------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                                            |
+--------+-------------------------------------------------------------------------------------------------------------------------------------------------+
| s      | StringColumn { data: 0x6e756c6c61626374727565, offsets: [0, 4, 7, 11] }                                                                         |
| Output | NullableColumn { column: StringColumn { data: 0x65787065637465642076616c75652c20706f732031, offsets: [0, 0, 21, 21] }, validity: [0b_____010] } |
+--------+-------------------------------------------------------------------------------------------------------------------------------------------------+


ast            : check_json(s)
raw expr       : check_json(s::String NULL)
checked expr   : check_json<String NULL>(s)
evaluation:
+--------+-----------------------+-------------------------+
|        | s                     | Output                  |
+--------+-----------------------+-------------------------+
| Type   | String NULL           | String NULL             |
| Domain | {""..="ttt"} ∪ {NULL} | {""..} ∪ {NULL}         |
| Row 0  | 'true'                | NULL                    |
| Row 1  | 'ttt'                 | 'expected ident, pos 2' |
| Row 2  | NULL                  | NULL                    |
| Row 3  | '1234'                | NULL                    |
+--------+-----------------------+-------------------------+
evaluation (internal):
+--------+-----------------------------------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                                                |
+--------+-----------------------------------------------------------------------------------------------------------------------------------------------------+
| s      | NullableColumn { column: StringColumn { data: 0x7472756574747431323334, offsets: [0, 4, 7, 7, 11] }, validity: [0b____1011] }                       |
| Output | NullableColumn { column: StringColumn { data: 0x6578706563746564206964656e742c20706f732032, offsets: [0, 0, 21, 21, 21] }, validity: [0b____0010] } |
+--------+-----------------------------------------------------------------------------------------------------------------------------------------------------+


ast            : length(parse_json('1234'))
raw expr       : length(parse_json('1234'))
checked expr   : length<Variant NULL>(CAST(parse_json<String>("1234") AS Variant NULL))
optimized expr : NULL
output type    : UInt32 NULL
output domain  : {NULL}
output         : NULL


ast            : length(parse_json('[1,2,3,4]'))
raw expr       : length(parse_json('[1,2,3,4]'))
checked expr   : length<Variant NULL>(CAST(parse_json<String>("[1,2,3,4]") AS Variant NULL))
optimized expr : 4_u32
output type    : UInt32 NULL
output domain  : {4..=4}
output         : 4


ast            : length(parse_json('{"k":"v"}'))
raw expr       : length(parse_json('{"k":"v"}'))
checked expr   : length<Variant NULL>(CAST(parse_json<String>("{\"k\":\"v\"}") AS Variant NULL))
optimized expr : NULL
output type    : UInt32 NULL
output domain  : {NULL}
output         : NULL


ast            : length(parse_json(s))
raw expr       : length(parse_json(s::String))
checked expr   : length<Variant NULL>(CAST(parse_json<String>(s) AS Variant NULL))
evaluation:
+--------+----------------------------------+-------------+
|        | s                                | Output      |
+--------+----------------------------------+-------------+
| Type   | String                           | UInt32 NULL |
| Domain | {"[\"a\",\"b\",\"c\"]"..="true"} | Unknown     |
| Row 0  | 'true'                           | NULL        |
| Row 1  | '[1,2,3,4]'                      | 4           |
| Row 2  | '["a","b","c"]'                  | 3           |
+--------+----------------------------------+-------------+
evaluation (internal):
+--------+--------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                   |
+--------+--------------------------------------------------------------------------------------------------------+
| s      | StringColumn { data: 0x747275655b312c322c332c345d5b2261222c2262222c2263225d, offsets: [0, 4, 13, 26] } |
| Output | NullableColumn { column: UInt32([0, 4, 3]), validity: [0b_____110] }                                   |
+--------+--------------------------------------------------------------------------------------------------------+


ast            : length(parse_json(s))
raw expr       : length(parse_json(s::String NULL))
checked expr   : length<Variant NULL>(parse_json<String NULL>(s))
evaluation:
+--------+------------------------+-------------+
|        | s                      | Output      |
+--------+------------------------+-------------+
| Type   | String NULL            | UInt32 NULL |
| Domain | {""..="true"} ∪ {NULL} | Unknown     |
| Row 0  | 'true'                 | NULL        |
| Row 1  | '[1,2,3,4]'            | 4           |
| Row 2  | NULL                   | NULL        |
| Row 3  | '["a","b","c"]'        | 3           |
+--------+------------------------+-------------+
evaluation (internal):
+--------+---------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                                                          |
+--------+---------------------------------------------------------------------------------------------------------------------------------------------------------------+
| s      | NullableColumn { column: StringColumn { data: 0x747275655b312c322c332c345d5b2261222c2262222c2263225d, offsets: [0, 4, 13, 13, 26] }, validity: [0b____1011] } |
| Output | NullableColumn { column: UInt32([0, 4, 0, 3]), validity: [0b____1010] }                                                                                       |
+--------+---------------------------------------------------------------------------------------------------------------------------------------------------------------+


ast            : json_object_keys(parse_json('[1,2,3,4]'))
raw expr       : json_object_keys(parse_json('[1,2,3,4]'))
checked expr   : json_object_keys<Variant NULL>(CAST(parse_json<String>("[1,2,3,4]") AS Variant NULL))
optimized expr : NULL
output type    : Variant NULL
output domain  : {NULL}
output         : NULL


ast            : json_object_keys(parse_json('{"k1":"v1","k2":"v2"}'))
raw expr       : json_object_keys(parse_json('{"k1":"v1","k2":"v2"}'))
checked expr   : json_object_keys<Variant NULL>(CAST(parse_json<String>("{\"k1\":\"v1\",\"k2\":\"v2\"}") AS Variant NULL))
optimized expr : 0x8000000210000002100000026b316b32
output type    : Variant NULL
output domain  : Undefined
output         : ["k1","k2"]


ast            : json_object_keys(parse_json(s))
raw expr       : json_object_keys(parse_json(s::String))
checked expr   : json_object_keys<Variant NULL>(CAST(parse_json<String>(s) AS Variant NULL))
evaluation:
+--------+-------------------------------------------------+--------------+
|        | s                                               | Output       |
+--------+-------------------------------------------------+--------------+
| Type   | String                                          | Variant NULL |
| Domain | {"[1,2,3,4]"..="{\"k1\":\"v1\",\"k2\":\"v2\"}"} | Unknown      |
| Row 0  | '[1,2,3,4]'                                     | NULL         |
| Row 1  | '{"a":"b","c":"d"}'                             | ["a","c"]    |
| Row 2  | '{"k1":"v1","k2":"v2"}'                         | ["k1","k2"]  |
+--------+-------------------------------------------------+--------------+
evaluation (internal):
+--------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                                                              |
+--------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| s      | StringColumn { data: 0x5b312c322c332c345d7b2261223a2262222c2263223a2264227d7b226b31223a227631222c226b32223a227632227d, offsets: [0, 9, 26, 47] }                  |
| Output | NullableColumn { column: StringColumn { data: 0x80000002100000011000000161638000000210000002100000026b316b32, offsets: [0, 0, 14, 30] }, validity: [0b_____110] } |
+--------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------+


ast            : json_object_keys(parse_json(s))
raw expr       : json_object_keys(parse_json(s::String NULL))
checked expr   : json_object_keys<Variant NULL>(parse_json<String NULL>(s))
evaluation:
+--------+-------------------------------------------------+--------------+
|        | s                                               | Output       |
+--------+-------------------------------------------------+--------------+
| Type   | String NULL                                     | Variant NULL |
| Domain | {""..="{\"k1\":\"v1\",\"k2\":\"v2\"}"} ∪ {NULL} | Unknown      |
| Row 0  | '[1,2,3,4]'                                     | NULL         |
| Row 1  | '{"a":"b","c":"d"}'                             | ["a","c"]    |
| Row 2  | NULL                                            | NULL         |
| Row 3  | '{"k1":"v1","k2":"v2"}'                         | ["k1","k2"]  |
+--------+-------------------------------------------------+--------------+
evaluation (internal):
+--------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                                                                                                    |
+--------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| s      | NullableColumn { column: StringColumn { data: 0x5b312c322c332c345d7b2261223a2262222c2263223a2264227d7b226b31223a227631222c226b32223a227632227d, offsets: [0, 9, 26, 26, 47] }, validity: [0b____1011] } |
| Output | NullableColumn { column: StringColumn { data: 0x80000002100000011000000161638000000210000002100000026b316b32, offsets: [0, 0, 14, 14, 30] }, validity: [0b____1010] }                                   |
+--------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+


ast            : parse_json('null')[1]
raw expr       : get(parse_json('null'), 1)
checked expr   : get<Variant, Int64>(parse_json<String>("null"), to_int64<UInt8>(1_u8))
optimized expr : NULL
output type    : Variant NULL
output domain  : {NULL}
output         : NULL


ast            : parse_json('null')['k']
raw expr       : get(parse_json('null'), 'k')
checked expr   : get<Variant, String>(parse_json<String>("null"), "k")
optimized expr : NULL
output type    : Variant NULL
output domain  : {NULL}
output         : NULL


ast            : parse_json('[1,2,3,4]')[1]
raw expr       : get(parse_json('[1,2,3,4]'), 1)
checked expr   : get<Variant, Int64>(parse_json<String>("[1,2,3,4]"), to_int64<UInt8>(1_u8))
optimized expr : 0x20000000200000025002
output type    : Variant NULL
output domain  : Undefined
output         : 2


ast            : parse_json('[1,2,3,4]')[2+3]
raw expr       : get(parse_json('[1,2,3,4]'), plus(2, 3))
checked expr   : get<Variant, Int64>(parse_json<String>("[1,2,3,4]"), to_int64<UInt16>(plus<UInt8, UInt8>(2_u8, 3_u8)))
optimized expr : NULL
output type    : Variant NULL
output domain  : {NULL}
output         : NULL


ast            : parse_json('{"k":"v"}')['k']
raw expr       : get(parse_json('{"k":"v"}'), 'k')
checked expr   : get<Variant, String>(parse_json<String>("{\"k\":\"v\"}"), "k")
optimized expr : 0x200000001000000176
output type    : Variant NULL
output domain  : Undefined
output         : "v"


ast            : parse_json('{"k":"v"}')['x']
raw expr       : get(parse_json('{"k":"v"}'), 'x')
checked expr   : get<Variant, String>(parse_json<String>("{\"k\":\"v\"}"), "x")
optimized expr : NULL
output type    : Variant NULL
output domain  : {NULL}
output         : NULL


ast            : CAST(('a', 'b') AS VARIANT)['2']
raw expr       : get(CAST(tuple('a', 'b') AS Variant), '2')
checked expr   : get<Variant, String>(to_variant<T0=Tuple(String, String)><T0>(tuple<String, String>("a", "b")), "2")
optimized expr : 0x200000001000000162
output type    : Variant NULL
output domain  : Undefined
output         : "b"


ast            : parse_json(s)[i]
raw expr       : get(parse_json(s::String), i::UInt64)
checked expr   : get<Variant, Int64>(parse_json<String>(s), to_int64<UInt64>(i))
evaluation:
+--------+----------------------------------+---------+--------------+
|        | s                                | i       | Output       |
+--------+----------------------------------+---------+--------------+
| Type   | String                           | UInt64  | Variant NULL |
| Domain | {"[\"a\",\"b\",\"c\"]"..="true"} | {0..=1} | Unknown      |
| Row 0  | 'true'                           | 0       | NULL         |
| Row 1  | '[1,2,3,4]'                      | 0       | 1            |
| Row 2  | '["a","b","c"]'                  | 1       | "b"          |
+--------+----------------------------------+---------+--------------+
evaluation (internal):
+--------+---------------------------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                                        |
+--------+---------------------------------------------------------------------------------------------------------------------------------------------+
| s      | StringColumn { data: 0x747275655b312c322c332c345d5b2261222c2262222c2263225d, offsets: [0, 4, 13, 26] }                                      |
| i      | UInt64([0, 0, 1])                                                                                                                           |
| Output | NullableColumn { column: StringColumn { data: 0x20000000200000025001200000001000000162, offsets: [0, 0, 10, 19] }, validity: [0b_____110] } |
+--------+---------------------------------------------------------------------------------------------------------------------------------------------+


ast            : parse_json(s)[i]
raw expr       : get(parse_json(s::String NULL), i::UInt64 NULL)
checked expr   : get<Variant NULL, Int64 NULL>(parse_json<String NULL>(s), CAST(i AS Int64 NULL))
evaluation:
+--------+------------------------+------------------+--------------+
|        | s                      | i                | Output       |
+--------+------------------------+------------------+--------------+
| Type   | String NULL            | UInt64 NULL      | Variant NULL |
| Domain | {""..="true"} ∪ {NULL} | {0..=2} ∪ {NULL} | Unknown      |
| Row 0  | 'true'                 | NULL             | NULL         |
| Row 1  | '[1,2,3,4]'            | 2                | 3            |
| Row 2  | NULL                   | NULL             | NULL         |
| Row 3  | '["a","b","c"]'        | 1                | "b"          |
+--------+------------------------+------------------+--------------+
evaluation (internal):
+--------+---------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                                                          |
+--------+---------------------------------------------------------------------------------------------------------------------------------------------------------------+
| s      | NullableColumn { column: StringColumn { data: 0x747275655b312c322c332c345d5b2261222c2262222c2263225d, offsets: [0, 4, 13, 13, 26] }, validity: [0b____1011] } |
| i      | NullableColumn { column: UInt64([0, 2, 0, 1]), validity: [0b____1010] }                                                                                       |
| Output | NullableColumn { column: StringColumn { data: 0x20000000200000025003200000001000000162, offsets: [0, 0, 10, 10, 19] }, validity: [0b____1010] }               |
+--------+---------------------------------------------------------------------------------------------------------------------------------------------------------------+


ast            : parse_json(s)[k]
raw expr       : get(parse_json(s::String), k::String)
checked expr   : get<Variant, String>(parse_json<String>(s), k)
evaluation:
+--------+------------------------+-------------+--------------+
|        | s                      | k           | Output       |
+--------+------------------------+-------------+--------------+
| Type   | String                 | String      | Variant NULL |
| Domain | {"true"..="{\"k\":1}"} | {"k"..="x"} | Unknown      |
| Row 0  | 'true'                 | 'k'         | NULL         |
| Row 1  | '{"k":1}'              | 'k'         | 1            |
| Row 2  | '{"a":"b"}'            | 'x'         | NULL         |
+--------+------------------------+-------------+--------------+
evaluation (internal):
+--------+---------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                      |
+--------+---------------------------------------------------------------------------------------------------------------------------+
| s      | StringColumn { data: 0x747275657b226b223a317d7b2261223a2262227d, offsets: [0, 4, 11, 20] }                                |
| k      | StringColumn { data: 0x6b6b78, offsets: [0, 1, 2, 3] }                                                                    |
| Output | NullableColumn { column: StringColumn { data: 0x20000000200000025001, offsets: [0, 0, 10, 10] }, validity: [0b_____010] } |
+--------+---------------------------------------------------------------------------------------------------------------------------+


ast            : parse_json(s)[k]
raw expr       : get(parse_json(s::String NULL), k::String)
checked expr   : get<Variant NULL, String NULL>(parse_json<String NULL>(s), CAST(k AS String NULL))
evaluation:
+--------+-----------------------------+------------+--------------+
|        | s                           | k          | Output       |
+--------+-----------------------------+------------+--------------+
| Type   | String NULL                 | String     | Variant NULL |
| Domain | {""..="{\"k\":1}"} ∪ {NULL} | {""..="k"} | Unknown      |
| Row 0  | 'true'                      | ''         | NULL         |
| Row 1  | '{"k":1}'                   | 'k'        | 1            |
| Row 2  | NULL                        | ''         | NULL         |
| Row 3  | '{"a":"b"}'                 | 'a'        | "b"          |
+--------+-----------------------------+------------+--------------+
evaluation (internal):
+--------+---------------------------------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                                              |
+--------+---------------------------------------------------------------------------------------------------------------------------------------------------+
| s      | NullableColumn { column: StringColumn { data: 0x747275657b226b223a317d7b2261223a2262227d, offsets: [0, 4, 11, 11, 20] }, validity: [0b____1011] } |
| k      | StringColumn { data: 0x6b61, offsets: [0, 0, 1, 1, 2] }                                                                                           |
| Output | NullableColumn { column: StringColumn { data: 0x20000000200000025001200000001000000162, offsets: [0, 0, 10, 10, 19] }, validity: [0b____1010] }   |
+--------+---------------------------------------------------------------------------------------------------------------------------------------------------+


ast            : get_ignore_case(parse_json('{"Aa":1, "aA":2, "aa":3}'), 'AA')
raw expr       : get_ignore_case(parse_json('{"Aa":1, "aA":2, "aa":3}'), 'AA')
checked expr   : get_ignore_case<Variant, String>(parse_json<String>("{\"Aa\":1, \"aA\":2, \"aa\":3}"), "AA")
optimized expr : 0x20000000200000025001
output type    : Variant NULL
output domain  : Undefined
output         : 1


ast            : get_ignore_case(parse_json('{"Aa":1, "aA":2, "aa":3}'), 'aa')
raw expr       : get_ignore_case(parse_json('{"Aa":1, "aA":2, "aa":3}'), 'aa')
checked expr   : get_ignore_case<Variant, String>(parse_json<String>("{\"Aa\":1, \"aA\":2, \"aa\":3}"), "aa")
optimized expr : 0x20000000200000025003
output type    : Variant NULL
output domain  : Undefined
output         : 3


ast            : get_ignore_case(parse_json('{"Aa":1, "aA":2, "aa":3}'), 'bb')
raw expr       : get_ignore_case(parse_json('{"Aa":1, "aA":2, "aa":3}'), 'bb')
checked expr   : get_ignore_case<Variant, String>(parse_json<String>("{\"Aa\":1, \"aA\":2, \"aa\":3}"), "bb")
optimized expr : NULL
output type    : Variant NULL
output domain  : {NULL}
output         : NULL


ast            : get_ignore_case(parse_json(s), k)
raw expr       : get_ignore_case(parse_json(s::String), k::String)
checked expr   : get_ignore_case<Variant, String>(parse_json<String>(s), k)
evaluation:
+--------+------------------------+-------------+--------------+
|        | s                      | k           | Output       |
+--------+------------------------+-------------+--------------+
| Type   | String                 | String      | Variant NULL |
| Domain | {"true"..="{\"k\":1}"} | {"A"..="k"} | Unknown      |
| Row 0  | 'true'                 | 'k'         | NULL         |
| Row 1  | '{"k":1}'              | 'K'         | 1            |
| Row 2  | '{"a":"b"}'            | 'A'         | "b"          |
+--------+------------------------+-------------+--------------+
evaluation (internal):
+--------+---------------------------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                                        |
+--------+---------------------------------------------------------------------------------------------------------------------------------------------+
| s      | StringColumn { data: 0x747275657b226b223a317d7b2261223a2262227d, offsets: [0, 4, 11, 20] }                                                  |
| k      | StringColumn { data: 0x6b4b41, offsets: [0, 1, 2, 3] }                                                                                      |
| Output | NullableColumn { column: StringColumn { data: 0x20000000200000025001200000001000000162, offsets: [0, 0, 10, 19] }, validity: [0b_____110] } |
+--------+---------------------------------------------------------------------------------------------------------------------------------------------+


ast            : get_ignore_case(parse_json(s), k)
raw expr       : get_ignore_case(parse_json(s::String NULL), k::String)
checked expr   : get_ignore_case<Variant NULL, String NULL>(parse_json<String NULL>(s), CAST(k AS String NULL))
evaluation:
+--------+-----------------------------+------------+--------------+
|        | s                           | k          | Output       |
+--------+-----------------------------+------------+--------------+
| Type   | String NULL                 | String     | Variant NULL |
| Domain | {""..="{\"k\":1}"} ∪ {NULL} | {""..="K"} | Unknown      |
| Row 0  | 'true'                      | ''         | NULL         |
| Row 1  | '{"k":1}'                   | 'K'        | 1            |
| Row 2  | NULL                        | ''         | NULL         |
| Row 3  | '{"a":"b"}'                 | 'A'        | "b"          |
+--------+-----------------------------+------------+--------------+
evaluation (internal):
+--------+---------------------------------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                                              |
+--------+---------------------------------------------------------------------------------------------------------------------------------------------------+
| s      | NullableColumn { column: StringColumn { data: 0x747275657b226b223a317d7b2261223a2262227d, offsets: [0, 4, 11, 11, 20] }, validity: [0b____1011] } |
| k      | StringColumn { data: 0x4b41, offsets: [0, 0, 1, 1, 2] }                                                                                           |
| Output | NullableColumn { column: StringColumn { data: 0x20000000200000025001200000001000000162, offsets: [0, 0, 10, 10, 19] }, validity: [0b____1010] }   |
+--------+---------------------------------------------------------------------------------------------------------------------------------------------------+


ast            : get_path(parse_json('[[1,2],3]'), '[0]')
raw expr       : get_path(parse_json('[[1,2],3]'), '[0]')
checked expr   : get_path<Variant, String>(parse_json<String>("[[1,2],3]"), "[0]")
optimized expr : 0x80000002200000022000000250015002
output type    : Variant NULL
output domain  : Undefined
output         : [1,2]


ast            : get_path(parse_json('[[1,2],3]'), '[0][1]')
raw expr       : get_path(parse_json('[[1,2],3]'), '[0][1]')
checked expr   : get_path<Variant, String>(parse_json<String>("[[1,2],3]"), "[0][1]")
optimized expr : 0x20000000200000025002
output type    : Variant NULL
output domain  : Undefined
output         : 2


ast            : get_path(parse_json('[1,2,3]'), '[0]')
raw expr       : get_path(parse_json('[1,2,3]'), '[0]')
checked expr   : get_path<Variant, String>(parse_json<String>("[1,2,3]"), "[0]")
optimized expr : 0x20000000200000025001
output type    : Variant NULL
output domain  : Undefined
output         : 1


ast            : get_path(parse_json('[1,2,3]'), 'k2:k3')
raw expr       : get_path(parse_json('[1,2,3]'), 'k2:k3')
checked expr   : get_path<Variant, String>(parse_json<String>("[1,2,3]"), "k2:k3")
optimized expr : NULL
output type    : Variant NULL
output domain  : {NULL}
output         : NULL


ast            : get_path(parse_json('{"a":{"b":2}}'), '["a"]["b"]')
raw expr       : get_path(parse_json('{"a":{"b":2}}'), '["a"]["b"]')
checked expr   : get_path<Variant, String>(parse_json<String>("{\"a\":{\"b\":2}}"), "[\"a\"][\"b\"]")
optimized expr : 0x20000000200000025002
output type    : Variant NULL
output domain  : Undefined
output         : 2


ast            : get_path(parse_json('{"a":{"b":2}}'), 'a:b')
raw expr       : get_path(parse_json('{"a":{"b":2}}'), 'a:b')
checked expr   : get_path<Variant, String>(parse_json<String>("{\"a\":{\"b\":2}}"), "a:b")
optimized expr : 0x20000000200000025002
output type    : Variant NULL
output domain  : Undefined
output         : 2


ast            : get_path(parse_json('{"a":{"b":2}}'), '["a"]')
raw expr       : get_path(parse_json('{"a":{"b":2}}'), '["a"]')
checked expr   : get_path<Variant, String>(parse_json<String>("{\"a\":{\"b\":2}}"), "[\"a\"]")
optimized expr : 0x400000011000000120000002625002
output type    : Variant NULL
output domain  : Undefined
output         : {"b":2}


ast            : get_path(parse_json('{"a":{"b":2}}'), 'a')
raw expr       : get_path(parse_json('{"a":{"b":2}}'), 'a')
checked expr   : get_path<Variant, String>(parse_json<String>("{\"a\":{\"b\":2}}"), "a")
optimized expr : 0x400000011000000120000002625002
output type    : Variant NULL
output domain  : Undefined
output         : {"b":2}


ast            : get_path(parse_json(s), k)
raw expr       : get_path(parse_json(s::String), k::String)
checked expr   : get_path<Variant, String>(parse_json<String>(s), k)
evaluation:
+--------+---------------------------------+-------------------+--------------+
|        | s                               | k                 | Output       |
+--------+---------------------------------+-------------------+--------------+
| Type   | String                          | String            | Variant NULL |
| Domain | {"[\"a\",\"b\"]"..="{\"k\":1}"} | {"[\"a\"]"..="k"} | Unknown      |
| Row 0  | 'true'                          | 'k'               | NULL         |
| Row 1  | '{"k":1}'                       | '["k"]'           | 1            |
| Row 2  | '["a","b"]'                     | '["a"]'           | NULL         |
+--------+---------------------------------+-------------------+--------------+
evaluation (internal):
+--------+---------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                      |
+--------+---------------------------------------------------------------------------------------------------------------------------+
| s      | StringColumn { data: 0x747275657b226b223a317d5b2261222c2262225d, offsets: [0, 4, 11, 20] }                                |
| k      | StringColumn { data: 0x6b5b226b225d5b2261225d, offsets: [0, 1, 6, 11] }                                                   |
| Output | NullableColumn { column: StringColumn { data: 0x20000000200000025001, offsets: [0, 0, 10, 10] }, validity: [0b_____010] } |
+--------+---------------------------------------------------------------------------------------------------------------------------+


ast            : get_path(parse_json(s), k)
raw expr       : get_path(parse_json(s::String NULL), k::String)
checked expr   : get_path<Variant NULL, String NULL>(parse_json<String NULL>(s), CAST(k AS String NULL))
evaluation:
+--------+-----------------------------+--------------+--------------+
|        | s                           | k            | Output       |
+--------+-----------------------------+--------------+--------------+
| Type   | String NULL                 | String       | Variant NULL |
| Domain | {""..="{\"k\":1}"} ∪ {NULL} | {""..="[0]"} | Unknown      |
| Row 0  | 'true'                      | '[0]'        | NULL         |
| Row 1  | '{"k":1}'                   | '["k"]'      | 1            |
| Row 2  | NULL                        | ''           | NULL         |
| Row 3  | '["a","b"]'                 | '[0]'        | "a"          |
+--------+-----------------------------+--------------+--------------+
evaluation (internal):
+--------+---------------------------------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                                              |
+--------+---------------------------------------------------------------------------------------------------------------------------------------------------+
| s      | NullableColumn { column: StringColumn { data: 0x747275657b226b223a317d5b2261222c2262225d, offsets: [0, 4, 11, 11, 20] }, validity: [0b____1011] } |
| k      | StringColumn { data: 0x5b305d5b226b225d5b305d, offsets: [0, 3, 8, 8, 11] }                                                                        |
| Output | NullableColumn { column: StringColumn { data: 0x20000000200000025001200000001000000161, offsets: [0, 0, 10, 10, 19] }, validity: [0b____1010] }   |
+--------+---------------------------------------------------------------------------------------------------------------------------------------------------+


ast            : json_extract_path_text('[[1,2],3]', '[0]')
raw expr       : json_extract_path_text('[[1,2],3]', '[0]')
checked expr   : json_extract_path_text<String, String>("[[1,2],3]", "[0]")
optimized expr : "[1,2]"
output type    : String NULL
output domain  : {"[1,2]"..="[1,2]"}
output         : '[1,2]'


ast            : json_extract_path_text('[[1,2],3]', '[0][1]')
raw expr       : json_extract_path_text('[[1,2],3]', '[0][1]')
checked expr   : json_extract_path_text<String, String>("[[1,2],3]", "[0][1]")
optimized expr : "2"
output type    : String NULL
output domain  : {"2"..="2"}
output         : '2'


ast            : json_extract_path_text('[1,2,3]', '[0]')
raw expr       : json_extract_path_text('[1,2,3]', '[0]')
checked expr   : json_extract_path_text<String, String>("[1,2,3]", "[0]")
optimized expr : "1"
output type    : String NULL
output domain  : {"1"..="1"}
output         : '1'


ast            : json_extract_path_text('[1,2,3]', 'k2:k3')
raw expr       : json_extract_path_text('[1,2,3]', 'k2:k3')
checked expr   : json_extract_path_text<String, String>("[1,2,3]", "k2:k3")
optimized expr : NULL
output type    : String NULL
output domain  : {NULL}
output         : NULL


ast            : json_extract_path_text('{"a":{"b":2}}', '["a"]["b"]')
raw expr       : json_extract_path_text('{"a":{"b":2}}', '["a"]["b"]')
checked expr   : json_extract_path_text<String, String>("{\"a\":{\"b\":2}}", "[\"a\"][\"b\"]")
optimized expr : "2"
output type    : String NULL
output domain  : {"2"..="2"}
output         : '2'


ast            : json_extract_path_text('{"a":{"b":2}}', 'a:b')
raw expr       : json_extract_path_text('{"a":{"b":2}}', 'a:b')
checked expr   : json_extract_path_text<String, String>("{\"a\":{\"b\":2}}", "a:b")
optimized expr : "2"
output type    : String NULL
output domain  : {"2"..="2"}
output         : '2'


ast            : json_extract_path_text('{"a":{"b":2}}', '["a"]')
raw expr       : json_extract_path_text('{"a":{"b":2}}', '["a"]')
checked expr   : json_extract_path_text<String, String>("{\"a\":{\"b\":2}}", "[\"a\"]")
optimized expr : "{\"b\":2}"
output type    : String NULL
output domain  : {"{\"b\":2}"..="{\"b\":2}"}
output         : '{"b":2}'


ast            : json_extract_path_text('{"a":{"b":2}}', 'a')
raw expr       : json_extract_path_text('{"a":{"b":2}}', 'a')
checked expr   : json_extract_path_text<String, String>("{\"a\":{\"b\":2}}", "a")
optimized expr : "{\"b\":2}"
output type    : String NULL
output domain  : {"{\"b\":2}"..="{\"b\":2}"}
output         : '{"b":2}'


ast            : json_extract_path_text(s, k)
raw expr       : json_extract_path_text(s::String, k::String)
checked expr   : json_extract_path_text<String, String>(s, k)
evaluation:
+--------+---------------------------------+-------------------+-------------+
|        | s                               | k                 | Output      |
+--------+---------------------------------+-------------------+-------------+
| Type   | String                          | String            | String NULL |
| Domain | {"[\"a\",\"b\"]"..="{\"k\":1}"} | {"[\"a\"]"..="k"} | Unknown     |
| Row 0  | 'true'                          | 'k'               | NULL        |
| Row 1  | '{"k":1}'                       | '["k"]'           | '1'         |
| Row 2  | '["a","b"]'                     | '["a"]'           | NULL        |
+--------+---------------------------------+-------------------+-------------+
evaluation (internal):
+--------+-------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                  |
+--------+-------------------------------------------------------------------------------------------------------+
| s      | StringColumn { data: 0x747275657b226b223a317d5b2261222c2262225d, offsets: [0, 4, 11, 20] }            |
| k      | StringColumn { data: 0x6b5b226b225d5b2261225d, offsets: [0, 1, 6, 11] }                               |
| Output | NullableColumn { column: StringColumn { data: 0x31, offsets: [0, 0, 1, 1] }, validity: [0b_____010] } |
+--------+-------------------------------------------------------------------------------------------------------+


ast            : json_extract_path_text(s, k)
raw expr       : json_extract_path_text(s::String NULL, k::String)
checked expr   : json_extract_path_text<String NULL, String NULL>(s, CAST(k AS String NULL))
evaluation:
+--------+-----------------------------+--------------+-------------+
|        | s                           | k            | Output      |
+--------+-----------------------------+--------------+-------------+
| Type   | String NULL                 | String       | String NULL |
| Domain | {""..="{\"k\":1}"} ∪ {NULL} | {""..="[0]"} | Unknown     |
| Row 0  | 'true'                      | '[0]'        | NULL        |
| Row 1  | '{"k":1}'                   | '["k"]'      | '1'         |
| Row 2  | NULL                        | ''           | NULL        |
| Row 3  | '["a","b"]'                 | '[0]'        | '"a"'       |
+--------+-----------------------------+--------------+-------------+
evaluation (internal):
+--------+---------------------------------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                                              |
+--------+---------------------------------------------------------------------------------------------------------------------------------------------------+
| s      | NullableColumn { column: StringColumn { data: 0x747275657b226b223a317d5b2261222c2262225d, offsets: [0, 4, 11, 11, 20] }, validity: [0b____1011] } |
| k      | StringColumn { data: 0x5b305d5b226b225d5b305d, offsets: [0, 3, 8, 8, 11] }                                                                        |
| Output | NullableColumn { column: StringColumn { data: 0x31226122, offsets: [0, 0, 1, 1, 4] }, validity: [0b____1010] }                                    |
+--------+---------------------------------------------------------------------------------------------------------------------------------------------------+


ast            : as_boolean(parse_json('true'))
raw expr       : as_boolean(parse_json('true'))
checked expr   : as_boolean<Variant>(parse_json<String>("true"))
optimized expr : true
output type    : Boolean NULL
output domain  : {TRUE}
output         : true


ast            : as_boolean(parse_json('123'))
raw expr       : as_boolean(parse_json('123'))
checked expr   : as_boolean<Variant>(parse_json<String>("123"))
optimized expr : NULL
output type    : Boolean NULL
output domain  : {NULL}
output         : NULL


ast            : as_integer(parse_json('true'))
raw expr       : as_integer(parse_json('true'))
checked expr   : as_integer<Variant>(parse_json<String>("true"))
optimized expr : NULL
output type    : Int64 NULL
output domain  : {NULL}
output         : NULL


ast            : as_integer(parse_json('123'))
raw expr       : as_integer(parse_json('123'))
checked expr   : as_integer<Variant>(parse_json<String>("123"))
optimized expr : 123_i64
output type    : Int64 NULL
output domain  : {123..=123}
output         : 123


ast            : as_float(parse_json('"ab"'))
raw expr       : as_float(parse_json('"ab"'))
checked expr   : as_float<Variant>(parse_json<String>("\"ab\""))
optimized expr : NULL
output type    : Float64 NULL
output domain  : {NULL}
output         : NULL


ast            : as_float(parse_json('12.34'))
raw expr       : as_float(parse_json('12.34'))
checked expr   : as_float<Variant>(parse_json<String>("12.34"))
optimized expr : 12.34_f64
output type    : Float64 NULL
output domain  : {12.34..=12.34}
output         : 12.34


ast            : as_string(parse_json('"ab"'))
raw expr       : as_string(parse_json('"ab"'))
checked expr   : as_string<Variant>(parse_json<String>("\"ab\""))
optimized expr : "ab"
output type    : String NULL
output domain  : {"ab"..="ab"}
output         : 'ab'


ast            : as_string(parse_json('12.34'))
raw expr       : as_string(parse_json('12.34'))
checked expr   : as_string<Variant>(parse_json<String>("12.34"))
optimized expr : NULL
output type    : String NULL
output domain  : {NULL}
output         : NULL


ast            : as_array(parse_json('[1,2,3]'))
raw expr       : as_array(parse_json('[1,2,3]'))
checked expr   : as_array<Variant>(parse_json<String>("[1,2,3]"))
optimized expr : 0x80000003200000022000000220000002500150025003
output type    : Variant NULL
output domain  : Undefined
output         : [1,2,3]


ast            : as_array(parse_json('{"a":"b"}'))
raw expr       : as_array(parse_json('{"a":"b"}'))
checked expr   : as_array<Variant>(parse_json<String>("{\"a\":\"b\"}"))
optimized expr : NULL
output type    : Variant NULL
output domain  : {NULL}
output         : NULL


ast            : as_object(parse_json('[1,2,3]'))
raw expr       : as_object(parse_json('[1,2,3]'))
checked expr   : as_object<Variant>(parse_json<String>("[1,2,3]"))
optimized expr : NULL
output type    : Variant NULL
output domain  : {NULL}
output         : NULL


ast            : as_object(parse_json('{"a":"b"}'))
raw expr       : as_object(parse_json('{"a":"b"}'))
checked expr   : as_object<Variant>(parse_json<String>("{\"a\":\"b\"}"))
optimized expr : 0x4000000110000001100000016162
output type    : Variant NULL
output domain  : Undefined
output         : {"a":"b"}


ast            : as_boolean(parse_json(s))
raw expr       : as_boolean(parse_json(s::String))
checked expr   : as_boolean<Variant>(parse_json<String>(s))
evaluation:
+--------+------------------------------+--------------+
|        | s                            | Output       |
+--------+------------------------------+--------------+
| Type   | String                       | Boolean NULL |
| Domain | {"\"ab\""..="{\"a\":\"b\"}"} | Unknown      |
| Row 0  | 'true'                       | true         |
| Row 1  | '123'                        | NULL         |
| Row 2  | '12.34'                      | NULL         |
| Row 3  | '"ab"'                       | NULL         |
| Row 4  | '[1,2,3]'                    | NULL         |
| Row 5  | '{"a":"b"}'                  | NULL         |
+--------+------------------------------+--------------+
evaluation (internal):
+--------+-------------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                          |
+--------+-------------------------------------------------------------------------------------------------------------------------------+
| s      | StringColumn { data: 0x7472756531323331322e3334226162225b312c322c335d7b2261223a2262227d, offsets: [0, 4, 7, 12, 16, 23, 32] } |
| Output | NullableColumn { column: Boolean([0b__000001]), validity: [0b__000001] }                                                      |
+--------+-------------------------------------------------------------------------------------------------------------------------------+


ast            : as_boolean(try_parse_json(s))
raw expr       : as_boolean(try_parse_json(s::String))
checked expr   : as_boolean<Variant NULL>(try_parse_json<String>(s))
evaluation:
+--------+------------------------------+------------------------+
|        | s                            | Output                 |
+--------+------------------------------+------------------------+
| Type   | String                       | Boolean NULL           |
| Domain | {"\"ab\""..="{\"a\":\"b\"}"} | {FALSE, TRUE} ∪ {NULL} |
| Row 0  | 'true'                       | true                   |
| Row 1  | '123'                        | NULL                   |
| Row 2  | '12.34'                      | NULL                   |
| Row 3  | '"ab"'                       | NULL                   |
| Row 4  | '[1,2,3]'                    | NULL                   |
| Row 5  | '{"a":"b"}'                  | NULL                   |
+--------+------------------------------+------------------------+
evaluation (internal):
+--------+-------------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                          |
+--------+-------------------------------------------------------------------------------------------------------------------------------+
| s      | StringColumn { data: 0x7472756531323331322e3334226162225b312c322c335d7b2261223a2262227d, offsets: [0, 4, 7, 12, 16, 23, 32] } |
| Output | NullableColumn { column: Boolean([0b__000001]), validity: [0b__000001] }                                                      |
+--------+-------------------------------------------------------------------------------------------------------------------------------+


ast            : as_integer(parse_json(s))
raw expr       : as_integer(parse_json(s::String))
checked expr   : as_integer<Variant>(parse_json<String>(s))
evaluation:
+--------+------------------------------+------------+
|        | s                            | Output     |
+--------+------------------------------+------------+
| Type   | String                       | Int64 NULL |
| Domain | {"\"ab\""..="{\"a\":\"b\"}"} | Unknown    |
| Row 0  | 'true'                       | NULL       |
| Row 1  | '123'                        | 123        |
| Row 2  | '12.34'                      | NULL       |
| Row 3  | '"ab"'                       | NULL       |
| Row 4  | '[1,2,3]'                    | NULL       |
| Row 5  | '{"a":"b"}'                  | NULL       |
+--------+------------------------------+------------+
evaluation (internal):
+--------+-------------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                          |
+--------+-------------------------------------------------------------------------------------------------------------------------------+
| s      | StringColumn { data: 0x7472756531323331322e3334226162225b312c322c335d7b2261223a2262227d, offsets: [0, 4, 7, 12, 16, 23, 32] } |
| Output | NullableColumn { column: Int64([0, 123, 0, 0, 0, 0]), validity: [0b__000010] }                                                |
+--------+-------------------------------------------------------------------------------------------------------------------------------+


ast            : as_integer(try_parse_json(s))
raw expr       : as_integer(try_parse_json(s::String))
checked expr   : as_integer<Variant NULL>(try_parse_json<String>(s))
evaluation:
+--------+------------------------------+-------------------------------------------------------+
|        | s                            | Output                                                |
+--------+------------------------------+-------------------------------------------------------+
| Type   | String                       | Int64 NULL                                            |
| Domain | {"\"ab\""..="{\"a\":\"b\"}"} | {-9223372036854775808..=9223372036854775807} ∪ {NULL} |
| Row 0  | 'true'                       | NULL                                                  |
| Row 1  | '123'                        | 123                                                   |
| Row 2  | '12.34'                      | NULL                                                  |
| Row 3  | '"ab"'                       | NULL                                                  |
| Row 4  | '[1,2,3]'                    | NULL                                                  |
| Row 5  | '{"a":"b"}'                  | NULL                                                  |
+--------+------------------------------+-------------------------------------------------------+
evaluation (internal):
+--------+-------------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                          |
+--------+-------------------------------------------------------------------------------------------------------------------------------+
| s      | StringColumn { data: 0x7472756531323331322e3334226162225b312c322c335d7b2261223a2262227d, offsets: [0, 4, 7, 12, 16, 23, 32] } |
| Output | NullableColumn { column: Int64([0, 123, 0, 0, 0, 0]), validity: [0b__000010] }                                                |
+--------+-------------------------------------------------------------------------------------------------------------------------------+


ast            : as_float(parse_json(s))
raw expr       : as_float(parse_json(s::String))
checked expr   : as_float<Variant>(parse_json<String>(s))
evaluation:
+--------+------------------------------+--------------+
|        | s                            | Output       |
+--------+------------------------------+--------------+
| Type   | String                       | Float64 NULL |
| Domain | {"\"ab\""..="{\"a\":\"b\"}"} | Unknown      |
| Row 0  | 'true'                       | NULL         |
| Row 1  | '123'                        | 123          |
| Row 2  | '12.34'                      | 12.34        |
| Row 3  | '"ab"'                       | NULL         |
| Row 4  | '[1,2,3]'                    | NULL         |
| Row 5  | '{"a":"b"}'                  | NULL         |
+--------+------------------------------+--------------+
evaluation (internal):
+--------+-------------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                          |
+--------+-------------------------------------------------------------------------------------------------------------------------------+
| s      | StringColumn { data: 0x7472756531323331322e3334226162225b312c322c335d7b2261223a2262227d, offsets: [0, 4, 7, 12, 16, 23, 32] } |
| Output | NullableColumn { column: Float64([0, 123, 12.34, 0, 0, 0]), validity: [0b__000110] }                                          |
+--------+-------------------------------------------------------------------------------------------------------------------------------+


ast            : as_float(try_parse_json(s))
raw expr       : as_float(try_parse_json(s::String))
checked expr   : as_float<Variant NULL>(try_parse_json<String>(s))
evaluation:
+--------+------------------------------+-----------------------+
|        | s                            | Output                |
+--------+------------------------------+-----------------------+
| Type   | String                       | Float64 NULL          |
| Domain | {"\"ab\""..="{\"a\":\"b\"}"} | {-inf..=NaN} ∪ {NULL} |
| Row 0  | 'true'                       | NULL                  |
| Row 1  | '123'                        | 123                   |
| Row 2  | '12.34'                      | 12.34                 |
| Row 3  | '"ab"'                       | NULL                  |
| Row 4  | '[1,2,3]'                    | NULL                  |
| Row 5  | '{"a":"b"}'                  | NULL                  |
+--------+------------------------------+-----------------------+
evaluation (internal):
+--------+-------------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                          |
+--------+-------------------------------------------------------------------------------------------------------------------------------+
| s      | StringColumn { data: 0x7472756531323331322e3334226162225b312c322c335d7b2261223a2262227d, offsets: [0, 4, 7, 12, 16, 23, 32] } |
| Output | NullableColumn { column: Float64([0, 123, 12.34, 0, 0, 0]), validity: [0b__000110] }                                          |
+--------+-------------------------------------------------------------------------------------------------------------------------------+


ast            : as_string(parse_json(s))
raw expr       : as_string(parse_json(s::String))
checked expr   : as_string<Variant>(parse_json<String>(s))
evaluation:
+--------+------------------------------+-------------+
|        | s                            | Output      |
+--------+------------------------------+-------------+
| Type   | String                       | String NULL |
| Domain | {"\"ab\""..="{\"a\":\"b\"}"} | Unknown     |
| Row 0  | 'true'                       | NULL        |
| Row 1  | '123'                        | NULL        |
| Row 2  | '12.34'                      | NULL        |
| Row 3  | '"ab"'                       | 'ab'        |
| Row 4  | '[1,2,3]'                    | NULL        |
| Row 5  | '{"a":"b"}'                  | NULL        |
+--------+------------------------------+-------------+
evaluation (internal):
+--------+-------------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                          |
+--------+-------------------------------------------------------------------------------------------------------------------------------+
| s      | StringColumn { data: 0x7472756531323331322e3334226162225b312c322c335d7b2261223a2262227d, offsets: [0, 4, 7, 12, 16, 23, 32] } |
| Output | NullableColumn { column: StringColumn { data: 0x6162, offsets: [0, 0, 0, 0, 2, 2, 2] }, validity: [0b__001000] }              |
+--------+-------------------------------------------------------------------------------------------------------------------------------+


ast            : as_string(try_parse_json(s))
raw expr       : as_string(try_parse_json(s::String))
checked expr   : as_string<Variant NULL>(try_parse_json<String>(s))
evaluation:
+--------+------------------------------+-----------------+
|        | s                            | Output          |
+--------+------------------------------+-----------------+
| Type   | String                       | String NULL     |
| Domain | {"\"ab\""..="{\"a\":\"b\"}"} | {""..} ∪ {NULL} |
| Row 0  | 'true'                       | NULL            |
| Row 1  | '123'                        | NULL            |
| Row 2  | '12.34'                      | NULL            |
| Row 3  | '"ab"'                       | 'ab'            |
| Row 4  | '[1,2,3]'                    | NULL            |
| Row 5  | '{"a":"b"}'                  | NULL            |
+--------+------------------------------+-----------------+
evaluation (internal):
+--------+-------------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                          |
+--------+-------------------------------------------------------------------------------------------------------------------------------+
| s      | StringColumn { data: 0x7472756531323331322e3334226162225b312c322c335d7b2261223a2262227d, offsets: [0, 4, 7, 12, 16, 23, 32] } |
| Output | NullableColumn { column: StringColumn { data: 0x6162, offsets: [0, 0, 0, 0, 2, 2, 2] }, validity: [0b__001000] }              |
+--------+-------------------------------------------------------------------------------------------------------------------------------+


ast            : as_array(parse_json(s))
raw expr       : as_array(parse_json(s::String))
checked expr   : as_array<Variant>(parse_json<String>(s))
evaluation:
+--------+------------------------------+--------------+
|        | s                            | Output       |
+--------+------------------------------+--------------+
| Type   | String                       | Variant NULL |
| Domain | {"\"ab\""..="{\"a\":\"b\"}"} | Unknown      |
| Row 0  | 'true'                       | NULL         |
| Row 1  | '123'                        | NULL         |
| Row 2  | '12.34'                      | NULL         |
| Row 3  | '"ab"'                       | NULL         |
| Row 4  | '[1,2,3]'                    | [1,2,3]      |
| Row 5  | '{"a":"b"}'                  | NULL         |
+--------+------------------------------+--------------+
evaluation (internal):
+--------+------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                                                       |
+--------+------------------------------------------------------------------------------------------------------------------------------------------------------------+
| s      | StringColumn { data: 0x7472756531323331322e3334226162225b312c322c335d7b2261223a2262227d, offsets: [0, 4, 7, 12, 16, 23, 32] }                              |
| Output | NullableColumn { column: StringColumn { data: 0x80000003200000022000000220000002500150025003, offsets: [0, 0, 0, 0, 0, 22, 22] }, validity: [0b__010000] } |
+--------+------------------------------------------------------------------------------------------------------------------------------------------------------------+


ast            : as_array(try_parse_json(s))
raw expr       : as_array(try_parse_json(s::String))
checked expr   : as_array<Variant NULL>(try_parse_json<String>(s))
evaluation:
+--------+------------------------------+--------------------+
|        | s                            | Output             |
+--------+------------------------------+--------------------+
| Type   | String                       | Variant NULL       |
| Domain | {"\"ab\""..="{\"a\":\"b\"}"} | Undefined ∪ {NULL} |
| Row 0  | 'true'                       | NULL               |
| Row 1  | '123'                        | NULL               |
| Row 2  | '12.34'                      | NULL               |
| Row 3  | '"ab"'                       | NULL               |
| Row 4  | '[1,2,3]'                    | [1,2,3]            |
| Row 5  | '{"a":"b"}'                  | NULL               |
+--------+------------------------------+--------------------+
evaluation (internal):
+--------+------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                                                       |
+--------+------------------------------------------------------------------------------------------------------------------------------------------------------------+
| s      | StringColumn { data: 0x7472756531323331322e3334226162225b312c322c335d7b2261223a2262227d, offsets: [0, 4, 7, 12, 16, 23, 32] }                              |
| Output | NullableColumn { column: StringColumn { data: 0x80000003200000022000000220000002500150025003, offsets: [0, 0, 0, 0, 0, 22, 22] }, validity: [0b__010000] } |
+--------+------------------------------------------------------------------------------------------------------------------------------------------------------------+


ast            : as_object(parse_json(s))
raw expr       : as_object(parse_json(s::String))
checked expr   : as_object<Variant>(parse_json<String>(s))
evaluation:
+--------+------------------------------+--------------+
|        | s                            | Output       |
+--------+------------------------------+--------------+
| Type   | String                       | Variant NULL |
| Domain | {"\"ab\""..="{\"a\":\"b\"}"} | Unknown      |
| Row 0  | 'true'                       | NULL         |
| Row 1  | '123'                        | NULL         |
| Row 2  | '12.34'                      | NULL         |
| Row 3  | '"ab"'                       | NULL         |
| Row 4  | '[1,2,3]'                    | NULL         |
| Row 5  | '{"a":"b"}'                  | {"a":"b"}    |
+--------+------------------------------+--------------+
evaluation (internal):
+--------+-------------------------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                                      |
+--------+-------------------------------------------------------------------------------------------------------------------------------------------+
| s      | StringColumn { data: 0x7472756531323331322e3334226162225b312c322c335d7b2261223a2262227d, offsets: [0, 4, 7, 12, 16, 23, 32] }             |
| Output | NullableColumn { column: StringColumn { data: 0x4000000110000001100000016162, offsets: [0, 0, 0, 0, 0, 0, 14] }, validity: [0b__100000] } |
+--------+-------------------------------------------------------------------------------------------------------------------------------------------+


ast            : as_object(try_parse_json(s))
raw expr       : as_object(try_parse_json(s::String))
checked expr   : as_object<Variant NULL>(try_parse_json<String>(s))
evaluation:
+--------+------------------------------+--------------------+
|        | s                            | Output             |
+--------+------------------------------+--------------------+
| Type   | String                       | Variant NULL       |
| Domain | {"\"ab\""..="{\"a\":\"b\"}"} | Undefined ∪ {NULL} |
| Row 0  | 'true'                       | NULL               |
| Row 1  | '123'                        | NULL               |
| Row 2  | '12.34'                      | NULL               |
| Row 3  | '"ab"'                       | NULL               |
| Row 4  | '[1,2,3]'                    | NULL               |
| Row 5  | '{"a":"b"}'                  | {"a":"b"}          |
+--------+------------------------------+--------------------+
evaluation (internal):
+--------+-------------------------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                                      |
+--------+-------------------------------------------------------------------------------------------------------------------------------------------+
| s      | StringColumn { data: 0x7472756531323331322e3334226162225b312c322c335d7b2261223a2262227d, offsets: [0, 4, 7, 12, 16, 23, 32] }             |
| Output | NullableColumn { column: StringColumn { data: 0x4000000110000001100000016162, offsets: [0, 0, 0, 0, 0, 0, 14] }, validity: [0b__100000] } |
+--------+-------------------------------------------------------------------------------------------------------------------------------------------+


ast            : to_boolean(parse_json('true'))
raw expr       : to_boolean(parse_json('true'))
checked expr   : to_boolean<Variant>(parse_json<String>("true"))
optimized expr : true
output type    : Boolean
output domain  : {TRUE}
output         : true


error: 
  --> SQL:1:1
  |
1 | to_boolean(parse_json('123'))
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ InvalidCast while evaluating function `to_boolean(123)`



error: 
  --> SQL:1:1
  |
1 | to_boolean(parse_json('"abc"'))
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ InvalidCast while evaluating function `to_boolean("abc")`



ast            : to_uint64(parse_json('123'))
raw expr       : to_uint64(parse_json('123'))
checked expr   : to_uint64<Variant>(parse_json<String>("123"))
optimized expr : 123_u64
output type    : UInt64
output domain  : {123..=123}
output         : 123


error: 
  --> SQL:1:1
  |
1 | to_uint64(parse_json('-123'))
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to cast to type UInt64 while evaluating function `to_uint64(-123)`



error: 
  --> SQL:1:1
  |
1 | to_uint64(parse_json('"abc"'))
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to cast to type UInt64 while evaluating function `to_uint64("abc")`



ast            : to_int64(parse_json('123'))
raw expr       : to_int64(parse_json('123'))
checked expr   : to_int64<Variant>(parse_json<String>("123"))
optimized expr : 123_i64
output type    : Int64
output domain  : {123..=123}
output         : 123


ast            : to_int64(parse_json('-123'))
raw expr       : to_int64(parse_json('-123'))
checked expr   : to_int64<Variant>(parse_json<String>("-123"))
optimized expr : -123_i64
output type    : Int64
output domain  : {-123..=-123}
output         : -123


error: 
  --> SQL:1:1
  |
1 | to_int64(parse_json('"abc"'))
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to cast to type Int64 while evaluating function `to_int64("abc")`



ast            : to_float64(parse_json('12.34'))
raw expr       : to_float64(parse_json('12.34'))
checked expr   : to_float64<Variant>(parse_json<String>("12.34"))
optimized expr : 12.34_f64
output type    : Float64
output domain  : {12.34..=12.34}
output         : 12.34


error: 
  --> SQL:1:1
  |
1 | to_float64(parse_json('"abc"'))
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to cast to type Float64 while evaluating function `to_float64("abc")`



ast            : to_date(parse_json('"2023-01-01"'))
raw expr       : to_date(parse_json('"2023-01-01"'))
checked expr   : to_date<Variant>(parse_json<String>("\"2023-01-01\""))
optimized expr : 19358
output type    : Date
output domain  : {19358..=19358}
output         : '2023-01-01'


error: 
  --> SQL:1:1
  |
1 | to_date(parse_json('"abc"'))
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to cast to type `DATE` while evaluating function `to_date("abc")`



ast            : to_timestamp(parse_json('"2023-01-01 00:00:00"'))
raw expr       : to_timestamp(parse_json('"2023-01-01 00:00:00"'))
checked expr   : to_timestamp<Variant>(parse_json<String>("\"2023-01-01 00:00:00\""))
optimized expr : 1672531200000000
output type    : Timestamp
output domain  : {1672531200000000..=1672531200000000}
output         : '2023-01-01 00:00:00.000000'


error: 
  --> SQL:1:1
  |
1 | to_timestamp(parse_json('"abc"'))
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to cast to type `TIMESTAMP` while evaluating function `to_timestamp("abc")`



ast            : to_string(parse_json('12.34'))
raw expr       : to_string(parse_json('12.34'))
checked expr   : to_string<Variant>(parse_json<String>("12.34"))
optimized expr : "12.34"
output type    : String
output domain  : {"12.34"..="12.34"}
output         : '12.34'


ast            : to_string(parse_json('"abc"'))
raw expr       : to_string(parse_json('"abc"'))
checked expr   : to_string<Variant>(parse_json<String>("\"abc\""))
optimized expr : "abc"
output type    : String
output domain  : {"abc"..="abc"}
output         : 'abc'


ast            : to_boolean(parse_json(s))
raw expr       : to_boolean(parse_json(s::String NULL))
checked expr   : to_boolean<Variant NULL>(parse_json<String NULL>(s))
evaluation:
+--------+------------------------+--------------+
|        | s                      | Output       |
+--------+------------------------+--------------+
| Type   | String NULL            | Boolean NULL |
| Domain | {""..="true"} ∪ {NULL} | Unknown      |
| Row 0  | 'true'                 | true         |
| Row 1  | NULL                   | NULL         |
| Row 2  | 'true'                 | true         |
+--------+------------------------+--------------+
evaluation (internal):
+--------+---------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                |
+--------+---------------------------------------------------------------------------------------------------------------------+
| s      | NullableColumn { column: StringColumn { data: 0x7472756574727565, offsets: [0, 4, 4, 8] }, validity: [0b_____101] } |
| Output | NullableColumn { column: Boolean([0b_____101]), validity: [0b_____101] }                                            |
+--------+---------------------------------------------------------------------------------------------------------------------+


ast            : to_int64(parse_json(s))
raw expr       : to_int64(parse_json(s::String NULL))
checked expr   : to_int64<Variant NULL>(parse_json<String NULL>(s))
evaluation:
+--------+---------------------+------------+
|        | s                   | Output     |
+--------+---------------------+------------+
| Type   | String NULL         | Int64 NULL |
| Domain | {""..="1"} ∪ {NULL} | Unknown    |
| Row 0  | '1'                 | 1          |
| Row 1  | NULL                | NULL       |
| Row 2  | '-10'               | -10        |
+--------+---------------------+------------+
evaluation (internal):
+--------+-------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                        |
+--------+-------------------------------------------------------------------------------------------------------------+
| s      | NullableColumn { column: StringColumn { data: 0x312d3130, offsets: [0, 1, 1, 4] }, validity: [0b_____101] } |
| Output | NullableColumn { column: Int64([1, 0, -10]), validity: [0b_____101] }                                       |
+--------+-------------------------------------------------------------------------------------------------------------+


ast            : to_uint64(parse_json(s))
raw expr       : to_uint64(parse_json(s::String NULL))
checked expr   : to_uint64<Variant NULL>(parse_json<String NULL>(s))
evaluation:
+--------+----------------------+-------------+
|        | s                    | Output      |
+--------+----------------------+-------------+
| Type   | String NULL          | UInt64 NULL |
| Domain | {""..="20"} ∪ {NULL} | Unknown     |
| Row 0  | '1'                  | 1           |
| Row 1  | NULL                 | NULL        |
| Row 2  | '20'                 | 20          |
+--------+----------------------+-------------+
evaluation (internal):
+--------+-----------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                      |
+--------+-----------------------------------------------------------------------------------------------------------+
| s      | NullableColumn { column: StringColumn { data: 0x313230, offsets: [0, 1, 1, 3] }, validity: [0b_____101] } |
| Output | NullableColumn { column: UInt64([1, 0, 20]), validity: [0b_____101] }                                     |
+--------+-----------------------------------------------------------------------------------------------------------+


ast            : to_float64(parse_json(s))
raw expr       : to_float64(parse_json(s::String NULL))
checked expr   : to_float64<Variant NULL>(parse_json<String NULL>(s))
evaluation:
+--------+-------------------------+--------------+
|        | s                       | Output       |
+--------+-------------------------+--------------+
| Type   | String NULL             | Float64 NULL |
| Domain | {""..="100.2"} ∪ {NULL} | Unknown      |
| Row 0  | '1.2'                   | 1.2          |
| Row 1  | NULL                    | NULL         |
| Row 2  | '100.2'                 | 100.2        |
+--------+-------------------------+--------------+
evaluation (internal):
+--------+---------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                |
+--------+---------------------------------------------------------------------------------------------------------------------+
| s      | NullableColumn { column: StringColumn { data: 0x312e323130302e32, offsets: [0, 3, 3, 8] }, validity: [0b_____101] } |
| Output | NullableColumn { column: Float64([1.2, 0, 100.2]), validity: [0b_____101] }                                         |
+--------+---------------------------------------------------------------------------------------------------------------------+


ast            : to_date(parse_json(s))
raw expr       : to_date(parse_json(s::String NULL))
checked expr   : to_date<Variant NULL>(parse_json<String NULL>(s))
evaluation:
+--------+----------------------------------+--------------+
|        | s                                | Output       |
+--------+----------------------------------+--------------+
| Type   | String NULL                      | Date NULL    |
| Domain | {""..="\"2023-10-01\""} ∪ {NULL} | Unknown      |
| Row 0  | '"2020-01-01"'                   | '2020-01-01' |
| Row 1  | NULL                             | NULL         |
| Row 2  | '"2023-10-01"'                   | '2023-10-01' |
+--------+----------------------------------+--------------+
evaluation (internal):
+--------+--------------------------------------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                                                   |
+--------+--------------------------------------------------------------------------------------------------------------------------------------------------------+
| s      | NullableColumn { column: StringColumn { data: 0x22323032302d30312d30312222323032332d31302d303122, offsets: [0, 12, 12, 24] }, validity: [0b_____101] } |
| Output | NullableColumn { column: [18262, 0, 19631], validity: [0b_____101] }                                                                                   |
+--------+--------------------------------------------------------------------------------------------------------------------------------------------------------+


ast            : to_timestamp(parse_json(s))
raw expr       : to_timestamp(parse_json(s::String NULL))
checked expr   : to_timestamp<Variant NULL>(parse_json<String NULL>(s))
evaluation:
+--------+-------------------------------------------+------------------------------+
|        | s                                         | Output                       |
+--------+-------------------------------------------+------------------------------+
| Type   | String NULL                               | Timestamp NULL               |
| Domain | {""..="\"2023-10-01 10:11:12\""} ∪ {NULL} | Unknown                      |
| Row 0  | '"2020-01-01 00:00:00"'                   | '2020-01-01 00:00:00.000000' |
| Row 1  | NULL                                      | NULL                         |
| Row 2  | '"2023-10-01 10:11:12"'                   | '2023-10-01 10:11:12.000000' |
+--------+-------------------------------------------+------------------------------+
evaluation (internal):
+--------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                                                                                       |
+--------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| s      | NullableColumn { column: StringColumn { data: 0x22323032302d30312d30312030303a30303a30302222323032332d31302d30312031303a31313a313222, offsets: [0, 21, 21, 42] }, validity: [0b_____101] } |
| Output | NullableColumn { column: [1577836800000000, 0, 1696155072000000], validity: [0b_____101] }                                                                                                 |
+--------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+


ast            : to_string(parse_json(s))
raw expr       : to_string(parse_json(s::String NULL))
checked expr   : to_string<Variant NULL>(parse_json<String NULL>(s))
evaluation:
+--------+-----------------------+-------------+
|        | s                     | Output      |
+--------+-----------------------+-------------+
| Type   | String NULL           | String NULL |
| Domain | {""..="123"} ∪ {NULL} | Unknown     |
| Row 0  | '"abc"'               | 'abc'       |
| Row 1  | NULL                  | NULL        |
| Row 2  | '123'                 | '123'       |
+--------+-----------------------+-------------+
evaluation (internal):
+--------+---------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                |
+--------+---------------------------------------------------------------------------------------------------------------------+
| s      | NullableColumn { column: StringColumn { data: 0x2261626322313233, offsets: [0, 5, 5, 8] }, validity: [0b_____101] } |
| Output | NullableColumn { column: StringColumn { data: 0x616263313233, offsets: [0, 3, 3, 6] }, validity: [0b_____101] }     |
+--------+---------------------------------------------------------------------------------------------------------------------+


ast            : try_to_boolean(parse_json('true'))
raw expr       : try_to_boolean(parse_json('true'))
checked expr   : try_to_boolean<Variant>(parse_json<String>("true"))
optimized expr : true
output type    : Boolean NULL
output domain  : {TRUE}
output         : true


ast            : try_to_boolean(parse_json('123'))
raw expr       : try_to_boolean(parse_json('123'))
checked expr   : try_to_boolean<Variant>(parse_json<String>("123"))
optimized expr : NULL
output type    : Boolean NULL
output domain  : {NULL}
output         : NULL


ast            : try_to_boolean(parse_json('"abc"'))
raw expr       : try_to_boolean(parse_json('"abc"'))
checked expr   : try_to_boolean<Variant>(parse_json<String>("\"abc\""))
optimized expr : NULL
output type    : Boolean NULL
output domain  : {NULL}
output         : NULL


ast            : try_to_uint64(parse_json('123'))
raw expr       : try_to_uint64(parse_json('123'))
checked expr   : try_to_uint64<Variant>(parse_json<String>("123"))
optimized expr : 123_u64
output type    : UInt64 NULL
output domain  : {123..=123}
output         : 123


ast            : try_to_uint64(parse_json('-123'))
raw expr       : try_to_uint64(parse_json('-123'))
checked expr   : try_to_uint64<Variant>(parse_json<String>("-123"))
optimized expr : NULL
output type    : UInt64 NULL
output domain  : {NULL}
output         : NULL


ast            : try_to_uint64(parse_json('"abc"'))
raw expr       : try_to_uint64(parse_json('"abc"'))
checked expr   : try_to_uint64<Variant>(parse_json<String>("\"abc\""))
optimized expr : NULL
output type    : UInt64 NULL
output domain  : {NULL}
output         : NULL


ast            : try_to_int64(parse_json('123'))
raw expr       : try_to_int64(parse_json('123'))
checked expr   : try_to_int64<Variant>(parse_json<String>("123"))
optimized expr : 123_i64
output type    : Int64 NULL
output domain  : {123..=123}
output         : 123


ast            : try_to_int64(parse_json('-123'))
raw expr       : try_to_int64(parse_json('-123'))
checked expr   : try_to_int64<Variant>(parse_json<String>("-123"))
optimized expr : -123_i64
output type    : Int64 NULL
output domain  : {-123..=-123}
output         : -123


ast            : try_to_int64(parse_json('"abc"'))
raw expr       : try_to_int64(parse_json('"abc"'))
checked expr   : try_to_int64<Variant>(parse_json<String>("\"abc\""))
optimized expr : NULL
output type    : Int64 NULL
output domain  : {NULL}
output         : NULL


ast            : try_to_float64(parse_json('12.34'))
raw expr       : try_to_float64(parse_json('12.34'))
checked expr   : try_to_float64<Variant>(parse_json<String>("12.34"))
optimized expr : 12.34_f64
output type    : Float64 NULL
output domain  : {12.34..=12.34}
output         : 12.34


ast            : try_to_float64(parse_json('"abc"'))
raw expr       : try_to_float64(parse_json('"abc"'))
checked expr   : try_to_float64<Variant>(parse_json<String>("\"abc\""))
optimized expr : NULL
output type    : Float64 NULL
output domain  : {NULL}
output         : NULL


ast            : try_to_date(parse_json('"2023-01-01"'))
raw expr       : try_to_date(parse_json('"2023-01-01"'))
checked expr   : try_to_date<Variant>(parse_json<String>("\"2023-01-01\""))
optimized expr : 19358
output type    : Date NULL
output domain  : {19358..=19358}
output         : '2023-01-01'


ast            : try_to_date(parse_json('"abc"'))
raw expr       : try_to_date(parse_json('"abc"'))
checked expr   : try_to_date<Variant>(parse_json<String>("\"abc\""))
optimized expr : NULL
output type    : Date NULL
output domain  : {NULL}
output         : NULL


ast            : try_to_timestamp(parse_json('"2023-01-01 00:00:00"'))
raw expr       : try_to_timestamp(parse_json('"2023-01-01 00:00:00"'))
checked expr   : try_to_timestamp<Variant>(parse_json<String>("\"2023-01-01 00:00:00\""))
optimized expr : 1672531200000000
output type    : Timestamp NULL
output domain  : {1672531200000000..=1672531200000000}
output         : '2023-01-01 00:00:00.000000'


ast            : try_to_timestamp(parse_json('"abc"'))
raw expr       : try_to_timestamp(parse_json('"abc"'))
checked expr   : try_to_timestamp<Variant>(parse_json<String>("\"abc\""))
optimized expr : NULL
output type    : Timestamp NULL
output domain  : {NULL}
output         : NULL


ast            : try_to_string(parse_json('12.34'))
raw expr       : try_to_string(parse_json('12.34'))
checked expr   : try_to_string<Variant>(parse_json<String>("12.34"))
optimized expr : "12.34"
output type    : String NULL
output domain  : {"12.34"..="12.34"}
output         : '12.34'


ast            : try_to_string(parse_json('"abc"'))
raw expr       : try_to_string(parse_json('"abc"'))
checked expr   : try_to_string<Variant>(parse_json<String>("\"abc\""))
optimized expr : "abc"
output type    : String NULL
output domain  : {"abc"..="abc"}
output         : 'abc'


ast            : try_to_boolean(parse_json(s))
raw expr       : try_to_boolean(parse_json(s::String NULL))
checked expr   : try_to_boolean<Variant NULL>(parse_json<String NULL>(s))
evaluation:
+--------+-------------------------+--------------+
|        | s                       | Output       |
+--------+-------------------------+--------------+
| Type   | String NULL             | Boolean NULL |
| Domain | {""..="true"} ∪ {NULL}  | Unknown      |
| Row 0  | 'true'                  | true         |
| Row 1  | '123'                   | NULL         |
| Row 2  | '-100'                  | NULL         |
| Row 3  | '12.34'                 | NULL         |
| Row 4  | NULL                    | NULL         |
| Row 5  | '"2020-01-01"'          | NULL         |
| Row 6  | '"2021-01-01 20:00:00"' | NULL         |
| Row 7  | '"abc"'                 | NULL         |
+--------+-------------------------+--------------+
evaluation (internal):
+--------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                                                                                                                                 |
+--------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| s      | NullableColumn { column: StringColumn { data: 0x747275653132332d31303031322e333422323032302d30312d30312222323032312d30312d30312032303a30303a3030222261626322, offsets: [0, 4, 7, 11, 16, 16, 28, 49, 54] }, validity: [0b11101111] } |
| Output | NullableColumn { column: Boolean([0b00000001]), validity: [0b00000001] }                                                                                                                                                             |
+--------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+


ast            : try_to_int64(parse_json(s))
raw expr       : try_to_int64(parse_json(s::String NULL))
checked expr   : try_to_int64<Variant NULL>(parse_json<String NULL>(s))
evaluation:
+--------+-------------------------+------------+
|        | s                       | Output     |
+--------+-------------------------+------------+
| Type   | String NULL             | Int64 NULL |
| Domain | {""..="true"} ∪ {NULL}  | Unknown    |
| Row 0  | 'true'                  | 1          |
| Row 1  | '123'                   | 123        |
| Row 2  | '-100'                  | -100       |
| Row 3  | '12.34'                 | NULL       |
| Row 4  | NULL                    | NULL       |
| Row 5  | '"2020-01-01"'          | NULL       |
| Row 6  | '"2021-01-01 20:00:00"' | NULL       |
| Row 7  | '"abc"'                 | NULL       |
+--------+-------------------------+------------+
evaluation (internal):
+--------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                                                                                                                                 |
+--------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| s      | NullableColumn { column: StringColumn { data: 0x747275653132332d31303031322e333422323032302d30312d30312222323032312d30312d30312032303a30303a3030222261626322, offsets: [0, 4, 7, 11, 16, 16, 28, 49, 54] }, validity: [0b11101111] } |
| Output | NullableColumn { column: Int64([1, 123, -100, 0, 0, 0, 0, 0]), validity: [0b00000111] }                                                                                                                                              |
+--------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+


ast            : try_to_uint64(parse_json(s))
raw expr       : try_to_uint64(parse_json(s::String NULL))
checked expr   : try_to_uint64<Variant NULL>(parse_json<String NULL>(s))
evaluation:
+--------+-------------------------+-------------+
|        | s                       | Output      |
+--------+-------------------------+-------------+
| Type   | String NULL             | UInt64 NULL |
| Domain | {""..="true"} ∪ {NULL}  | Unknown     |
| Row 0  | 'true'                  | 1           |
| Row 1  | '123'                   | 123         |
| Row 2  | '-100'                  | NULL        |
| Row 3  | '12.34'                 | NULL        |
| Row 4  | NULL                    | NULL        |
| Row 5  | '"2020-01-01"'          | NULL        |
| Row 6  | '"2021-01-01 20:00:00"' | NULL        |
| Row 7  | '"abc"'                 | NULL        |
+--------+-------------------------+-------------+
evaluation (internal):
+--------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                                                                                                                                 |
+--------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| s      | NullableColumn { column: StringColumn { data: 0x747275653132332d31303031322e333422323032302d30312d30312222323032312d30312d30312032303a30303a3030222261626322, offsets: [0, 4, 7, 11, 16, 16, 28, 49, 54] }, validity: [0b11101111] } |
| Output | NullableColumn { column: UInt64([1, 123, 0, 0, 0, 0, 0, 0]), validity: [0b00000011] }                                                                                                                                                |
+--------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+


ast            : try_to_float64(parse_json(s))
raw expr       : try_to_float64(parse_json(s::String NULL))
checked expr   : try_to_float64<Variant NULL>(parse_json<String NULL>(s))
evaluation:
+--------+-------------------------+--------------+
|        | s                       | Output       |
+--------+-------------------------+--------------+
| Type   | String NULL             | Float64 NULL |
| Domain | {""..="true"} ∪ {NULL}  | Unknown      |
| Row 0  | 'true'                  | 1            |
| Row 1  | '123'                   | 123          |
| Row 2  | '-100'                  | -100         |
| Row 3  | '12.34'                 | 12.34        |
| Row 4  | NULL                    | NULL         |
| Row 5  | '"2020-01-01"'          | NULL         |
| Row 6  | '"2021-01-01 20:00:00"' | NULL         |
| Row 7  | '"abc"'                 | NULL         |
+--------+-------------------------+--------------+
evaluation (internal):
+--------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                                                                                                                                 |
+--------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| s      | NullableColumn { column: StringColumn { data: 0x747275653132332d31303031322e333422323032302d30312d30312222323032312d30312d30312032303a30303a3030222261626322, offsets: [0, 4, 7, 11, 16, 16, 28, 49, 54] }, validity: [0b11101111] } |
| Output | NullableColumn { column: Float64([1, 123, -100, 12.34, 0, 0, 0, 0]), validity: [0b00001111] }                                                                                                                                        |
+--------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+


ast            : try_to_date(parse_json(s))
raw expr       : try_to_date(parse_json(s::String NULL))
checked expr   : try_to_date<Variant NULL>(parse_json<String NULL>(s))
evaluation:
+--------+-------------------------+--------------+
|        | s                       | Output       |
+--------+-------------------------+--------------+
| Type   | String NULL             | Date NULL    |
| Domain | {""..="true"} ∪ {NULL}  | Unknown      |
| Row 0  | 'true'                  | NULL         |
| Row 1  | '123'                   | NULL         |
| Row 2  | '-100'                  | NULL         |
| Row 3  | '12.34'                 | NULL         |
| Row 4  | NULL                    | NULL         |
| Row 5  | '"2020-01-01"'          | '2020-01-01' |
| Row 6  | '"2021-01-01 20:00:00"' | '2021-01-01' |
| Row 7  | '"abc"'                 | NULL         |
+--------+-------------------------+--------------+
evaluation (internal):
+--------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                                                                                                                                 |
+--------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| s      | NullableColumn { column: StringColumn { data: 0x747275653132332d31303031322e333422323032302d30312d30312222323032312d30312d30312032303a30303a3030222261626322, offsets: [0, 4, 7, 11, 16, 16, 28, 49, 54] }, validity: [0b11101111] } |
| Output | NullableColumn { column: [0, 0, 0, 0, 0, 18262, 18628, 0], validity: [0b01100000] }                                                                                                                                                  |
+--------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+


ast            : try_to_timestamp(parse_json(s))
raw expr       : try_to_timestamp(parse_json(s::String NULL))
checked expr   : try_to_timestamp<Variant NULL>(parse_json<String NULL>(s))
evaluation:
+--------+-------------------------+------------------------------+
|        | s                       | Output                       |
+--------+-------------------------+------------------------------+
| Type   | String NULL             | Timestamp NULL               |
| Domain | {""..="true"} ∪ {NULL}  | Unknown                      |
| Row 0  | 'true'                  | NULL                         |
| Row 1  | '123'                   | NULL                         |
| Row 2  | '-100'                  | NULL                         |
| Row 3  | '12.34'                 | NULL                         |
| Row 4  | NULL                    | NULL                         |
| Row 5  | '"2020-01-01"'          | '2020-01-01 00:00:00.000000' |
| Row 6  | '"2021-01-01 20:00:00"' | '2021-01-01 20:00:00.000000' |
| Row 7  | '"abc"'                 | NULL                         |
+--------+-------------------------+------------------------------+
evaluation (internal):
+--------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                                                                                                                                 |
+--------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| s      | NullableColumn { column: StringColumn { data: 0x747275653132332d31303031322e333422323032302d30312d30312222323032312d30312d30312032303a30303a3030222261626322, offsets: [0, 4, 7, 11, 16, 16, 28, 49, 54] }, validity: [0b11101111] } |
| Output | NullableColumn { column: [0, 0, 0, 0, 0, 1577836800000000, 1609531200000000, 0], validity: [0b01100000] }                                                                                                                            |
+--------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+


ast            : try_to_string(parse_json(s))
raw expr       : try_to_string(parse_json(s::String NULL))
checked expr   : try_to_string<Variant NULL>(parse_json<String NULL>(s))
evaluation:
+--------+-------------------------+-----------------------+
|        | s                       | Output                |
+--------+-------------------------+-----------------------+
| Type   | String NULL             | String NULL           |
| Domain | {""..="true"} ∪ {NULL}  | Unknown               |
| Row 0  | 'true'                  | 'true'                |
| Row 1  | '123'                   | '123'                 |
| Row 2  | '-100'                  | '-100'                |
| Row 3  | '12.34'                 | '12.34'               |
| Row 4  | NULL                    | NULL                  |
| Row 5  | '"2020-01-01"'          | '2020-01-01'          |
| Row 6  | '"2021-01-01 20:00:00"' | '2021-01-01 20:00:00' |
| Row 7  | '"abc"'                 | 'abc'                 |
+--------+-------------------------+-----------------------+
evaluation (internal):
+--------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                                                                                                                                 |
+--------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| s      | NullableColumn { column: StringColumn { data: 0x747275653132332d31303031322e333422323032302d30312d30312222323032312d30312d30312032303a30303a3030222261626322, offsets: [0, 4, 7, 11, 16, 16, 28, 49, 54] }, validity: [0b11101111] } |
| Output | NullableColumn { column: StringColumn { data: 0x747275653132332d31303031322e3334323032302d30312d3031323032312d30312d30312032303a30303a3030616263, offsets: [0, 4, 7, 11, 16, 16, 26, 45, 48] }, validity: [0b11101111] }             |
+--------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+


ast            : json_object()
raw expr       : json_object()
checked expr   : json_object<>()
optimized expr : 0x40000000
output type    : Variant
output domain  : Undefined
output         : {}


ast            : json_object('a', true, 'b', 1, 'c', 'str', 'd', [1,2], 'e', {'k':'v'})
raw expr       : json_object('a', true, 'b', 1, 'c', 'str', 'd', array(1, 2), 'e', map(array('k'), array('v')))
checked expr   : json_object<T0=String, T1=Boolean, T2=String, T3=UInt8, T4=String, T5=String, T6=String, T7=Array(UInt8), T8=String, T9=Map(String, String)><T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>("a", true, "b", 1_u8, "c", "str", "d", array<T0=UInt8><T0, T0>(1_u8, 2_u8), "e", map<T0=String, T1=String><Array(T0), Array(T1)>(array<T0=String><T0>("k"), array<T0=String><T0>("v")))
optimized expr : 0x400000051000000110000001100000011000000110000001400000002000000210000003500000105000000e61626364655001737472800000022000000220000002500150024000000110000001100000016b76
output type    : Variant
output domain  : Undefined
output         : {"a":true,"b":1,"c":"str","d":[1,2],"e":{"k":"v"}}


ast            : json_object('k1', 1, 'k2', null, 'k3', 2, null, 3)
raw expr       : json_object('k1', 1, 'k2', NULL, 'k3', 2, NULL, 3)
checked expr   : json_object<T0=String, T1=UInt8, T2=String, T3=NULL, T4=String, T5=UInt8, T6=NULL, T7=UInt8><T0, T1, T2, T3, T4, T5, T6, T7>("k1", 1_u8, "k2", NULL, "k3", 2_u8, NULL, 3_u8)
optimized expr : 0x40000002100000021000000220000002200000026b316b3350015002
output type    : Variant
output domain  : Undefined
output         : {"k1":1,"k3":2}


error: 
  --> SQL:1:1
  |
1 | json_object('k1', 1, 'k1')
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^ The number of keys and values must be equal while evaluating function `json_object('k1', 1, 'k1')`



error: 
  --> SQL:1:1
  |
1 | json_object('k1', 1, 'k1', 2)
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Keys have to be unique while evaluating function `json_object('k1', 1, 'k1', 2)`



error: 
  --> SQL:1:1
  |
1 | json_object(1, 'k1', 2, 'k2')
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Key must be a string value while evaluating function `json_object(1, 'k1', 2, 'k2')`



ast            : json_object(k1, v1, k2, v2)
raw expr       : json_object(k1::String NULL, v1::String NULL, k2::String NULL, v2::String NULL)
checked expr   : json_object<T0=String NULL, T1=String NULL, T2=String NULL, T3=String NULL><T0, T1, T2, T3>(k1, v1, k2, v2)
evaluation:
+--------+----------------------+----------------------+----------------------+---------------+-----------------------+
|        | k1                   | v1                   | k2                   | v2            | Output                |
+--------+----------------------+----------------------+----------------------+---------------+-----------------------+
| Type   | String NULL          | String NULL          | String NULL          | String NULL   | Variant               |
| Domain | {""..="d1"} ∪ {NULL} | {""..="l1"} ∪ {NULL} | {""..="d2"} ∪ {NULL} | {"j2"..="m2"} | Unknown               |
| Row 0  | 'a1'                 | 'j1'                 | 'a2'                 | 'j2'          | {"a1":"j1","a2":"j2"} |
| Row 1  | 'b1'                 | 'k1'                 | NULL                 | 'k2'          | {"b1":"k1"}           |
| Row 2  | NULL                 | 'l1'                 | 'c2'                 | 'l2'          | {"c2":"l2"}           |
| Row 3  | 'd1'                 | NULL                 | 'd2'                 | 'm2'          | {"d2":"m2"}           |
+--------+----------------------+----------------------+----------------------+---------------+-----------------------+
evaluation (internal):
+--------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                                                                                                            |
+--------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| k1     | NullableColumn { column: StringColumn { data: 0x613162316431, offsets: [0, 2, 4, 4, 6] }, validity: [0b____1011] }                                                                                              |
| v1     | NullableColumn { column: StringColumn { data: 0x6a316b316c31, offsets: [0, 2, 4, 6, 6] }, validity: [0b____0111] }                                                                                              |
| k2     | NullableColumn { column: StringColumn { data: 0x613263326432, offsets: [0, 2, 2, 4, 6] }, validity: [0b____1101] }                                                                                              |
| v2     | NullableColumn { column: StringColumn { data: 0x6a326b326c326d32, offsets: [0, 2, 4, 6, 8] }, validity: [0b____1111] }                                                                                          |
| Output | StringColumn { data: 0x4000000210000002100000021000000210000002613161326a316a3240000001100000021000000262316b3140000001100000021000000263326c3240000001100000021000000264326d32, offsets: [0, 28, 44, 60, 76] } |
+--------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+


ast            : json_object_keep_null()
raw expr       : json_object_keep_null()
checked expr   : json_object_keep_null<>()
optimized expr : 0x40000000
output type    : Variant
output domain  : Undefined
output         : {}


ast            : json_object_keep_null('a', true, 'b', 1, 'c', 'str', 'd', [1,2], 'e', {'k':'v'})
raw expr       : json_object_keep_null('a', true, 'b', 1, 'c', 'str', 'd', array(1, 2), 'e', map(array('k'), array('v')))
checked expr   : json_object_keep_null<T0=String, T1=Boolean, T2=String, T3=UInt8, T4=String, T5=String, T6=String, T7=Array(UInt8), T8=String, T9=Map(String, String)><T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>("a", true, "b", 1_u8, "c", "str", "d", array<T0=UInt8><T0, T0>(1_u8, 2_u8), "e", map<T0=String, T1=String><Array(T0), Array(T1)>(array<T0=String><T0>("k"), array<T0=String><T0>("v")))
optimized expr : 0x400000051000000110000001100000011000000110000001400000002000000210000003500000105000000e61626364655001737472800000022000000220000002500150024000000110000001100000016b76
output type    : Variant
output domain  : Undefined
output         : {"a":true,"b":1,"c":"str","d":[1,2],"e":{"k":"v"}}


ast            : json_object_keep_null('k1', 1, 'k2', null, 'k3', 2, null, 3)
raw expr       : json_object_keep_null('k1', 1, 'k2', NULL, 'k3', 2, NULL, 3)
checked expr   : json_object_keep_null<T0=String, T1=UInt8, T2=String, T3=NULL, T4=String, T5=UInt8, T6=NULL, T7=UInt8><T0, T1, T2, T3, T4, T5, T6, T7>("k1", 1_u8, "k2", NULL, "k3", 2_u8, NULL, 3_u8)
optimized expr : 0x400000031000000210000002100000022000000200000000200000026b316b326b3350015002
output type    : Variant
output domain  : Undefined
output         : {"k1":1,"k2":null,"k3":2}


error: 
  --> SQL:1:1
  |
1 | json_object_keep_null('k1', 1, 'k1')
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ The number of keys and values must be equal while evaluating function `json_object_keep_null('k1', 1, 'k1')`



error: 
  --> SQL:1:1
  |
1 | json_object_keep_null('k1', 1, 'k1', 2)
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Keys have to be unique while evaluating function `json_object_keep_null('k1', 1, 'k1', 2)`



error: 
  --> SQL:1:1
  |
1 | json_object_keep_null(1, 'k1', 2, 'k2')
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Key must be a string value while evaluating function `json_object_keep_null(1, 'k1', 2, 'k2')`



ast            : json_object_keep_null(k1, v1, k2, v2)
raw expr       : json_object_keep_null(k1::String NULL, v1::String NULL, k2::String NULL, v2::String NULL)
checked expr   : json_object_keep_null<T0=String NULL, T1=String NULL, T2=String NULL, T3=String NULL><T0, T1, T2, T3>(k1, v1, k2, v2)
evaluation:
+--------+----------------------+----------------------+----------------------+---------------+-----------------------+
|        | k1                   | v1                   | k2                   | v2            | Output                |
+--------+----------------------+----------------------+----------------------+---------------+-----------------------+
| Type   | String NULL          | String NULL          | String NULL          | String NULL   | Variant               |
| Domain | {""..="d1"} ∪ {NULL} | {""..="l1"} ∪ {NULL} | {""..="d2"} ∪ {NULL} | {"j2"..="m2"} | Unknown               |
| Row 0  | 'a1'                 | 'j1'                 | 'a2'                 | 'j2'          | {"a1":"j1","a2":"j2"} |
| Row 1  | 'b1'                 | 'k1'                 | NULL                 | 'k2'          | {"b1":"k1"}           |
| Row 2  | NULL                 | 'l1'                 | 'c2'                 | 'l2'          | {"c2":"l2"}           |
| Row 3  | 'd1'                 | NULL                 | 'd2'                 | 'm2'          | {"d1":null,"d2":"m2"} |
+--------+----------------------+----------------------+----------------------+---------------+-----------------------+
evaluation (internal):
+--------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                                                                                                                                |
+--------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| k1     | NullableColumn { column: StringColumn { data: 0x613162316431, offsets: [0, 2, 4, 4, 6] }, validity: [0b____1011] }                                                                                                                  |
| v1     | NullableColumn { column: StringColumn { data: 0x6a316b316c31, offsets: [0, 2, 4, 6, 6] }, validity: [0b____0111] }                                                                                                                  |
| k2     | NullableColumn { column: StringColumn { data: 0x613263326432, offsets: [0, 2, 2, 4, 6] }, validity: [0b____1101] }                                                                                                                  |
| v2     | NullableColumn { column: StringColumn { data: 0x6a326b326c326d32, offsets: [0, 2, 4, 6, 8] }, validity: [0b____1111] }                                                                                                              |
| Output | StringColumn { data: 0x4000000210000002100000021000000210000002613161326a316a3240000001100000021000000262316b3140000001100000021000000263326c324000000210000002100000020000000010000002643164326d32, offsets: [0, 28, 44, 60, 86] } |
+--------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+


ast            : json_path_query_array(parse_json('[1, 2, 3, 4, 5, 6]'), '$[0, 2 to last, 4]')
raw expr       : json_path_query_array(parse_json('[1, 2, 3, 4, 5, 6]'), '$[0, 2 to last, 4]')
checked expr   : json_path_query_array<Variant, String>(parse_json<String>("[1, 2, 3, 4, 5, 6]"), "$[0, 2 to last, 4]")
optimized expr : 0x80000006200000022000000220000002200000022000000220000002500150035004500550065005
output type    : Variant NULL
output domain  : Undefined
output         : [1,3,4,5,6,5]


ast            : json_path_query_array(parse_json('[1, 2, 3, 4, 5, 6]'), '$[100]')
raw expr       : json_path_query_array(parse_json('[1, 2, 3, 4, 5, 6]'), '$[100]')
checked expr   : json_path_query_array<Variant, String>(parse_json<String>("[1, 2, 3, 4, 5, 6]"), "$[100]")
optimized expr : 0x80000000
output type    : Variant NULL
output domain  : Undefined
output         : []


ast            : json_path_query_array(parse_json('[{"a": 1}, {"a": 2}]'), '$[*].a')
raw expr       : json_path_query_array(parse_json('[{"a": 1}, {"a": 2}]'), '$[*].a')
checked expr   : json_path_query_array<Variant, String>(parse_json<String>("[{\"a\": 1}, {\"a\": 2}]"), "$[*].a")
optimized expr : 0x80000002200000022000000250015002
output type    : Variant NULL
output domain  : Undefined
output         : [1,2]


ast            : json_path_query_array(parse_json('[{"a": 1}, {"a": 2}]'), '$[*].a ? (@ == 1)')
raw expr       : json_path_query_array(parse_json('[{"a": 1}, {"a": 2}]'), '$[*].a ? (@ == 1)')
checked expr   : json_path_query_array<Variant, String>(parse_json<String>("[{\"a\": 1}, {\"a\": 2}]"), "$[*].a ? (@ == 1)")
optimized expr : 0x80000001200000025001
output type    : Variant NULL
output domain  : Undefined
output         : [1]


ast            : json_path_query_array(parse_json('[{"a": 1}, {"a": 2}]'), '$[*].a ? (@ > 10)')
raw expr       : json_path_query_array(parse_json('[{"a": 1}, {"a": 2}]'), '$[*].a ? (@ > 10)')
checked expr   : json_path_query_array<Variant, String>(parse_json<String>("[{\"a\": 1}, {\"a\": 2}]"), "$[*].a ? (@ > 10)")
optimized expr : 0x80000000
output type    : Variant NULL
output domain  : Undefined
output         : []


ast            : json_path_query_array(parse_json('[{"a": {"b":10}}, {"a": 2}]'), '$[*].a.b')
raw expr       : json_path_query_array(parse_json('[{"a": {"b":10}}, {"a": 2}]'), '$[*].a.b')
checked expr   : json_path_query_array<Variant, String>(parse_json<String>("[{\"a\": {\"b\":10}}, {\"a\": 2}]"), "$[*].a.b")
optimized expr : 0x8000000120000002500a
output type    : Variant NULL
output domain  : Undefined
output         : [10]


ast            : json_path_query_array(parse_json(s), p)
raw expr       : json_path_query_array(parse_json(s::String NULL), p::String)
checked expr   : json_path_query_array<Variant NULL, String NULL>(parse_json<String NULL>(s), CAST(p AS String NULL))
evaluation:
+--------+------------------------+------------------+--------------+
|        | s                      | p                | Output       |
+--------+------------------------+------------------+--------------+
| Type   | String NULL            | String           | Variant NULL |
| Domain | {""..="true"} ∪ {NULL} | {"$.a"..="$[0]"} | Unknown      |
| Row 0  | 'true'                 | '$[0]'           | []           |
| Row 1  | '[{"k":1},{"k":2}]'    | '$[*].k'         | [1,2]        |
| Row 2  | NULL                   | '$.a'            | NULL         |
| Row 3  | '[1,2,3,4]'            | '$[0,2]'         | [1,3]        |
+--------+------------------------+------------------+--------------+
evaluation (internal):
+--------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                                                                              |
+--------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| s      | NullableColumn { column: StringColumn { data: 0x747275655b7b226b223a317d2c7b226b223a327d5d5b312c322c332c345d, offsets: [0, 4, 21, 21, 30] }, validity: [0b____1011] }             |
| p      | StringColumn { data: 0x245b305d245b2a5d2e6b242e61245b302c325d, offsets: [0, 4, 10, 13, 19] }                                                                                      |
| Output | NullableColumn { column: StringColumn { data: 0x800000008000000220000002200000025001500280000002200000022000000250015003, offsets: [0, 4, 20, 20, 36] }, validity: [0b____1011] } |
+--------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+


ast            : json_path_query_first(parse_json('[1, 2, 3, 4, 5, 6]'), '$[0, 2 to last, 4]')
raw expr       : json_path_query_first(parse_json('[1, 2, 3, 4, 5, 6]'), '$[0, 2 to last, 4]')
checked expr   : json_path_query_first<Variant, String>(parse_json<String>("[1, 2, 3, 4, 5, 6]"), "$[0, 2 to last, 4]")
optimized expr : 0x20000000200000025001
output type    : Variant NULL
output domain  : Undefined
output         : 1


ast            : json_path_query_first(parse_json('[1, 2, 3, 4, 5, 6]'), '$[100]')
raw expr       : json_path_query_first(parse_json('[1, 2, 3, 4, 5, 6]'), '$[100]')
checked expr   : json_path_query_first<Variant, String>(parse_json<String>("[1, 2, 3, 4, 5, 6]"), "$[100]")
optimized expr : NULL
output type    : Variant NULL
output domain  : {NULL}
output         : NULL


ast            : json_path_query_first(parse_json('[{"a": 1}, {"a": 2}]'), '$[*].a')
raw expr       : json_path_query_first(parse_json('[{"a": 1}, {"a": 2}]'), '$[*].a')
checked expr   : json_path_query_first<Variant, String>(parse_json<String>("[{\"a\": 1}, {\"a\": 2}]"), "$[*].a")
optimized expr : 0x20000000200000025001
output type    : Variant NULL
output domain  : Undefined
output         : 1


ast            : json_path_query_first(parse_json('[{"a": 1}, {"a": 2}]'), '$[*].a ? (@ == 1)')
raw expr       : json_path_query_first(parse_json('[{"a": 1}, {"a": 2}]'), '$[*].a ? (@ == 1)')
checked expr   : json_path_query_first<Variant, String>(parse_json<String>("[{\"a\": 1}, {\"a\": 2}]"), "$[*].a ? (@ == 1)")
optimized expr : 0x20000000200000025001
output type    : Variant NULL
output domain  : Undefined
output         : 1


ast            : json_path_query_first(parse_json('[{"a": 1}, {"a": 2}]'), '$[*].a ? (@ > 10)')
raw expr       : json_path_query_first(parse_json('[{"a": 1}, {"a": 2}]'), '$[*].a ? (@ > 10)')
checked expr   : json_path_query_first<Variant, String>(parse_json<String>("[{\"a\": 1}, {\"a\": 2}]"), "$[*].a ? (@ > 10)")
optimized expr : NULL
output type    : Variant NULL
output domain  : {NULL}
output         : NULL


ast            : json_path_query_first(parse_json('[{"a": {"b":10}}, {"a": 2}]'), '$[*].a.b')
raw expr       : json_path_query_first(parse_json('[{"a": {"b":10}}, {"a": 2}]'), '$[*].a.b')
checked expr   : json_path_query_first<Variant, String>(parse_json<String>("[{\"a\": {\"b\":10}}, {\"a\": 2}]"), "$[*].a.b")
optimized expr : 0x2000000020000002500a
output type    : Variant NULL
output domain  : Undefined
output         : 10


ast            : json_path_query_first(parse_json(s), p)
raw expr       : json_path_query_first(parse_json(s::String NULL), p::String)
checked expr   : json_path_query_first<Variant NULL, String NULL>(parse_json<String NULL>(s), CAST(p AS String NULL))
evaluation:
+--------+------------------------+------------------+--------------+
|        | s                      | p                | Output       |
+--------+------------------------+------------------+--------------+
| Type   | String NULL            | String           | Variant NULL |
| Domain | {""..="true"} ∪ {NULL} | {"$.a"..="$[0]"} | Unknown      |
| Row 0  | 'true'                 | '$[0]'           | NULL         |
| Row 1  | '[{"k":1},{"k":2}]'    | '$[*].k'         | 1            |
| Row 2  | NULL                   | '$.a'            | NULL         |
| Row 3  | '[1,2,3,4]'            | '$[0,2]'         | 1            |
+--------+------------------------+------------------+--------------+
evaluation (internal):
+--------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                                                                  |
+--------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| s      | NullableColumn { column: StringColumn { data: 0x747275655b7b226b223a317d2c7b226b223a327d5d5b312c322c332c345d, offsets: [0, 4, 21, 21, 30] }, validity: [0b____1011] } |
| p      | StringColumn { data: 0x245b305d245b2a5d2e6b242e61245b302c325d, offsets: [0, 4, 10, 13, 19] }                                                                          |
| Output | NullableColumn { column: StringColumn { data: 0x2000000020000002500120000000200000025001, offsets: [0, 0, 10, 10, 20] }, validity: [0b____1010] }                     |
+--------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------+


