ast            : upper('Abc')
raw expr       : upper('Abc')
checked expr   : upper<String>("Abc")
optimized expr : "ABC"
output type    : String
output domain  : {"ABC"..="ABC"}
output         : 'ABC'


ast            : upper('Dobr√Ω den')
raw expr       : upper('Dobr√Ω den')
checked expr   : upper<String>("Dobr√Ω den")
optimized expr : "DOBR√ù DEN"
output type    : String
output domain  : {"DOBR√ù DEN"..="DOBR√ù DEN"}
output         : 'DOBR√ù DEN'


ast            : upper('√üüòÄÂ±±')
raw expr       : upper('√üüòÄÂ±±')
checked expr   : upper<String>("√üüòÄÂ±±")
optimized expr : "SSüòÄÂ±±"
output type    : String
output domain  : {"SSüòÄÂ±±"..="SSüòÄÂ±±"}
output         : 'SSüòÄÂ±±'


ast            : upper(NULL)
raw expr       : upper(NULL)
checked expr   : upper<String NULL>(CAST(NULL AS String NULL))
optimized expr : NULL
output type    : String NULL
output domain  : {NULL}
output         : NULL


ast            : ucase(a)
raw expr       : ucase(a::String)
checked expr   : upper<String>(a)
evaluation:
+--------+-------------------+-------------+
|        | a                 | Output      |
+--------+-------------------+-------------+
| Type   | String            | String      |
| Domain | {"Abc"..="√üüòÄÂ±±"} | {""..}      |
| Row 0  | 'Abc'             | 'ABC'       |
| Row 1  | 'Dobr√Ω den'       | 'DOBR√ù DEN' |
| Row 2  | '√üüòÄÂ±±'           | 'SSüòÄÂ±±'    |
+--------+-------------------+-------------+
evaluation (internal):
+--------+------------------------------------------------------------------------------------------------+
| Column | Data                                                                                           |
+--------+------------------------------------------------------------------------------------------------+
| a      | StringColumn { data: 0x416263446f6272c3bd2064656ec39ff09f9880e5b1b1, offsets: [0, 3, 13, 22] } |
| Output | StringColumn { data: 0x414243444f4252c39d2044454e5353f09f9880e5b1b1, offsets: [0, 3, 13, 22] } |
+--------+------------------------------------------------------------------------------------------------+


ast            : lower('Abc')
raw expr       : lower('Abc')
checked expr   : lower<String>("Abc")
optimized expr : "abc"
output type    : String
output domain  : {"abc"..="abc"}
output         : 'abc'


ast            : lower('DOBR√ù DEN')
raw expr       : lower('DOBR√ù DEN')
checked expr   : lower<String>("DOBR√ù DEN")
optimized expr : "dobr√Ω den"
output type    : String
output domain  : {"dobr√Ω den"..="dobr√Ω den"}
output         : 'dobr√Ω den'


ast            : lower('ƒ∞üòÄÂ±±')
raw expr       : lower('ƒ∞üòÄÂ±±')
checked expr   : lower<String>("ƒ∞üòÄÂ±±")
optimized expr : "i\u{307}üòÄÂ±±"
output type    : String
output domain  : {"i\u{307}üòÄÂ±±"..="i\u{307}üòÄÂ±±"}
output         : 'iÃáüòÄÂ±±'


ast            : lower(NULL)
raw expr       : lower(NULL)
checked expr   : lower<String NULL>(CAST(NULL AS String NULL))
optimized expr : NULL
output type    : String NULL
output domain  : {NULL}
output         : NULL


ast            : lcase(a)
raw expr       : lcase(a::String)
checked expr   : lower<String>(a)
evaluation:
+--------+-------------------+-------------+
|        | a                 | Output      |
+--------+-------------------+-------------+
| Type   | String            | String      |
| Domain | {"Abc"..="ƒ∞üòÄÂ±±"} | {""..}      |
| Row 0  | 'Abc'             | 'abc'       |
| Row 1  | 'DOBR√ù DEN'       | 'dobr√Ω den' |
| Row 2  | 'ƒ∞üòÄÂ±±'           | 'iÃáüòÄÂ±±'     |
+--------+-------------------+-------------+
evaluation (internal):
+--------+--------------------------------------------------------------------------------------------------+
| Column | Data                                                                                             |
+--------+--------------------------------------------------------------------------------------------------+
| a      | StringColumn { data: 0x416263444f4252c39d2044454ec4b0f09f9880e5b1b1, offsets: [0, 3, 13, 22] }   |
| Output | StringColumn { data: 0x616263646f6272c3bd2064656e69cc87f09f9880e5b1b1, offsets: [0, 3, 13, 23] } |
+--------+--------------------------------------------------------------------------------------------------+


ast            : bit_length('latin')
raw expr       : bit_length('latin')
checked expr   : bit_length<String>("latin")
optimized expr : 40_u64
output type    : UInt64
output domain  : {40..=40}
output         : 40


ast            : bit_length(NULL)
raw expr       : bit_length(NULL)
checked expr   : bit_length<String NULL>(CAST(NULL AS String NULL))
optimized expr : NULL
output type    : UInt64 NULL
output domain  : {NULL}
output         : NULL


ast            : bit_length(a)
raw expr       : bit_length(a::String)
checked expr   : bit_length<String>(a)
evaluation:
+--------+-----------------------------------+----------------------------+
|        | a                                 | Output                     |
+--------+-----------------------------------+----------------------------+
| Type   | String                            | UInt64                     |
| Domain | {"latin"..="–∫–∏—Ä–∏–ª–ª–∏—Ü–∞ and latin"} | {0..=18446744073709551615} |
| Row 0  | 'latin'                           | 40                         |
| Row 1  | '–∫–∏—Ä–∏–ª–ª–∏—Ü–∞'                       | 144                        |
| Row 2  | '–∫–∏—Ä–∏–ª–ª–∏—Ü–∞ and latin'             | 224                        |
+--------+-----------------------------------+----------------------------+
evaluation (internal):
+--------+----------------------------------------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                                                     |
+--------+----------------------------------------------------------------------------------------------------------------------------------------------------------+
| a      | StringColumn { data: 0x6c6174696ed0bad0b8d180d0b8d0bbd0bbd0b8d186d0b0d0bad0b8d180d0b8d0bbd0bbd0b8d186d0b020616e64206c6174696e, offsets: [0, 5, 23, 51] } |
| Output | UInt64([40, 144, 224])                                                                                                                                   |
+--------+----------------------------------------------------------------------------------------------------------------------------------------------------------+


ast            : octet_length('latin')
raw expr       : octet_length('latin')
checked expr   : length<String>("latin")
optimized expr : 5_u64
output type    : UInt64
output domain  : {5..=5}
output         : 5


ast            : octet_length(NULL)
raw expr       : octet_length(NULL)
checked expr   : length<Variant NULL>(CAST(NULL AS Variant NULL))
optimized expr : NULL
output type    : UInt32 NULL
output domain  : {NULL}
output         : NULL


ast            : length(a)
raw expr       : length(a::String)
checked expr   : length<String>(a)
evaluation:
+--------+-----------------------------------+----------------------------+
|        | a                                 | Output                     |
+--------+-----------------------------------+----------------------------+
| Type   | String                            | UInt64                     |
| Domain | {"latin"..="–∫–∏—Ä–∏–ª–ª–∏—Ü–∞ and latin"} | {0..=18446744073709551615} |
| Row 0  | 'latin'                           | 5                          |
| Row 1  | '–∫–∏—Ä–∏–ª–ª–∏—Ü–∞'                       | 18                         |
| Row 2  | '–∫–∏—Ä–∏–ª–ª–∏—Ü–∞ and latin'             | 28                         |
+--------+-----------------------------------+----------------------------+
evaluation (internal):
+--------+----------------------------------------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                                                     |
+--------+----------------------------------------------------------------------------------------------------------------------------------------------------------+
| a      | StringColumn { data: 0x6c6174696ed0bad0b8d180d0b8d0bbd0bbd0b8d186d0b0d0bad0b8d180d0b8d0bbd0bbd0b8d186d0b020616e64206c6174696e, offsets: [0, 5, 23, 51] } |
| Output | UInt64([5, 18, 28])                                                                                                                                      |
+--------+----------------------------------------------------------------------------------------------------------------------------------------------------------+


ast            : char_length('latin')
raw expr       : char_length('latin')
checked expr   : char_length<String>("latin")
optimized expr : 5_u64
output type    : UInt64
output domain  : {5..=5}
output         : 5


ast            : char_length(NULL)
raw expr       : char_length(NULL)
checked expr   : char_length<String NULL>(CAST(NULL AS String NULL))
optimized expr : NULL
output type    : UInt64 NULL
output domain  : {NULL}
output         : NULL


ast            : character_length(a)
raw expr       : character_length(a::String)
checked expr   : char_length<String>(a)
evaluation:
+--------+-----------------------------------+---------+
|        | a                                 | Output  |
+--------+-----------------------------------+---------+
| Type   | String                            | UInt64  |
| Domain | {"latin"..="–∫–∏—Ä–∏–ª–ª–∏—Ü–∞ and latin"} | Unknown |
| Row 0  | 'latin'                           | 5       |
| Row 1  | '–∫–∏—Ä–∏–ª–ª–∏—Ü–∞'                       | 9       |
| Row 2  | '–∫–∏—Ä–∏–ª–ª–∏—Ü–∞ and latin'             | 19      |
+--------+-----------------------------------+---------+
evaluation (internal):
+--------+----------------------------------------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                                                     |
+--------+----------------------------------------------------------------------------------------------------------------------------------------------------------+
| a      | StringColumn { data: 0x6c6174696ed0bad0b8d180d0b8d0bbd0bbd0b8d186d0b0d0bad0b8d180d0b8d0bbd0bbd0b8d186d0b020616e64206c6174696e, offsets: [0, 5, 23, 51] } |
| Output | UInt64([5, 9, 19])                                                                                                                                       |
+--------+----------------------------------------------------------------------------------------------------------------------------------------------------------+


ast            : to_base64('Abc')
raw expr       : to_base64('Abc')
checked expr   : to_base64<String>("Abc")
optimized expr : "QWJj"
output type    : String
output domain  : {"QWJj"..="QWJj"}
output         : 'QWJj'


ast            : to_base64('123')
raw expr       : to_base64('123')
checked expr   : to_base64<String>("123")
optimized expr : "MTIz"
output type    : String
output domain  : {"MTIz"..="MTIz"}
output         : 'MTIz'


ast            : to_base64(Null)
raw expr       : to_base64(NULL)
checked expr   : to_base64<String NULL>(CAST(NULL AS String NULL))
optimized expr : NULL
output type    : String NULL
output domain  : {NULL}
output         : NULL


ast            : to_base64(a)
raw expr       : to_base64(a::String)
checked expr   : to_base64<String>(a)
evaluation:
+--------+-----------------+--------+
|        | a               | Output |
+--------+-----------------+--------+
| Type   | String          | String |
| Domain | {"123"..="Abc"} | {""..} |
| Row 0  | 'Abc'           | 'QWJj' |
| Row 1  | '123'           | 'MTIz' |
+--------+-----------------+--------+
evaluation (internal):
+--------+---------------------------------------------------------------+
| Column | Data                                                          |
+--------+---------------------------------------------------------------+
| a      | StringColumn { data: 0x416263313233, offsets: [0, 3, 6] }     |
| Output | StringColumn { data: 0x51574a6a4d54497a, offsets: [0, 4, 8] } |
+--------+---------------------------------------------------------------+


ast            : from_base64('QWJj')
raw expr       : from_base64('QWJj')
checked expr   : from_base64<String>("QWJj")
optimized expr : "Abc"
output type    : String
output domain  : {"Abc"..="Abc"}
output         : 'Abc'


ast            : from_base64('MTIz')
raw expr       : from_base64('MTIz')
checked expr   : from_base64<String>("MTIz")
optimized expr : "123"
output type    : String
output domain  : {"123"..="123"}
output         : '123'


ast            : from_base64(Null)
raw expr       : from_base64(NULL)
checked expr   : from_base64<String NULL>(CAST(NULL AS String NULL))
optimized expr : NULL
output type    : String NULL
output domain  : {NULL}
output         : NULL


ast            : from_base64(a)
raw expr       : from_base64(a::String)
checked expr   : from_base64<String>(a)
evaluation:
+--------+-------------------+---------+
|        | a                 | Output  |
+--------+-------------------+---------+
| Type   | String            | String  |
| Domain | {"MTIz"..="QWJj"} | Unknown |
| Row 0  | 'QWJj'            | 'Abc'   |
| Row 1  | 'MTIz'            | '123'   |
+--------+-------------------+---------+
evaluation (internal):
+--------+---------------------------------------------------------------+
| Column | Data                                                          |
+--------+---------------------------------------------------------------+
| a      | StringColumn { data: 0x51574a6a4d54497a, offsets: [0, 4, 8] } |
| Output | StringColumn { data: 0x416263313233, offsets: [0, 3, 6] }     |
+--------+---------------------------------------------------------------+


error: 
  --> SQL:1:1
  |
1 | from_base64('!@#')
  | ^^^^^^^^^^^^^^^^^^ Invalid byte 33, offset 0. while evaluating function `from_base64('!@#')`



ast            : quote('a\0b')
raw expr       : quote('a b')
checked expr   : quote<String>("a\0b")
optimized expr : "a\\0b"
output type    : String
output domain  : {"a\\0b"..="a\\0b"}
output         : 'a\0b'


ast            : quote('a\'b')
raw expr       : quote('a'b')
checked expr   : quote<String>("a'b")
optimized expr : "a\\'b"
output type    : String
output domain  : {"a\\'b"..="a\\'b"}
output         : 'a\'b'


ast            : quote('a\"b')
raw expr       : quote('a"b')
checked expr   : quote<String>("a\"b")
optimized expr : "a\\\"b"
output type    : String
output domain  : {"a\\\"b"..="a\\\"b"}
output         : 'a\"b'


ast            : quote('a\bb')
raw expr       : quote('ab')
checked expr   : quote<String>("a\u{8}b")
optimized expr : "a\\bb"
output type    : String
output domain  : {"a\\bb"..="a\\bb"}
output         : 'a\bb'


ast            : quote('a\nb')
raw expr       : quote('a
b')
checked expr   : quote<String>("a\nb")
optimized expr : "a\\nb"
output type    : String
output domain  : {"a\\nb"..="a\\nb"}
output         : 'a\nb'


ast            : quote('a\rb')
raw expr       : quote('ab')
checked expr   : quote<String>("a\rb")
optimized expr : "a\\rb"
output type    : String
output domain  : {"a\\rb"..="a\\rb"}
output         : 'a\rb'


ast            : quote('a\tb')
raw expr       : quote('a	b')
checked expr   : quote<String>("a\tb")
optimized expr : "a\\tb"
output type    : String
output domain  : {"a\\tb"..="a\\tb"}
output         : 'a\tb'


ast            : quote('a\\b')
raw expr       : quote('a\b')
checked expr   : quote<String>("a\\b")
optimized expr : "a\\\\b"
output type    : String
output domain  : {"a\\\\b"..="a\\\\b"}
output         : 'a\\b'


ast            : quote('‰Ω†Â•Ω')
raw expr       : quote('‰Ω†Â•Ω')
checked expr   : quote<String>("‰Ω†Â•Ω")
optimized expr : "‰Ω†Â•Ω"
output type    : String
output domain  : {"‰Ω†Â•Ω"..="‰Ω†Â•Ω"}
output         : '‰Ω†Â•Ω'


ast            : quote('√üüòÄÂ±±')
raw expr       : quote('√üüòÄÂ±±')
checked expr   : quote<String>("√üüòÄÂ±±")
optimized expr : "√üüòÄÂ±±"
output type    : String
output domain  : {"√üüòÄÂ±±"..="√üüòÄÂ±±"}
output         : '√üüòÄÂ±±'


ast            : quote('Dobr√Ω den')
raw expr       : quote('Dobr√Ω den')
checked expr   : quote<String>("Dobr√Ω den")
optimized expr : "Dobr√Ω den"
output type    : String
output domain  : {"Dobr√Ω den"..="Dobr√Ω den"}
output         : 'Dobr√Ω den'


ast            : quote(Null)
raw expr       : quote(NULL)
checked expr   : quote<String NULL>(CAST(NULL AS String NULL))
optimized expr : NULL
output type    : String NULL
output domain  : {NULL}
output         : NULL


ast            : quote(a)
raw expr       : quote(a::String)
checked expr   : quote<String>(a)
evaluation:
+--------+---------------------+----------+
|        | a                   | Output   |
+--------+---------------------+----------+
| Type   | String              | String   |
| Domain | {"a\\'b"..="a\\nb"} | {""..}   |
| Row 0  | 'a\0b'              | 'a\\0b'  |
| Row 1  | 'a\'b'              | 'a\\\'b' |
| Row 2  | 'a\nb'              | 'a\\nb'  |
+--------+---------------------+----------+
evaluation (internal):
+--------+------------------------------------------------------------------------------------+
| Column | Data                                                                               |
+--------+------------------------------------------------------------------------------------+
| a      | StringColumn { data: 0x615c3062615c2762615c6e62, offsets: [0, 4, 8, 12] }          |
| Output | StringColumn { data: 0x615c5c3062615c5c5c2762615c5c6e62, offsets: [0, 5, 11, 16] } |
+--------+------------------------------------------------------------------------------------+


ast            : reverse('abc')
raw expr       : reverse('abc')
checked expr   : reverse<String>("abc")
optimized expr : "cba"
output type    : String
output domain  : {"cba"..="cba"}
output         : 'cba'


ast            : reverse('a')
raw expr       : reverse('a')
checked expr   : reverse<String>("a")
optimized expr : "a"
output type    : String
output domain  : {"a"..="a"}
output         : 'a'


ast            : reverse('')
raw expr       : reverse('')
checked expr   : reverse<String>("")
optimized expr : ""
output type    : String
output domain  : {""..=""}
output         : ''


ast            : reverse('‰Ω†Â•Ω')
raw expr       : reverse('‰Ω†Â•Ω')
checked expr   : reverse<String>("‰Ω†Â•Ω")
optimized expr : 0xbda5e5a0bde4
output type    : String
output domain  : {"ÔøΩÔøΩÂ†ΩÔøΩ"..="ÔøΩÔøΩÂ†ΩÔøΩ"}
output         : 0xbda5e5a0bde4


ast            : reverse('√üüòÄÂ±±')
raw expr       : reverse('√üüòÄÂ±±')
checked expr   : reverse<String>("√üüòÄÂ±±")
optimized expr : 0xb1b1e580989ff09fc3
output type    : String
output domain  : {"ÔøΩÔøΩÂÄòÔøΩÔøΩÔøΩ"..="ÔøΩÔøΩÂÄòÔøΩÔøΩÔøΩ"}
output         : 0xb1b1e580989ff09fc3


ast            : reverse('Dobr√Ω den')
raw expr       : reverse('Dobr√Ω den')
checked expr   : reverse<String>("Dobr√Ω den")
optimized expr : 0x6e656420bdc372626f44
output type    : String
output domain  : {"ned ÔøΩÔøΩrboD"..="ned ÔøΩÔøΩrboD"}
output         : 0x6e656420bdc372626f44


ast            : reverse(Null)
raw expr       : reverse(NULL)
checked expr   : reverse<String NULL>(CAST(NULL AS String NULL))
optimized expr : NULL
output type    : String NULL
output domain  : {NULL}
output         : NULL


ast            : reverse(a)
raw expr       : reverse(a::String)
checked expr   : reverse<String>(a)
evaluation:
+--------+--------------+--------+
|        | a            | Output |
+--------+--------------+--------+
| Type   | String       | String |
| Domain | {""..="abc"} | {""..} |
| Row 0  | 'abc'        | 'cba'  |
| Row 1  | 'a'          | 'a'    |
| Row 2  | ''           | ''     |
+--------+--------------+--------+
evaluation (internal):
+--------+----------------------------------------------------------+
| Column | Data                                                     |
+--------+----------------------------------------------------------+
| a      | StringColumn { data: 0x61626361, offsets: [0, 3, 4, 4] } |
| Output | StringColumn { data: 0x63626161, offsets: [0, 3, 4, 4] } |
+--------+----------------------------------------------------------+


ast            : ascii('1')
raw expr       : ascii('1')
checked expr   : ascii<String>("1")
optimized expr : 49_u8
output type    : UInt8
output domain  : {49..=49}
output         : 49


ast            : ascii('123')
raw expr       : ascii('123')
checked expr   : ascii<String>("123")
optimized expr : 49_u8
output type    : UInt8
output domain  : {49..=49}
output         : 49


ast            : ascii('-1')
raw expr       : ascii('-1')
checked expr   : ascii<String>("-1")
optimized expr : 45_u8
output type    : UInt8
output domain  : {45..=45}
output         : 45


ast            : ascii('')
raw expr       : ascii('')
checked expr   : ascii<String>("")
optimized expr : 0_u8
output type    : UInt8
output domain  : {0..=0}
output         : 0


ast            : ascii('‰Ω†Â•Ω')
raw expr       : ascii('‰Ω†Â•Ω')
checked expr   : ascii<String>("‰Ω†Â•Ω")
optimized expr : 228_u8
output type    : UInt8
output domain  : {228..=228}
output         : 228


ast            : ascii('üòÄ123')
raw expr       : ascii('üòÄ123')
checked expr   : ascii<String>("üòÄ123")
optimized expr : 240_u8
output type    : UInt8
output domain  : {240..=240}
output         : 240


ast            : ascii(Null)
raw expr       : ascii(NULL)
checked expr   : ascii<String NULL>(CAST(NULL AS String NULL))
optimized expr : NULL
output type    : UInt8 NULL
output domain  : {NULL}
output         : NULL


ast            : ascii(a)
raw expr       : ascii(a::String)
checked expr   : ascii<String>(a)
evaluation:
+--------+-----------------+------------+
|        | a               | Output     |
+--------+-----------------+------------+
| Type   | String          | UInt8      |
| Domain | {"-1"..="‰Ω†Â•Ω"} | {45..=228} |
| Row 0  | '1'             | 49         |
| Row 1  | '123'           | 49         |
| Row 2  | '-1'            | 45         |
| Row 3  | '‰Ω†Â•Ω'          | 228        |
+--------+-----------------+------------+
evaluation (internal):
+--------+------------------------------------------------------------------------------+
| Column | Data                                                                         |
+--------+------------------------------------------------------------------------------+
| a      | StringColumn { data: 0x313132332d31e4bda0e5a5bd, offsets: [0, 1, 4, 6, 12] } |
| Output | UInt8([49, 49, 45, 228])                                                     |
+--------+------------------------------------------------------------------------------+


ast            : ascii(b)
raw expr       : ascii(b::String)
checked expr   : ascii<String>(b)
optimized expr : 0_u8
evaluation:
+--------+-----------+---------+
|        | b         | Output  |
+--------+-----------+---------+
| Type   | String    | UInt8   |
| Domain | {""..=""} | {0..=0} |
| Row 0  | ''        | 0       |
+--------+-----------+---------+
evaluation (internal):
+--------+--------------------------------------------+
| Column | Data                                       |
+--------+--------------------------------------------+
| b      | StringColumn { data: 0x, offsets: [0, 0] } |
| Output | UInt8([0])                                 |
+--------+--------------------------------------------+


ast            : ltrim('   abc   ')
raw expr       : ltrim('   abc   ')
checked expr   : ltrim<String>("   abc   ")
optimized expr : "abc   "
output type    : String
output domain  : {"abc   "..="abc   "}
output         : 'abc   '


ast            : ltrim('  ')
raw expr       : ltrim('  ')
checked expr   : ltrim<String>("  ")
optimized expr : ""
output type    : String
output domain  : {""..=""}
output         : ''


ast            : ltrim(NULL)
raw expr       : ltrim(NULL)
checked expr   : ltrim<String NULL>(CAST(NULL AS String NULL))
optimized expr : NULL
output type    : String NULL
output domain  : {NULL}
output         : NULL


ast            : ltrim(a)
raw expr       : ltrim(a::String)
checked expr   : ltrim<String>(a)
evaluation:
+--------+-----------------------+----------+
|        | a                     | Output   |
+--------+-----------------------+----------+
| Type   | String                | String   |
| Domain | {"   abc"..="abc   "} | {""..}   |
| Row 0  | 'abc'                 | 'abc'    |
| Row 1  | '   abc'              | 'abc'    |
| Row 2  | '   abc   '           | 'abc   ' |
| Row 3  | 'abc   '              | 'abc   ' |
+--------+-----------------------+----------+
evaluation (internal):
+--------+-------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                  |
+--------+-------------------------------------------------------------------------------------------------------+
| a      | StringColumn { data: 0x616263202020616263202020616263202020616263202020, offsets: [0, 3, 9, 18, 24] } |
| Output | StringColumn { data: 0x616263616263616263202020616263202020, offsets: [0, 3, 6, 12, 18] }             |
+--------+-------------------------------------------------------------------------------------------------------+


ast            : rtrim('   abc   ')
raw expr       : rtrim('   abc   ')
checked expr   : rtrim<String>("   abc   ")
optimized expr : "   abc"
output type    : String
output domain  : {"   abc"..="   abc"}
output         : '   abc'


ast            : rtrim('  ')
raw expr       : rtrim('  ')
checked expr   : rtrim<String>("  ")
optimized expr : ""
output type    : String
output domain  : {""..=""}
output         : ''


ast            : rtrim(NULL)
raw expr       : rtrim(NULL)
checked expr   : rtrim<String NULL>(CAST(NULL AS String NULL))
optimized expr : NULL
output type    : String NULL
output domain  : {NULL}
output         : NULL


ast            : rtrim(a)
raw expr       : rtrim(a::String)
checked expr   : rtrim<String>(a)
evaluation:
+--------+-----------------------+----------+
|        | a                     | Output   |
+--------+-----------------------+----------+
| Type   | String                | String   |
| Domain | {"   abc"..="abc   "} | {""..}   |
| Row 0  | 'abc'                 | 'abc'    |
| Row 1  | '   abc'              | '   abc' |
| Row 2  | '   abc   '           | '   abc' |
| Row 3  | 'abc   '              | 'abc'    |
+--------+-----------------------+----------+
evaluation (internal):
+--------+-------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                  |
+--------+-------------------------------------------------------------------------------------------------------+
| a      | StringColumn { data: 0x616263202020616263202020616263202020616263202020, offsets: [0, 3, 9, 18, 24] } |
| Output | StringColumn { data: 0x616263202020616263202020616263616263, offsets: [0, 3, 9, 15, 18] }             |
+--------+-------------------------------------------------------------------------------------------------------+


ast            : trim_leading('aaabbaaa', 'a')
raw expr       : trim_leading('aaabbaaa', 'a')
checked expr   : trim_leading<String, String>("aaabbaaa", "a")
optimized expr : "bbaaa"
output type    : String
output domain  : {"bbaaa"..="bbaaa"}
output         : 'bbaaa'


ast            : trim_leading('aaabbaaa', 'aa')
raw expr       : trim_leading('aaabbaaa', 'aa')
checked expr   : trim_leading<String, String>("aaabbaaa", "aa")
optimized expr : "abbaaa"
output type    : String
output domain  : {"abbaaa"..="abbaaa"}
output         : 'abbaaa'


ast            : trim_leading('aaaaaaaa', 'a')
raw expr       : trim_leading('aaaaaaaa', 'a')
checked expr   : trim_leading<String, String>("aaaaaaaa", "a")
optimized expr : ""
output type    : String
output domain  : {""..=""}
output         : ''


ast            : trim_leading('aaabbaaa', 'b')
raw expr       : trim_leading('aaabbaaa', 'b')
checked expr   : trim_leading<String, String>("aaabbaaa", "b")
optimized expr : "aaabbaaa"
output type    : String
output domain  : {"aaabbaaa"..="aaabbaaa"}
output         : 'aaabbaaa'


ast            : trim_leading(NULL, 'a')
raw expr       : trim_leading(NULL, 'a')
checked expr   : trim_leading<String NULL, String NULL>(CAST(NULL AS String NULL), CAST("a" AS String NULL))
optimized expr : NULL
output type    : String NULL
output domain  : {NULL}
output         : NULL


ast            : trim_leading('aaaaaaaa', NULL)
raw expr       : trim_leading('aaaaaaaa', NULL)
checked expr   : trim_leading<String NULL, String NULL>(CAST("aaaaaaaa" AS String NULL), CAST(NULL AS String NULL))
optimized expr : NULL
output type    : String NULL
output domain  : {NULL}
output         : NULL


ast            : trim_leading(a, 'a')
raw expr       : trim_leading(a::String, 'a')
checked expr   : trim_leading<String, String>(a, "a")
evaluation:
+--------+-----------------------+----------+
|        | a                     | Output   |
+--------+-----------------------+----------+
| Type   | String                | String   |
| Domain | {"aabbaa"..="ccddcc"} | {""..}   |
| Row 0  | 'aabbaa'              | 'bbaa'   |
| Row 1  | 'bbccbb'              | 'bbccbb' |
| Row 2  | 'ccddcc'              | 'ccddcc' |
+--------+-----------------------+----------+
evaluation (internal):
+--------+----------------------------------------------------------------------------------------+
| Column | Data                                                                                   |
+--------+----------------------------------------------------------------------------------------+
| a      | StringColumn { data: 0x616162626161626263636262636364646363, offsets: [0, 6, 12, 18] } |
| Output | StringColumn { data: 0x62626161626263636262636364646363, offsets: [0, 4, 10, 16] }     |
+--------+----------------------------------------------------------------------------------------+


ast            : trim_leading(a, b)
raw expr       : trim_leading(a::String, b::String)
checked expr   : trim_leading<String, String>(a, b)
evaluation:
+--------+-----------------------+-------------+--------+
|        | a                     | b           | Output |
+--------+-----------------------+-------------+--------+
| Type   | String                | String      | String |
| Domain | {"aabbaa"..="ccddcc"} | {"a"..="c"} | {""..} |
| Row 0  | 'aabbaa'              | 'a'         | 'bbaa' |
| Row 1  | 'bbccbb'              | 'b'         | 'ccbb' |
| Row 2  | 'ccddcc'              | 'c'         | 'ddcc' |
+--------+-----------------------+-------------+--------+
evaluation (internal):
+--------+----------------------------------------------------------------------------------------+
| Column | Data                                                                                   |
+--------+----------------------------------------------------------------------------------------+
| a      | StringColumn { data: 0x616162626161626263636262636364646363, offsets: [0, 6, 12, 18] } |
| b      | StringColumn { data: 0x616263, offsets: [0, 1, 2, 3] }                                 |
| Output | StringColumn { data: 0x626261616363626264646363, offsets: [0, 4, 8, 12] }              |
+--------+----------------------------------------------------------------------------------------+


ast            : trim_leading('aba', b)
raw expr       : trim_leading('aba', b::String)
checked expr   : trim_leading<String, String>("aba", b)
evaluation:
+--------+-------------+--------+
|        | b           | Output |
+--------+-------------+--------+
| Type   | String      | String |
| Domain | {"a"..="c"} | {""..} |
| Row 0  | 'a'         | 'ba'   |
| Row 1  | 'b'         | 'aba'  |
| Row 2  | 'c'         | 'aba'  |
+--------+-------------+--------+
evaluation (internal):
+--------+------------------------------------------------------------------+
| Column | Data                                                             |
+--------+------------------------------------------------------------------+
| b      | StringColumn { data: 0x616263, offsets: [0, 1, 2, 3] }           |
| Output | StringColumn { data: 0x6261616261616261, offsets: [0, 2, 5, 8] } |
+--------+------------------------------------------------------------------+


ast            : trim_trailing('aaabbaaa', 'a')
raw expr       : trim_trailing('aaabbaaa', 'a')
checked expr   : trim_trailing<String, String>("aaabbaaa", "a")
optimized expr : "aaabb"
output type    : String
output domain  : {"aaabb"..="aaabb"}
output         : 'aaabb'


ast            : trim_trailing('aaabbaaa', 'aa')
raw expr       : trim_trailing('aaabbaaa', 'aa')
checked expr   : trim_trailing<String, String>("aaabbaaa", "aa")
optimized expr : "aaabba"
output type    : String
output domain  : {"aaabba"..="aaabba"}
output         : 'aaabba'


ast            : trim_trailing('aaaaaaaa', 'a')
raw expr       : trim_trailing('aaaaaaaa', 'a')
checked expr   : trim_trailing<String, String>("aaaaaaaa", "a")
optimized expr : ""
output type    : String
output domain  : {""..=""}
output         : ''


ast            : trim_trailing('aaabbaaa', 'b')
raw expr       : trim_trailing('aaabbaaa', 'b')
checked expr   : trim_trailing<String, String>("aaabbaaa", "b")
optimized expr : "aaabbaaa"
output type    : String
output domain  : {"aaabbaaa"..="aaabbaaa"}
output         : 'aaabbaaa'


ast            : trim_trailing(NULL, 'a')
raw expr       : trim_trailing(NULL, 'a')
checked expr   : trim_trailing<String NULL, String NULL>(CAST(NULL AS String NULL), CAST("a" AS String NULL))
optimized expr : NULL
output type    : String NULL
output domain  : {NULL}
output         : NULL


ast            : trim_trailing('aaaaaaaa', NULL)
raw expr       : trim_trailing('aaaaaaaa', NULL)
checked expr   : trim_trailing<String NULL, String NULL>(CAST("aaaaaaaa" AS String NULL), CAST(NULL AS String NULL))
optimized expr : NULL
output type    : String NULL
output domain  : {NULL}
output         : NULL


ast            : trim_trailing(a, 'b')
raw expr       : trim_trailing(a::String, 'b')
checked expr   : trim_trailing<String, String>(a, "b")
evaluation:
+--------+-----------------------+----------+
|        | a                     | Output   |
+--------+-----------------------+----------+
| Type   | String                | String   |
| Domain | {"aabbaa"..="ccddcc"} | {""..}   |
| Row 0  | 'aabbaa'              | 'aabbaa' |
| Row 1  | 'bbccbb'              | 'bbcc'   |
| Row 2  | 'ccddcc'              | 'ccddcc' |
+--------+-----------------------+----------+
evaluation (internal):
+--------+----------------------------------------------------------------------------------------+
| Column | Data                                                                                   |
+--------+----------------------------------------------------------------------------------------+
| a      | StringColumn { data: 0x616162626161626263636262636364646363, offsets: [0, 6, 12, 18] } |
| Output | StringColumn { data: 0x61616262616162626363636364646363, offsets: [0, 6, 10, 16] }     |
+--------+----------------------------------------------------------------------------------------+


ast            : trim_trailing(a, b)
raw expr       : trim_trailing(a::String, b::String)
checked expr   : trim_trailing<String, String>(a, b)
evaluation:
+--------+-----------------------+-------------+--------+
|        | a                     | b           | Output |
+--------+-----------------------+-------------+--------+
| Type   | String                | String      | String |
| Domain | {"aabbaa"..="ccddcc"} | {"a"..="c"} | {""..} |
| Row 0  | 'aabbaa'              | 'a'         | 'aabb' |
| Row 1  | 'bbccbb'              | 'b'         | 'bbcc' |
| Row 2  | 'ccddcc'              | 'c'         | 'ccdd' |
+--------+-----------------------+-------------+--------+
evaluation (internal):
+--------+----------------------------------------------------------------------------------------+
| Column | Data                                                                                   |
+--------+----------------------------------------------------------------------------------------+
| a      | StringColumn { data: 0x616162626161626263636262636364646363, offsets: [0, 6, 12, 18] } |
| b      | StringColumn { data: 0x616263, offsets: [0, 1, 2, 3] }                                 |
| Output | StringColumn { data: 0x616162626262636363636464, offsets: [0, 4, 8, 12] }              |
+--------+----------------------------------------------------------------------------------------+


ast            : trim_trailing('aba', b)
raw expr       : trim_trailing('aba', b::String)
checked expr   : trim_trailing<String, String>("aba", b)
evaluation:
+--------+-------------+--------+
|        | b           | Output |
+--------+-------------+--------+
| Type   | String      | String |
| Domain | {"a"..="c"} | {""..} |
| Row 0  | 'a'         | 'ab'   |
| Row 1  | 'b'         | 'aba'  |
| Row 2  | 'c'         | 'aba'  |
+--------+-------------+--------+
evaluation (internal):
+--------+------------------------------------------------------------------+
| Column | Data                                                             |
+--------+------------------------------------------------------------------+
| b      | StringColumn { data: 0x616263, offsets: [0, 1, 2, 3] }           |
| Output | StringColumn { data: 0x6162616261616261, offsets: [0, 2, 5, 8] } |
+--------+------------------------------------------------------------------+


ast            : trim_both('aaabbaaa', 'a')
raw expr       : trim_both('aaabbaaa', 'a')
checked expr   : trim_both<String, String>("aaabbaaa", "a")
optimized expr : "bb"
output type    : String
output domain  : {"bb"..="bb"}
output         : 'bb'


ast            : trim_both('aaabbaaa', 'aa')
raw expr       : trim_both('aaabbaaa', 'aa')
checked expr   : trim_both<String, String>("aaabbaaa", "aa")
optimized expr : "abba"
output type    : String
output domain  : {"abba"..="abba"}
output         : 'abba'


ast            : trim_both('aaaaaaaa', 'a')
raw expr       : trim_both('aaaaaaaa', 'a')
checked expr   : trim_both<String, String>("aaaaaaaa", "a")
optimized expr : ""
output type    : String
output domain  : {""..=""}
output         : ''


ast            : trim_both('aaabbaaa', 'b')
raw expr       : trim_both('aaabbaaa', 'b')
checked expr   : trim_both<String, String>("aaabbaaa", "b")
optimized expr : "aaabbaaa"
output type    : String
output domain  : {"aaabbaaa"..="aaabbaaa"}
output         : 'aaabbaaa'


ast            : trim_both(NULL, 'a')
raw expr       : trim_both(NULL, 'a')
checked expr   : trim_both<String NULL, String NULL>(CAST(NULL AS String NULL), CAST("a" AS String NULL))
optimized expr : NULL
output type    : String NULL
output domain  : {NULL}
output         : NULL


ast            : trim_both('aaaaaaaa', NULL)
raw expr       : trim_both('aaaaaaaa', NULL)
checked expr   : trim_both<String NULL, String NULL>(CAST("aaaaaaaa" AS String NULL), CAST(NULL AS String NULL))
optimized expr : NULL
output type    : String NULL
output domain  : {NULL}
output         : NULL


ast            : trim_both(a, 'a')
raw expr       : trim_both(a::String, 'a')
checked expr   : trim_both<String, String>(a, "a")
evaluation:
+--------+-----------------------+----------+
|        | a                     | Output   |
+--------+-----------------------+----------+
| Type   | String                | String   |
| Domain | {"aabbaa"..="ccddcc"} | {""..}   |
| Row 0  | 'aabbaa'              | 'bb'     |
| Row 1  | 'bbccbb'              | 'bbccbb' |
| Row 2  | 'ccddcc'              | 'ccddcc' |
+--------+-----------------------+----------+
evaluation (internal):
+--------+----------------------------------------------------------------------------------------+
| Column | Data                                                                                   |
+--------+----------------------------------------------------------------------------------------+
| a      | StringColumn { data: 0x616162626161626263636262636364646363, offsets: [0, 6, 12, 18] } |
| Output | StringColumn { data: 0x6262626263636262636364646363, offsets: [0, 2, 8, 14] }          |
+--------+----------------------------------------------------------------------------------------+


ast            : trim_both(a, b)
raw expr       : trim_both(a::String, b::String)
checked expr   : trim_both<String, String>(a, b)
evaluation:
+--------+-----------------------+-------------+--------+
|        | a                     | b           | Output |
+--------+-----------------------+-------------+--------+
| Type   | String                | String      | String |
| Domain | {"aabbaa"..="ccddcc"} | {"a"..="c"} | {""..} |
| Row 0  | 'aabbaa'              | 'a'         | 'bb'   |
| Row 1  | 'bbccbb'              | 'b'         | 'cc'   |
| Row 2  | 'ccddcc'              | 'c'         | 'dd'   |
+--------+-----------------------+-------------+--------+
evaluation (internal):
+--------+----------------------------------------------------------------------------------------+
| Column | Data                                                                                   |
+--------+----------------------------------------------------------------------------------------+
| a      | StringColumn { data: 0x616162626161626263636262636364646363, offsets: [0, 6, 12, 18] } |
| b      | StringColumn { data: 0x616263, offsets: [0, 1, 2, 3] }                                 |
| Output | StringColumn { data: 0x626263636464, offsets: [0, 2, 4, 6] }                           |
+--------+----------------------------------------------------------------------------------------+


ast            : trim_both('aba', b)
raw expr       : trim_both('aba', b::String)
checked expr   : trim_both<String, String>("aba", b)
evaluation:
+--------+-------------+--------+
|        | b           | Output |
+--------+-------------+--------+
| Type   | String      | String |
| Domain | {"a"..="c"} | {""..} |
| Row 0  | 'a'         | 'b'    |
| Row 1  | 'b'         | 'aba'  |
| Row 2  | 'c'         | 'aba'  |
+--------+-------------+--------+
evaluation (internal):
+--------+----------------------------------------------------------------+
| Column | Data                                                           |
+--------+----------------------------------------------------------------+
| b      | StringColumn { data: 0x616263, offsets: [0, 1, 2, 3] }         |
| Output | StringColumn { data: 0x62616261616261, offsets: [0, 1, 4, 7] } |
+--------+----------------------------------------------------------------+


ast            : trim('   abc   ')
raw expr       : trim('   abc   ')
checked expr   : trim<String>("   abc   ")
optimized expr : "abc"
output type    : String
output domain  : {"abc"..="abc"}
output         : 'abc'


ast            : trim('  ')
raw expr       : trim('  ')
checked expr   : trim<String>("  ")
optimized expr : ""
output type    : String
output domain  : {""..=""}
output         : ''


ast            : trim(NULL)
raw expr       : trim(NULL)
checked expr   : trim<String NULL>(CAST(NULL AS String NULL))
optimized expr : NULL
output type    : String NULL
output domain  : {NULL}
output         : NULL


ast            : trim(a)
raw expr       : trim(a::String)
checked expr   : trim<String>(a)
evaluation:
+--------+-----------------------+--------+
|        | a                     | Output |
+--------+-----------------------+--------+
| Type   | String                | String |
| Domain | {"   abc"..="abc   "} | {""..} |
| Row 0  | 'abc'                 | 'abc'  |
| Row 1  | '   abc'              | 'abc'  |
| Row 2  | '   abc   '           | 'abc'  |
| Row 3  | 'abc   '              | 'abc'  |
+--------+-----------------------+--------+
evaluation (internal):
+--------+-------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                  |
+--------+-------------------------------------------------------------------------------------------------------+
| a      | StringColumn { data: 0x616263202020616263202020616263202020616263202020, offsets: [0, 3, 9, 18, 24] } |
| Output | StringColumn { data: 0x616263616263616263616263, offsets: [0, 3, 6, 9, 12] }                          |
+--------+-------------------------------------------------------------------------------------------------------+


ast            : trim(both 'a' from 'aaabbaaa')
raw expr       : trim_both('aaabbaaa', 'a')
checked expr   : trim_both<String, String>("aaabbaaa", "a")
optimized expr : "bb"
output type    : String
output domain  : {"bb"..="bb"}
output         : 'bb'


ast            : trim(both 'aa' from 'aaabbaaa')
raw expr       : trim_both('aaabbaaa', 'aa')
checked expr   : trim_both<String, String>("aaabbaaa", "aa")
optimized expr : "abba"
output type    : String
output domain  : {"abba"..="abba"}
output         : 'abba'


ast            : trim(both 'a' from 'aaaaaaaa')
raw expr       : trim_both('aaaaaaaa', 'a')
checked expr   : trim_both<String, String>("aaaaaaaa", "a")
optimized expr : ""
output type    : String
output domain  : {""..=""}
output         : ''


ast            : trim(both 'b' from 'aaabbaaa')
raw expr       : trim_both('aaabbaaa', 'b')
checked expr   : trim_both<String, String>("aaabbaaa", "b")
optimized expr : "aaabbaaa"
output type    : String
output domain  : {"aaabbaaa"..="aaabbaaa"}
output         : 'aaabbaaa'


ast            : trim(both 'a' from NULL)
raw expr       : trim_both(NULL, 'a')
checked expr   : trim_both<String NULL, String NULL>(CAST(NULL AS String NULL), CAST("a" AS String NULL))
optimized expr : NULL
output type    : String NULL
output domain  : {NULL}
output         : NULL


ast            : trim(both NULL from 'aaaaaaaa')
raw expr       : trim_both('aaaaaaaa', NULL)
checked expr   : trim_both<String NULL, String NULL>(CAST("aaaaaaaa" AS String NULL), CAST(NULL AS String NULL))
optimized expr : NULL
output type    : String NULL
output domain  : {NULL}
output         : NULL


ast            : trim(both 'a' from a)
raw expr       : trim_both(a::String, 'a')
checked expr   : trim_both<String, String>(a, "a")
evaluation:
+--------+-----------------------+----------+
|        | a                     | Output   |
+--------+-----------------------+----------+
| Type   | String                | String   |
| Domain | {"aabbaa"..="ccddcc"} | {""..}   |
| Row 0  | 'aabbaa'              | 'bb'     |
| Row 1  | 'bbccbb'              | 'bbccbb' |
| Row 2  | 'ccddcc'              | 'ccddcc' |
+--------+-----------------------+----------+
evaluation (internal):
+--------+----------------------------------------------------------------------------------------+
| Column | Data                                                                                   |
+--------+----------------------------------------------------------------------------------------+
| a      | StringColumn { data: 0x616162626161626263636262636364646363, offsets: [0, 6, 12, 18] } |
| Output | StringColumn { data: 0x6262626263636262636364646363, offsets: [0, 2, 8, 14] }          |
+--------+----------------------------------------------------------------------------------------+


ast            : trim(both b from a)
raw expr       : trim_both(a::String, b::String)
checked expr   : trim_both<String, String>(a, b)
evaluation:
+--------+-----------------------+-------------+--------+
|        | a                     | b           | Output |
+--------+-----------------------+-------------+--------+
| Type   | String                | String      | String |
| Domain | {"aabbaa"..="ccddcc"} | {"a"..="c"} | {""..} |
| Row 0  | 'aabbaa'              | 'a'         | 'bb'   |
| Row 1  | 'bbccbb'              | 'b'         | 'cc'   |
| Row 2  | 'ccddcc'              | 'c'         | 'dd'   |
+--------+-----------------------+-------------+--------+
evaluation (internal):
+--------+----------------------------------------------------------------------------------------+
| Column | Data                                                                                   |
+--------+----------------------------------------------------------------------------------------+
| a      | StringColumn { data: 0x616162626161626263636262636364646363, offsets: [0, 6, 12, 18] } |
| b      | StringColumn { data: 0x616263, offsets: [0, 1, 2, 3] }                                 |
| Output | StringColumn { data: 0x626263636464, offsets: [0, 2, 4, 6] }                           |
+--------+----------------------------------------------------------------------------------------+


ast            : trim(both a from a)
raw expr       : trim_both(a::String, a::String)
checked expr   : trim_both<String, String>(a, a)
evaluation:
+--------+-----------------------+--------+
|        | a                     | Output |
+--------+-----------------------+--------+
| Type   | String                | String |
| Domain | {"aabbaa"..="ccddcc"} | {""..} |
| Row 0  | 'aabbaa'              | ''     |
| Row 1  | 'bbccbb'              | ''     |
| Row 2  | 'ccddcc'              | ''     |
+--------+-----------------------+--------+
evaluation (internal):
+--------+----------------------------------------------------------------------------------------+
| Column | Data                                                                                   |
+--------+----------------------------------------------------------------------------------------+
| a      | StringColumn { data: 0x616162626161626263636262636364646363, offsets: [0, 6, 12, 18] } |
| Output | StringColumn { data: 0x, offsets: [0, 0, 0, 0] }                                       |
+--------+----------------------------------------------------------------------------------------+


ast            : trim(both b from 'aba')
raw expr       : trim_both('aba', b::String)
checked expr   : trim_both<String, String>("aba", b)
evaluation:
+--------+-------------+--------+
|        | b           | Output |
+--------+-------------+--------+
| Type   | String      | String |
| Domain | {"a"..="c"} | {""..} |
| Row 0  | 'a'         | 'b'    |
| Row 1  | 'b'         | 'aba'  |
| Row 2  | 'c'         | 'aba'  |
+--------+-------------+--------+
evaluation (internal):
+--------+----------------------------------------------------------------+
| Column | Data                                                           |
+--------+----------------------------------------------------------------+
| b      | StringColumn { data: 0x616263, offsets: [0, 1, 2, 3] }         |
| Output | StringColumn { data: 0x62616261616261, offsets: [0, 1, 4, 7] } |
+--------+----------------------------------------------------------------+


ast            : trim(leading 'a' from 'aaabbaaa')
raw expr       : trim_leading('aaabbaaa', 'a')
checked expr   : trim_leading<String, String>("aaabbaaa", "a")
optimized expr : "bbaaa"
output type    : String
output domain  : {"bbaaa"..="bbaaa"}
output         : 'bbaaa'


ast            : trim(leading 'aa' from 'aaabbaaa')
raw expr       : trim_leading('aaabbaaa', 'aa')
checked expr   : trim_leading<String, String>("aaabbaaa", "aa")
optimized expr : "abbaaa"
output type    : String
output domain  : {"abbaaa"..="abbaaa"}
output         : 'abbaaa'


ast            : trim(leading 'a' from 'aaaaaaaa')
raw expr       : trim_leading('aaaaaaaa', 'a')
checked expr   : trim_leading<String, String>("aaaaaaaa", "a")
optimized expr : ""
output type    : String
output domain  : {""..=""}
output         : ''


ast            : trim(leading 'b' from 'aaabbaaa')
raw expr       : trim_leading('aaabbaaa', 'b')
checked expr   : trim_leading<String, String>("aaabbaaa", "b")
optimized expr : "aaabbaaa"
output type    : String
output domain  : {"aaabbaaa"..="aaabbaaa"}
output         : 'aaabbaaa'


ast            : trim(leading 'a' from NULL)
raw expr       : trim_leading(NULL, 'a')
checked expr   : trim_leading<String NULL, String NULL>(CAST(NULL AS String NULL), CAST("a" AS String NULL))
optimized expr : NULL
output type    : String NULL
output domain  : {NULL}
output         : NULL


ast            : trim(leading NULL from 'aaaaaaaa')
raw expr       : trim_leading('aaaaaaaa', NULL)
checked expr   : trim_leading<String NULL, String NULL>(CAST("aaaaaaaa" AS String NULL), CAST(NULL AS String NULL))
optimized expr : NULL
output type    : String NULL
output domain  : {NULL}
output         : NULL


ast            : trim(leading 'a' from a)
raw expr       : trim_leading(a::String, 'a')
checked expr   : trim_leading<String, String>(a, "a")
evaluation:
+--------+-----------------------+----------+
|        | a                     | Output   |
+--------+-----------------------+----------+
| Type   | String                | String   |
| Domain | {"aabbaa"..="ccddcc"} | {""..}   |
| Row 0  | 'aabbaa'              | 'bbaa'   |
| Row 1  | 'bbccbb'              | 'bbccbb' |
| Row 2  | 'ccddcc'              | 'ccddcc' |
+--------+-----------------------+----------+
evaluation (internal):
+--------+----------------------------------------------------------------------------------------+
| Column | Data                                                                                   |
+--------+----------------------------------------------------------------------------------------+
| a      | StringColumn { data: 0x616162626161626263636262636364646363, offsets: [0, 6, 12, 18] } |
| Output | StringColumn { data: 0x62626161626263636262636364646363, offsets: [0, 4, 10, 16] }     |
+--------+----------------------------------------------------------------------------------------+


ast            : trim(leading b from a)
raw expr       : trim_leading(a::String, b::String)
checked expr   : trim_leading<String, String>(a, b)
evaluation:
+--------+-----------------------+-------------+--------+
|        | a                     | b           | Output |
+--------+-----------------------+-------------+--------+
| Type   | String                | String      | String |
| Domain | {"aabbaa"..="ccddcc"} | {"a"..="c"} | {""..} |
| Row 0  | 'aabbaa'              | 'a'         | 'bbaa' |
| Row 1  | 'bbccbb'              | 'b'         | 'ccbb' |
| Row 2  | 'ccddcc'              | 'c'         | 'ddcc' |
+--------+-----------------------+-------------+--------+
evaluation (internal):
+--------+----------------------------------------------------------------------------------------+
| Column | Data                                                                                   |
+--------+----------------------------------------------------------------------------------------+
| a      | StringColumn { data: 0x616162626161626263636262636364646363, offsets: [0, 6, 12, 18] } |
| b      | StringColumn { data: 0x616263, offsets: [0, 1, 2, 3] }                                 |
| Output | StringColumn { data: 0x626261616363626264646363, offsets: [0, 4, 8, 12] }              |
+--------+----------------------------------------------------------------------------------------+


ast            : trim(leading a from a)
raw expr       : trim_leading(a::String, a::String)
checked expr   : trim_leading<String, String>(a, a)
evaluation:
+--------+-----------------------+--------+
|        | a                     | Output |
+--------+-----------------------+--------+
| Type   | String                | String |
| Domain | {"aabbaa"..="ccddcc"} | {""..} |
| Row 0  | 'aabbaa'              | ''     |
| Row 1  | 'bbccbb'              | ''     |
| Row 2  | 'ccddcc'              | ''     |
+--------+-----------------------+--------+
evaluation (internal):
+--------+----------------------------------------------------------------------------------------+
| Column | Data                                                                                   |
+--------+----------------------------------------------------------------------------------------+
| a      | StringColumn { data: 0x616162626161626263636262636364646363, offsets: [0, 6, 12, 18] } |
| Output | StringColumn { data: 0x, offsets: [0, 0, 0, 0] }                                       |
+--------+----------------------------------------------------------------------------------------+


ast            : trim(leading b from 'aba')
raw expr       : trim_leading('aba', b::String)
checked expr   : trim_leading<String, String>("aba", b)
evaluation:
+--------+-------------+--------+
|        | b           | Output |
+--------+-------------+--------+
| Type   | String      | String |
| Domain | {"a"..="c"} | {""..} |
| Row 0  | 'a'         | 'ba'   |
| Row 1  | 'b'         | 'aba'  |
| Row 2  | 'c'         | 'aba'  |
+--------+-------------+--------+
evaluation (internal):
+--------+------------------------------------------------------------------+
| Column | Data                                                             |
+--------+------------------------------------------------------------------+
| b      | StringColumn { data: 0x616263, offsets: [0, 1, 2, 3] }           |
| Output | StringColumn { data: 0x6261616261616261, offsets: [0, 2, 5, 8] } |
+--------+------------------------------------------------------------------+


ast            : trim(trailing 'a' from 'aaabbaaa')
raw expr       : trim_trailing('aaabbaaa', 'a')
checked expr   : trim_trailing<String, String>("aaabbaaa", "a")
optimized expr : "aaabb"
output type    : String
output domain  : {"aaabb"..="aaabb"}
output         : 'aaabb'


ast            : trim(trailing 'aa' from 'aaabbaaa')
raw expr       : trim_trailing('aaabbaaa', 'aa')
checked expr   : trim_trailing<String, String>("aaabbaaa", "aa")
optimized expr : "aaabba"
output type    : String
output domain  : {"aaabba"..="aaabba"}
output         : 'aaabba'


ast            : trim(trailing 'a' from 'aaaaaaaa')
raw expr       : trim_trailing('aaaaaaaa', 'a')
checked expr   : trim_trailing<String, String>("aaaaaaaa", "a")
optimized expr : ""
output type    : String
output domain  : {""..=""}
output         : ''


ast            : trim(trailing 'b' from 'aaabbaaa')
raw expr       : trim_trailing('aaabbaaa', 'b')
checked expr   : trim_trailing<String, String>("aaabbaaa", "b")
optimized expr : "aaabbaaa"
output type    : String
output domain  : {"aaabbaaa"..="aaabbaaa"}
output         : 'aaabbaaa'


ast            : trim(trailing 'a' from NULL)
raw expr       : trim_trailing(NULL, 'a')
checked expr   : trim_trailing<String NULL, String NULL>(CAST(NULL AS String NULL), CAST("a" AS String NULL))
optimized expr : NULL
output type    : String NULL
output domain  : {NULL}
output         : NULL


ast            : trim(trailing NULL from 'aaaaaaaa')
raw expr       : trim_trailing('aaaaaaaa', NULL)
checked expr   : trim_trailing<String NULL, String NULL>(CAST("aaaaaaaa" AS String NULL), CAST(NULL AS String NULL))
optimized expr : NULL
output type    : String NULL
output domain  : {NULL}
output         : NULL


ast            : trim(trailing 'a' from a)
raw expr       : trim_trailing(a::String, 'a')
checked expr   : trim_trailing<String, String>(a, "a")
evaluation:
+--------+-----------------------+----------+
|        | a                     | Output   |
+--------+-----------------------+----------+
| Type   | String                | String   |
| Domain | {"aabbaa"..="ccddcc"} | {""..}   |
| Row 0  | 'aabbaa'              | 'aabb'   |
| Row 1  | 'bbccbb'              | 'bbccbb' |
| Row 2  | 'ccddcc'              | 'ccddcc' |
+--------+-----------------------+----------+
evaluation (internal):
+--------+----------------------------------------------------------------------------------------+
| Column | Data                                                                                   |
+--------+----------------------------------------------------------------------------------------+
| a      | StringColumn { data: 0x616162626161626263636262636364646363, offsets: [0, 6, 12, 18] } |
| Output | StringColumn { data: 0x61616262626263636262636364646363, offsets: [0, 4, 10, 16] }     |
+--------+----------------------------------------------------------------------------------------+


ast            : trim(trailing b from a)
raw expr       : trim_trailing(a::String, b::String)
checked expr   : trim_trailing<String, String>(a, b)
evaluation:
+--------+-----------------------+-------------+--------+
|        | a                     | b           | Output |
+--------+-----------------------+-------------+--------+
| Type   | String                | String      | String |
| Domain | {"aabbaa"..="ccddcc"} | {"a"..="c"} | {""..} |
| Row 0  | 'aabbaa'              | 'a'         | 'aabb' |
| Row 1  | 'bbccbb'              | 'b'         | 'bbcc' |
| Row 2  | 'ccddcc'              | 'c'         | 'ccdd' |
+--------+-----------------------+-------------+--------+
evaluation (internal):
+--------+----------------------------------------------------------------------------------------+
| Column | Data                                                                                   |
+--------+----------------------------------------------------------------------------------------+
| a      | StringColumn { data: 0x616162626161626263636262636364646363, offsets: [0, 6, 12, 18] } |
| b      | StringColumn { data: 0x616263, offsets: [0, 1, 2, 3] }                                 |
| Output | StringColumn { data: 0x616162626262636363636464, offsets: [0, 4, 8, 12] }              |
+--------+----------------------------------------------------------------------------------------+


ast            : trim(trailing a from a)
raw expr       : trim_trailing(a::String, a::String)
checked expr   : trim_trailing<String, String>(a, a)
evaluation:
+--------+-----------------------+--------+
|        | a                     | Output |
+--------+-----------------------+--------+
| Type   | String                | String |
| Domain | {"aabbaa"..="ccddcc"} | {""..} |
| Row 0  | 'aabbaa'              | ''     |
| Row 1  | 'bbccbb'              | ''     |
| Row 2  | 'ccddcc'              | ''     |
+--------+-----------------------+--------+
evaluation (internal):
+--------+----------------------------------------------------------------------------------------+
| Column | Data                                                                                   |
+--------+----------------------------------------------------------------------------------------+
| a      | StringColumn { data: 0x616162626161626263636262636364646363, offsets: [0, 6, 12, 18] } |
| Output | StringColumn { data: 0x, offsets: [0, 0, 0, 0] }                                       |
+--------+----------------------------------------------------------------------------------------+


ast            : trim(trailing b from 'aba')
raw expr       : trim_trailing('aba', b::String)
checked expr   : trim_trailing<String, String>("aba", b)
evaluation:
+--------+-------------+--------+
|        | b           | Output |
+--------+-------------+--------+
| Type   | String      | String |
| Domain | {"a"..="c"} | {""..} |
| Row 0  | 'a'         | 'ab'   |
| Row 1  | 'b'         | 'aba'  |
| Row 2  | 'c'         | 'aba'  |
+--------+-------------+--------+
evaluation (internal):
+--------+------------------------------------------------------------------+
| Column | Data                                                             |
+--------+------------------------------------------------------------------+
| b      | StringColumn { data: 0x616263, offsets: [0, 1, 2, 3] }           |
| Output | StringColumn { data: 0x6162616261616261, offsets: [0, 2, 5, 8] } |
+--------+------------------------------------------------------------------+


ast            : concat('5', '3', '4')
raw expr       : concat('5', '3', '4')
checked expr   : concat<String, String, String>("5", "3", "4")
optimized expr : "534"
output type    : String
output domain  : {"534"..="534"}
output         : '534'


ast            : concat(NULL, '3', '4')
raw expr       : concat(NULL, '3', '4')
checked expr   : concat<String NULL, String NULL, String NULL>(CAST(NULL AS String NULL), CAST("3" AS String NULL), CAST("4" AS String NULL))
optimized expr : NULL
output type    : String NULL
output domain  : {NULL}
output         : NULL


ast            : concat(a, '3', '4', '5')
raw expr       : concat(a::String, '3', '4', '5')
checked expr   : concat<String, String, String, String>(a, "3", "4", "5")
evaluation:
+--------+-----------------------+----------------+
|        | a                     | Output         |
+--------+-----------------------+----------------+
| Type   | String                | String         |
| Domain | {"   abc"..="abc   "} | {"   abc"..}   |
| Row 0  | 'abc'                 | 'abc345'       |
| Row 1  | '   abc'              | '   abc345'    |
| Row 2  | '   abc   '           | '   abc   345' |
| Row 3  | 'abc   '              | 'abc   345'    |
+--------+-----------------------+----------------+
evaluation (internal):
+--------+--------------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                           |
+--------+--------------------------------------------------------------------------------------------------------------------------------+
| a      | StringColumn { data: 0x616263202020616263202020616263202020616263202020, offsets: [0, 3, 9, 18, 24] }                          |
| Output | StringColumn { data: 0x616263333435202020616263333435202020616263202020333435616263202020333435, offsets: [0, 6, 15, 27, 36] } |
+--------+--------------------------------------------------------------------------------------------------------------------------------+


ast            : concat(a, '3')
raw expr       : concat(a::String NULL, '3')
checked expr   : concat<String NULL, String NULL>(a, CAST("3" AS String NULL))
optimized expr : concat<String NULL, String NULL>(a, "3")
evaluation:
+--------+----------------------+-----------------+
|        | a                    | Output          |
+--------+----------------------+-----------------+
| Type   | String NULL          | String NULL     |
| Domain | {"a"..="d"} ‚à™ {NULL} | {""..} ‚à™ {NULL} |
| Row 0  | 'a'                  | 'a3'            |
| Row 1  | 'b'                  | 'b3'            |
| Row 2  | NULL                 | NULL            |
| Row 3  | 'd'                  | 'd3'            |
+--------+----------------------+-----------------+
evaluation (internal):
+--------+------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                   |
+--------+------------------------------------------------------------------------------------------------------------------------+
| a      | NullableColumn { column: StringColumn { data: 0x61626364, offsets: [0, 1, 2, 3, 4] }, validity: [0b____1011] }         |
| Output | NullableColumn { column: StringColumn { data: 0x6133623363336433, offsets: [0, 2, 4, 6, 8] }, validity: [0b____1011] } |
+--------+------------------------------------------------------------------------------------------------------------------------+


ast            : concat_ws('-', '3', null, '4', null, '5')
raw expr       : concat_ws('-', '3', NULL, '4', NULL, '5')
checked expr   : concat_ws<String NULL, String NULL, String NULL, String NULL, String NULL, String NULL>(CAST("-" AS String NULL), CAST("3" AS String NULL), CAST(NULL AS String NULL), CAST("4" AS String NULL), CAST(NULL AS String NULL), CAST("5" AS String NULL))
optimized expr : "3-4-5"
output type    : String NULL
output domain  : {"3-4-5"..="3-4-5"}
output         : '3-4-5'


ast            : concat_ws(NULL, '3', '4')
raw expr       : concat_ws(NULL, '3', '4')
checked expr   : concat_ws<String NULL, String NULL, String NULL>(CAST(NULL AS String NULL), CAST("3" AS String NULL), CAST("4" AS String NULL))
optimized expr : NULL
output type    : String NULL
output domain  : {NULL}
output         : NULL


ast            : concat_ws(a, '3', '4', '5')
raw expr       : concat_ws(a::String, '3', '4', '5')
checked expr   : concat_ws<String, String, String, String>(a, "3", "4", "5")
evaluation:
+--------+-------------+---------+
|        | a           | Output  |
+--------+-------------+---------+
| Type   | String      | String  |
| Domain | {","..="-"} | {"3"..} |
| Row 0  | ','         | '3,4,5' |
| Row 1  | '-'         | '3-4-5' |
| Row 2  | ','         | '3,4,5' |
| Row 3  | '-'         | '3-4-5' |
+--------+-------------+---------+
evaluation (internal):
+--------+------------------------------------------------------------------------------------------------+
| Column | Data                                                                                           |
+--------+------------------------------------------------------------------------------------------------+
| a      | StringColumn { data: 0x2c2d2c2d, offsets: [0, 1, 2, 3, 4] }                                    |
| Output | StringColumn { data: 0x332c342c35332d342d35332c342c35332d342d35, offsets: [0, 5, 10, 15, 20] } |
+--------+------------------------------------------------------------------------------------------------+


ast            : concat_ws(a, '3')
raw expr       : concat_ws(a::String NULL, '3')
checked expr   : concat_ws<String NULL, String NULL>(a, CAST("3" AS String NULL))
optimized expr : concat_ws<String NULL, String NULL>(a, "3")
evaluation:
+--------+----------------------+-----------------+
|        | a                    | Output          |
+--------+----------------------+-----------------+
| Type   | String NULL          | String NULL     |
| Domain | {"a"..="d"} ‚à™ {NULL} | {""..} ‚à™ {NULL} |
| Row 0  | 'a'                  | '3'             |
| Row 1  | 'b'                  | '3'             |
| Row 2  | NULL                 | NULL            |
| Row 3  | 'd'                  | '3'             |
+--------+----------------------+-----------------+
evaluation (internal):
+--------+----------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                           |
+--------+----------------------------------------------------------------------------------------------------------------+
| a      | NullableColumn { column: StringColumn { data: 0x61626364, offsets: [0, 1, 2, 3, 4] }, validity: [0b____1011] } |
| Output | NullableColumn { column: StringColumn { data: 0x333333, offsets: [0, 1, 2, 2, 3] }, validity: [0b____1011] }   |
+--------+----------------------------------------------------------------------------------------------------------------+


ast            : concat_ws(a, '3', '4')
raw expr       : concat_ws(a::String NULL, '3', '4')
checked expr   : concat_ws<String NULL, String NULL, String NULL>(a, CAST("3" AS String NULL), CAST("4" AS String NULL))
optimized expr : concat_ws<String NULL, String NULL, String NULL>(a, "3", "4")
evaluation:
+--------+----------------------+-----------------+
|        | a                    | Output          |
+--------+----------------------+-----------------+
| Type   | String NULL          | String NULL     |
| Domain | {"a"..="d"} ‚à™ {NULL} | {""..} ‚à™ {NULL} |
| Row 0  | 'a'                  | '3a4'           |
| Row 1  | 'b'                  | '3b4'           |
| Row 2  | NULL                 | NULL            |
| Row 3  | 'd'                  | '3d4'           |
+--------+----------------------+-----------------+
evaluation (internal):
+--------+--------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                     |
+--------+--------------------------------------------------------------------------------------------------------------------------+
| a      | NullableColumn { column: StringColumn { data: 0x61626364, offsets: [0, 1, 2, 3, 4] }, validity: [0b____1011] }           |
| Output | NullableColumn { column: StringColumn { data: 0x336134336234336434, offsets: [0, 3, 6, 6, 9] }, validity: [0b____1011] } |
+--------+--------------------------------------------------------------------------------------------------------------------------+


error: 
  --> SQL:1:1
  |
1 | concat_ws('', a, 2)
  | ^^^^^^^^^^^^^^^^^^^ no overload satisfies `concat_ws(String, Boolean, UInt8)`

has tried possible overloads:
  concat_ws(String, String, String) :: String                      : unable to unify `Boolean` with `String`
  concat_ws(String NULL, String NULL, String NULL) :: String NULL  : unable to unify `Boolean` with `String`



ast            : bin(a)
raw expr       : bin(a::Int8)
checked expr   : bin<Int64>(to_int64<Int8>(a))
evaluation:
+--------+----------+--------------------------------------------------------------------+
|        | a        | Output                                                             |
+--------+----------+--------------------------------------------------------------------+
| Type   | Int8     | String                                                             |
| Domain | {-1..=3} | {""..}                                                             |
| Row 0  | -1       | '1111111111111111111111111111111111111111111111111111111111111111' |
| Row 1  | 2        | '10'                                                               |
| Row 2  | 3        | '11'                                                               |
+--------+----------+--------------------------------------------------------------------+
evaluation (internal):
+--------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                                                                                        |
+--------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| a      | Int8([-1, 2, 3])                                                                                                                                                                            |
| Output | StringColumn { data: 0x3131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131303131, offsets: [0, 64, 66, 68] } |
+--------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+


ast            : bin(a2)
raw expr       : bin(a2::UInt8 NULL)
checked expr   : bin<Int64 NULL>(CAST(a2 AS Int64 NULL))
evaluation:
+--------+------------------+-----------------+
|        | a2               | Output          |
+--------+------------------+-----------------+
| Type   | UInt8 NULL       | String NULL     |
| Domain | {1..=3} ‚à™ {NULL} | {""..} ‚à™ {NULL} |
| Row 0  | 1                | '1'             |
| Row 1  | 2                | '10'            |
| Row 2  | NULL             | NULL            |
+--------+------------------+-----------------+
evaluation (internal):
+--------+---------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                          |
+--------+---------------------------------------------------------------------------------------------------------------+
| a2     | NullableColumn { column: UInt8([1, 2, 3]), validity: [0b_____011] }                                           |
| Output | NullableColumn { column: StringColumn { data: 0x3131303131, offsets: [0, 1, 3, 5] }, validity: [0b_____011] } |
+--------+---------------------------------------------------------------------------------------------------------------+


ast            : bin(b)
raw expr       : bin(b::Int16)
checked expr   : bin<Int64>(to_int64<Int16>(b))
evaluation:
+--------+---------+--------+
|        | b       | Output |
+--------+---------+--------+
| Type   | Int16   | String |
| Domain | {2..=6} | {""..} |
| Row 0  | 2       | '10'   |
| Row 1  | 4       | '100'  |
| Row 2  | 6       | '110'  |
+--------+---------+--------+
evaluation (internal):
+--------+------------------------------------------------------------------+
| Column | Data                                                             |
+--------+------------------------------------------------------------------+
| b      | Int16([2, 4, 6])                                                 |
| Output | StringColumn { data: 0x3130313030313130, offsets: [0, 2, 5, 8] } |
+--------+------------------------------------------------------------------+


ast            : bin(c)
raw expr       : bin(c::UInt32)
checked expr   : bin<Int64>(to_int64<UInt32>(c))
evaluation:
+--------+-----------+---------+
|        | c         | Output  |
+--------+-----------+---------+
| Type   | UInt32    | String  |
| Domain | {10..=30} | {""..}  |
| Row 0  | 10        | '1010'  |
| Row 1  | 20        | '10100' |
| Row 2  | 30        | '11110' |
+--------+-----------+---------+
evaluation (internal):
+--------+-------------------------------------------------------------------------------+
| Column | Data                                                                          |
+--------+-------------------------------------------------------------------------------+
| c      | UInt32([10, 20, 30])                                                          |
| Output | StringColumn { data: 0x3130313031303130303131313130, offsets: [0, 4, 9, 14] } |
+--------+-------------------------------------------------------------------------------+


error: 
  --> SQL:1:1
  |
1 | bin(d)
  | ^^^^^^ no overload satisfies `bin(Float64)`

has tried possible overloads:
  bin(Int64) :: String            : unable to unify `Float64` with `Int64`
  bin(Int64 NULL) :: String NULL  : unable to unify `Float64` with `Int64`



error: 
  --> SQL:1:5
  |
1 | bin(e)
  |     ^ invalid digit found in string while evaluating function `to_int64('abc')`



ast            : oct(a)
raw expr       : oct(a::Int8)
checked expr   : oct<Int64>(to_int64<Int8>(a))
evaluation:
+--------+----------+--------------------------+
|        | a        | Output                   |
+--------+----------+--------------------------+
| Type   | Int8     | String                   |
| Domain | {-1..=3} | {""..}                   |
| Row 0  | -1       | '1777777777777777777777' |
| Row 1  | 2        | '2'                      |
| Row 2  | 3        | '3'                      |
+--------+----------+--------------------------+
evaluation (internal):
+--------+-----------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                |
+--------+-----------------------------------------------------------------------------------------------------+
| a      | Int8([-1, 2, 3])                                                                                    |
| Output | StringColumn { data: 0x313737373737373737373737373737373737373737373233, offsets: [0, 22, 23, 24] } |
+--------+-----------------------------------------------------------------------------------------------------+


ast            : oct(a2)
raw expr       : oct(a2::UInt8 NULL)
checked expr   : oct<Int64 NULL>(CAST(a2 AS Int64 NULL))
evaluation:
+--------+------------------+-----------------+
|        | a2               | Output          |
+--------+------------------+-----------------+
| Type   | UInt8 NULL       | String NULL     |
| Domain | {1..=3} ‚à™ {NULL} | {""..} ‚à™ {NULL} |
| Row 0  | 1                | '1'             |
| Row 1  | 2                | '2'             |
| Row 2  | NULL             | NULL            |
+--------+------------------+-----------------+
evaluation (internal):
+--------+-----------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                      |
+--------+-----------------------------------------------------------------------------------------------------------+
| a2     | NullableColumn { column: UInt8([1, 2, 3]), validity: [0b_____011] }                                       |
| Output | NullableColumn { column: StringColumn { data: 0x313233, offsets: [0, 1, 2, 3] }, validity: [0b_____011] } |
+--------+-----------------------------------------------------------------------------------------------------------+


ast            : oct(b)
raw expr       : oct(b::Int16)
checked expr   : oct<Int64>(to_int64<Int16>(b))
evaluation:
+--------+---------+--------+
|        | b       | Output |
+--------+---------+--------+
| Type   | Int16   | String |
| Domain | {2..=6} | {""..} |
| Row 0  | 2       | '2'    |
| Row 1  | 4       | '4'    |
| Row 2  | 6       | '6'    |
+--------+---------+--------+
evaluation (internal):
+--------+--------------------------------------------------------+
| Column | Data                                                   |
+--------+--------------------------------------------------------+
| b      | Int16([2, 4, 6])                                       |
| Output | StringColumn { data: 0x323436, offsets: [0, 1, 2, 3] } |
+--------+--------------------------------------------------------+


ast            : oct(c)
raw expr       : oct(c::UInt32)
checked expr   : oct<Int64>(to_int64<UInt32>(c))
evaluation:
+--------+-----------+--------+
|        | c         | Output |
+--------+-----------+--------+
| Type   | UInt32    | String |
| Domain | {10..=30} | {""..} |
| Row 0  | 10        | '12'   |
| Row 1  | 20        | '24'   |
| Row 2  | 30        | '36'   |
+--------+-----------+--------+
evaluation (internal):
+--------+--------------------------------------------------------------+
| Column | Data                                                         |
+--------+--------------------------------------------------------------+
| c      | UInt32([10, 20, 30])                                         |
| Output | StringColumn { data: 0x313232343336, offsets: [0, 2, 4, 6] } |
+--------+--------------------------------------------------------------+


error: 
  --> SQL:1:1
  |
1 | oct(d)
  | ^^^^^^ no overload satisfies `oct(Float64)`

has tried possible overloads:
  oct(Int64) :: String            : unable to unify `Float64` with `Int64`
  oct(Int64 NULL) :: String NULL  : unable to unify `Float64` with `Int64`



error: 
  --> SQL:1:5
  |
1 | oct(e)
  |     ^ invalid digit found in string while evaluating function `to_int64('abc')`



ast            : hex(a)
raw expr       : hex(a::Int8)
checked expr   : hex<Int64>(to_int64<Int8>(a))
evaluation:
+--------+----------+--------------------+
|        | a        | Output             |
+--------+----------+--------------------+
| Type   | Int8     | String             |
| Domain | {-1..=3} | {""..}             |
| Row 0  | -1       | 'ffffffffffffffff' |
| Row 1  | 2        | '2'                |
| Row 2  | 3        | '3'                |
+--------+----------+--------------------+
evaluation (internal):
+--------+-----------------------------------------------------------------------------------------+
| Column | Data                                                                                    |
+--------+-----------------------------------------------------------------------------------------+
| a      | Int8([-1, 2, 3])                                                                        |
| Output | StringColumn { data: 0x666666666666666666666666666666663233, offsets: [0, 16, 17, 18] } |
+--------+-----------------------------------------------------------------------------------------+


ast            : hex(a2)
raw expr       : hex(a2::UInt8 NULL)
checked expr   : hex<Int64 NULL>(CAST(a2 AS Int64 NULL))
evaluation:
+--------+------------------+-----------------+
|        | a2               | Output          |
+--------+------------------+-----------------+
| Type   | UInt8 NULL       | String NULL     |
| Domain | {1..=3} ‚à™ {NULL} | {""..} ‚à™ {NULL} |
| Row 0  | 1                | '1'             |
| Row 1  | 2                | '2'             |
| Row 2  | NULL             | NULL            |
+--------+------------------+-----------------+
evaluation (internal):
+--------+-----------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                      |
+--------+-----------------------------------------------------------------------------------------------------------+
| a2     | NullableColumn { column: UInt8([1, 2, 3]), validity: [0b_____011] }                                       |
| Output | NullableColumn { column: StringColumn { data: 0x313233, offsets: [0, 1, 2, 3] }, validity: [0b_____011] } |
+--------+-----------------------------------------------------------------------------------------------------------+


ast            : hex(b)
raw expr       : hex(b::Int16)
checked expr   : hex<Int64>(to_int64<Int16>(b))
evaluation:
+--------+---------+--------+
|        | b       | Output |
+--------+---------+--------+
| Type   | Int16   | String |
| Domain | {2..=6} | {""..} |
| Row 0  | 2       | '2'    |
| Row 1  | 4       | '4'    |
| Row 2  | 6       | '6'    |
+--------+---------+--------+
evaluation (internal):
+--------+--------------------------------------------------------+
| Column | Data                                                   |
+--------+--------------------------------------------------------+
| b      | Int16([2, 4, 6])                                       |
| Output | StringColumn { data: 0x323436, offsets: [0, 1, 2, 3] } |
+--------+--------------------------------------------------------+


ast            : hex(c)
raw expr       : hex(c::UInt32)
checked expr   : hex<Int64>(to_int64<UInt32>(c))
evaluation:
+--------+-----------+--------+
|        | c         | Output |
+--------+-----------+--------+
| Type   | UInt32    | String |
| Domain | {10..=30} | {""..} |
| Row 0  | 10        | 'a'    |
| Row 1  | 20        | '14'   |
| Row 2  | 30        | '1e'   |
+--------+-----------+--------+
evaluation (internal):
+--------+------------------------------------------------------------+
| Column | Data                                                       |
+--------+------------------------------------------------------------+
| c      | UInt32([10, 20, 30])                                       |
| Output | StringColumn { data: 0x6131343165, offsets: [0, 1, 3, 5] } |
+--------+------------------------------------------------------------+


error: 
  --> SQL:1:1
  |
1 | hex(d)
  | ^^^^^^ no overload satisfies `hex(Float64)`

has tried possible overloads:
  hex(String) :: String            : unable to unify `Float64` with `String`
  hex(String NULL) :: String NULL  : unable to unify `Float64` with `String`
  hex(Int64) :: String             : unable to unify `Float64` with `Int64`
  hex(Int64 NULL) :: String NULL   : unable to unify `Float64` with `Int64`



ast            : hex(e)
raw expr       : hex(e::String)
checked expr   : hex<String>(e)
evaluation:
+--------+-----------------+--------------------+
|        | e               | Output             |
+--------+-----------------+--------------------+
| Type   | String          | String             |
| Domain | {"abc"..="def"} | {""..}             |
| Row 0  | 'abc'           | '616263'           |
| Row 1  | 'def'           | '646566'           |
| Row 2  | 'databend'      | '6461746162656e64' |
+--------+-----------------+--------------------+
evaluation (internal):
+--------+------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                       |
+--------+------------------------------------------------------------------------------------------------------------+
| e      | StringColumn { data: 0x6162636465666461746162656e64, offsets: [0, 3, 6, 14] }                              |
| Output | StringColumn { data: 0x36313632363336343635363636343631373436313632363536653634, offsets: [0, 6, 12, 28] } |
+--------+------------------------------------------------------------------------------------------------------------+


ast            : unhex('6461746162656e64')
raw expr       : unhex('6461746162656e64')
checked expr   : unhex<String>("6461746162656e64")
optimized expr : "databend"
output type    : String
output domain  : {"databend"..="databend"}
output         : 'databend'


ast            : unhex(hex(s))
raw expr       : unhex(hex(s::String))
checked expr   : unhex<String>(hex<String>(s))
evaluation:
+--------+-----------------+------------+
|        | s               | Output     |
+--------+-----------------+------------+
| Type   | String          | String     |
| Domain | {"abc"..="def"} | Unknown    |
| Row 0  | 'abc'           | 'abc'      |
| Row 1  | 'def'           | 'def'      |
| Row 2  | 'databend'      | 'databend' |
+--------+-----------------+------------+
evaluation (internal):
+--------+-------------------------------------------------------------------------------+
| Column | Data                                                                          |
+--------+-------------------------------------------------------------------------------+
| s      | StringColumn { data: 0x6162636465666461746162656e64, offsets: [0, 3, 6, 14] } |
| Output | StringColumn { data: 0x6162636465666461746162656e64, offsets: [0, 3, 6, 14] } |
+--------+-------------------------------------------------------------------------------+


ast            : unhex(s)
raw expr       : unhex(s::String)
checked expr   : unhex<String>(s)
evaluation:
+--------+-----------------------+------------+
|        | s                     | Output     |
+--------+-----------------------+------------+
| Type   | String                | String     |
| Domain | {"616263"..="646566"} | Unknown    |
| Row 0  | '616263'              | 'abc'      |
| Row 1  | '646566'              | 'def'      |
| Row 2  | '6461746162656e64'    | 'databend' |
+--------+-----------------------+------------+
evaluation (internal):
+--------+------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                       |
+--------+------------------------------------------------------------------------------------------------------------+
| s      | StringColumn { data: 0x36313632363336343635363636343631373436313632363536653634, offsets: [0, 6, 12, 28] } |
| Output | StringColumn { data: 0x6162636465666461746162656e64, offsets: [0, 3, 6, 14] }                              |
+--------+------------------------------------------------------------------------------------------------------------+


ast            : lpad('hi', 2, '?')
raw expr       : lpad('hi', 2, '?')
checked expr   : lpad<String, UInt64, String>("hi", to_uint64<UInt8>(2_u8), "?")
optimized expr : "hi"
output type    : String
output domain  : {"hi"..="hi"}
output         : 'hi'


ast            : lpad('hi', 4, '?')
raw expr       : lpad('hi', 4, '?')
checked expr   : lpad<String, UInt64, String>("hi", to_uint64<UInt8>(4_u8), "?")
optimized expr : "??hi"
output type    : String
output domain  : {"??hi"..="??hi"}
output         : '??hi'


ast            : lpad('hi', 0, '?')
raw expr       : lpad('hi', 0, '?')
checked expr   : lpad<String, UInt64, String>("hi", to_uint64<UInt8>(0_u8), "?")
optimized expr : ""
output type    : String
output domain  : {""..=""}
output         : ''


ast            : lpad('hi', 1, '?')
raw expr       : lpad('hi', 1, '?')
checked expr   : lpad<String, UInt64, String>("hi", to_uint64<UInt8>(1_u8), "?")
optimized expr : "h"
output type    : String
output domain  : {"h"..="h"}
output         : 'h'


error: 
  --> SQL:1:1
  |
1 | lpad('hi', -1, '?')
  | ^^^^^^^^^^^^^^^^^^^ no overload satisfies `lpad(String, Int8, String)`

has tried possible overloads:
  lpad(String, UInt64, String) :: String                      : unable to unify `Int8` with `UInt64`
  lpad(String NULL, UInt64 NULL, String NULL) :: String NULL  : unable to unify `Int8` with `UInt64`



ast            : lpad(a, b, c)
raw expr       : lpad(a::String, b::UInt8, c::String)
checked expr   : lpad<String, UInt64, String>(a, to_uint64<UInt8>(b), c)
evaluation:
+--------+-----------------+---------+-------------+---------+
|        | a               | b       | c           | Output  |
+--------+-----------------+---------+-------------+---------+
| Type   | String          | UInt8   | String      | String  |
| Domain | {"cc"..="test"} | {0..=5} | {"?"..="x"} | {""..}  |
| Row 0  | 'hi'            | 0       | '?'         | ''      |
| Row 1  | 'test'          | 3       | 'x'         | 'tes'   |
| Row 2  | 'cc'            | 5       | 'bb'        | 'bbbcc' |
+--------+-----------------+---------+-------------+---------+
evaluation (internal):
+--------+------------------------------------------------------------------+
| Column | Data                                                             |
+--------+------------------------------------------------------------------+
| a      | StringColumn { data: 0x6869746573746363, offsets: [0, 2, 6, 8] } |
| b      | UInt8([0, 3, 5])                                                 |
| c      | StringColumn { data: 0x3f786262, offsets: [0, 1, 2, 4] }         |
| Output | StringColumn { data: 0x7465736262626363, offsets: [0, 0, 3, 8] } |
+--------+------------------------------------------------------------------+


ast            : rpad('hi', 2, '?')
raw expr       : rpad('hi', 2, '?')
checked expr   : rpad<String, UInt64, String>("hi", to_uint64<UInt8>(2_u8), "?")
optimized expr : "hi"
output type    : String
output domain  : {"hi"..="hi"}
output         : 'hi'


ast            : rpad('hi', 4, '?')
raw expr       : rpad('hi', 4, '?')
checked expr   : rpad<String, UInt64, String>("hi", to_uint64<UInt8>(4_u8), "?")
optimized expr : "hi??"
output type    : String
output domain  : {"hi??"..="hi??"}
output         : 'hi??'


ast            : rpad('hi', 0, '?')
raw expr       : rpad('hi', 0, '?')
checked expr   : rpad<String, UInt64, String>("hi", to_uint64<UInt8>(0_u8), "?")
optimized expr : ""
output type    : String
output domain  : {""..=""}
output         : ''


ast            : rpad('hi', 1, '?')
raw expr       : rpad('hi', 1, '?')
checked expr   : rpad<String, UInt64, String>("hi", to_uint64<UInt8>(1_u8), "?")
optimized expr : "h"
output type    : String
output domain  : {"h"..="h"}
output         : 'h'


error: 
  --> SQL:1:1
  |
1 | rpad('hi', -1, '?')
  | ^^^^^^^^^^^^^^^^^^^ no overload satisfies `rpad(String, Int8, String)`

has tried possible overloads:
  rpad(String, UInt64, String) :: String                      : unable to unify `Int8` with `UInt64`
  rpad(String NULL, UInt64 NULL, String NULL) :: String NULL  : unable to unify `Int8` with `UInt64`



ast            : rpad(a, b, c)
raw expr       : rpad(a::String, b::UInt8, c::String)
checked expr   : rpad<String, UInt64, String>(a, to_uint64<UInt8>(b), c)
evaluation:
+--------+-----------------+---------+-------------+---------+
|        | a               | b       | c           | Output  |
+--------+-----------------+---------+-------------+---------+
| Type   | String          | UInt8   | String      | String  |
| Domain | {"cc"..="test"} | {0..=5} | {"?"..="x"} | {""..}  |
| Row 0  | 'hi'            | 0       | '?'         | ''      |
| Row 1  | 'test'          | 3       | 'x'         | 'tes'   |
| Row 2  | 'cc'            | 5       | 'bb'        | 'ccbbb' |
+--------+-----------------+---------+-------------+---------+
evaluation (internal):
+--------+------------------------------------------------------------------+
| Column | Data                                                             |
+--------+------------------------------------------------------------------+
| a      | StringColumn { data: 0x6869746573746363, offsets: [0, 2, 6, 8] } |
| b      | UInt8([0, 3, 5])                                                 |
| c      | StringColumn { data: 0x3f786262, offsets: [0, 1, 2, 4] }         |
| Output | StringColumn { data: 0x7465736363626262, offsets: [0, 0, 3, 8] } |
+--------+------------------------------------------------------------------+


ast            : replace('hi', '', '?')
raw expr       : replace('hi', '', '?')
checked expr   : replace<String, String, String>("hi", "", "?")
optimized expr : "hi"
output type    : String
output domain  : {"hi"..="hi"}
output         : 'hi'


ast            : replace('hi', '', 'hi')
raw expr       : replace('hi', '', 'hi')
checked expr   : replace<String, String, String>("hi", "", "hi")
optimized expr : "hi"
output type    : String
output domain  : {"hi"..="hi"}
output         : 'hi'


ast            : replace('hi', 'i', '?')
raw expr       : replace('hi', 'i', '?')
checked expr   : replace<String, String, String>("hi", "i", "?")
optimized expr : "h?"
output type    : String
output domain  : {"h?"..="h?"}
output         : 'h?'


ast            : replace('hi', 'x', '?')
raw expr       : replace('hi', 'x', '?')
checked expr   : replace<String, String, String>("hi", "x", "?")
optimized expr : "hi"
output type    : String
output domain  : {"hi"..="hi"}
output         : 'hi'


ast            : replace(a, b, c)
raw expr       : replace(a::String, b::String, c::String)
checked expr   : replace<String, String, String>(a, b, c)
evaluation:
+--------+-----------------+-------------+-------------+--------+
|        | a               | b           | c           | Output |
+--------+-----------------+-------------+-------------+--------+
| Type   | String          | String      | String      | String |
| Domain | {"cc"..="test"} | {""..="te"} | {"?"..="x"} | {""..} |
| Row 0  | 'hi'            | 'i'         | '?'         | 'h?'   |
| Row 1  | 'test'          | 'te'        | 'x'         | 'xst'  |
| Row 2  | 'cc'            | 'cc'        | 'bb'        | 'bb'   |
| Row 3  | 'q'             | ''          | 'q'         | 'q'    |
+--------+-----------------+-------------+-------------+--------+
evaluation (internal):
+--------+-----------------------------------------------------------------------+
| Column | Data                                                                  |
+--------+-----------------------------------------------------------------------+
| a      | StringColumn { data: 0x686974657374636371, offsets: [0, 2, 6, 8, 9] } |
| b      | StringColumn { data: 0x6974656363, offsets: [0, 1, 3, 5, 5] }         |
| c      | StringColumn { data: 0x3f78626271, offsets: [0, 1, 2, 4, 5] }         |
| Output | StringColumn { data: 0x683f787374626271, offsets: [0, 2, 5, 7, 8] }   |
+--------+-----------------------------------------------------------------------+


ast            : strcmp('text', 'text2')
raw expr       : strcmp('text', 'text2')
checked expr   : strcmp<String, String>("text", "text2")
optimized expr : -1_i8
output type    : Int8
output domain  : {-1..=-1}
output         : -1


ast            : strcmp('text2', 'text')
raw expr       : strcmp('text2', 'text')
checked expr   : strcmp<String, String>("text2", "text")
optimized expr : 1_i8
output type    : Int8
output domain  : {1..=1}
output         : 1


ast            : strcmp('hii', 'hii')
raw expr       : strcmp('hii', 'hii')
checked expr   : strcmp<String, String>("hii", "hii")
optimized expr : 0_i8
output type    : Int8
output domain  : {0..=0}
output         : 0


ast            : strcmp(a, b)
raw expr       : strcmp(a::String, b::String)
checked expr   : strcmp<String, String>(a, b)
evaluation:
+--------+-----------------+------------------+--------------+
|        | a               | b                | Output       |
+--------+-----------------+------------------+--------------+
| Type   | String          | String           | Int8         |
| Domain | {"cc"..="test"} | {"ccb"..="test"} | {-128..=127} |
| Row 0  | 'hi'            | 'i'              | 1            |
| Row 1  | 'test'          | 'test'           | 0            |
| Row 2  | 'cc'            | 'ccb'            | -1           |
+--------+-----------------+------------------+--------------+
evaluation (internal):
+--------+------------------------------------------------------------------+
| Column | Data                                                             |
+--------+------------------------------------------------------------------+
| a      | StringColumn { data: 0x6869746573746363, offsets: [0, 2, 6, 8] } |
| b      | StringColumn { data: 0x6974657374636362, offsets: [0, 1, 5, 8] } |
| Output | Int8([1, 0, -1])                                                 |
+--------+------------------------------------------------------------------+


ast            : locate('bar', 'foobarbar')
raw expr       : locate('bar', 'foobarbar')
checked expr   : locate<String, String>("bar", "foobarbar")
optimized expr : 4_u64
output type    : UInt64
output domain  : {4..=4}
output         : 4


ast            : instr('foobarbar', 'bar')
raw expr       : instr('foobarbar', 'bar')
checked expr   : instr<String, String>("foobarbar", "bar")
optimized expr : 4_u64
output type    : UInt64
output domain  : {4..=4}
output         : 4


ast            : position('bar' IN 'foobarbar')
raw expr       : position('bar', 'foobarbar')
checked expr   : position<String, String>("bar", "foobarbar")
optimized expr : 4_u64
output type    : UInt64
output domain  : {4..=4}
output         : 4


ast            : position('foobarbar' IN 'bar')
raw expr       : position('foobarbar', 'bar')
checked expr   : position<String, String>("foobarbar", "bar")
optimized expr : 0_u64
output type    : UInt64
output domain  : {0..=0}
output         : 0


ast            : locate('bar', 'foobarbar', 5)
raw expr       : locate('bar', 'foobarbar', 5)
checked expr   : locate<String, String, UInt64>("bar", "foobarbar", to_uint64<UInt8>(5_u8))
optimized expr : 7_u64
output type    : UInt64
output domain  : {7..=7}
output         : 7


ast            : locate(a, b, c)
raw expr       : locate(a::String, b::String, c::UInt8)
checked expr   : locate<String, String, UInt64>(a, b, to_uint64<UInt8>(c))
evaluation:
+--------+---------------+---------------+---------+----------------------------+
|        | a             | b             | c       | Output                     |
+--------+---------------+---------------+---------+----------------------------+
| Type   | String        | String        | UInt8   | UInt64                     |
| Domain | {"bar"..="q"} | {"56"..="xx"} | {0..=2} | {0..=18446744073709551615} |
| Row 0  | 'bar'         | 'foobarbar'   | 1       | 4                          |
| Row 1  | 'cc'          | 'bdccacc'     | 2       | 3                          |
| Row 2  | 'cc'          | 'xx'          | 0       | 0                          |
| Row 3  | 'q'           | '56'          | 1       | 0                          |
+--------+---------------+---------------+---------+----------------------------+
evaluation (internal):
+--------+------------------------------------------------------------------------------------------------+
| Column | Data                                                                                           |
+--------+------------------------------------------------------------------------------------------------+
| a      | StringColumn { data: 0x6261726363636371, offsets: [0, 3, 5, 7, 8] }                            |
| b      | StringColumn { data: 0x666f6f6261726261726264636361636378783536, offsets: [0, 9, 16, 18, 20] } |
| c      | UInt8([1, 2, 0, 1])                                                                            |
| Output | UInt64([4, 3, 0, 0])                                                                           |
+--------+------------------------------------------------------------------------------------------------+


ast            : char(65,66,67)
raw expr       : char(65, 66, 67)
checked expr   : char<UInt8, UInt8, UInt8>(65_u8, 66_u8, 67_u8)
evaluation:
+--------+--------+
|        | Output |
+--------+--------+
| Type   | String |
| Domain | {""..} |
| Row 0  | 'ABC'  |
+--------+--------+
evaluation (internal):
+--------+--------------------------------------------------+
| Column | Data                                             |
+--------+--------------------------------------------------+
| Output | StringColumn { data: 0x414243, offsets: [0, 3] } |
+--------+--------------------------------------------------+


ast            : char(65, null)
raw expr       : char(65, NULL)
checked expr   : char<UInt8 NULL, UInt8 NULL>(CAST(65_u8 AS UInt8 NULL), CAST(NULL AS UInt8 NULL))
optimized expr : NULL
output type    : String NULL
output domain  : {NULL}
output         : NULL


ast            : char(a, b, c)
raw expr       : char(a::UInt8, b::UInt8, c::UInt8)
checked expr   : char<UInt8, UInt8, UInt8>(a, b, c)
evaluation:
+--------+-----------+-----------+-----------+--------+
|        | a         | b         | c         | Output |
+--------+-----------+-----------+-----------+--------+
| Type   | UInt8     | UInt8     | UInt8     | String |
| Domain | {66..=67} | {98..=99} | {68..=69} | {""..} |
| Row 0  | 66        | 98        | 68        | 'BbD'  |
| Row 1  | 67        | 99        | 69        | 'CcE'  |
+--------+-----------+-----------+-----------+--------+
evaluation (internal):
+--------+-----------------------------------------------------------+
| Column | Data                                                      |
+--------+-----------------------------------------------------------+
| a      | UInt8([66, 67])                                           |
| b      | UInt8([98, 99])                                           |
| c      | UInt8([68, 69])                                           |
| Output | StringColumn { data: 0x426244436345, offsets: [0, 3, 6] } |
+--------+-----------------------------------------------------------+


ast            : char(a2, b, c)
raw expr       : char(a2::UInt8 NULL, b::UInt8, c::UInt8)
checked expr   : char<UInt8 NULL, UInt8 NULL, UInt8 NULL>(a2, CAST(b AS UInt8 NULL), CAST(c AS UInt8 NULL))
evaluation:
+--------+-----------+-----------+--------------------+-----------------+
|        | b         | c         | a2                 | Output          |
+--------+-----------+-----------+--------------------+-----------------+
| Type   | UInt8     | UInt8     | UInt8 NULL         | String NULL     |
| Domain | {98..=99} | {68..=69} | {66..=67} ‚à™ {NULL} | {""..} ‚à™ {NULL} |
| Row 0  | 98        | 68        | 66                 | 'BbD'           |
| Row 1  | 99        | 69        | NULL               | NULL            |
+--------+-----------+-----------+--------------------+-----------------+
evaluation (internal):
+--------+--------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                         |
+--------+--------------------------------------------------------------------------------------------------------------+
| b      | UInt8([98, 99])                                                                                              |
| c      | UInt8([68, 69])                                                                                              |
| a2     | NullableColumn { column: UInt8([66, 67]), validity: [0b______01] }                                           |
| Output | NullableColumn { column: StringColumn { data: 0x426244436345, offsets: [0, 3, 6] }, validity: [0b______01] } |
+--------+--------------------------------------------------------------------------------------------------------------+


error: 
  --> SQL:1:1
  |
1 | char(c2)
  | ^^^^^^^^ no overload satisfies `char(UInt16)`

has tried possible overloads:
  char(UInt8) :: String            : unable to unify `UInt16` with `UInt8`
  char(UInt8 NULL) :: String NULL  : unable to unify `UInt16` with `UInt8`



ast            : soundex('‰Ω†Â•Ω‰∏≠ÂõΩÂåó‰∫¨')
raw expr       : soundex('‰Ω†Â•Ω‰∏≠ÂõΩÂåó‰∫¨')
checked expr   : soundex<String>("‰Ω†Â•Ω‰∏≠ÂõΩÂåó‰∫¨")
optimized expr : "‰Ω†000"
output type    : String
output domain  : {"‰Ω†000"..="‰Ω†000"}
output         : '‰Ω†000'


ast            : soundex('')
raw expr       : soundex('')
checked expr   : soundex<String>("")
optimized expr : "0000"
output type    : String
output domain  : {"0000"..="0000"}
output         : '0000'


ast            : soundex('hello all folks')
raw expr       : soundex('hello all folks')
checked expr   : soundex<String>("hello all folks")
optimized expr : "H4142"
output type    : String
output domain  : {"H4142"..="H4142"}
output         : 'H4142'


ast            : soundex('#3556 in bugdb')
raw expr       : soundex('#3556 in bugdb')
checked expr   : soundex<String>("#3556 in bugdb")
optimized expr : "I51231"
output type    : String
output domain  : {"I51231"..="I51231"}
output         : 'I51231'


ast            : soundex(a)
raw expr       : soundex(a::String)
checked expr   : soundex<String>(a)
evaluation:
+--------+------------------------------------+---------+
|        | a                                  | Output  |
+--------+------------------------------------+---------+
| Type   | String                             | String  |
| Domain | {"#üêëüêëheüêëlloüêë"..="üêëheüêëlloüêë"} | {""..}  |
| Row 0  | '#üêëüêëheüêëlloüêë'                   | 'üêë400' |
| Row 1  | 'üêëheüêëlloüêë'                      | 'üêë400' |
| Row 2  | 'teacher'                          | 'T260'  |
| Row 3  | 'TEACHER'                          | 'T260'  |
+--------+------------------------------------+---------+
evaluation (internal):
+--------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                                                              |
+--------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| a      | StringColumn { data: 0x23f09f9091f09f90916865f09f90916c6c6ff09f9091f09f90916865f09f90916c6c6ff09f90917465616368657254454143484552, offsets: [0, 22, 39, 46, 53] } |
| Output | StringColumn { data: 0xf09f9091343030f09f90913430305432363054323630, offsets: [0, 7, 14, 18, 22] }                                                                |
+--------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------+


ast            : ord(NULL)
raw expr       : ord(NULL)
checked expr   : ord<String NULL>(CAST(NULL AS String NULL))
optimized expr : NULL
output type    : UInt64 NULL
output domain  : {NULL}
output         : NULL


ast            : ord('–∏')
raw expr       : ord('–∏')
checked expr   : ord<String>("–∏")
optimized expr : 53432_u64
output type    : UInt64
output domain  : {53432..=53432}
output         : 53432


ast            : ord('Êó©ab')
raw expr       : ord('Êó©ab')
checked expr   : ord<String>("Êó©ab")
optimized expr : 15112105_u64
output type    : UInt64
output domain  : {15112105..=15112105}
output         : 15112105


ast            : ord('üíñ')
raw expr       : ord('üíñ')
checked expr   : ord<String>("üíñ")
optimized expr : 4036989590_u64
output type    : UInt64
output domain  : {4036989590..=4036989590}
output         : 4036989590


ast            : repeat('3', NULL)
raw expr       : repeat('3', NULL)
checked expr   : repeat<String NULL, UInt64 NULL>(CAST("3" AS String NULL), CAST(NULL AS UInt64 NULL))
optimized expr : NULL
output type    : String NULL
output domain  : {NULL}
output         : NULL


ast            : repeat('3', 5)
raw expr       : repeat('3', 5)
checked expr   : repeat<String, UInt64>("3", to_uint64<UInt8>(5_u8))
optimized expr : "33333"
output type    : String
output domain  : {"33333"..="33333"}
output         : '33333'


error: 
  --> SQL:1:1
  |
1 | repeat('3', 1000001)
  | ^^^^^^^^^^^^^^^^^^^^ Too many times to repeat: (1000001), maximum is: 1000000 while evaluating function `repeat('3', 1000001)`



ast            : repeat(a, 3)
raw expr       : repeat(a::String, 3)
checked expr   : repeat<String, UInt64>(a, to_uint64<UInt8>(3_u8))
optimized expr : repeat<String, UInt64>(a, 3_u64)
evaluation:
+--------+-------------+---------+
|        | a           | Output  |
+--------+-------------+---------+
| Type   | String      | String  |
| Domain | {"a"..="c"} | Unknown |
| Row 0  | 'a'         | 'aaa'   |
| Row 1  | 'b'         | 'bbb'   |
| Row 2  | 'c'         | 'ccc'   |
+--------+-------------+---------+
evaluation (internal):
+--------+--------------------------------------------------------------------+
| Column | Data                                                               |
+--------+--------------------------------------------------------------------+
| a      | StringColumn { data: 0x616263, offsets: [0, 1, 2, 3] }             |
| Output | StringColumn { data: 0x616161626262636363, offsets: [0, 3, 6, 9] } |
+--------+--------------------------------------------------------------------+


error: 
  --> SQL:1:1
  |
1 | insert('Quadratic', 3, 4, 'What', 4)
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no overload satisfies `insert(String, UInt8, UInt8, String, UInt8)`



error: 
  --> SQL:1:1
  |
1 | insert('Quadratic', 3, 4)
  | ^^^^^^^^^^^^^^^^^^^^^^^^^ no overload satisfies `insert(String, UInt8, UInt8)`



ast            : insert('Quadratic', 3, 4, 'What')
raw expr       : insert('Quadratic', 3, 4, 'What')
checked expr   : insert<String, Int64, Int64, String>("Quadratic", to_int64<UInt8>(3_u8), to_int64<UInt8>(4_u8), "What")
optimized expr : "QuWhattic"
output type    : String
output domain  : {"QuWhattic"..="QuWhattic"}
output         : 'QuWhattic'


ast            : insert('Quadratic', -1, 4, 'What')
raw expr       : insert('Quadratic', -1, 4, 'What')
checked expr   : insert<String, Int64, Int64, String>("Quadratic", to_int64<Int8>(-1_i8), to_int64<UInt8>(4_u8), "What")
optimized expr : "Quadratic"
output type    : String
output domain  : {"Quadratic"..="Quadratic"}
output         : 'Quadratic'


ast            : insert('Quadratic', 3, 100, 'What')
raw expr       : insert('Quadratic', 3, 100, 'What')
checked expr   : insert<String, Int64, Int64, String>("Quadratic", to_int64<UInt8>(3_u8), to_int64<UInt8>(100_u8), "What")
optimized expr : "QuWhat"
output type    : String
output domain  : {"QuWhat"..="QuWhat"}
output         : 'QuWhat'


ast            : insert('Quadratic', 3, 100, NULL)
raw expr       : insert('Quadratic', 3, 100, NULL)
checked expr   : insert<String NULL, Int64 NULL, Int64 NULL, String NULL>(CAST("Quadratic" AS String NULL), CAST(3_u8 AS Int64 NULL), CAST(100_u8 AS Int64 NULL), CAST(NULL AS String NULL))
optimized expr : NULL
output type    : String NULL
output domain  : {NULL}
output         : NULL


ast            : insert('Quadratic', 3, NULL, 'NULL')
raw expr       : insert('Quadratic', 3, NULL, 'NULL')
checked expr   : insert<String NULL, Int64 NULL, Int64 NULL, String NULL>(CAST("Quadratic" AS String NULL), CAST(3_u8 AS Int64 NULL), CAST(NULL AS Int64 NULL), CAST("NULL" AS String NULL))
optimized expr : NULL
output type    : String NULL
output domain  : {NULL}
output         : NULL


ast            : insert('Quadratic', NULL, 100, 'NULL')
raw expr       : insert('Quadratic', NULL, 100, 'NULL')
checked expr   : insert<String NULL, Int64 NULL, Int64 NULL, String NULL>(CAST("Quadratic" AS String NULL), CAST(NULL AS Int64 NULL), CAST(100_u8 AS Int64 NULL), CAST("NULL" AS String NULL))
optimized expr : NULL
output type    : String NULL
output domain  : {NULL}
output         : NULL


ast            : insert(NULL, 2, 100, 'NULL')
raw expr       : insert(NULL, 2, 100, 'NULL')
checked expr   : insert<String NULL, Int64 NULL, Int64 NULL, String NULL>(CAST(NULL AS String NULL), CAST(2_u8 AS Int64 NULL), CAST(100_u8 AS Int64 NULL), CAST("NULL" AS String NULL))
optimized expr : NULL
output type    : String NULL
output domain  : {NULL}
output         : NULL


ast            : insert(a, b, c, d)
raw expr       : insert(a::String, b::UInt8, c::UInt8, d::String)
checked expr   : insert<String, Int64, Int64, String>(a, to_int64<UInt8>(b), to_int64<UInt8>(c), d)
evaluation:
+--------+-----------------+---------+---------+---------------+---------+
|        | a               | b       | c       | d             | Output  |
+--------+-----------------+---------+---------+---------------+---------+
| Type   | String          | UInt8   | UInt8   | String        | String  |
| Domain | {"cc"..="test"} | {1..=4} | {1..=5} | {"12"..="zc"} | {""..}  |
| Row 0  | 'hi'            | 1       | 3       | 'xx'          | 'xx'    |
| Row 1  | 'test'          | 4       | 5       | 'zc'          | 'teszc' |
| Row 2  | 'cc'            | 1       | 1       | '12'          | '12c'   |
| Row 3  | 'q'             | 1       | 1       | '56'          | '56'    |
+--------+-----------------+---------+---------+---------------+---------+
evaluation (internal):
+--------+-------------------------------------------------------------------------------+
| Column | Data                                                                          |
+--------+-------------------------------------------------------------------------------+
| a      | StringColumn { data: 0x686974657374636371, offsets: [0, 2, 6, 8, 9] }         |
| b      | UInt8([1, 4, 1, 1])                                                           |
| c      | UInt8([3, 5, 1, 1])                                                           |
| d      | StringColumn { data: 0x78787a6331323536, offsets: [0, 2, 4, 6, 8] }           |
| Output | StringColumn { data: 0x78787465737a633132633536, offsets: [0, 2, 7, 10, 12] } |
+--------+-------------------------------------------------------------------------------+


ast            : insert(x, y, z, u)
raw expr       : insert(x::String NULL, y::UInt8 NULL, z::UInt8 NULL, u::String NULL)
checked expr   : insert<String NULL, Int64 NULL, Int64 NULL, String NULL>(x, CAST(y AS Int64 NULL), CAST(z AS Int64 NULL), u)
evaluation:
+--------+--------------------------+------------------+------------------+------------------------+-----------------+
|        | x                        | y                | z                | u                      | Output          |
+--------+--------------------------+------------------+------------------+------------------------+-----------------+
| Type   | String NULL              | UInt8 NULL       | UInt8 NULL       | String NULL            | String NULL     |
| Domain | {"cc"..="test"} ‚à™ {NULL} | {1..=4} ‚à™ {NULL} | {1..=5} ‚à™ {NULL} | {"12"..="zc"} ‚à™ {NULL} | {""..} ‚à™ {NULL} |
| Row 0  | NULL                     | 1                | 3                | NULL                   | NULL            |
| Row 1  | 'test'                   | 4                | NULL             | 'zc'                   | NULL            |
| Row 2  | 'cc'                     | NULL             | 1                | '12'                   | NULL            |
| Row 3  | 'q'                      | 1                | 1                | '56'                   | '56'            |
+--------+--------------------------+------------------+------------------+------------------------+-----------------+
evaluation (internal):
+--------+----------------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                             |
+--------+----------------------------------------------------------------------------------------------------------------------------------+
| x      | NullableColumn { column: StringColumn { data: 0x686974657374636371, offsets: [0, 2, 6, 8, 9] }, validity: [0b____1110] }         |
| y      | NullableColumn { column: UInt8([1, 4, 1, 1]), validity: [0b____1011] }                                                           |
| z      | NullableColumn { column: UInt8([3, 5, 1, 1]), validity: [0b____1101] }                                                           |
| u      | NullableColumn { column: StringColumn { data: 0x78787a6331323536, offsets: [0, 2, 4, 6, 8] }, validity: [0b____1110] }           |
| Output | NullableColumn { column: StringColumn { data: 0x78787465737a633132633536, offsets: [0, 2, 7, 10, 12] }, validity: [0b____1000] } |
+--------+----------------------------------------------------------------------------------------------------------------------------------+


ast            : space(0)
raw expr       : space(0)
checked expr   : space<UInt64>(to_uint64<UInt8>(0_u8))
optimized expr : ""
output type    : String
output domain  : {""..=""}
output         : ''


ast            : space(5)
raw expr       : space(5)
checked expr   : space<UInt64>(to_uint64<UInt8>(5_u8))
optimized expr : "     "
output type    : String
output domain  : {"     "..="     "}
output         : '     '


ast            : space(a)
raw expr       : space(a::UInt8)
checked expr   : space<UInt64>(to_uint64<UInt8>(a))
evaluation:
+--------+---------+--------------------+
|        | a       | Output             |
+--------+---------+--------------------+
| Type   | UInt8   | String             |
| Domain | {0..=9} | {""..="         "} |
| Row 0  | 0       | ''                 |
| Row 1  | 1       | ' '                |
| Row 2  | 2       | '  '               |
| Row 3  | 3       | '   '              |
| Row 4  | 4       | '    '             |
| Row 5  | 5       | '     '            |
| Row 6  | 6       | '      '           |
| Row 7  | 7       | '       '          |
| Row 8  | 8       | '        '         |
| Row 9  | 9       | '         '        |
+--------+---------+--------------------+
evaluation (internal):
+--------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                                                                  |
+--------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| a      | UInt8([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])                                                                                                                                 |
| Output | StringColumn { data: 0x202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020, offsets: [0, 0, 1, 3, 6, 10, 15, 21, 28, 36, 45] } |
+--------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------+


ast            : left('', 0)
raw expr       : left('', 0)
checked expr   : left<String, UInt64>("", to_uint64<UInt8>(0_u8))
optimized expr : ""
output type    : String
output domain  : {""..=""}
output         : ''


ast            : left('', 1)
raw expr       : left('', 1)
checked expr   : left<String, UInt64>("", to_uint64<UInt8>(1_u8))
optimized expr : ""
output type    : String
output domain  : {""..=""}
output         : ''


ast            : left('123456789', a)
raw expr       : left('123456789', a::UInt8)
checked expr   : left<String, UInt64>("123456789", to_uint64<UInt8>(a))
evaluation:
+--------+----------+-------------+
|        | a        | Output      |
+--------+----------+-------------+
| Type   | UInt8    | String      |
| Domain | {0..=10} | {""..}      |
| Row 0  | 0        | ''          |
| Row 1  | 1        | '1'         |
| Row 2  | 2        | '12'        |
| Row 3  | 3        | '123'       |
| Row 4  | 4        | '1234'      |
| Row 5  | 5        | '12345'     |
| Row 6  | 6        | '123456'    |
| Row 7  | 7        | '1234567'   |
| Row 8  | 8        | '12345678'  |
| Row 9  | 9        | '123456789' |
| Row 10 | 10       | '123456789' |
+--------+----------+-------------+
evaluation (internal):
+--------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                                                                                        |
+--------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| a      | UInt8([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10])                                                                                                                                                   |
| Output | StringColumn { data: 0x313132313233313233343132333435313233343536313233343536373132333435363738313233343536373839313233343536373839, offsets: [0, 0, 1, 3, 6, 10, 15, 21, 28, 36, 45, 54] } |
+--------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+


ast            : right('', 0)
raw expr       : right('', 0)
checked expr   : right<String, UInt64>("", to_uint64<UInt8>(0_u8))
optimized expr : ""
output type    : String
output domain  : {""..=""}
output         : ''


ast            : right('', 1)
raw expr       : right('', 1)
checked expr   : right<String, UInt64>("", to_uint64<UInt8>(1_u8))
optimized expr : ""
output type    : String
output domain  : {""..=""}
output         : ''


ast            : right('123456789', a)
raw expr       : right('123456789', a::UInt8)
checked expr   : right<String, UInt64>("123456789", to_uint64<UInt8>(a))
evaluation:
+--------+----------+-------------+
|        | a        | Output      |
+--------+----------+-------------+
| Type   | UInt8    | String      |
| Domain | {0..=10} | {""..}      |
| Row 0  | 0        | ''          |
| Row 1  | 1        | '9'         |
| Row 2  | 2        | '89'        |
| Row 3  | 3        | '789'       |
| Row 4  | 4        | '6789'      |
| Row 5  | 5        | '56789'     |
| Row 6  | 6        | '456789'    |
| Row 7  | 7        | '3456789'   |
| Row 8  | 8        | '23456789'  |
| Row 9  | 9        | '123456789' |
| Row 10 | 10       | '123456789' |
+--------+----------+-------------+
evaluation (internal):
+--------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                                                                                        |
+--------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| a      | UInt8([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10])                                                                                                                                                   |
| Output | StringColumn { data: 0x393839373839363738393536373839343536373839333435363738393233343536373839313233343536373839313233343536373839, offsets: [0, 0, 1, 3, 6, 10, 15, 21, 28, 36, 45, 54] } |
+--------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+


ast            : mid('1234567890', -3, 3)
raw expr       : mid('1234567890', -3, 3)
checked expr   : substr<String, Int64, UInt64>("1234567890", to_int64<Int8>(-3_i8), to_uint64<UInt8>(3_u8))
optimized expr : "890"
output type    : String
output domain  : {"890"..="890"}
output         : '890'


ast            : mid('1234567890', -3)
raw expr       : mid('1234567890', -3)
checked expr   : substr<String, Int64>("1234567890", to_int64<Int8>(-3_i8))
optimized expr : "890"
output type    : String
output domain  : {"890"..="890"}
output         : '890'


ast            : substring('', 0, 1)
raw expr       : substr('', 0, 1)
checked expr   : substr<String, Int64, UInt64>("", to_int64<UInt8>(0_u8), to_uint64<UInt8>(1_u8))
optimized expr : ""
output type    : String
output domain  : {""..=""}
output         : ''


ast            : substr('Sakila' from -4 for 2)
raw expr       : substr('Sakila', -4, 2)
checked expr   : substr<String, Int64, UInt64>("Sakila", to_int64<Int8>(-4_i8), to_uint64<UInt8>(2_u8))
optimized expr : "ki"
output type    : String
output domain  : {"ki"..="ki"}
output         : 'ki'


ast            : substr('sakila' FROM -4)
raw expr       : substr('sakila', -4)
checked expr   : substr<String, Int64>("sakila", to_int64<Int8>(-4_i8))
optimized expr : "kila"
output type    : String
output domain  : {"kila"..="kila"}
output         : 'kila'


ast            : substr('abc',2)
raw expr       : substr('abc', 2)
checked expr   : substr<String, Int64>("abc", to_int64<UInt8>(2_u8))
optimized expr : "bc"
output type    : String
output domain  : {"bc"..="bc"}
output         : 'bc'


ast            : substr('abc', pos, len)
raw expr       : substr('abc', pos::Int8, len::UInt8)
checked expr   : substr<String, Int64, UInt64>("abc", to_int64<Int8>(pos), to_uint64<UInt8>(len))
evaluation:
+--------+----------+---------+--------+
|        | pos      | len     | Output |
+--------+----------+---------+--------+
| Type   | Int8     | UInt8   | String |
| Domain | {-4..=4} | {0..=4} | {""..} |
| Row 0  | 0        | 0       | ''     |
| Row 1  | 0        | 1       | ''     |
| Row 2  | 0        | 2       | ''     |
| Row 3  | 0        | 3       | ''     |
| Row 4  | 0        | 4       | ''     |
| Row 5  | 1        | 0       | ''     |
| Row 6  | 1        | 1       | 'a'    |
| Row 7  | 1        | 2       | 'ab'   |
| Row 8  | 1        | 3       | 'abc'  |
| Row 9  | 1        | 4       | 'abc'  |
| Row 10 | 2        | 0       | ''     |
| Row 11 | 2        | 1       | 'b'    |
| Row 12 | 2        | 2       | 'bc'   |
| Row 13 | 2        | 3       | 'bc'   |
| Row 14 | 2        | 4       | 'bc'   |
| Row 15 | 3        | 0       | ''     |
| Row 16 | 3        | 1       | 'c'    |
| Row 17 | 3        | 2       | 'c'    |
| Row 18 | 3        | 3       | 'c'    |
| Row 19 | 3        | 4       | 'c'    |
| Row 20 | 4        | 0       | ''     |
| Row 21 | 4        | 1       | ''     |
| Row 22 | 4        | 2       | ''     |
| Row 23 | 4        | 3       | ''     |
| Row 24 | 4        | 4       | ''     |
| Row 25 | -1       | 0       | ''     |
| Row 26 | -1       | 1       | 'c'    |
| Row 27 | -1       | 2       | 'c'    |
| Row 28 | -1       | 3       | 'c'    |
| Row 29 | -1       | 4       | 'c'    |
| Row 30 | -2       | 0       | ''     |
| Row 31 | -2       | 1       | 'b'    |
| Row 32 | -2       | 2       | 'bc'   |
| Row 33 | -2       | 3       | 'bc'   |
| Row 34 | -2       | 4       | 'bc'   |
| Row 35 | -3       | 0       | ''     |
| Row 36 | -3       | 1       | 'a'    |
| Row 37 | -3       | 2       | 'ab'   |
| Row 38 | -3       | 3       | 'abc'  |
| Row 39 | -3       | 4       | 'abc'  |
| Row 40 | -4       | 0       | ''     |
| Row 41 | -4       | 1       | ''     |
| Row 42 | -4       | 2       | ''     |
| Row 43 | -4       | 3       | ''     |
| Row 44 | -4       | 4       | ''     |
+--------+----------+---------+--------+
evaluation (internal):
+--------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                                                                                                                                                                                             |
+--------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| pos    | Int8([0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, -1, -1, -1, -1, -1, -2, -2, -2, -2, -2, -3, -3, -3, -3, -3, -4, -4, -4, -4, -4])                                                                                                                                |
| len    | UInt8([0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4])                                                                                                                                                   |
| Output | StringColumn { data: 0x61616261626361626362626362636263636363636363636362626362636263616162616263616263, offsets: [0, 0, 0, 0, 0, 0, 0, 1, 3, 6, 9, 9, 10, 12, 14, 16, 16, 17, 18, 19, 20, 20, 20, 20, 20, 20, 20, 21, 22, 23, 24, 24, 25, 27, 29, 31, 31, 32, 34, 37, 40, 40, 40, 40, 40, 40] } |
+--------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+


