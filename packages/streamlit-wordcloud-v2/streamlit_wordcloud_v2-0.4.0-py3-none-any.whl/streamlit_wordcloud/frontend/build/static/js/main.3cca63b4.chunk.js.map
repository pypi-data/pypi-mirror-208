{"version":3,"sources":["WordcloudComponent.js","index.js"],"names":["initialSettings","width","height","fontScale","fontMin","fontMax","padding","enableTooltip","spiral","scale","tooltipOptions","allowHTML","placement","arrow","theme","hideOnClick","colors","viridis","withStreamlitConnection","props","_useState","useState","clicked","hovered","_useState2","_slicedToArray","state","setState","args","parseInt","mode","undefined","tooltipDataFields","words","maxWords","length","perWordColoring","options","fontFamily","fontSizes","rotations","rotationAngles","transitionDuration","deterministic","enableOptimizations","onWordHovered","word","callbacks","getWordColor","color","onWordClick","onWordClicked","onWordMouseOver","onWordMouseOut","getWordTooltip","innerHTML","property","concat","formatTooltipLayout","useEffect","Streamlit","setComponentValue","setFrameHeight","width_react","height_react","console","log","React","createElement","style","ReactWordCloud","size","ReactDOM","render","StrictMode","WordcloudComponent","document","getElementById"],"mappings":"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","file":"static/js/main.3cca63b4.chunk.js","sourcesContent":["import { Streamlit, withStreamlitConnection } from \"streamlit-component-lib\"\r\nimport React, { useState, useEffect } from \"react\"\r\nimport ReactWordCloud from \"react-wordcloud\"\r\nimport \"tippy.js/dist/tippy.css\"\r\nimport \"tippy.js/animations/scale.css\"\r\nimport \"tippy.js/themes/light.css\"\r\n\r\nconst initialSettings = {\r\n  width: \"100%\",\r\n  height: \"100%\",\r\n  fontScale: 1.0,\r\n  fontMin: 8,\r\n  fontMax: 72,\r\n  padding: 1,\r\n  enableTooltip: true,\r\n  spiral: \"rectangular\",\r\n  scale: \"linear\",\r\n  tooltipOptions: {\r\n    allowHTML: true,\r\n    placement: \"left\",\r\n    arrow: true,\r\n    theme: \"light\",\r\n    hideOnClick: true,\r\n  },\r\n  colors: {\r\n    viridis: [\r\n      \"#fde725\",\r\n      \"#b5de2b\",\r\n      \"#6ece58\",\r\n      \"#35b779\",\r\n      \"#1f9e89\",\r\n      \"#26828e\",\r\n      \"#31688e\",\r\n      \"#3e4989\",\r\n      \"#482878\",\r\n      \"#440154\",\r\n    ],\r\n  },\r\n}\r\n\r\nconst WordcloudComponent = (props) => {\r\n  const [state, setState] = useState({ clicked: null, hovered: null })\r\n  const width = props.args[\"width\"] || initialSettings.width\r\n  const height = props.args[\"height\"] || initialSettings.height\r\n  const fontScale = props.args[\"fontScale\"] || initialSettings.fontScale\r\n  const fontMin = parseInt(props.args[\"fontMin\"])\r\n  const fontMax = parseInt(props.args[\"fontMax\"])\r\n  const padding = parseInt(props.args[\"padding\"]) || initialSettings.padding\r\n  const mode = props.args[\"layout\"] || initialSettings.spiral\r\n  const scale = props.args[\"scaling\"] || initialSettings.scale\r\n  const enableTooltip =\r\n    props.args[\"enableTooltip\"] === undefined\r\n      ? initialSettings.enableTooltip\r\n      : props.args[\"enableTooltip\"]\r\n  const tooltipOptions =\r\n    props.args[\"tooltipOptions\"] || initialSettings.tooltipOptions\r\n  const tooltipDataFields = props.args[\"tooltipDataFields\"];\r\n  const words = props.args['words']||[];\r\n  const maxWords = props.args[\"maxWords\"] || words.length\r\n  const colors =\r\n    props.args[\"paletteColors\"] || initialSettings.colors[\"viridis\"]\r\n  const perWordColoring = props.args[\"perWordColoring\"];\r\n  // Initialize Options\r\n  const options = {\r\n    colors: colors,\r\n    fontFamily: props.args[\"fontFamily\"],\r\n    fontSizes:\r\n      fontMin && fontMax\r\n        ? [fontMin, fontMax]\r\n        : [\r\n            parseInt(initialSettings.fontMin * fontScale),\r\n            parseInt(initialSettings.fontMax * fontScale),\r\n          ],\r\n    padding: padding,\r\n    rotations: 3,\r\n    rotationAngles: [-90, 90],\r\n    spiral: mode,\r\n    scale: scale,\r\n    transitionDuration: 500,\r\n    // Non-configurable\r\n    deterministic: props.args[\"deterministic\"],\r\n    enableOptimizations: props.args[\"enableOptimizations\"],\r\n    enableTooltip: enableTooltip,\r\n    tooltipOptions: tooltipOptions,\r\n  }\r\n  // Callback Handlers\r\n  const onWordClicked = (word) => {\r\n    if (!props.args[\"ignore_click\"]) {\r\n      setState((state) => {\r\n        return {\r\n          clicked: word,\r\n          hovered: state.hovered,\r\n        }\r\n      });\r\n    }\r\n  }\r\n  const onWordHovered = (word) => {\r\n    if (!props.args[\"ignore_hover\"]) {\r\n      setState((state) => {\r\n        return {\r\n          clicked: state.clicked,\r\n          hovered: word,\r\n        }\r\n      })\r\n    }\r\n  }\r\n  const getWordColor = (word) => word.color;\r\n  const formatTooltipLayout = (word) => {\r\n    let innerHTML = \"\";\r\n    for (const property in tooltipDataFields) {\r\n      innerHTML += `<span><b>${tooltipDataFields[property]}</b>: ${word[property]}</span></br>`\r\n    }\r\n    return innerHTML\r\n  }\r\n\r\n  const callbacks = {\r\n    getWordColor: perWordColoring? getWordColor:undefined,\r\n    onWordClick: (word) => onWordClicked(word),\r\n    onWordMouseOver: (word) => onWordHovered(word),\r\n    onWordMouseOut: (word) => onWordHovered(null),\r\n    getWordTooltip: (word) => formatTooltipLayout(word),\r\n\r\n  }\r\n  // Return state to Streamlit\r\n  useEffect(() => {\r\n    Streamlit.setComponentValue(state);\r\n  }, [state])\r\n  useEffect(() => {\r\n    Streamlit.setFrameHeight()\r\n  })\r\n\r\n  const width_react = props.args[\"width_react\"] || parseInt(width, 10);\r\n  const height_react = props.args[\"height_react\"] || parseInt(height, 10);\r\n\r\n  console.log(height_react);\r\n\r\n  return (\r\n    <div>\r\n    <div style={{ width: width, height: height}}>\r\n        <ReactWordCloud\r\n          words={words}\r\n          options={options}\r\n          maxWords={maxWords}\r\n          callbacks={callbacks}\r\n          size = {[width_react,height_react]}\r\n        />\r\n    </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default withStreamlitConnection(WordcloudComponent)\r\n","import React from \"react\"\r\nimport ReactDOM from \"react-dom\"\r\nimport WordcloudComponent from \"./WordcloudComponent\"\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <WordcloudComponent />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n)\r\n"],"sourceRoot":""}