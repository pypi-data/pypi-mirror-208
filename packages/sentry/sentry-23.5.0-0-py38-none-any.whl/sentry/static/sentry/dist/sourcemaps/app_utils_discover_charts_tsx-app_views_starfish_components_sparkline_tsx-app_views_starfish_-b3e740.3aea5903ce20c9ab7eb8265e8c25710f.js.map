{"version":3,"file":"chunks/app_utils_discover_charts_tsx-app_views_starfish_components_sparkline_tsx-app_views_starfish_-b3e740.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/utils/discover/charts.tsx","webpack:///./app/utils/discover/genericDiscoverQuery.tsx","webpack:///./app/utils/performance/contexts/performanceEventViewContext.tsx","webpack:///./app/utils/performance/contexts/utils.tsx","webpack:///../node_modules/echarts/lib/renderer/installSVGRenderer.js","webpack:///./app/views/starfish/components/sparkline.tsx","webpack:///./app/views/starfish/utils/constants.tsx","webpack:///./app/views/starfish/utils/useSpansQuery.tsx","webpack:///./app/views/starfish/utils/useStarfishOptions.tsx"],"sourcesContent":["import {LegendComponentOption} from 'echarts';\n\nimport {t} from 'sentry/locale';\nimport {Series} from 'sentry/types/echarts';\nimport {defined, formatBytesBase2} from 'sentry/utils';\nimport {AggregationOutputType} from 'sentry/utils/discover/fields';\nimport {\n  DAY,\n  formatAbbreviatedNumber,\n  formatPercentage,\n  getDuration,\n  HOUR,\n  MINUTE,\n  SECOND,\n  WEEK,\n} from 'sentry/utils/formatters';\n\n/**\n * Formatter for chart tooltips that handle a variety of discover and metrics result values.\n * If the result is metric values, the value can be of type number or null\n */\nexport function tooltipFormatter(\n  value: number | null,\n  outputType: AggregationOutputType = 'number'\n): string {\n  if (!defined(value)) {\n    return '\\u2014';\n  }\n  return tooltipFormatterUsingAggregateOutputType(value, outputType);\n}\n\n/**\n * Formatter for chart tooltips that takes the aggregate output type directly\n */\nexport function tooltipFormatterUsingAggregateOutputType(\n  value: number | null,\n  type: string\n): string {\n  if (!defined(value)) {\n    return '\\u2014';\n  }\n  switch (type) {\n    case 'integer':\n    case 'number':\n      return value.toLocaleString();\n    case 'percentage':\n      return formatPercentage(value, 2);\n    case 'duration':\n      return getDuration(value / 1000, 2, true);\n    case 'size':\n      return formatBytesBase2(value);\n    default:\n      return value.toString();\n  }\n}\n\n/**\n * Formatter for chart axis labels that handle a variety of discover result values\n * This function is *very similar* to tooltipFormatter but outputs data with less precision.\n */\nexport function axisLabelFormatter(\n  value: number,\n  outputType: AggregationOutputType,\n  abbreviation: boolean = false,\n  durationUnit?: number\n): string {\n  return axisLabelFormatterUsingAggregateOutputType(\n    value,\n    outputType,\n    abbreviation,\n    durationUnit\n  );\n}\n\n/**\n * Formatter for chart axis labels that takes the aggregate output type directly\n */\nexport function axisLabelFormatterUsingAggregateOutputType(\n  value: number,\n  type: string,\n  abbreviation: boolean = false,\n  durationUnit?: number\n): string {\n  switch (type) {\n    case 'integer':\n    case 'number':\n      return abbreviation ? formatAbbreviatedNumber(value) : value.toLocaleString();\n    case 'percentage':\n      return formatPercentage(value, 0);\n    case 'duration':\n      return axisDuration(value, durationUnit);\n    case 'size':\n      return formatBytesBase2(value, 0);\n    default:\n      return value.toString();\n  }\n}\n\n/**\n * Specialized duration formatting for axis labels.\n * In that context we are ok sacrificing accuracy for more\n * consistent sizing.\n *\n * @param value Number of milliseconds to format.\n */\nexport function axisDuration(value: number, durationUnit?: number): string {\n  durationUnit ??= categorizeDuration(value);\n  if (value === 0) {\n    return '0';\n  }\n  switch (durationUnit) {\n    case WEEK: {\n      const label = (value / WEEK).toFixed(0);\n      return t('%swk', label);\n    }\n    case DAY: {\n      const label = (value / DAY).toFixed(0);\n      return t('%sd', label);\n    }\n    case HOUR: {\n      const label = (value / HOUR).toFixed(0);\n      return t('%shr', label);\n    }\n    case MINUTE: {\n      const label = (value / MINUTE).toFixed(0);\n      return t('%smin', label);\n    }\n    case SECOND: {\n      const label = (value / SECOND).toFixed(0);\n      return t('%ss', label);\n    }\n    default:\n      const label = value.toFixed(0);\n      return t('%sms', label);\n  }\n}\n\n/**\n * Given an array of series and an eCharts legend object,\n * finds the range of y values (min and max) based on which series is selected in the legend\n * Assumes series[0] > series[1] > ...\n * @param series Array of eCharts series\n * @param legend eCharts legend object\n * @returns\n */\nexport function findRangeOfMultiSeries(series: Series[], legend?: LegendComponentOption) {\n  let range: {max: number; min: number} | undefined;\n  if (series[0]?.data) {\n    let minSeries = series[0];\n    let maxSeries;\n    series.forEach(({seriesName, data}, idx) => {\n      if (legend?.selected?.[seriesName] !== false && data.length) {\n        minSeries = series[idx];\n        maxSeries ??= series[idx];\n      }\n    });\n    if (maxSeries?.data) {\n      const max = Math.max(\n        ...maxSeries.data.map(({value}) => value).filter(value => !!value)\n      );\n      const min = Math.min(\n        ...minSeries.data.map(({value}) => value).filter(value => !!value)\n      );\n      range = {max, min};\n    }\n  }\n  return range;\n}\n\n/**\n * Given a eCharts series and legend, returns the unit to be used on the yAxis for a duration chart\n * @param series eCharts series array\n * @param legend eCharts legend object\n * @returns\n */\nexport function getDurationUnit(\n  series: Series[],\n  legend?: LegendComponentOption\n): number {\n  let durationUnit = 0;\n  const range = findRangeOfMultiSeries(series, legend);\n  if (range) {\n    const avg = (range.max + range.min) / 2;\n    durationUnit = categorizeDuration((range.max - range.min) / 5); // avg of 5 yAxis ticks per chart\n\n    const numOfDigits = (avg / durationUnit).toFixed(0).length;\n    if (numOfDigits > 6) {\n      durationUnit = categorizeDuration(avg);\n    }\n  }\n  return durationUnit;\n}\n\n/**\n * Categorizes the duration by Second, Minute, Hour, etc\n * Ex) categorizeDuration(1200) = MINUTE\n * @param value Duration in ms\n */\nexport function categorizeDuration(value): number {\n  if (value >= WEEK) {\n    return WEEK;\n  }\n  if (value >= DAY) {\n    return DAY;\n  }\n  if (value >= HOUR) {\n    return HOUR;\n  }\n  if (value >= MINUTE) {\n    return MINUTE;\n  }\n  if (value >= SECOND) {\n    return SECOND;\n  }\n  return 1;\n}\n","import {Component, useContext} from 'react';\nimport {useQuery} from '@tanstack/react-query';\nimport {Location} from 'history';\n\nimport {EventQuery} from 'sentry/actionCreators/events';\nimport {Client, ResponseMeta} from 'sentry/api';\nimport {t} from 'sentry/locale';\nimport EventView, {\n  ImmutableEventView,\n  isAPIPayloadSimilar,\n  LocationQuery,\n} from 'sentry/utils/discover/eventView';\nimport {QueryBatching} from 'sentry/utils/performance/contexts/genericQueryBatcher';\nimport {PerformanceEventViewContext} from 'sentry/utils/performance/contexts/performanceEventViewContext';\nimport {OrganizationContext} from 'sentry/views/organizationContext';\n\nimport useApi from '../useApi';\n\nexport class QueryError {\n  message: string;\n  private originalError: any; // For debugging in case parseError picks a value that doesn't make sense.\n  constructor(errorMessage: string, originalError?: any) {\n    this.message = errorMessage;\n    this.originalError = originalError;\n  }\n\n  getOriginalError() {\n    return this.originalError;\n  }\n}\n\nexport type GenericChildrenProps<T> = {\n  /**\n   * Error, if not null.\n   */\n  error: null | QueryError;\n  /**\n   * Loading state of this query.\n   */\n  isLoading: boolean;\n  /**\n   * Pagelinks, if applicable. Can be provided to the Pagination component.\n   */\n  pageLinks: null | string;\n  /**\n   * Data / result.\n   */\n  tableData: T | null;\n};\n\ntype OptionalContextProps = {\n  eventView?: EventView | ImmutableEventView;\n  orgSlug?: string;\n};\n\ntype BaseDiscoverQueryProps = {\n  /**\n   * Used as the default source for cursor values.\n   */\n  location: Location;\n  /**\n   * Explicit cursor value if you aren't using `location.query.cursor` because there are\n   * multiple paginated results on the page.\n   */\n  cursor?: string;\n  /**\n   * Appends a raw string to query to be able to sidestep the tokenizer.\n   * @deprecated\n   */\n  forceAppendRawQueryString?: string;\n  /**\n   * Record limit to get.\n   */\n  limit?: number;\n  /**\n   * Include this whenever pagination won't be used. Limit can still be used when this is\n   * passed, but cursor will be ignored.\n   */\n  noPagination?: boolean;\n  /**\n   * A container for query batching data and functions.\n   */\n  queryBatching?: QueryBatching;\n  /**\n   * Extra query parameters to be added.\n   */\n  queryExtras?: Record<string, string | string[] | undefined>;\n  /**\n   * Sets referrer parameter in the API Payload. Set of allowed referrers are defined\n   * on the OrganizationDiscoverEndpoint view.\n   */\n  referrer?: string;\n  /**\n   * A callback to set an error so that the error can be rendered in parent components\n   */\n  setError?: (errObject: QueryError | undefined) => void;\n};\n\nexport type DiscoverQueryPropsWithContext = BaseDiscoverQueryProps & OptionalContextProps;\nexport type DiscoverQueryProps = BaseDiscoverQueryProps & {\n  eventView: EventView | ImmutableEventView;\n  orgSlug: string;\n};\n\ntype InnerRequestProps<P> = DiscoverQueryProps & P;\ntype OuterRequestProps<P> = DiscoverQueryPropsWithContext & P;\n\nexport type ReactProps<T> = {\n  children?: (props: GenericChildrenProps<T>) => React.ReactNode;\n};\n\ntype ComponentProps<T, P> = {\n  /**\n   * Route to the endpoint\n   */\n  route: string;\n  /**\n   * A hook to modify data into the correct output after data has been received\n   */\n  afterFetch?: (data: any, props?: Props<T, P>) => T;\n  /**\n   * A hook before fetch that can be used to do things like clearing the api\n   */\n  beforeFetch?: (api: Client) => void;\n  /**\n   * A hook for parent orchestrators to pass down data based on query results, unlike afterFetch it is not meant for specializations as it will not modify data.\n   */\n  didFetch?: (data: T) => void;\n  /**\n   * Allows components to modify the payload before it is set.\n   */\n  getRequestPayload?: (props: Props<T, P>) => any;\n  /**\n   * An external hook to parse errors in case there are differences for a specific api.\n   */\n  parseError?: (error: any) => QueryError | null;\n  /**\n   * An external hook in addition to the event view check to check if data should be refetched\n   */\n  shouldRefetchData?: (prevProps: Props<T, P>, props: Props<T, P>) => boolean;\n};\n\ntype Props<T, P> = InnerRequestProps<P> & ReactProps<T> & ComponentProps<T, P>;\ntype OuterProps<T, P> = OuterRequestProps<P> & ReactProps<T> & ComponentProps<T, P>;\n\ntype State<T> = {\n  api: Client;\n  tableFetchID: symbol | undefined;\n} & GenericChildrenProps<T>;\n\n/**\n * Generic component for discover queries\n */\nclass _GenericDiscoverQuery<T, P> extends Component<Props<T, P>, State<T>> {\n  state: State<T> = {\n    isLoading: true,\n    tableFetchID: undefined,\n    error: null,\n\n    tableData: null,\n    pageLinks: null,\n    api: new Client(),\n  };\n\n  componentDidMount() {\n    this.fetchData();\n  }\n\n  componentDidUpdate(prevProps: Props<T, P>) {\n    // Reload data if the payload changes\n    const refetchCondition = this._shouldRefetchData(prevProps);\n\n    // or if we've moved from an invalid view state to a valid one,\n    const eventViewValidation =\n      prevProps.eventView.isValid() === false && this.props.eventView.isValid();\n\n    const shouldRefetchExternal = this.props.shouldRefetchData\n      ? this.props.shouldRefetchData(prevProps, this.props)\n      : false;\n\n    if (refetchCondition || eventViewValidation || shouldRefetchExternal) {\n      this.fetchData();\n    }\n  }\n\n  _shouldRefetchData = (prevProps: Props<T, P>): boolean => {\n    const thisAPIPayload = getPayload(this.props);\n    const otherAPIPayload = getPayload(prevProps);\n\n    return (\n      !isAPIPayloadSimilar(thisAPIPayload, otherAPIPayload) ||\n      prevProps.limit !== this.props.limit ||\n      prevProps.route !== this.props.route ||\n      prevProps.cursor !== this.props.cursor\n    );\n  };\n\n  /**\n   * The error type isn't consistent across APIs. We see detail as just string some times, other times as an object.\n   */\n  _parseError = (error: any): QueryError | null => {\n    if (this.props.parseError) {\n      return this.props.parseError(error);\n    }\n\n    if (!error) {\n      return null;\n    }\n\n    const detail = error.responseJSON?.detail;\n    if (typeof detail === 'string') {\n      return new QueryError(detail, error);\n    }\n\n    const message = detail?.message;\n    if (typeof message === 'string') {\n      return new QueryError(message, error);\n    }\n\n    const unknownError = new QueryError(t('An unknown error occurred.'), error);\n    return unknownError;\n  };\n\n  fetchData = async () => {\n    const {\n      queryBatching,\n      beforeFetch,\n      afterFetch,\n      didFetch,\n      eventView,\n      orgSlug,\n      route,\n      setError,\n    } = this.props;\n    const {api} = this.state;\n\n    if (!eventView.isValid()) {\n      return;\n    }\n\n    const url = `/organizations/${orgSlug}/${route}/`;\n    const tableFetchID = Symbol(`tableFetchID`);\n    const apiPayload: Partial<EventQuery & LocationQuery> = getPayload(this.props);\n\n    this.setState({isLoading: true, tableFetchID});\n\n    setError?.(undefined);\n\n    beforeFetch?.(api);\n\n    // clear any inflight requests since they are now stale\n    api.clear();\n\n    try {\n      const [data, , resp] = await doDiscoverQuery<T>(api, url, apiPayload, {\n        queryBatching,\n      });\n\n      if (this.state.tableFetchID !== tableFetchID) {\n        // invariant: a different request was initiated after this request\n        return;\n      }\n\n      const tableData = afterFetch ? afterFetch(data, this.props) : data;\n      didFetch?.(tableData);\n      this.setState(prevState => ({\n        isLoading: false,\n        tableFetchID: undefined,\n        error: null,\n        pageLinks: resp?.getResponseHeader('Link') ?? prevState.pageLinks,\n        tableData,\n      }));\n    } catch (err) {\n      const error = this._parseError(err);\n      this.setState({\n        isLoading: false,\n        tableFetchID: undefined,\n        error,\n        tableData: null,\n      });\n      if (setError) {\n        setError(error ?? undefined);\n      }\n    }\n  };\n\n  render() {\n    const {isLoading, error, tableData, pageLinks} = this.state;\n\n    const childrenProps: GenericChildrenProps<T> = {\n      isLoading,\n      error,\n      tableData,\n      pageLinks,\n    };\n    const children: ReactProps<T>['children'] = this.props.children; // Explicitly setting type due to issues with generics and React's children\n    return children?.(childrenProps);\n  }\n}\n\n// Shim to allow us to use generic discover query or any specialization with or without passing org slug or eventview, which are now contexts.\n// This will help keep tests working and we can remove extra uses of context-provided props and update tests as we go.\nexport function GenericDiscoverQuery<T, P>(props: OuterProps<T, P>) {\n  const organizationSlug = useContext(OrganizationContext)?.slug;\n  const performanceEventView = useContext(PerformanceEventViewContext)?.eventView;\n\n  const orgSlug = props.orgSlug ?? organizationSlug;\n  const eventView = props.eventView ?? performanceEventView;\n\n  if (orgSlug === undefined || eventView === undefined) {\n    throw new Error('GenericDiscoverQuery requires both an orgSlug and eventView');\n  }\n\n  const _props: Props<T, P> = {\n    ...props,\n    orgSlug,\n    eventView,\n  };\n  return <_GenericDiscoverQuery<T, P> {..._props} />;\n}\n\nexport type DiscoverQueryRequestParams = Partial<EventQuery & LocationQuery>;\n\ntype RetryOptions = {\n  statusCodes: number[];\n  tries: number;\n  baseTimeout?: number;\n  timeoutMultiplier?: number;\n};\n\nconst BASE_TIMEOUT = 200;\nconst TIMEOUT_MULTIPLIER = 2;\nconst wait = duration => new Promise(resolve => setTimeout(resolve, duration));\n\nexport async function doDiscoverQuery<T>(\n  api: Client,\n  url: string,\n  params: DiscoverQueryRequestParams,\n  options: {\n    queryBatching?: QueryBatching;\n    retry?: RetryOptions;\n  } = {}\n): Promise<[T, string | undefined, ResponseMeta<T> | undefined]> {\n  const {queryBatching, retry} = options;\n  if (queryBatching?.batchRequest) {\n    return queryBatching.batchRequest(api, url, {\n      query: params,\n      includeAllArgs: true,\n    });\n  }\n\n  const baseTimeout = retry?.baseTimeout ?? BASE_TIMEOUT;\n  const timeoutMultiplier = retry?.timeoutMultiplier ?? TIMEOUT_MULTIPLIER;\n  const statusCodes = retry?.statusCodes ?? [];\n  const maxTries = retry?.tries ?? 1;\n  let tries = 0;\n  let timeout = 0;\n  let error;\n\n  while (tries < maxTries && (!error || statusCodes.includes(error.status))) {\n    if (timeout > 0) {\n      await wait(timeout);\n    }\n    try {\n      tries++;\n      return await api.requestPromise(url, {\n        method: 'GET',\n        includeAllArgs: true,\n        query: {\n          // marking params as any so as to not cause typescript errors\n          ...(params as any),\n        },\n      });\n    } catch (err) {\n      error = err;\n      timeout = baseTimeout * timeoutMultiplier ** (tries - 1);\n    }\n  }\n  throw error;\n}\n\nfunction getPayload<T, P>(props: Props<T, P>) {\n  const {\n    cursor,\n    limit,\n    noPagination,\n    referrer,\n    getRequestPayload,\n    eventView,\n    location,\n    forceAppendRawQueryString,\n  } = props;\n  const payload = getRequestPayload\n    ? getRequestPayload(props)\n    : eventView.getEventsAPIPayload(location, forceAppendRawQueryString);\n\n  if (cursor) {\n    payload.cursor = cursor;\n  }\n  if (limit) {\n    payload.per_page = limit;\n  }\n  if (noPagination) {\n    payload.noPagination = noPagination;\n  }\n  if (referrer) {\n    payload.referrer = referrer;\n  }\n\n  Object.assign(payload, props.queryExtras ?? {});\n\n  return payload;\n}\n\nexport function useGenericDiscoverQuery<T, P>(props: Props<T, P>) {\n  const api = useApi();\n  const {orgSlug, route} = props;\n  const url = `/organizations/${orgSlug}/${route}/`;\n  const apiPayload = getPayload<T, P>(props);\n\n  return useQuery<T, QueryError>([route, apiPayload], async () => {\n    const [resp] = await doDiscoverQuery<T>(api, url, apiPayload, {\n      queryBatching: props.queryBatching,\n    });\n    return resp;\n  });\n}\n\nexport default GenericDiscoverQuery;\n","import EventView, {ImmutableEventView} from 'sentry/utils/discover/eventView';\n\nimport {createDefinedContext} from './utils';\n\ntype usePerformanceEventViewContext = {\n  eventView: EventView;\n};\n\nconst [\n  PerformanceEventViewProvider,\n  _usePerformanceEventView,\n  PerformanceEventViewContext,\n] = createDefinedContext<usePerformanceEventViewContext>({\n  name: 'PerformanceEventViewContext',\n});\n\nexport {PerformanceEventViewProvider, PerformanceEventViewContext};\n\n// Provides a readonly event view. Also omits anything that isn't currently read-only, although in the future we should switch the code in EventView instead.\n// If you need mutability, use the mutable version.\nexport function usePerformanceEventView(): ImmutableEventView {\n  return _usePerformanceEventView().eventView;\n}\n\nexport function useMutablePerformanceEventView() {\n  return usePerformanceEventView().clone();\n}\n","import {createContext, useContext} from 'react';\n\ntype CreateContextReturn<T> = [React.Provider<T>, () => T, React.Context<T>];\n/*\n * Creates provider, context and useContext hook, guarding against calling useContext without a provider.\n * [0]: https://github.com/chakra-ui/chakra-ui/blob/c0f9c287df0397e2aa9bd90eb3d5c2f2c08aa0b1/packages/utils/src/react-helpers.ts#L27\n *\n * Renamed to createDefinedContext to not conflate with React context.\n */\nexport function createDefinedContext<ContextType>(options: {\n  name: string;\n  errorMessage?: string;\n  strict?: boolean;\n}) {\n  const {\n    strict = true,\n    errorMessage = `useContext for \"${options.name}\" must be inside a Provider with a value`,\n    name,\n  } = options;\n\n  const Context = createContext<ContextType | undefined>(undefined);\n\n  Context.displayName = name;\n\n  function useDefinedContext() {\n    const context = useContext(Context);\n    if (!context && strict) {\n      throw new Error(errorMessage);\n    }\n    return context;\n  }\n\n  return [\n    Context.Provider,\n    useDefinedContext,\n    Context,\n  ] as CreateContextReturn<ContextType>;\n}\n","\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport SVGPainter from 'zrender/lib/svg/Painter.js';\nexport function install(registers) {\n  registers.registerPainter('svg', SVGPainter);\n}","import {LineChart} from 'echarts/charts';\nimport * as echarts from 'echarts/core';\nimport {SVGRenderer} from 'echarts/renderers';\nimport ReactEChartsCore from 'echarts-for-react/lib/core';\n\nimport {Series} from 'sentry/types/echarts';\n\ntype SparklineProps = {\n  series: Series;\n  color?: string | string[];\n  width?: number;\n};\n\nexport default function Sparkline({series, width, color}: SparklineProps) {\n  echarts.use([LineChart, SVGRenderer]);\n\n  if (!series.data) {\n    return null;\n  }\n\n  const valueSeries = {\n    data: series.data.map(datum => datum.value),\n    type: 'line',\n    showSymbol: false,\n    smooth: true,\n  };\n\n  return (\n    <ReactEChartsCore\n      echarts={echarts}\n      option={{\n        color,\n        series: [valueSeries],\n        xAxis: {\n          show: false,\n          data: series.data.map(datum => datum.name),\n          type: 'category',\n        },\n        yAxis: {\n          show: false,\n          type: 'value',\n        },\n        grid: {\n          left: 3,\n          top: 3,\n          right: 3,\n          bottom: 3,\n        },\n      }}\n      notMerge\n      style={{\n        height: 25,\n        width: width ?? 200,\n      }}\n      lazyUpdate\n      theme=\"theme_name\"\n    />\n  );\n}\n\ntype MultiSparklineProps = {\n  color: string[];\n  series: Series[];\n  height?: number;\n  markLine?: Series;\n  width?: number;\n};\n\nexport function MultiSparkline({\n  series,\n  markLine,\n  width,\n  height,\n  color,\n}: MultiSparklineProps) {\n  echarts.use([LineChart, SVGRenderer]);\n\n  function getValueSeries(targetSeries, i) {\n    return {\n      data: targetSeries.data.map(datum => datum.value),\n      type: 'line',\n      showSymbol: false,\n      smooth: true,\n      lineStyle: {color: color[i], width: [1, 2][i]},\n      yAxisIndex: i,\n    };\n  }\n\n  return (\n    <ReactEChartsCore\n      echarts={echarts}\n      option={{\n        series: [...series.map((item, index) => getValueSeries(item, index)), markLine],\n        xAxis: {\n          show: false,\n          data: getValueSeries(series[0], 0).data.map(datum => datum.name),\n          type: 'category',\n        },\n        yAxis: [\n          {\n            show: false,\n            type: 'value',\n          },\n          {\n            show: false,\n            type: 'value',\n          },\n        ],\n        grid: {\n          left: 3,\n          top: 3,\n          right: 3,\n          bottom: 3,\n        },\n      }}\n      notMerge\n      style={{\n        height: height ?? 25,\n        width: width ?? 200,\n      }}\n      lazyUpdate\n      theme=\"theme_name\"\n    />\n  );\n}\n","export const HOST = 'http://localhost:8080';\n","import {useQuery} from '@tanstack/react-query';\nimport moment from 'moment';\n\nimport {useDiscoverQuery} from 'sentry/utils/discover/discoverQuery';\nimport EventView, {encodeSort} from 'sentry/utils/discover/eventView';\nimport {\n  DiscoverQueryProps,\n  useGenericDiscoverQuery,\n} from 'sentry/utils/discover/genericDiscoverQuery';\nimport {useLocation} from 'sentry/utils/useLocation';\nimport useOrganization from 'sentry/utils/useOrganization';\nimport {HOST} from 'sentry/views/starfish/utils/constants';\nimport {useStarfishOptions} from 'sentry/views/starfish/utils/useStarfishOptions';\n\nconst DATE_FORMAT = 'YYYY-MM-DDTHH:mm:ss';\n\n// Setting return type since I'd rather not know if its discover query or not\nexport type UseSpansQueryReturnType<T> = {data: T; isLoading: boolean};\n\nexport function useSpansQuery<T = any[]>({\n  eventView,\n  queryString,\n  initialData,\n  forceUseDiscover,\n}: {\n  eventView?: EventView;\n  forceUseDiscover?: boolean;\n  initialData?: any;\n  queryString?: string;\n}): UseSpansQueryReturnType<T> {\n  const {options} = useStarfishOptions();\n  const {useDiscover} = options;\n  const queryFunction = getQueryFunction({\n    useDiscover: forceUseDiscover ?? useDiscover,\n    isTimeseriesQuery: (eventView?.yAxis?.length ?? 0) > 0,\n  });\n  if (isDiscoverFunction(queryFunction) || isDiscoverTimeseriesFunction(queryFunction)) {\n    if (eventView) {\n      return queryFunction(eventView, initialData);\n    }\n    throw new Error(\n      'eventView argument must be defined when Starfish useDiscover is true'\n    );\n  }\n\n  if (queryString) {\n    return queryFunction(queryString, initialData);\n  }\n  throw new Error(\n    'queryString argument must be defined when Starfish useDiscover is false, ie when using scraped data via fetch API'\n  );\n}\n\nfunction isDiscoverFunction(\n  queryFunction: Function\n): queryFunction is typeof useWrappedDiscoverQuery {\n  return queryFunction === useWrappedDiscoverQuery;\n}\n\nfunction isDiscoverTimeseriesFunction(\n  queryFunction: Function\n): queryFunction is typeof useWrappedDiscoverTimeseriesQuery {\n  return queryFunction === useWrappedDiscoverTimeseriesQuery;\n}\n\nexport function useWrappedQuery(queryString: string, initialData?: any) {\n  const {isLoading, data} = useQuery({\n    queryKey: [queryString],\n    queryFn: () => fetch(`${HOST}/?query=${queryString}`).then(res => res.json()),\n    retry: false,\n    initialData,\n  });\n  return {isLoading, data};\n}\n\nexport function useWrappedDiscoverTimeseriesQuery(\n  eventView: EventView,\n  initialData?: any\n) {\n  const location = useLocation();\n  const organization = useOrganization();\n  const {isLoading, data} = useGenericDiscoverQuery<\n    {\n      data: any[];\n    },\n    DiscoverQueryProps\n  >({\n    route: 'events-stats',\n    eventView,\n    location,\n    orgSlug: organization.slug,\n    getRequestPayload: () => ({\n      ...eventView.getEventsAPIPayload(location),\n      yAxis: eventView.yAxis,\n      topEvents: eventView.topEvents,\n      excludeOther: 1,\n      partial: 1,\n      orderby: eventView.sorts?.[0] ? encodeSort(eventView.sorts?.[0]) : undefined,\n      interval: eventView.interval,\n    }),\n  });\n  return {\n    isLoading,\n    data:\n      isLoading && initialData\n        ? initialData\n        : processDiscoverTimeseriesResult(data, eventView),\n  };\n}\n\nexport function useWrappedDiscoverQuery(eventView: EventView, initialData?: any) {\n  const location = useLocation();\n  const organization = useOrganization();\n  const {isLoading, data} = useDiscoverQuery({\n    eventView,\n    orgSlug: organization.slug,\n    location,\n  });\n  return {isLoading, data: isLoading && initialData ? initialData : data?.data};\n}\n\nfunction getQueryFunction({\n  useDiscover,\n  isTimeseriesQuery,\n}: {\n  useDiscover: boolean;\n  isTimeseriesQuery?: boolean;\n}) {\n  if (useDiscover) {\n    if (isTimeseriesQuery) {\n      return useWrappedDiscoverTimeseriesQuery;\n    }\n    return useWrappedDiscoverQuery;\n  }\n  return useWrappedQuery;\n}\n\ntype Interval = {[key: string]: any; interval: string; group?: string};\n\nfunction processDiscoverTimeseriesResult(result, eventView: EventView) {\n  if (!eventView.yAxis) {\n    return [];\n  }\n  let intervals = [] as Interval[];\n  const singleYAxis =\n    eventView.yAxis &&\n    (typeof eventView.yAxis === 'string' || eventView.yAxis.length === 1);\n  const firstYAxis =\n    typeof eventView.yAxis === 'string' ? eventView.yAxis : eventView.yAxis[0];\n\n  if (result.data) {\n    return processSingleDiscoverTimeseriesResult(\n      result,\n      singleYAxis ? firstYAxis : 'count'\n    );\n  }\n  Object.keys(result).forEach(key => {\n    if (result[key].data) {\n      intervals = mergeIntervals(\n        intervals,\n        processSingleDiscoverTimeseriesResult(result[key], singleYAxis ? firstYAxis : key)\n      );\n    } else {\n      Object.keys(result[key]).forEach(innerKey => {\n        if (innerKey !== 'order') {\n          intervals = mergeIntervals(\n            intervals,\n            processSingleDiscoverTimeseriesResult(result[key][innerKey], innerKey, key)\n          );\n        }\n      });\n    }\n  });\n\n  const processed = intervals.map(interval => ({\n    ...interval,\n    interval: moment(parseInt(interval.interval, 10) * 1000).format(DATE_FORMAT),\n  }));\n  return processed;\n}\n\nfunction processSingleDiscoverTimeseriesResult(result, key: string, group?: string) {\n  const intervals = [] as Interval[];\n  result.data.forEach(([timestamp, [{count: value}]]) => {\n    const existingInterval = intervals.find(\n      interval =>\n        interval.interval === timestamp && (group ? interval.group === group : true)\n    );\n    if (existingInterval) {\n      existingInterval[key] = value;\n      return;\n    }\n    intervals.push({\n      interval: timestamp,\n      [key]: value,\n      group,\n    });\n  });\n  return intervals;\n}\n\nfunction mergeIntervals(first: Interval[], second: Interval[]) {\n  const target: Interval[] = JSON.parse(JSON.stringify(first));\n  second.forEach(({interval: timestamp, group, ...rest}) => {\n    const existingInterval = target.find(\n      interval =>\n        interval.interval === timestamp && (group ? interval.group === group : true)\n    );\n    if (existingInterval) {\n      Object.keys(rest).forEach(key => {\n        existingInterval[key] = rest[key];\n      });\n      return;\n    }\n    target.push({interval: timestamp, group, ...rest});\n  });\n  return target;\n}\n","import {useState} from 'react';\n\ntype StarfishOptions = {\n  useDiscover: boolean;\n};\n\nexport function useStarfishOptions() {\n  const [options, setOptions] = useState<StarfishOptions>({useDiscover: false});\n  return {options, setOptions};\n}\n"],"names":["tooltipFormatter","value","outputType","arguments","length","undefined","defined","type","toLocaleString","formatPercentage","getDuration","formatBytesBase2","toString","tooltipFormatterUsingAggregateOutputType","axisLabelFormatter","axisLabelFormatterUsingAggregateOutputType","abbreviation","durationUnit","formatAbbreviatedNumber","categorizeDuration","WEEK","label","toFixed","t","DAY","HOUR","MINUTE","SECOND","axisDuration","getDurationUnit","series","legend","range","data","maxSeries","minSeries","forEach","_ref","idx","seriesName","selected","max","Math","map","_ref2","filter","min","_ref3","findRangeOfMultiSeries","avg","QueryError","constructor","errorMessage","originalError","_defineProperty","this","message","getOriginalError","_GenericDiscoverQuery","Component","isLoading","tableFetchID","error","tableData","pageLinks","api","Client","prevProps","thisAPIPayload","getPayload","props","otherAPIPayload","isAPIPayloadSimilar","limit","route","cursor","parseError","detail","responseJSON","async","queryBatching","beforeFetch","afterFetch","didFetch","eventView","orgSlug","setError","state","isValid","url","Symbol","apiPayload","setState","clear","resp","doDiscoverQuery","prevState","getResponseHeader","err","_parseError","componentDidMount","fetchData","componentDidUpdate","refetchCondition","_shouldRefetchData","eventViewValidation","shouldRefetchExternal","shouldRefetchData","render","childrenProps","children","GenericDiscoverQuery","organizationSlug","useContext","OrganizationContext","slug","performanceEventView","PerformanceEventViewContext","Error","_props","_jsx","displayName","BASE_TIMEOUT","TIMEOUT_MULTIPLIER","wait","duration","Promise","resolve","setTimeout","params","options","retry","batchRequest","query","includeAllArgs","baseTimeout","timeoutMultiplier","statusCodes","maxTries","tries","timeout","includes","status","requestPromise","method","noPagination","referrer","getRequestPayload","location","forceAppendRawQueryString","payload","getEventsAPIPayload","per_page","Object","assign","queryExtras","useGenericDiscoverQuery","useApi","useQuery","PerformanceEventViewProvider","_usePerformanceEventView","createDefinedContext","name","strict","Context","createContext","Provider","context","registers","registerPainter","Sparkline","width","color","echarts","LineChart","SVGRenderer","valueSeries","datum","showSymbol","smooth","ReactEChartsCore","option","xAxis","show","yAxis","grid","left","top","right","bottom","notMerge","style","height","lazyUpdate","theme","MultiSparkline","markLine","getValueSeries","targetSeries","i","lineStyle","yAxisIndex","item","index","HOST","DATE_FORMAT","useSpansQuery","queryString","initialData","forceUseDiscover","setOptions","useState","useDiscover","useStarfishOptions","queryFunction","isTimeseriesQuery","useWrappedDiscoverTimeseriesQuery","useWrappedDiscoverQuery","useWrappedQuery","getQueryFunction","isDiscoverFunction","isDiscoverTimeseriesFunction","queryKey","queryFn","fetch","then","res","json","useLocation","organization","useOrganization","topEvents","excludeOther","partial","orderby","sorts","encodeSort","interval","processDiscoverTimeseriesResult","useDiscoverQuery","result","intervals","singleYAxis","firstYAxis","processSingleDiscoverTimeseriesResult","keys","key","mergeIntervals","innerKey","moment","parseInt","format","group","timestamp","count","existingInterval","find","push","first","second","target","JSON","parse","stringify","_ref4","rest"],"sourceRoot":""}