{"version":3,"file":"chunks/app_views_starfish_components_breakdownBar_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/views/starfish/views/webServiceView/webServiceBreakdownChart.tsx","webpack:///./app/views/starfish/components/breakdownBar.tsx","webpack:///./app/views/starfish/views/webServiceView/queries.js"],"sourcesContent":["import {useTheme} from '@emotion/react';\nimport isNil from 'lodash/isNil';\nimport moment from 'moment';\n\nimport _EventsRequest from 'sentry/components/charts/eventsRequest';\nimport {t} from 'sentry/locale';\nimport {Series} from 'sentry/types/echarts';\nimport {getSegmentLabel} from 'sentry/views/starfish/components/breakdownBar';\nimport Chart from 'sentry/views/starfish/components/chart';\nimport ChartPanel from 'sentry/views/starfish/components/chartPanel';\nimport {zeroFillSeries} from 'sentry/views/starfish/utils/zeroFillSeries';\n\nexport function WebServiceBreakdownChart({\n  isTopDataLoading,\n  topData,\n  isOtherDataLoading,\n  otherData,\n  throughputData,\n}) {\n  const theme = useTheme();\n  const seriesByDomain: {[module: string]: Series} = {};\n  let start: moment.Moment | undefined = undefined;\n  let end: moment.Moment | undefined = undefined;\n  if (!isTopDataLoading && !isOtherDataLoading) {\n    topData.forEach(series => {\n      const label = getSegmentLabel(series.span_operation, series.action, series.domain);\n      seriesByDomain[label] = {\n        seriesName: `${label}`,\n        data: [],\n      };\n    });\n\n    topData.forEach(value => {\n      if (isNil(start) || moment(value.inteval) < start) {\n        start = moment(value.interval);\n      }\n      if (isNil(end) || moment(value.inteval) > end) {\n        end = moment(value.interval);\n      }\n      seriesByDomain[\n        getSegmentLabel(value.span_operation, value.action, value.domain)\n      ].data.push({value: value.p75, name: value.interval});\n    });\n\n    seriesByDomain.Other = {\n      seriesName: `Other`,\n      data: [],\n    };\n\n    otherData.forEach(value => {\n      if (isNil(start) || moment(value.inteval) < start) {\n        start = moment(value.interval);\n      }\n      if (isNil(end) || moment(value.inteval) > end) {\n        end = moment(value.interval);\n      }\n      seriesByDomain.Other.data.push({value: value.p75, name: value.interval});\n    });\n  }\n  const data = Object.values(seriesByDomain).map(series =>\n    zeroFillSeries(series, moment.duration(1, 'day'), start, end)\n  );\n\n  return (\n    <ChartPanel title={t('p75 of span exclusive time')}>\n      <Chart\n        statsPeriod=\"24h\"\n        height={180}\n        data={data}\n        start=\"\"\n        end=\"\"\n        loading={isTopDataLoading}\n        utc={false}\n        grid={{\n          left: '0',\n          right: '0',\n          top: '16px',\n          bottom: '8px',\n        }}\n        definedAxisTicks={4}\n        stacked\n        chartColors={theme.charts.getColorPalette(5)}\n        throughput={throughputData}\n      />\n    </ChartPanel>\n  );\n}\n","import {Fragment, useState} from 'react';\nimport isPropValid from '@emotion/is-prop-valid';\nimport styled from '@emotion/styled';\nimport {motion} from 'framer-motion';\n\nimport {Tooltip} from 'sentry/components/tooltip';\nimport {t} from 'sentry/locale';\nimport {space} from 'sentry/styles/space';\nimport {percent} from 'sentry/utils';\nimport {useQuery} from 'sentry/utils/queryClient';\nimport {\n  getOtherDomainsActionsAndOpTimeseries,\n  getTopDomainsActionsAndOp,\n  getTopDomainsActionsAndOpTimeseries,\n  spanThroughput,\n  totalCumulativeTime,\n} from 'sentry/views/starfish/views/webServiceView/queries';\nimport {WebServiceBreakdownChart} from 'sentry/views/starfish/views/webServiceView/webServiceBreakdownChart';\n\nconst COLORS = ['#402A65', '#694D99', '#9A81C4', '#BBA6DF', '#EAE2F8', '#F8F6FC'];\nconst TOOLTIP_DELAY = 800;\nconst HOST = 'http://localhost:8080';\n\ntype ModuleSegment = {\n  action: string;\n  domain: string;\n  span_operation: string;\n  sum: number;\n};\ntype Props = {\n  title: string;\n  transaction?: string;\n};\n\nexport function getSegmentLabel(span_operation, action, domain) {\n  if (span_operation === 'http.client') {\n    return t('%s requests to %s', action, domain);\n  }\n  if (span_operation === 'db') {\n    return t('%s queries on %s', action, domain);\n  }\n  return span_operation || domain || undefined;\n}\n\nfunction FacetBreakdownBar({title, transaction: maybeTransaction}: Props) {\n  const [hoveredValue, setHoveredValue] = useState<ModuleSegment | null>(null);\n\n  const transaction = maybeTransaction ?? '';\n\n  const {data: segments} = useQuery({\n    queryKey: ['webServiceSpanGrouping', transaction],\n    queryFn: () =>\n      fetch(`${HOST}/?query=${getTopDomainsActionsAndOp({transaction})}`).then(res =>\n        res.json()\n      ),\n    retry: false,\n    initialData: [],\n  });\n\n  const {data: cumulativeTime} = useQuery({\n    queryKey: ['totalCumulativeTime', transaction],\n    queryFn: () =>\n      fetch(`${HOST}/?query=${totalCumulativeTime({transaction})}`).then(res =>\n        res.json()\n      ),\n    retry: false,\n    initialData: [],\n  });\n\n  const totalValues = cumulativeTime.reduce((acc, segment) => acc + segment.sum, 0);\n  const totalSegments = segments.reduce((acc, segment) => acc + segment.sum, 0);\n  const otherValue = totalValues - totalSegments;\n  const otherSegment = {\n    span_operation: 'other',\n    sum: otherValue,\n    action: '',\n    domain: '',\n  } as ModuleSegment;\n\n  let topConditions =\n    segments.length > 0\n      ? ` (span_operation = '${segments[0].span_operation}' ${\n          segments[0].action ? `AND action = '${segments[0].action}'` : ''\n        } ${segments[0].domain ? `AND domain = '${segments[0].domain}'` : ''})`\n      : '';\n\n  for (let index = 1; index < segments.length; index++) {\n    const element = segments[index];\n    topConditions = topConditions.concat(\n      ' OR ',\n      `(span_operation = '${element.span_operation}' ${\n        element.action ? `AND action = '${element.action}'` : ''\n      } ${element.domain ? `AND domain = '${element.domain}'` : ''})`\n    );\n  }\n\n  const {isLoading: isTopDataLoading, data: topData} = useQuery({\n    queryKey: ['topSpanGroupTimeseries', transaction, topConditions],\n    queryFn: () =>\n      fetch(\n        `${HOST}/?query=${getTopDomainsActionsAndOpTimeseries({\n          transaction,\n          topConditions,\n        })}`\n      ).then(res => res.json()),\n    retry: false,\n    initialData: [],\n  });\n\n  const {isLoading: isOtherDataLoading, data: otherData} = useQuery({\n    queryKey: ['otherSpanGroupTimeseries', transaction, topConditions],\n    queryFn: () =>\n      fetch(\n        `${HOST}/?query=${getOtherDomainsActionsAndOpTimeseries({\n          transaction,\n          topConditions,\n        })}`\n      ).then(res => res.json()),\n    retry: false,\n    initialData: [],\n  });\n\n  const {data: throughputData} = useQuery({\n    queryKey: ['httpThroughputData', transaction],\n    queryFn: () =>\n      fetch(`${HOST}/?query=${spanThroughput({transaction})}`).then(res => res.json()),\n    retry: false,\n    initialData: [],\n  });\n\n  function renderTitle() {\n    return (\n      <Title>\n        <TitleType>{title}</TitleType>\n      </Title>\n    );\n  }\n\n  function renderSegments() {\n    if (totalValues === 0) {\n      return (\n        <SegmentBar>\n          <p>{t('No recent data.')}</p>\n        </SegmentBar>\n      );\n    }\n\n    return (\n      <SegmentBar>\n        {segments.map((value, index) => {\n          const pct = percent(value.sum, totalValues);\n          const pctLabel = Math.floor(pct);\n          const segmentProps = {\n            index,\n            onClick: () => {},\n          };\n          const segmentLabel = getSegmentLabel(\n            value.span_operation,\n            value.action,\n            value.domain\n          );\n          return (\n            <div\n              key={`segment-${segmentLabel}`}\n              style={{width: pct + '%'}}\n              onMouseOver={() => {\n                setHoveredValue(value);\n              }}\n              onMouseLeave={() => setHoveredValue(null)}\n            >\n              <Tooltip skipWrapper delay={TOOLTIP_DELAY} title={segmentLabel}>\n                <Segment\n                  aria-label={`${segmentLabel} ${t('segment')}`}\n                  color={COLORS[index]}\n                  {...segmentProps}\n                >\n                  {/* if the first segment is 6% or less, the label won't fit cleanly into the segment, so don't show the label */}\n                  {index === 0 && pctLabel > 6 ? `${pctLabel}%` : null}\n                </Segment>\n              </Tooltip>\n            </div>\n          );\n        })}\n        {otherValue > 0 && (\n          <div\n            key=\"segment-other\"\n            style={{width: percent(otherValue, totalValues) + '%'}}\n            onMouseOver={() => {\n              setHoveredValue(otherSegment);\n            }}\n            onMouseLeave={() => setHoveredValue(null)}\n          >\n            <Tooltip skipWrapper delay={TOOLTIP_DELAY} title=\"other\">\n              <Segment\n                aria-label=\"other segment\"\n                color={COLORS[5]}\n                {...{\n                  index: 5,\n                  onClick: () => {},\n                }}\n              />\n            </Tooltip>\n          </div>\n        )}\n      </SegmentBar>\n    );\n  }\n\n  function renderLegend() {\n    return (\n      <LegendAnimateContainer expanded animate={{height: '100%', opacity: 1}}>\n        <LegendContainer>\n          {segments.map((segment, index) => {\n            const pctLabel = Math.floor(percent(segment.sum, totalValues));\n            const unfocus = !!hoveredValue && hoveredValue !== segment;\n            const focus = hoveredValue === segment;\n            const label = getSegmentLabel(\n              segment.span_operation,\n              segment.action,\n              segment.domain\n            );\n\n            return (\n              <li key={`segment-${label}-${index}`}>\n                <LegendRow\n                  onMouseOver={() => setHoveredValue(segment)}\n                  onMouseLeave={() => setHoveredValue(null)}\n                  onClick={() => {}}\n                >\n                  <LegendDot color={COLORS[index]} focus={focus} />\n                  <LegendText unfocus={unfocus}>\n                    {label ?? <NotApplicableLabel>{t('n/a')}</NotApplicableLabel>}\n                  </LegendText>\n                  {<LegendPercent>{`${pctLabel}%`}</LegendPercent>}\n                </LegendRow>\n              </li>\n            );\n          })}\n        </LegendContainer>\n      </LegendAnimateContainer>\n    );\n  }\n\n  return (\n    <Fragment>\n      <TagSummary>\n        <details open aria-expanded onClick={e => e.preventDefault()}>\n          <StyledSummary>\n            <TagHeader>\n              {renderTitle()}\n              {renderSegments()}\n            </TagHeader>\n          </StyledSummary>\n          {renderLegend()}\n        </details>\n      </TagSummary>\n      <WebServiceBreakdownChart\n        isTopDataLoading={isTopDataLoading}\n        topData={topData}\n        isOtherDataLoading={isOtherDataLoading}\n        otherData={otherData}\n        throughputData={throughputData}\n      />\n    </Fragment>\n  );\n}\n\nexport default FacetBreakdownBar;\n\nconst TagSummary = styled('div')`\n  margin-bottom: ${space(2)};\n`;\n\nconst TagHeader = styled('span')<{clickable?: boolean}>`\n  ${p => (p.clickable ? 'cursor: pointer' : null)};\n`;\n\nconst SegmentBar = styled('div')`\n  display: flex;\n  overflow: hidden;\n`;\n\nconst Title = styled('div')`\n  display: flex;\n  font-size: ${p => p.theme.fontSizeMedium};\n  justify-content: space-between;\n  margin-bottom: ${space(1)};\n  line-height: 1.1;\n`;\n\nconst TitleType = styled('div')`\n  flex: none;\n  color: ${p => p.theme.textColor};\n  font-weight: bold;\n  font-size: ${p => p.theme.fontSizeMedium};\n  margin-right: ${space(1)};\n  align-self: center;\n`;\n\nconst Segment = styled('span', {shouldForwardProp: isPropValid})<{color: string}>`\n  &:hover {\n    color: ${p => p.theme.white};\n  }\n  display: block;\n  width: 100%;\n  height: ${space(2)};\n  color: ${p => p.theme.white};\n  outline: none;\n  background-color: ${p => p.color};\n  text-align: right;\n  font-size: ${p => p.theme.fontSizeExtraSmall};\n  padding: 1px ${space(0.5)} 0 0;\n`;\n\nconst LegendAnimateContainer = styled(motion.div, {\n  shouldForwardProp: prop =>\n    prop === 'animate' || (prop !== 'expanded' && isPropValid(prop)),\n})<{expanded: boolean}>`\n  height: 0;\n  opacity: 0;\n  ${p => (!p.expanded ? 'overflow: hidden;' : '')}\n`;\n\nconst LegendContainer = styled('ol')`\n  list-style: none;\n  padding: 0;\n  margin: ${space(1)} 0;\n`;\n\nconst LegendRow = styled('div')`\n  display: flex;\n  align-items: center;\n  cursor: pointer;\n  padding: ${space(0.5)} 0;\n`;\n\nconst LegendDot = styled('span')<{color: string; focus: boolean}>`\n  padding: 0;\n  position: relative;\n  width: 11px;\n  height: 11px;\n  text-indent: -9999em;\n  display: inline-block;\n  border-radius: 50%;\n  flex-shrink: 0;\n  background-color: ${p => p.color};\n  &:after {\n    content: '';\n    border-radius: 50%;\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    outline: ${p => p.theme.gray100} ${space(0.5)} solid;\n    opacity: ${p => (p.focus ? '1' : '0')};\n    transition: opacity 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n  }\n`;\n\nconst LegendText = styled('span')<{unfocus: boolean}>`\n  font-size: ${p => p.theme.fontSizeSmall};\n  margin-left: ${space(1)};\n  overflow: hidden;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n  transition: color 0.3s;\n  color: ${p => (p.unfocus ? p.theme.gray300 : p.theme.gray400)};\n`;\n\nconst LegendPercent = styled('span')`\n  font-size: ${p => p.theme.fontSizeSmall};\n  margin-left: ${space(1)};\n  color: ${p => p.theme.gray300};\n  text-align: right;\n  flex-grow: 1;\n`;\n\nconst NotApplicableLabel = styled('span')`\n  color: ${p => p.theme.gray300};\n`;\n\nconst StyledSummary = styled('summary')`\n  &::-webkit-details-marker {\n    display: none;\n  }\n`;\n","export const getModuleBreakdown = ({transaction}) => {\n  return `SELECT\n  sum(exclusive_time) as sum, module\n  FROM spans_experimental_starfish\n  WHERE module != 'none'\n  ${transaction ? `AND transaction = '${transaction}'` : ''}\n  GROUP BY module\n  ORDER BY -sum\n `;\n};\n\nexport const getTopDomainsActionsAndOp = ({transaction}) => {\n  return `SELECT domain, action, span_operation, sum(exclusive_time) as sum\n   FROM spans_experimental_starfish\n   WHERE span_operation NOT IN ['base.dispatch.execute', 'middleware.django', 'base.dispatch.request']\n   ${transaction ? `AND transaction = '${transaction}'` : ''}\n   GROUP BY domain, action, span_operation\n   ORDER BY -sum(exclusive_time)\n   LIMIT 5\n `;\n};\n\nexport const getTopDomainsActionsAndOpTimeseries = ({transaction, topConditions}) => {\n  return `SELECT\n quantile(0.75)(exclusive_time) as p75, domain, action, span_operation,\n toStartOfInterval(start_timestamp, INTERVAL 1 DAY) as interval\n FROM default.spans_experimental_starfish\n ${topConditions ? `WHERE (${topConditions})` : ''}\n ${topConditions && transaction ? `AND transaction = '${transaction}'` : ''}\n ${!topConditions && transaction ? `WHERE transaction = '${transaction}'` : ''}\n GROUP BY interval, domain, action, span_operation\n ORDER BY interval, domain, action, span_operation\n `;\n};\n\nexport const getOtherDomainsActionsAndOpTimeseries = ({transaction, topConditions}) => {\n  return `SELECT\n quantile(0.75)(exclusive_time) as p75,\n toStartOfInterval(start_timestamp, INTERVAL 1 DAY) as interval\n FROM default.spans_experimental_starfish\n ${topConditions ? `WHERE NOT (${topConditions})` : ''}\n ${topConditions && transaction ? `AND transaction = '${transaction}'` : ''}\n ${!topConditions && transaction ? `WHERE transaction = '${transaction}'` : ''}\n GROUP BY interval\n ORDER BY interval\n `;\n};\n\nexport const spanThroughput = ({transaction}) => {\n  return `SELECT\n  count() as count,\n  toStartOfInterval(start_timestamp, INTERVAL 1 DAY) as interval\n  FROM default.spans_experimental_starfish\n  ${transaction ? `WHERE transaction = '${transaction}'` : ''}\n  GROUP BY interval\n  ORDER BY interval\n  `;\n};\n\nexport const totalCumulativeTime = ({transaction}) => {\n  return `SELECT sum(exclusive_time) as sum\n   FROM spans_experimental_starfish\n   ${transaction ? `WHERE transaction = '${transaction}'` : ''}\n `;\n};\n\nexport const getTopDomainsAndMethods = ({transaction}) => {\n  return `SELECT domain, action\n   FROM spans_experimental_starfish\n   WHERE span_operation = 'http.client'\n   ${transaction ? `AND transaction = '${transaction}'` : ''}\n   GROUP BY domain, action\n   ORDER BY -sum(exclusive_time)\n   LIMIT 5\n `;\n};\n\nexport const getTopHttpDomains = ({transaction}) => {\n  return `SELECT\n quantile(0.75)(exclusive_time) as p75, domain,\n toStartOfInterval(start_timestamp, INTERVAL 1 DAY) as interval\n FROM default.spans_experimental_starfish\n WHERE domain IN (\n  SELECT domain\n   FROM spans_experimental_starfish\n   WHERE startsWith(span_operation, 'http')\n   ${transaction ? `AND transaction = '${transaction}'` : ''}\n   GROUP BY domain\n   ORDER BY -sum(exclusive_time)\n   LIMIT 2\n ) AND startsWith(span_operation, 'http')\n ${transaction ? `AND transaction = '${transaction}'` : ''}\n GROUP BY interval, domain\n ORDER BY interval, domain\n `;\n};\n\nexport const getOtherDomains = ({transaction}) => {\n  return `SELECT\n  quantile(0.75)(exclusive_time) as p75,\n  toStartOfInterval(start_timestamp, INTERVAL 1 DAY) as interval\n  FROM default.spans_experimental_starfish\n  WHERE domain NOT IN (\n   SELECT domain\n    FROM spans_experimental_starfish\n    WHERE startsWith(span_operation, 'http')\n    ${transaction ? `AND transaction = '${transaction}'` : ''}\n    GROUP BY domain\n    ORDER BY -sum(exclusive_time)\n    LIMIT 2\n  ) AND startsWith(span_operation, 'http')\n  ${transaction ? `AND transaction = '${transaction}'` : ''}\n  GROUP BY interval\n  ORDER BY interval\n  `;\n};\n\nexport const getDatabaseTimeSpent = ({transaction}) => {\n  return `SELECT\n  quantile(0.75)(exclusive_time) as p75,\n  toStartOfInterval(start_timestamp, INTERVAL 1 DAY) as interval\n  FROM default.spans_experimental_starfish\n  WHERE startsWith(span_operation, 'db') and span_operation != 'db.redis'\n  ${transaction ? `AND transaction = '${transaction}'` : ''}\n  GROUP BY interval\n  ORDER BY interval\n  `;\n};\n\nexport const getDbThroughput = ({transaction}) => {\n  return `SELECT\n  count() as count,\n  toStartOfInterval(start_timestamp, INTERVAL 1 DAY) as interval\n  FROM default.spans_experimental_starfish\n  WHERE module = 'db'\n  ${transaction ? `AND transaction = '${transaction}'` : ''}\n  GROUP BY interval\n  ORDER BY interval\n  `;\n};\n\nexport const getHttpThroughput = ({transaction}) => {\n  return `SELECT\n  count() as count,\n  toStartOfInterval(start_timestamp, INTERVAL 1 DAY) as interval\n  FROM default.spans_experimental_starfish\n  WHERE module = 'http'\n  ${transaction ? `AND transaction = '${transaction}'` : ''}\n  GROUP BY interval\n  ORDER BY interval\n `;\n};\n\nexport const FAILURE_RATE_QUERY = `SELECT\n toStartOfInterval(start_timestamp, INTERVAL 5 MINUTE) as interval,\n countIf(greaterOrEquals(status, 200) AND less(status, 300)) as successCount,\n countIf(greaterOrEquals(status, 500)) as failureCount,\n divide(failureCount, plus(successCount, failureCount)) as failureRate\n FROM spans_experimental_starfish\n WHERE module = 'http'\n GROUP BY interval\n ORDER BY interval asc\n `;\n"],"names":["WebServiceBreakdownChart","_ref","isTopDataLoading","topData","isOtherDataLoading","otherData","throughputData","theme","useTheme","seriesByDomain","start","end","forEach","series","label","getSegmentLabel","span_operation","action","domain","seriesName","data","value","isNil","moment","inteval","interval","push","p75","name","Other","Object","values","map","zeroFillSeries","_jsx","ChartPanel","title","t","children","Chart","statsPeriod","height","loading","utc","grid","left","right","top","bottom","definedAxisTicks","stacked","chartColors","charts","getColorPalette","throughput","displayName","COLORS","HOST","undefined","FacetBreakdownBar","transaction","maybeTransaction","hoveredValue","setHoveredValue","useState","segments","useQuery","queryKey","queryFn","fetch","_ref2","getTopDomainsActionsAndOp","then","res","json","retry","initialData","cumulativeTime","_ref6","totalCumulativeTime","totalValues","reduce","acc","segment","sum","totalSegments","otherValue","otherSegment","topConditions","length","index","element","concat","isLoading","_ref3","getTopDomainsActionsAndOpTimeseries","_ref4","getOtherDomainsActionsAndOpTimeseries","_ref5","spanThroughput","_jsxs","Fragment","TagSummary","open","onClick","e","preventDefault","StyledSummary","TagHeader","Title","TitleType","SegmentBar","pct","percent","pctLabel","Math","floor","segmentProps","segmentLabel","style","width","onMouseOver","onMouseLeave","Tooltip","skipWrapper","delay","Segment","color","LegendAnimateContainer","expanded","animate","opacity","LegendContainer","unfocus","focus","LegendRow","LegendDot","LegendText","NotApplicableLabel","LegendPercent","_styled","target","space","p","clickable","styles","fontSizeMedium","textColor","shouldForwardProp","isPropValid","white","fontSizeExtraSmall","motion","prop","gray100","fontSizeSmall","gray300","gray400"],"sourceRoot":""}