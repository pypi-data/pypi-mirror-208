{"version":3,"file":"chunks/app_views_starfish_modules_APIModule_index_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/utils/useKeyPress.tsx","webpack:///./app/utils/useOnClickOutside.tsx","webpack:///./app/views/starfish/components/slideOverPanel.tsx","webpack:///./app/views/starfish/components/detailPanel.tsx","webpack:///./app/views/starfish/views/endpointDetails/index.tsx","webpack:///./app/views/starfish/modules/APIModule/APIModuleView.tsx","webpack:///./app/views/starfish/modules/APIModule/index.tsx"],"sourcesContent":["import {useEffect, useState} from 'react';\n\n/**\n * Hook to detect when a specific key is being pressed\n */\nconst useKeyPress = (targetKey: string, target?: HTMLElement) => {\n  const [keyPressed, setKeyPressed] = useState(false);\n  const current = target ?? document.body;\n\n  useEffect(() => {\n    const downHandler = ({key}: KeyboardEvent) => {\n      if (key === targetKey) {\n        setKeyPressed(true);\n      }\n    };\n\n    const upHandler = ({key}: KeyboardEvent) => {\n      if (key === targetKey) {\n        setKeyPressed(false);\n      }\n    };\n\n    current.addEventListener('keydown', downHandler);\n    current.addEventListener('keyup', upHandler);\n\n    return () => {\n      current.removeEventListener('keydown', downHandler);\n      current.removeEventListener('keyup', upHandler);\n    };\n  }, [targetKey, current]);\n\n  return keyPressed;\n};\n\nexport default useKeyPress;\n","import {useEffect} from 'react';\n\n// hook from https://usehooks.com/useOnClickOutside/\nfunction useOnClickOutside<T extends HTMLElement = HTMLElement>(\n  ref: React.RefObject<T>,\n  handler: (event: MouseEvent | TouchEvent) => void\n) {\n  useEffect(\n    () => {\n      const listener = (event: MouseEvent | TouchEvent) => {\n        const el = ref?.current;\n\n        // Do nothing if clicking ref's element or descendent elements\n        if (!el || el.contains(event.target as Node)) {\n          return;\n        }\n\n        handler(event);\n      };\n\n      document.addEventListener('mousedown', listener);\n      document.addEventListener('touchstart', listener);\n      return () => {\n        document.removeEventListener('mousedown', listener);\n        document.removeEventListener('touchstart', listener);\n      };\n    },\n    // Reload only if ref or handler changes\n    [ref, handler]\n  );\n}\n\nexport default useOnClickOutside;\n","import {ForwardedRef, forwardRef} from 'react';\nimport isPropValid from '@emotion/is-prop-valid';\nimport styled from '@emotion/styled';\nimport {motion} from 'framer-motion';\n\nconst PANEL_WIDTH = '50vw';\n\ntype SlideOverPanelProps = {\n  children: React.ReactNode;\n  collapsed: boolean;\n};\n\nexport default forwardRef(SlideOverPanel);\n\nfunction SlideOverPanel(\n  {collapsed, children}: SlideOverPanelProps,\n  ref: ForwardedRef<HTMLDivElement>\n) {\n  return (\n    <_SlideOverPanel\n      ref={ref}\n      collapsed={collapsed}\n      initial={{opacity: 0, x: PANEL_WIDTH}}\n      animate={!collapsed ? {opacity: 1, x: 0} : {opacity: 0, x: PANEL_WIDTH}}\n      transition={{\n        type: 'spring',\n        stiffness: 500,\n        damping: 50,\n      }}\n    >\n      {children}\n    </_SlideOverPanel>\n  );\n}\n\nconst _SlideOverPanel = styled(motion.div, {\n  shouldForwardProp: prop =>\n    ['animate', 'transition'].includes(prop) ||\n    (prop !== 'collapsed' && isPropValid(prop)),\n})<{\n  collapsed: boolean;\n}>`\n  width: ${PANEL_WIDTH};\n  position: fixed;\n  top: 0;\n  bottom: 0;\n  right: 0;\n  background: ${p => p.theme.background};\n  color: ${p => p.theme.textColor};\n  border-left: 1px solid ${p => p.theme.border};\n  text-align: left;\n  z-index: ${p => p.theme.zIndex.sidebar - 1};\n  ${p =>\n    p.collapsed\n      ? 'overflow: hidden;'\n      : `overflow-x: hidden;\n  overflow-y: scroll;`}\n`;\n","import {useEffect, useRef, useState} from 'react';\nimport styled from '@emotion/styled';\n\nimport {Button} from 'sentry/components/button';\nimport {IconClose} from 'sentry/icons/iconClose';\nimport {t} from 'sentry/locale';\nimport {space} from 'sentry/styles/space';\nimport useKeyPress from 'sentry/utils/useKeyPress';\nimport useOnClickOutside from 'sentry/utils/useOnClickOutside';\nimport SlideOverPanel from 'sentry/views/starfish/components/slideOverPanel';\n\ntype DetailProps = {\n  children: React.ReactNode;\n  detailKey?: string;\n  onClose?: () => void;\n};\n\ntype DetailState = {\n  collapsed: boolean;\n};\n\nexport default function Detail({children, detailKey, onClose}: DetailProps) {\n  const [state, setState] = useState<DetailState>({collapsed: true});\n  const escapeKeyPressed = useKeyPress('Escape');\n\n  // Any time the key prop changes (due to user interaction), we want to open the panel\n  useEffect(() => {\n    if (detailKey) {\n      setState({collapsed: false});\n    }\n  }, [detailKey]);\n\n  const panelRef = useRef<HTMLDivElement>(null);\n  useOnClickOutside(panelRef, () => {\n    if (!state.collapsed) {\n      onClose?.();\n      setState({collapsed: true});\n    }\n  });\n\n  useEffect(() => {\n    if (escapeKeyPressed) {\n      if (!state.collapsed) {\n        onClose?.();\n        setState({collapsed: true});\n      }\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [escapeKeyPressed]);\n\n  return (\n    <SlideOverPanel collapsed={state.collapsed} ref={panelRef}>\n      <CloseButtonWrapper>\n        <CloseButton\n          priority=\"link\"\n          size=\"zero\"\n          borderless\n          aria-label={t('Close Details')}\n          icon={<IconClose size=\"sm\" />}\n          onClick={() => {\n            setState({collapsed: true});\n            onClose?.();\n          }}\n        />\n      </CloseButtonWrapper>\n      <DetailWrapper>{children}</DetailWrapper>\n    </SlideOverPanel>\n  );\n}\n\nconst CloseButton = styled(Button)`\n  color: ${p => p.theme.gray300};\n  &:hover {\n    color: ${p => p.theme.gray400};\n  }\n`;\n\nconst CloseButtonWrapper = styled('div')`\n  justify-content: flex-end;\n  display: flex;\n  padding: ${space(2)};\n`;\n\nconst DetailWrapper = styled('div')`\n  padding: 0 ${space(4)};\n`;\n","import {useTheme} from '@emotion/react';\nimport styled from '@emotion/styled';\nimport {useQuery} from '@tanstack/react-query';\nimport moment from 'moment';\nimport * as qs from 'query-string';\n\nimport Duration from 'sentry/components/duration';\nimport GridEditable, {\n  COL_WIDTH_UNDEFINED,\n  GridColumnHeader,\n} from 'sentry/components/gridEditable';\nimport Link from 'sentry/components/links/link';\nimport {t} from 'sentry/locale';\nimport {space} from 'sentry/styles/space';\nimport {useLocation} from 'sentry/utils/useLocation';\nimport usePageFilters from 'sentry/utils/usePageFilters';\nimport Chart from 'sentry/views/starfish/components/chart';\nimport Detail from 'sentry/views/starfish/components/detailPanel';\nimport {\n  OverflowEllipsisTextContainer,\n  renderHeadCell,\n  TextAlignLeft,\n} from 'sentry/views/starfish/modules/APIModule/endpointTable';\nimport {\n  getEndpointDetailSeriesQuery,\n  getEndpointDetailTableEventView,\n  getEndpointDetailTableQuery,\n} from 'sentry/views/starfish/modules/APIModule/queries';\nimport {HOST} from 'sentry/views/starfish/utils/constants';\nimport {PERIOD_REGEX} from 'sentry/views/starfish/utils/dates';\nimport {useSpansQuery} from 'sentry/views/starfish/utils/useSpansQuery';\nimport {zeroFillSeries} from 'sentry/views/starfish/utils/zeroFillSeries';\n\nexport type EndpointDataRow = {\n  count: number;\n  description: string;\n  domain: string;\n  failure_count: number;\n  failure_rate: number;\n  group_id: string;\n  'p50(exclusive_time)': number;\n  'p95(exclusive_time)': number;\n  transaction_count: number;\n};\n\nexport type SpanTransactionDataRow = {\n  count: number;\n  transaction: string;\n};\n\ntype EndpointDetailBodyProps = {\n  row: EndpointDataRow;\n};\n\nconst COLUMN_ORDER = [\n  {\n    key: 'transaction',\n    name: 'Transaction',\n    width: 280,\n  },\n  {\n    key: 'count()',\n    name: 'Count',\n    width: COL_WIDTH_UNDEFINED,\n  },\n  {\n    key: 'p50(span.self_time)',\n    name: 'p50',\n    width: COL_WIDTH_UNDEFINED,\n  },\n  {\n    key: 'failure_rate',\n    name: 'Error %',\n    width: COL_WIDTH_UNDEFINED,\n  },\n];\nexport default function EndpointDetail({\n  row,\n  onClose,\n}: Partial<EndpointDetailBodyProps> & {onClose: () => void}) {\n  return (\n    <Detail detailKey={row?.description} onClose={onClose}>\n      {row && <EndpointDetailBody row={row} />}\n    </Detail>\n  );\n}\n\nfunction EndpointDetailBody({row}: EndpointDetailBodyProps) {\n  const pageFilter = usePageFilters();\n  const location = useLocation();\n  const seriesQuery = getEndpointDetailSeriesQuery({\n    description: null,\n    transactionName: null,\n    datetime: pageFilter.selection.datetime,\n    groupId: row.group_id,\n  });\n  const {isLoading: seriesIsLoading, data: seriesData} = useQuery({\n    queryKey: [seriesQuery],\n    queryFn: () => fetch(`${HOST}/?query=${seriesQuery}`).then(res => res.json()),\n    retry: false,\n    initialData: [],\n  });\n\n  const {isLoading: tableIsLoading, data: tableData} = useSpansQuery({\n    queryString: getEndpointDetailTableQuery({\n      description: null,\n      transactionName: null,\n      datetime: pageFilter.selection.datetime,\n      groupId: row.group_id,\n    }),\n    eventView: getEndpointDetailTableEventView({\n      description: null,\n      transactionName: null,\n      datetime: pageFilter.selection.datetime,\n      groupId: row.group_id,\n    }),\n    initialData: [],\n  });\n\n  const [_, num, unit] = pageFilter.selection.datetime.period?.match(PERIOD_REGEX) ?? [];\n  const startTime =\n    num && unit\n      ? moment().subtract(num, unit as 'h' | 'd')\n      : moment(pageFilter.selection.datetime.start);\n  const endTime = moment(pageFilter.selection.datetime.end ?? undefined);\n\n  const [p50Series, p95Series, countSeries, _errorCountSeries, errorRateSeries] =\n    endpointDetailDataToChartData(seriesData).map(series =>\n      zeroFillSeries(series, moment.duration(12, 'hours'), startTime, endTime)\n    );\n\n  return (\n    <div>\n      <h2>{t('Endpoint Detail')}</h2>\n      <p>\n        {t(\n          'Detailed summary of http client spans. Detailed summary of http client spans. Detailed summary of http client spans. Detailed summary of http client spans. Detailed summary of http client spans. Detailed summary of http client spans.'\n        )}\n      </p>\n      <SubHeader>{t('Endpoint URL')}</SubHeader>\n      <pre>{row?.description}</pre>\n      <SubHeader>{t('Domain')}</SubHeader>\n      <pre>{row?.domain}</pre>\n      <FlexRowContainer>\n        <FlexRowItem>\n          <SubHeader>{t('Duration (P50)')}</SubHeader>\n          <SubSubHeader>\n            <Duration\n              seconds={row['p50(span.self_time)'] / 1000}\n              fixedDigits={2}\n              abbreviation\n            />\n          </SubSubHeader>\n          <APIDetailChart\n            series={p50Series}\n            isLoading={seriesIsLoading}\n            index={2}\n            outOf={4}\n          />\n        </FlexRowItem>\n        <FlexRowItem>\n          <SubHeader>{t('Duration (P95)')}</SubHeader>\n          <SubSubHeader>\n            <Duration\n              seconds={row['p95(span.self_time)'] / 1000}\n              fixedDigits={2}\n              abbreviation\n            />\n          </SubSubHeader>\n          <APIDetailChart\n            series={p95Series}\n            isLoading={seriesIsLoading}\n            index={3}\n            outOf={4}\n          />\n        </FlexRowItem>\n        <FlexRowItem>\n          <SubHeader>{t('Throughput')}</SubHeader>\n          <SubSubHeader>{row.count}</SubSubHeader>\n          <APIDetailChart\n            series={countSeries}\n            isLoading={seriesIsLoading}\n            index={0}\n            outOf={4}\n          />\n        </FlexRowItem>\n        <FlexRowItem>\n          <SubHeader>{t('Error Rate')}</SubHeader>\n          <SubSubHeader>{row.failure_rate}</SubSubHeader>\n          <APIDetailChart\n            series={errorRateSeries}\n            isLoading={seriesIsLoading}\n            index={1}\n            outOf={4}\n          />\n        </FlexRowItem>\n      </FlexRowContainer>\n      <GridEditable\n        isLoading={tableIsLoading}\n        data={tableData}\n        columnOrder={COLUMN_ORDER}\n        columnSortBy={[]}\n        grid={{\n          renderHeadCell,\n          renderBodyCell: (column: GridColumnHeader, dataRow: SpanTransactionDataRow) =>\n            renderBodyCell(column, dataRow, row.group_id),\n        }}\n        location={location}\n      />\n    </div>\n  );\n}\n\n// TODO: A lot of this is duplicate from endpointTable.tsx renderBodyCell.\n// Only difference is the links. Come up with a better way to share this.\nfunction renderBodyCell(\n  column: GridColumnHeader,\n  row: SpanTransactionDataRow,\n  groupId: string\n): React.ReactNode {\n  if (column.key === 'transaction') {\n    return (\n      <OverflowEllipsisTextContainer>\n        <Link\n          to={`/starfish/span/${groupId}?${qs.stringify({transaction: row.transaction})}`}\n        >\n          {row[column.key]}\n        </Link>\n      </OverflowEllipsisTextContainer>\n    );\n  }\n\n  if (column.key.toString().match(/^p\\d\\d/)) {\n    return (\n      <TextAlignLeft>\n        <Duration seconds={row[column.key] / 1000} fixedDigits={2} abbreviation />\n      </TextAlignLeft>\n    );\n  }\n  if (!['description', 'transaction'].includes(column.key.toString())) {\n    return (\n      <TextAlignLeft>\n        <OverflowEllipsisTextContainer>{row[column.key]}</OverflowEllipsisTextContainer>\n      </TextAlignLeft>\n    );\n  }\n\n  return <OverflowEllipsisTextContainer>{row[column.key]}</OverflowEllipsisTextContainer>;\n}\n\nfunction endpointDetailDataToChartData(data: any) {\n  const series = [] as any[];\n  if (data.length > 0) {\n    Object.keys(data[0])\n      .filter(key => key !== 'interval')\n      .forEach(key => {\n        series.push({seriesName: `${key}()`, data: [] as any[]});\n      });\n  }\n  data.forEach(point => {\n    Object.keys(point).forEach(key => {\n      if (key !== 'interval') {\n        series\n          .find(serie => serie.seriesName === `${key}()`)\n          ?.data.push({\n            name: point.interval,\n            value: point[key],\n          });\n      }\n    });\n  });\n  return series;\n}\n\nfunction APIDetailChart(props: {\n  index: number;\n  isLoading: boolean;\n  outOf: number;\n  series: any;\n}) {\n  const theme = useTheme();\n  return (\n    <Chart\n      statsPeriod=\"24h\"\n      height={110}\n      data={props.series ? [props.series] : []}\n      start=\"\"\n      end=\"\"\n      loading={props.isLoading}\n      utc={false}\n      stacked\n      isLineChart\n      disableXAxis\n      hideYAxisSplitLine\n      chartColors={[theme.charts.getColorPalette(props.outOf - 2)[props.index]]}\n      grid={{\n        left: '0',\n        right: '0',\n        top: '8px',\n        bottom: '16px',\n      }}\n    />\n  );\n}\n\nconst SubHeader = styled('h3')`\n  color: ${p => p.theme.gray300};\n  font-size: ${p => p.theme.fontSizeMedium};\n  margin: 0;\n  margin-bottom: ${space(1)};\n`;\n\nconst SubSubHeader = styled('h4')`\n  margin: 0;\n  font-weight: normal;\n`;\n\nconst FlexRowContainer = styled('div')`\n  display: flex;\n  & > div:last-child {\n    padding-right: ${space(1)};\n  }\n  flex-wrap: wrap;\n`;\n\nconst FlexRowItem = styled('div')`\n  padding-right: ${space(4)};\n  flex: 1;\n  flex-grow: 0;\n  min-width: 280px;\n  & > h3 {\n    margin-bottom: 0;\n  }\n`;\n","import {Fragment, useRef, useState} from 'react';\nimport {useTheme} from '@emotion/react';\nimport styled from '@emotion/styled';\nimport {Location} from 'history';\nimport moment from 'moment';\n\nimport {CompactSelect} from 'sentry/components/compactSelect';\nimport DatePageFilter from 'sentry/components/datePageFilter';\nimport {normalizeDateTimeParams} from 'sentry/components/organizations/pageFilters/parse';\nimport {t} from 'sentry/locale';\nimport {space} from 'sentry/styles/space';\nimport {Series} from 'sentry/types/echarts';\nimport {useApiQuery} from 'sentry/utils/queryClient';\nimport useOrganization from 'sentry/utils/useOrganization';\nimport usePageFilters from 'sentry/utils/usePageFilters';\nimport Chart from 'sentry/views/starfish/components/chart';\nimport ChartPanel from 'sentry/views/starfish/components/chartPanel';\nimport {HostDetails} from 'sentry/views/starfish/modules/APIModule/hostDetails';\nimport {PERIOD_REGEX} from 'sentry/views/starfish/utils/dates';\nimport {useSpansQuery} from 'sentry/views/starfish/utils/useSpansQuery';\nimport {zeroFillSeries} from 'sentry/views/starfish/utils/zeroFillSeries';\nimport {EndpointDataRow} from 'sentry/views/starfish/views/endpointDetails';\n\nimport EndpointTable from './endpointTable';\nimport HostTable from './hostTable';\nimport {\n  getEndpointDomainsEventView,\n  getEndpointDomainsQuery,\n  getEndpointGraphEventView,\n  getEndpointGraphQuery,\n} from './queries';\n\nconst HTTP_ACTION_OPTIONS = [\n  {value: '', label: 'All'},\n  ...['GET', 'POST', 'PUT', 'DELETE'].map(action => ({\n    value: action,\n    label: action,\n  })),\n];\n\ntype Props = {\n  location: Location;\n  onSelect: (row: EndpointDataRow) => void;\n};\n\nexport type DataRow = {\n  count: number;\n  description: string;\n  domain: string;\n};\n\nexport default function APIModuleView({location, onSelect}: Props) {\n  const themes = useTheme();\n  const pageFilter = usePageFilters();\n  const [state, setState] = useState<{\n    action: string;\n    domain: string;\n    transaction: string;\n  }>({\n    action: '',\n    domain: '',\n    transaction: '',\n  });\n  const endpointTableRef = useRef<HTMLInputElement>(null);\n  const organization = useOrganization();\n\n  const endpointsDomainEventView = getEndpointDomainsEventView({\n    datetime: pageFilter.selection.datetime,\n  });\n  const endpointsDomainQuery = getEndpointDomainsQuery({\n    datetime: pageFilter.selection.datetime,\n  });\n\n  const {selection} = pageFilter;\n  const {projects, environments, datetime} = selection;\n\n  useApiQuery<null>(\n    [\n      `/organizations/${organization.slug}/events-starfish/`,\n      {\n        query: {\n          ...{\n            environment: environments,\n            project: projects.map(proj => String(proj)),\n          },\n          ...normalizeDateTimeParams(datetime),\n        },\n      },\n    ],\n    {\n      staleTime: 10,\n    }\n  );\n\n  const {isLoading: _isDomainsLoading, data: domains} = useSpansQuery({\n    eventView: endpointsDomainEventView,\n    queryString: endpointsDomainQuery,\n    initialData: [],\n  });\n\n  const endpointsGraphEventView = getEndpointGraphEventView({\n    datetime: pageFilter.selection.datetime,\n  });\n\n  const {isLoading: isGraphLoading, data: graphData} = useSpansQuery({\n    eventView: endpointsGraphEventView,\n    queryString: getEndpointGraphQuery({\n      datetime: pageFilter.selection.datetime,\n    }),\n    initialData: [],\n  });\n\n  const quantiles = [\n    'p50(span.self_time)',\n    'p75(span.self_time)',\n    'p95(span.self_time)',\n    'p99(span.self_time)',\n  ];\n\n  const seriesByQuantile: {[quantile: string]: Series} = {};\n  quantiles.forEach(quantile => {\n    seriesByQuantile[quantile] = {\n      seriesName: quantile,\n      data: [],\n    };\n  });\n  const countSeries: Series = {\n    seriesName: 'count',\n    data: [],\n  };\n  const failureRateSeries: Series = {\n    seriesName: 'failure_rate',\n    data: [],\n  };\n\n  graphData.forEach(datum => {\n    quantiles.forEach(quantile => {\n      seriesByQuantile[quantile].data.push({\n        value: datum[quantile],\n        name: datum.interval,\n      });\n    });\n    countSeries.data.push({\n      value: datum['count()'],\n      name: datum.interval,\n    });\n    failureRateSeries.data.push({\n      value: datum['failure_rate()'],\n      name: datum.interval,\n    });\n  });\n\n  const [_, num, unit] = pageFilter.selection.datetime.period?.match(PERIOD_REGEX) ?? [];\n  const startTime =\n    num && unit\n      ? moment().subtract(num, unit as 'h' | 'd')\n      : moment(pageFilter.selection.datetime.start);\n  const endTime = moment(pageFilter.selection.datetime.end ?? undefined);\n  const [zeroFilledQuantiles, zeroFilledCounts, zeroFilledFailureRate] = [\n    seriesByQuantile,\n    [countSeries],\n    [failureRateSeries],\n  ].map(seriesGroup =>\n    Object.values(seriesGroup).map(series =>\n      zeroFillSeries(series, moment.duration(12, 'hours'), startTime, endTime)\n    )\n  );\n\n  const setAction = (action: string) => {\n    setState({\n      ...state,\n      action,\n    });\n  };\n\n  const setDomain = (domain: string) => {\n    setState({\n      ...state,\n      domain,\n    });\n  };\n  const domainOptions = [\n    {value: '', label: 'All'},\n    ...domains\n      .filter(({domain}) => domain !== '')\n      .map(({domain}) => ({\n        value: domain,\n        label: domain,\n      })),\n  ];\n\n  return (\n    <Fragment>\n      <FilterOptionsContainer>\n        <CompactSelect\n          triggerProps={{prefix: t('Service')}}\n          value=\"project\"\n          options={[{value: 'project', label: 'Project'}]}\n          onChange={() => void 0}\n        />\n        <DatePageFilter alignDropdown=\"left\" />\n      </FilterOptionsContainer>\n      <ChartsContainer>\n        <ChartsContainerItem>\n          <ChartPanel title={t('Throughput')}>\n            <APIModuleChart data={zeroFilledCounts} loading={isGraphLoading} />\n          </ChartPanel>\n        </ChartsContainerItem>\n        <ChartsContainerItem>\n          <ChartPanel title={t('Response Time')}>\n            <APIModuleChart data={zeroFilledQuantiles} loading={isGraphLoading} />\n          </ChartPanel>\n        </ChartsContainerItem>\n        <ChartsContainerItem>\n          <ChartPanel title={t('Error Rate')}>\n            <APIModuleChart\n              data={zeroFilledFailureRate}\n              loading={isGraphLoading}\n              chartColors={[themes.charts.getColorPalette(2)[2]]}\n            />\n          </ChartPanel>\n        </ChartsContainerItem>\n      </ChartsContainer>\n      <HostTable\n        location={location}\n        setDomainFilter={domain => {\n          setDomain(domain);\n          // TODO: Cheap way to scroll to the endpoints table without waiting for async request\n          setTimeout(() => {\n            endpointTableRef.current?.scrollIntoView({\n              behavior: 'smooth',\n              inline: 'start',\n            });\n          }, 200);\n        }}\n      />\n      <FilterOptionsContainer>\n        <CompactSelect\n          triggerProps={{prefix: t('Operation')}}\n          value={state.action}\n          options={HTTP_ACTION_OPTIONS}\n          onChange={({value}) => setAction(value)}\n        />\n        <CompactSelect\n          triggerProps={{prefix: t('Domain')}}\n          value={state.domain}\n          options={domainOptions}\n          onChange={({value}) => setDomain(value)}\n        />\n      </FilterOptionsContainer>\n\n      <div ref={endpointTableRef}>\n        {state.domain && <HostDetails host={state.domain} />}\n        <EndpointTable\n          location={location}\n          onSelect={onSelect}\n          filterOptions={{...state, datetime: pageFilter.selection.datetime}}\n        />\n      </div>\n    </Fragment>\n  );\n}\n\nfunction APIModuleChart({\n  data,\n  loading,\n  chartColors,\n}: {\n  data: Series[];\n  loading: boolean;\n  chartColors?: string[];\n}) {\n  const themes = useTheme();\n  return (\n    <Chart\n      statsPeriod=\"24h\"\n      height={140}\n      data={data}\n      start=\"\"\n      end=\"\"\n      loading={loading}\n      utc={false}\n      grid={{\n        left: '0',\n        right: '0',\n        top: '8px',\n        bottom: '0',\n      }}\n      definedAxisTicks={4}\n      stacked\n      isLineChart\n      chartColors={chartColors ?? themes.charts.getColorPalette(2)}\n      disableXAxis\n    />\n  );\n}\n\nconst ChartsContainer = styled('div')`\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  gap: ${space(2)};\n`;\n\nconst ChartsContainerItem = styled('div')`\n  flex: 1;\n`;\n\nconst FilterOptionsContainer = styled('div')`\n  display: flex;\n  flex-direction: row;\n  gap: ${space(1)};\n  margin-bottom: ${space(2)};\n`;\n","import {useState} from 'react';\nimport {Location} from 'history';\n\nimport * as Layout from 'sentry/components/layouts/thirds';\nimport {t} from 'sentry/locale';\nimport {\n  PageErrorAlert,\n  PageErrorProvider,\n} from 'sentry/utils/performance/contexts/pageError';\nimport EndpointDetail, {\n  EndpointDataRow,\n} from 'sentry/views/starfish/views/endpointDetails';\n\nimport APIModuleView from './APIModuleView';\n\ntype APIModuleState = {\n  selectedRow?: EndpointDataRow;\n};\n\ntype Props = {\n  location: Location;\n};\n\nexport default function APIModule(props: Props) {\n  const [state, setState] = useState<APIModuleState>({selectedRow: undefined});\n  const unsetSelectedSpanGroup = () => setState({selectedRow: undefined});\n  const {selectedRow} = state;\n  const setSelectedRow = (row: EndpointDataRow) => setState({selectedRow: row});\n  return (\n    <Layout.Page>\n      <PageErrorProvider>\n        <Layout.Header>\n          <Layout.HeaderContent>\n            <Layout.Title>{t('API')}</Layout.Title>\n          </Layout.HeaderContent>\n        </Layout.Header>\n\n        <Layout.Body>\n          <Layout.Main fullWidth>\n            <PageErrorAlert />\n            <APIModuleView {...props} onSelect={setSelectedRow} />\n            <EndpointDetail row={selectedRow} onClose={unsetSelectedSpanGroup} />\n          </Layout.Main>\n        </Layout.Body>\n      </PageErrorProvider>\n    </Layout.Page>\n  );\n}\n"],"names":["useKeyPress","targetKey","target","keyPressed","setKeyPressed","useState","current","document","body","useEffect","downHandler","_ref","key","upHandler","_ref2","addEventListener","removeEventListener","ref","handler","listener","event","el","contains","PANEL_WIDTH","forwardRef","SlideOverPanel","collapsed","children","_jsx","_SlideOverPanel","initial","opacity","x","animate","transition","type","stiffness","damping","displayName","_styled","motion","shouldForwardProp","prop","includes","isPropValid","p","theme","background","textColor","border","zIndex","sidebar","Detail","detailKey","onClose","state","setState","escapeKeyPressed","panelRef","useRef","useOnClickOutside","_jsxs","CloseButtonWrapper","CloseButton","priority","size","borderless","t","icon","IconClose","onClick","DetailWrapper","Button","gray300","gray400","space","COLUMN_ORDER","name","width","COL_WIDTH_UNDEFINED","EndpointDetail","row","description","EndpointDetailBody","pageFilter","usePageFilters","location","useLocation","seriesQuery","getEndpointDetailSeriesQuery","transactionName","datetime","selection","groupId","group_id","isLoading","seriesIsLoading","data","seriesData","useQuery","queryKey","queryFn","fetch","HOST","then","res","json","retry","initialData","tableIsLoading","tableData","useSpansQuery","queryString","getEndpointDetailTableQuery","eventView","getEndpointDetailTableEventView","_","num","unit","period","match","PERIOD_REGEX","startTime","moment","subtract","start","endTime","end","undefined","p50Series","p95Series","countSeries","_errorCountSeries","errorRateSeries","series","length","Object","keys","filter","forEach","push","seriesName","point","find","serie","interval","value","endpointDetailDataToChartData","map","zeroFillSeries","SubHeader","domain","FlexRowContainer","FlexRowItem","SubSubHeader","Duration","seconds","fixedDigits","abbreviation","APIDetailChart","index","outOf","count","failure_rate","GridEditable","columnOrder","columnSortBy","grid","renderHeadCell","renderBodyCell","column","dataRow","OverflowEllipsisTextContainer","Link","to","qs","transaction","toString","TextAlignLeft","props","useTheme","Chart","statsPeriod","height","loading","utc","stacked","isLineChart","disableXAxis","hideYAxisSplitLine","chartColors","charts","getColorPalette","left","right","top","bottom","fontSizeMedium","styles","HTTP_ACTION_OPTIONS","label","action","APIModuleView","onSelect","themes","endpointTableRef","organization","useOrganization","endpointsDomainEventView","getEndpointDomainsEventView","endpointsDomainQuery","getEndpointDomainsQuery","projects","environments","useApiQuery","slug","query","environment","project","proj","String","normalizeDateTimeParams","staleTime","_isDomainsLoading","domains","endpointsGraphEventView","getEndpointGraphEventView","isGraphLoading","graphData","getEndpointGraphQuery","quantiles","seriesByQuantile","quantile","failureRateSeries","datum","zeroFilledQuantiles","zeroFilledCounts","zeroFilledFailureRate","seriesGroup","values","setDomain","domainOptions","_ref3","Fragment","FilterOptionsContainer","CompactSelect","triggerProps","prefix","options","onChange","DatePageFilter","alignDropdown","ChartsContainer","ChartsContainerItem","ChartPanel","title","APIModuleChart","HostTable","setDomainFilter","setTimeout","scrollIntoView","behavior","inline","_ref4","_ref5","HostDetails","host","EndpointTable","filterOptions","_ref6","definedAxisTicks","APIModule","selectedRow","Layout","PageErrorProvider","fullWidth","PageErrorAlert","unsetSelectedSpanGroup"],"sourceRoot":""}