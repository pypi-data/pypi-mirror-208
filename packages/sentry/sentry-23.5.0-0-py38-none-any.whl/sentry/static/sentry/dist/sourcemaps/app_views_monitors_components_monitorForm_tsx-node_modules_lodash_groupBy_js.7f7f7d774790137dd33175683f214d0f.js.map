{"version":3,"file":"chunks/app_views_monitors_components_monitorForm_tsx-node_modules_lodash_groupBy_js.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/utils/slugify.tsx","webpack:///./app/views/monitors/components/monitorForm.tsx","webpack:///./app/views/monitors/types.tsx","webpack:///./app/views/monitors/utils.tsx","webpack:///../node_modules/lodash/groupBy.js"],"sourcesContent":["/**\n * Transforms the given string to a slugified version. (e.g. \"My Project\" => \"my-project\")\n *\n * Allows only lowercase alphanumeric values, hyphens, and underscores (should match backend validation rules).\n * Normalizes special characters to a-z where applicable (accents, ligatures, etc).\n * Converts spaces to hyphens.\n */\nexport default function slugify(str: string): string {\n  return str\n    .normalize('NFKD') // Converts accents/ligatures/etc to latin alphabet\n    .toLowerCase()\n    .replace(' ', '-')\n    .replace(/[^a-z0-9-_]/g, ''); // Remove all invalid characters\n}\n","import {useRef, useState} from 'react';\nimport styled from '@emotion/styled';\nimport {Observer} from 'mobx-react';\n\nimport Alert from 'sentry/components/alert';\nimport {RadioOption} from 'sentry/components/forms/controls/radioGroup';\nimport NumberField from 'sentry/components/forms/fields/numberField';\nimport RadioField from 'sentry/components/forms/fields/radioField';\nimport SelectField from 'sentry/components/forms/fields/selectField';\nimport SentryProjectSelectorField from 'sentry/components/forms/fields/sentryProjectSelectorField';\nimport TextField from 'sentry/components/forms/fields/textField';\nimport Form, {FormProps} from 'sentry/components/forms/form';\nimport FormModel from 'sentry/components/forms/model';\nimport ExternalLink from 'sentry/components/links/externalLink';\nimport List from 'sentry/components/list';\nimport ListItem from 'sentry/components/list/listItem';\nimport Text from 'sentry/components/text';\nimport {timezoneOptions} from 'sentry/data/timezones';\nimport {t, tct, tn} from 'sentry/locale';\nimport {space} from 'sentry/styles/space';\nimport {SelectValue} from 'sentry/types';\nimport {isActiveSuperuser} from 'sentry/utils/isActiveSuperuser';\nimport slugify from 'sentry/utils/slugify';\nimport commonTheme from 'sentry/utils/theme';\nimport usePageFilters from 'sentry/utils/usePageFilters';\nimport useProjects from 'sentry/utils/useProjects';\nimport {crontabAsText} from 'sentry/views/monitors/utils';\n\nimport {\n  IntervalConfig,\n  Monitor,\n  MonitorConfig,\n  MonitorType,\n  ScheduleType,\n} from '../types';\n\nconst SCHEDULE_OPTIONS: RadioOption<string>[] = [\n  [ScheduleType.CRONTAB, t('Crontab')],\n  [ScheduleType.INTERVAL, t('Interval')],\n];\n\nconst DEFAULT_MONITOR_TYPE = 'cron_job';\nconst DEFAULT_CRONTAB = '0 0 * * *';\n\nexport const DEFAULT_MAX_RUNTIME = 30;\n\nconst getIntervals = (n: number): SelectValue<string>[] => [\n  {value: 'minute', label: tn('minute', 'minutes', n)},\n  {value: 'hour', label: tn('hour', 'hours', n)},\n  {value: 'day', label: tn('day', 'days', n)},\n  {value: 'week', label: tn('week', 'weeks', n)},\n  {value: 'month', label: tn('month', 'months', n)},\n  {value: 'year', label: tn('year', 'years', n)},\n];\n\ntype Props = {\n  apiEndpoint: string;\n  apiMethod: FormProps['apiMethod'];\n  onSubmitSuccess: FormProps['onSubmitSuccess'];\n  monitor?: Monitor;\n  submitLabel?: string;\n};\n\ntype TransformedData = {\n  config?: Partial<MonitorConfig>;\n};\n\n/**\n * Transform config field values into the config object\n */\nfunction transformData(_data: Record<string, any>, model: FormModel) {\n  return model.fields.toJSON().reduce<TransformedData>((data, [k, v]) => {\n    // We're only concerned with transforming the config\n    if (!k.startsWith('config.')) {\n      data[k] = v;\n      return data;\n    }\n\n    // Default to empty object\n    data.config ??= {};\n\n    if (k === 'config.schedule.frequency' || k === 'config.schedule.interval') {\n      if (!Array.isArray(data.config.schedule)) {\n        data.config.schedule = [1, 'hour'];\n      }\n    }\n\n    if (Array.isArray(data.config.schedule) && k === 'config.schedule.frequency') {\n      data.config.schedule![0] = parseInt(v as string, 10);\n      return data;\n    }\n\n    if (Array.isArray(data.config.schedule) && k === 'config.schedule.interval') {\n      data.config.schedule![1] = v as IntervalConfig['schedule'][1];\n      return data;\n    }\n\n    data.config[k.substr(7)] = v;\n    return data;\n  }, {});\n}\n\n/**\n * Transform config field errors from the error response\n */\nfunction mapFormErrors(responseJson?: any) {\n  if (responseJson.config === undefined) {\n    return responseJson;\n  }\n\n  // Bring nested config entries to the top\n  const {config, ...responseRest} = responseJson;\n  const configErrors = Object.fromEntries(\n    Object.entries(config).map(([key, value]) => [`config.${key}`, value])\n  );\n\n  return {...responseRest, ...configErrors};\n}\n\nfunction MonitorForm({\n  monitor,\n  submitLabel,\n  apiEndpoint,\n  apiMethod,\n  onSubmitSuccess,\n}: Props) {\n  const form = useRef(new FormModel({transformData, mapFormErrors}));\n  const {projects} = useProjects();\n  const {selection} = usePageFilters();\n  const [crontabInput, setCrontabInput] = useState(\n    monitor?.config.schedule_type === ScheduleType.CRONTAB\n      ? monitor?.config.schedule\n      : DEFAULT_CRONTAB\n  );\n\n  function formDataFromConfig(type: MonitorType, config: MonitorConfig) {\n    const rv = {};\n    switch (type) {\n      case 'cron_job':\n        rv['config.schedule_type'] = config.schedule_type;\n        rv['config.checkin_margin'] = config.checkin_margin;\n        rv['config.max_runtime'] = config.max_runtime;\n\n        switch (config.schedule_type) {\n          case 'interval':\n            rv['config.schedule.frequency'] = config.schedule[0];\n            rv['config.schedule.interval'] = config.schedule[1];\n            break;\n          case 'crontab':\n          default:\n            rv['config.schedule'] = config.schedule;\n            rv['config.timezone'] = config.timezone;\n        }\n        break;\n      default:\n    }\n    return rv;\n  }\n\n  const selectedProjectId = selection.projects[0];\n  const selectedProject = selectedProjectId\n    ? projects.find(p => p.id === selectedProjectId + '')\n    : null;\n\n  const isSuperuser = isActiveSuperuser();\n  const filteredProjects = projects.filter(project => isSuperuser || project.isMember);\n\n  const parsedSchedule = crontabAsText(crontabInput);\n\n  return (\n    <Form\n      allowUndo\n      requireChanges\n      apiEndpoint={apiEndpoint}\n      apiMethod={apiMethod}\n      model={form.current}\n      initialData={\n        monitor\n          ? {\n              name: monitor.name,\n              slug: monitor.slug,\n              type: monitor.type ?? DEFAULT_MONITOR_TYPE,\n              project: monitor.project.slug,\n              ...formDataFromConfig(monitor.type, monitor.config),\n            }\n          : {\n              project: selectedProject ? selectedProject.slug : null,\n              type: DEFAULT_MONITOR_TYPE,\n            }\n      }\n      onSubmitSuccess={onSubmitSuccess}\n      submitLabel={submitLabel}\n    >\n      <StyledList symbol=\"colored-numeric\">\n        <StyledListItem>{t('Add a name and project')}</StyledListItem>\n        <ListItemSubText>\n          {t('The monitor name will show up in alerts and notifications')}\n        </ListItemSubText>\n        <InputGroup>\n          <StyledTextField\n            name=\"name\"\n            placeholder={t('My Cron Job')}\n            required\n            stacked\n            inline={false}\n          />\n          {monitor && (\n            <StyledTextField\n              name=\"slug\"\n              help={tct(\n                'The [strong:monitor-slug] is used to uniquely identify your monitor within your organization. Changing this slug will require updates to any instrumented check-in calls.',\n                {strong: <strong />}\n              )}\n              placeholder={t('monitor-slug')}\n              required\n              stacked\n              inline={false}\n              transformInput={slugify}\n            />\n          )}\n          <StyledSentryProjectSelectorField\n            name=\"project\"\n            projects={filteredProjects}\n            placeholder={t('Choose Project')}\n            disabled={!!monitor}\n            disabledReason={t('Existing monitors cannot be moved between projects')}\n            valueIsSlug\n            required\n            stacked\n            inline={false}\n          />\n        </InputGroup>\n\n        <StyledListItem>{t('Choose your schedule type')}</StyledListItem>\n        <ListItemSubText>\n          {tct('You can use [link:the crontab syntax] or our interval schedule.', {\n            link: <ExternalLink href=\"https://en.wikipedia.org/wiki/Cron\" />,\n          })}\n        </ListItemSubText>\n        <InputGroup>\n          <RadioField\n            name=\"config.schedule_type\"\n            choices={SCHEDULE_OPTIONS}\n            defaultValue={ScheduleType.CRONTAB}\n            orientInline\n            required\n            stacked\n            inline={false}\n          />\n        </InputGroup>\n        <StyledListItem>{t('Choose your schedule')}</StyledListItem>\n        <ListItemSubText>\n          {t('How often you expect your recurring jobs to run.')}\n        </ListItemSubText>\n        <InputGroup>\n          {monitor !== undefined && (\n            <Alert type=\"info\">\n              {t(\n                'Any changes you make to the execution schedule will only be applied after the next expected check-in.'\n              )}\n            </Alert>\n          )}\n          <Observer>\n            {() => {\n              const schedule_type = form.current.getValue('config.schedule_type');\n              if (schedule_type === 'crontab') {\n                return (\n                  <ScheduleGroupInputs>\n                    <StyledTextField\n                      name=\"config.schedule\"\n                      placeholder=\"* * * * *\"\n                      defaultValue={DEFAULT_CRONTAB}\n                      css={{input: {fontFamily: commonTheme.text.familyMono}}}\n                      required\n                      stacked\n                      onChange={setCrontabInput}\n                      inline={false}\n                    />\n                    <StyledSelectField\n                      name=\"config.timezone\"\n                      defaultValue=\"UTC\"\n                      options={timezoneOptions}\n                      required\n                      stacked\n                      inline={false}\n                    />\n                    {parsedSchedule && <CronstrueText>\"{parsedSchedule}\"</CronstrueText>}\n                  </ScheduleGroupInputs>\n                );\n              }\n              if (schedule_type === 'interval') {\n                return (\n                  <ScheduleGroupInputs interval>\n                    <LabelText>{t('Every')}</LabelText>\n                    <StyledNumberField\n                      name=\"config.schedule.frequency\"\n                      placeholder=\"e.g. 1\"\n                      defaultValue=\"1\"\n                      required\n                      stacked\n                      inline={false}\n                    />\n                    <StyledSelectField\n                      name=\"config.schedule.interval\"\n                      options={getIntervals(\n                        Number(form.current.getValue('config.schedule.frequency') ?? 1)\n                      )}\n                      defaultValue=\"day\"\n                      required\n                      stacked\n                      inline={false}\n                    />\n                  </ScheduleGroupInputs>\n                );\n              }\n              return null;\n            }}\n          </Observer>\n        </InputGroup>\n        <StyledListItem>{t('Set a missed status')}</StyledListItem>\n        <ListItemSubText>\n          {t(\"The number of minutes we'll wait before we consider a check-in as missed.\")}\n        </ListItemSubText>\n        <InputGroup>\n          <StyledNumberField\n            name=\"config.checkin_margin\"\n            placeholder=\"Defaults to 0 minutes\"\n            stacked\n            inline={false}\n          />\n        </InputGroup>\n        <StyledListItem>{t('Set a failed status')}</StyledListItem>\n        <ListItemSubText>\n          {t(\n            \"The number of minutes a check-in is allowed to run before it's considered failed.\"\n          )}\n        </ListItemSubText>\n        <InputGroup>\n          <StyledNumberField\n            name=\"config.max_runtime\"\n            placeholder={`Defaults to ${DEFAULT_MAX_RUNTIME} minutes`}\n            stacked\n            inline={false}\n          />\n        </InputGroup>\n      </StyledList>\n    </Form>\n  );\n}\n\nexport default MonitorForm;\n\nconst StyledList = styled(List)`\n  width: 600px;\n`;\n\nconst StyledNumberField = styled(NumberField)`\n  padding: 0;\n`;\n\nconst StyledSelectField = styled(SelectField)`\n  padding: 0;\n`;\n\nconst StyledTextField = styled(TextField)`\n  padding: 0;\n`;\n\nconst StyledSentryProjectSelectorField = styled(SentryProjectSelectorField)`\n  padding: 0;\n`;\n\nconst StyledListItem = styled(ListItem)`\n  font-size: ${p => p.theme.fontSizeExtraLarge};\n  font-weight: bold;\n  line-height: 1.3;\n`;\n\nconst LabelText = styled(Text)`\n  font-weight: bold;\n  color: ${p => p.theme.subText};\n`;\n\nconst ListItemSubText = styled(LabelText)`\n  font-weight: normal;\n  padding-left: ${space(4)};\n`;\n\nconst InputGroup = styled('div')`\n  padding-left: ${space(4)};\n  margin-top: ${space(1)};\n  margin-bottom: ${space(4)};\n  display: flex;\n  flex-direction: column;\n  gap: ${space(1)};\n`;\n\nconst ScheduleGroupInputs = styled('div')<{interval?: boolean}>`\n  display: grid;\n  align-items: center;\n  gap: ${space(1)};\n  grid-template-columns: ${p => p.interval && 'auto'} 1fr 2fr;\n`;\n\nconst CronstrueText = styled(LabelText)`\n  font-weight: normal;\n  font-size: ${p => p.theme.fontSizeExtraSmall};\n  font-family: ${p => p.theme.text.familyMono};\n  grid-column: auto / span 2;\n`;\n","import {ObjectStatus, Project} from 'sentry/types';\n\nexport enum MonitorType {\n  UNKNOWN = 'unknown',\n  CRON_JOB = 'cron_job',\n}\n\n/**\n * Some old monitor configuratiosn do NOT have a schedule_type\n *\n * TODO: This should be removed once we've cleaned up our old data and can\n *       verify we don't have any config objects missing schedule_type\n */\ntype LegacyDefaultSchedule = undefined;\n\nexport enum ScheduleType {\n  CRONTAB = 'crontab',\n  INTERVAL = 'interval',\n}\n\nexport enum MonitorStatus {\n  OK = 'ok',\n  ERROR = 'error',\n  DISABLED = 'disabled',\n  ACTIVE = 'active',\n  MISSED_CHECKIN = 'missed_checkin',\n  TIMEOUT = 'timeout',\n}\n\nexport enum CheckInStatus {\n  OK = 'ok',\n  ERROR = 'error',\n  IN_PROGRESS = 'in_progress',\n  MISSED = 'missed',\n  TIMEOUT = 'timeout',\n}\n\ninterface BaseConfig {\n  checkin_margin: number;\n  max_runtime: number;\n  timezone: string;\n}\n\n/**\n * The configuration object used when the schedule is a CRONTAB\n */\nexport interface CrontabConfig extends BaseConfig {\n  /**\n   * The crontab schedule\n   */\n  schedule: string;\n  schedule_type: ScheduleType.CRONTAB | LegacyDefaultSchedule;\n}\n\n/**\n * The configuration object used when the schedule is an INTERVAL\n */\nexport interface IntervalConfig extends BaseConfig {\n  /**\n   * The interval style schedule\n   */\n  schedule: [\n    value: number,\n    interval: 'year' | 'month' | 'week' | 'day' | 'hour' | 'minute'\n  ];\n  schedule_type: ScheduleType.INTERVAL;\n}\n\nexport type MonitorConfig = CrontabConfig | IntervalConfig;\n\nexport interface MonitorEnvironment {\n  dateCreated: string;\n  lastCheckIn: string;\n  name: string;\n  nextCheckIn: string;\n  status: MonitorStatus;\n}\n\nexport interface Monitor {\n  config: MonitorConfig;\n  dateCreated: string;\n  environments: MonitorEnvironment[];\n  id: string;\n  name: string;\n  project: Project;\n  slug: string;\n  status: ObjectStatus;\n  type: MonitorType;\n}\n\nexport interface MonitorStat {\n  duration: number;\n  error: number;\n  missed: number;\n  ok: number;\n  timeout: number;\n  ts: number;\n}\n\nexport interface CheckIn {\n  dateCreated: string;\n  duration: number;\n  id: string;\n  status: CheckInStatus;\n  attachmentId?: number;\n}\n","import cronstrue from 'cronstrue';\n\nimport {t, tn} from 'sentry/locale';\nimport {shouldUse24Hours} from 'sentry/utils/dates';\nimport {MonitorConfig, ScheduleType} from 'sentry/views/monitors/types';\n\nexport function crontabAsText(crontabInput: string | null): string | null {\n  if (!crontabInput) {\n    return null;\n  }\n  let parsedSchedule: string;\n  try {\n    parsedSchedule = cronstrue.toString(crontabInput, {\n      verbose: true,\n      use24HourTimeFormat: shouldUse24Hours(),\n    });\n  } catch (_e) {\n    return null;\n  }\n\n  return parsedSchedule;\n}\n\nexport function scheduleAsText(config: MonitorConfig) {\n  // Crontab format uses cronstrue\n  if (config.schedule_type === ScheduleType.CRONTAB) {\n    const parsedSchedule = crontabAsText(config.schedule);\n    return parsedSchedule ?? t('Unknown schedule');\n  }\n\n  // Interval format is simpler\n  const [value, timeUnit] = config.schedule;\n\n  if (timeUnit === 'minute') {\n    return tn('Every minute', 'Every %s minutes', value);\n  }\n\n  if (timeUnit === 'hour') {\n    return tn('Every hour', 'Every %s hours', value);\n  }\n\n  if (timeUnit === 'day') {\n    return tn('Every day', 'Every %s days', value);\n  }\n\n  if (timeUnit === 'week') {\n    return tn('Every week', 'Every %s weeks', value);\n  }\n\n  if (timeUnit === 'month') {\n    return tn('Every month', 'Every %s months', value);\n  }\n\n  return t('Unknown schedule');\n}\n","var baseAssignValue = require('./_baseAssignValue'),\n    createAggregator = require('./_createAggregator');\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Creates an object composed of keys generated from the results of running\n * each element of `collection` thru `iteratee`. The order of grouped values\n * is determined by the order they occur in `collection`. The corresponding\n * value of each key is an array of elements responsible for generating the\n * key. The iteratee is invoked with one argument: (value).\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [iteratee=_.identity] The iteratee to transform keys.\n * @returns {Object} Returns the composed aggregate object.\n * @example\n *\n * _.groupBy([6.1, 4.2, 6.3], Math.floor);\n * // => { '4': [4.2], '6': [6.1, 6.3] }\n *\n * // The `_.property` iteratee shorthand.\n * _.groupBy(['one', 'two', 'three'], 'length');\n * // => { '3': ['one', 'two'], '5': ['three'] }\n */\nvar groupBy = createAggregator(function(result, value, key) {\n  if (hasOwnProperty.call(result, key)) {\n    result[key].push(value);\n  } else {\n    baseAssignValue(result, key, [value]);\n  }\n});\n\nmodule.exports = groupBy;\n"],"names":["slugify","str","normalize","toLowerCase","replace","SCHEDULE_OPTIONS","ScheduleType","t","DEFAULT_MONITOR_TYPE","DEFAULT_CRONTAB","DEFAULT_MAX_RUNTIME","transformData","_data","model","fields","toJSON","reduce","data","_ref","k","v","startsWith","config","Array","isArray","schedule","parseInt","substr","mapFormErrors","responseJson","undefined","responseRest","Object","fromEntries","entries","map","_ref2","key","value","MonitorForm","_ref3","monitor","submitLabel","apiEndpoint","apiMethod","onSubmitSuccess","form","useRef","FormModel","projects","useProjects","selection","usePageFilters","crontabInput","setCrontabInput","useState","schedule_type","selectedProjectId","selectedProject","find","p","id","isSuperuser","isActiveSuperuser","filteredProjects","filter","project","isMember","parsedSchedule","crontabAsText","_jsx","Form","allowUndo","requireChanges","current","initialData","name","slug","type","rv","checkin_margin","max_runtime","timezone","formDataFromConfig","children","_jsxs","StyledList","symbol","StyledListItem","ListItemSubText","InputGroup","StyledTextField","placeholder","required","stacked","inline","help","tct","strong","transformInput","StyledSentryProjectSelectorField","disabled","disabledReason","valueIsSlug","link","ExternalLink","href","RadioField","choices","defaultValue","orientInline","Alert","Observer","getValue","ScheduleGroupInputs","css","_css","input","fontFamily","commonTheme","onChange","StyledSelectField","options","timezoneOptions","CronstrueText","interval","LabelText","StyledNumberField","n","Number","label","tn","displayName","_styled","List","target","styles","NumberField","SelectField","TextField","SentryProjectSelectorField","ListItem","theme","fontSizeExtraLarge","Text","subText","space","fontSizeExtraSmall","text","familyMono","MonitorType","MonitorStatus","CheckInStatus","cronstrue","verbose","use24HourTimeFormat","shouldUse24Hours","_e","scheduleAsText","timeUnit","baseAssignValue","createAggregator","hasOwnProperty","prototype","groupBy","result","call","push","module","exports"],"sourceRoot":""}