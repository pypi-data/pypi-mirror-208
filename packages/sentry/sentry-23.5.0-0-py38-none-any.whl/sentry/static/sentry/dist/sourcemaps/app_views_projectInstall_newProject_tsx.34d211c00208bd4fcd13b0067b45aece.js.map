{"version":3,"file":"chunks/app_views_projectInstall_newProject_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/utils/slugify.tsx","webpack:///./app/views/projectInstall/createProject.tsx","webpack:///./app/utils/withTeams.tsx","webpack:///./app/views/projectInstall/newProject.tsx"],"sourcesContent":["/**\n * Transforms the given string to a slugified version. (e.g. \"My Project\" => \"my-project\")\n *\n * Allows only lowercase alphanumeric values, hyphens, and underscores (should match backend validation rules).\n * Normalizes special characters to a-z where applicable (accents, ligatures, etc).\n * Converts spaces to hyphens.\n */\nexport default function slugify(str: string): string {\n  return str\n    .normalize('NFKD') // Converts accents/ligatures/etc to latin alphabet\n    .toLowerCase()\n    .replace(' ', '-')\n    .replace(/[^a-z0-9-_]/g, ''); // Remove all invalid characters\n}\n","import {Component, Fragment} from 'react';\nimport {browserHistory, WithRouterProps} from 'react-router';\nimport styled from '@emotion/styled';\nimport * as Sentry from '@sentry/react';\nimport {PlatformIcon} from 'platformicons';\n\nimport {openCreateTeamModal} from 'sentry/actionCreators/modal';\nimport {Alert} from 'sentry/components/alert';\nimport {Button} from 'sentry/components/button';\nimport Input from 'sentry/components/input';\nimport * as Layout from 'sentry/components/layouts/thirds';\nimport ExternalLink from 'sentry/components/links/externalLink';\nimport PlatformPicker from 'sentry/components/platformPicker';\nimport TeamSelector from 'sentry/components/teamSelector';\nimport categoryList from 'sentry/data/platformCategories';\nimport {IconAdd} from 'sentry/icons';\nimport {t, tct} from 'sentry/locale';\nimport ProjectsStore from 'sentry/stores/projectsStore';\nimport {space} from 'sentry/styles/space';\nimport {Organization, Team} from 'sentry/types';\nimport {trackAnalytics} from 'sentry/utils/analytics';\nimport getPlatformName from 'sentry/utils/getPlatformName';\nimport withRouteAnalytics, {\n  WithRouteAnalyticsProps,\n} from 'sentry/utils/routeAnalytics/withRouteAnalytics';\nimport slugify from 'sentry/utils/slugify';\nimport withApi from 'sentry/utils/withApi';\nimport {normalizeUrl} from 'sentry/utils/withDomainRequired';\nimport withOrganization from 'sentry/utils/withOrganization';\n// eslint-disable-next-line no-restricted-imports\nimport withSentryRouter from 'sentry/utils/withSentryRouter';\nimport withTeams from 'sentry/utils/withTeams';\nimport IssueAlertOptions from 'sentry/views/projectInstall/issueAlertOptions';\n\nconst getCategoryName = (category?: string) =>\n  categoryList.find(({id}) => id === category)?.id;\n\ntype Props = WithRouterProps &\n  WithRouteAnalyticsProps & {\n    api: any;\n    organization: Organization;\n    teams: Team[];\n  };\n\ntype PlatformName = React.ComponentProps<typeof PlatformIcon>['platform'];\ntype IssueAlertFragment = Parameters<\n  React.ComponentProps<typeof IssueAlertOptions>['onChange']\n>[0];\n\ntype State = {\n  dataFragment: IssueAlertFragment | undefined;\n  error: boolean;\n  inFlight: boolean;\n  platform: PlatformName | null;\n  projectName: string;\n  team: string;\n};\n\nclass CreateProject extends Component<Props, State> {\n  constructor(props: Props, context) {\n    super(props, context);\n\n    const {teams, location} = props;\n    const {query} = location;\n    const accessTeams = teams.filter((team: Team) => team.hasAccess);\n\n    const team = query.team || (accessTeams.length && accessTeams[0].slug);\n    const platform = getPlatformName(query.platform) ? query.platform : '';\n\n    this.state = {\n      error: false,\n      projectName: getPlatformName(platform) || '',\n      team,\n      platform,\n      inFlight: false,\n      dataFragment: undefined,\n    };\n  }\n\n  componentDidMount() {\n    this.props.setEventNames(\n      'project_creation_page.viewed',\n      'Project Create: Creation page viewed'\n    );\n  }\n\n  get defaultCategory() {\n    const {query} = this.props.location;\n    return getCategoryName(query.category);\n  }\n\n  renderProjectForm() {\n    const {organization} = this.props;\n    const {projectName, platform, team} = this.state;\n\n    const createProjectForm = (\n      <CreateProjectForm onSubmit={this.createProject}>\n        <div>\n          <FormLabel>{t('Project name')}</FormLabel>\n          <ProjectNameInputWrap>\n            <StyledPlatformIcon platform={platform ?? ''} size={20} />\n            <ProjectNameInput\n              type=\"text\"\n              name=\"name\"\n              placeholder={t('project-name')}\n              autoComplete=\"off\"\n              value={projectName}\n              onChange={e => this.setState({projectName: slugify(e.target.value)})}\n            />\n          </ProjectNameInputWrap>\n        </div>\n        <div>\n          <FormLabel>{t('Team')}</FormLabel>\n          <TeamSelectInput>\n            <TeamSelector\n              name=\"select-team\"\n              menuPlacement=\"auto\"\n              clearable={false}\n              value={team}\n              placeholder={t('Select a Team')}\n              onChange={choice => this.setState({team: choice.value})}\n              teamFilter={(filterTeam: Team) => filterTeam.hasAccess}\n            />\n            <Button\n              borderless\n              data-test-id=\"create-team\"\n              icon={<IconAdd isCircled />}\n              onClick={() =>\n                openCreateTeamModal({\n                  organization,\n                  onClose: ({slug}) => this.setState({team: slug}),\n                })\n              }\n              title={t('Create a team')}\n              aria-label={t('Create a team')}\n            />\n          </TeamSelectInput>\n        </div>\n        <div>\n          <Button\n            type=\"submit\"\n            data-test-id=\"create-project\"\n            priority=\"primary\"\n            disabled={!this.canSubmitForm}\n          >\n            {t('Create Project')}\n          </Button>\n        </div>\n      </CreateProjectForm>\n    );\n\n    return (\n      <Fragment>\n        <Layout.Title withMargins>\n          {t('3. Name your project and assign it a team')}\n        </Layout.Title>\n        {createProjectForm}\n      </Fragment>\n    );\n  }\n\n  get canSubmitForm() {\n    const {projectName, team, inFlight} = this.state;\n    const {shouldCreateCustomRule, conditions} = this.state.dataFragment || {};\n\n    return (\n      !inFlight &&\n      team &&\n      projectName !== '' &&\n      (!shouldCreateCustomRule || conditions?.every?.(condition => condition.value))\n    );\n  }\n\n  createProject = async e => {\n    e.preventDefault();\n    const {organization, api} = this.props;\n    const {projectName, platform, team, dataFragment} = this.state;\n    const {slug} = organization;\n    const {\n      shouldCreateCustomRule,\n      name,\n      conditions,\n      actions,\n      actionMatch,\n      frequency,\n      defaultRules,\n    } = dataFragment || {};\n\n    this.setState({inFlight: true});\n\n    if (!projectName) {\n      Sentry.withScope(scope => {\n        scope.setExtra('props', this.props);\n        scope.setExtra('state', this.state);\n        Sentry.captureMessage('No project name');\n      });\n    }\n\n    try {\n      const projectData = await api.requestPromise(`/teams/${slug}/${team}/projects/`, {\n        method: 'POST',\n        data: {\n          name: projectName,\n          platform,\n          default_rules: defaultRules ?? true,\n        },\n      });\n\n      let ruleId: string | undefined;\n      if (shouldCreateCustomRule) {\n        const ruleData = await api.requestPromise(\n          `/projects/${organization.slug}/${projectData.slug}/rules/`,\n          {\n            method: 'POST',\n            data: {\n              name,\n              conditions,\n              actions,\n              actionMatch,\n              frequency,\n            },\n          }\n        );\n        ruleId = ruleData.id;\n      }\n      trackAnalytics('project_creation_page.created', {\n        organization,\n        issue_alert: defaultRules\n          ? 'Default'\n          : shouldCreateCustomRule\n          ? 'Custom'\n          : 'No Rule',\n        project_id: projectData.id,\n        rule_id: ruleId || '',\n      });\n\n      ProjectsStore.onCreateSuccess(projectData, organization.slug);\n\n      const platformKey = platform || 'other';\n\n      browserHistory.push(\n        normalizeUrl(\n          `/${organization.slug}/${projectData.slug}/getting-started/${platformKey}/`\n        )\n      );\n    } catch (err) {\n      this.setState({\n        inFlight: false,\n        error: err.responseJSON.detail,\n      });\n\n      // Only log this if the error is something other than:\n      // * The user not having access to create a project, or,\n      // * A project with that slug already exists\n      if (err.status !== 403 && err.status !== 409) {\n        Sentry.withScope(scope => {\n          scope.setExtra('err', err);\n          scope.setExtra('props', this.props);\n          scope.setExtra('state', this.state);\n          Sentry.captureMessage('Project creation failed');\n        });\n      }\n    }\n  };\n\n  setPlatform = (platformKey: PlatformName | null) => {\n    if (!platformKey) {\n      this.setState({platform: null, projectName: ''});\n      return;\n    }\n\n    this.setState(({projectName, platform}) => {\n      // Avoid replacing project name when the user already modified it\n      const userModifiedName = projectName && projectName !== platform;\n      const newName = userModifiedName ? projectName : platformKey;\n\n      return {\n        platform: platformKey,\n        projectName: slugify(newName),\n      };\n    });\n  };\n\n  render() {\n    const {platform, error} = this.state;\n\n    return (\n      <Fragment>\n        {error && <Alert type=\"error\">{error}</Alert>}\n\n        <div data-test-id=\"onboarding-info\">\n          <Layout.Title withMargins>{t('Create a new project in 3 steps')}</Layout.Title>\n          <HelpText>\n            {tct(\n              'Set up a separate project for each part of your application (for example, your API server and frontend client), to quickly pinpoint which part of your application errors are coming from. [link: Read the docs].',\n              {\n                link: (\n                  <ExternalLink href=\"https://docs.sentry.io/product/sentry-basics/integrate-frontend/create-new-project/\" />\n                ),\n              }\n            )}\n          </HelpText>\n          <Layout.Title withMargins>{t('1. Choose your platform')}</Layout.Title>\n          <PlatformPicker\n            platform={platform}\n            defaultCategory={this.defaultCategory}\n            setPlatform={selectedPlatform =>\n              this.setPlatform(selectedPlatform?.id ?? null)\n            }\n            organization={this.props.organization}\n            showOther\n          />\n          <IssueAlertOptions\n            onChange={updatedData => {\n              this.setState({dataFragment: updatedData});\n            }}\n          />\n          {this.renderProjectForm()}\n        </div>\n      </Fragment>\n    );\n  }\n}\n\n// TODO(davidenwang): change to functional component and replace withTeams with useTeams\nexport default withRouteAnalytics(\n  withApi(withSentryRouter(withOrganization(withTeams(CreateProject))))\n);\nexport {CreateProject};\n\nconst CreateProjectForm = styled('form')`\n  display: grid;\n  grid-template-columns: 300px minmax(250px, max-content) max-content;\n  gap: ${space(2)};\n  align-items: end;\n  padding: ${space(3)} 0;\n  box-shadow: 0 -1px 0 rgba(0, 0, 0, 0.1);\n  background: ${p => p.theme.background};\n`;\n\nconst FormLabel = styled('div')`\n  font-size: ${p => p.theme.fontSizeExtraLarge};\n  margin-bottom: ${space(1)};\n`;\n\nconst ProjectNameInputWrap = styled('div')`\n  position: relative;\n`;\n\nconst ProjectNameInput = styled(Input)`\n  padding-left: calc(${p => p.theme.formPadding.md.paddingLeft}px * 1.5 + 20px);\n`;\n\nconst StyledPlatformIcon = styled(PlatformIcon)`\n  position: absolute;\n  top: 50%;\n  left: ${p => p.theme.formPadding.md.paddingLeft}px;\n  transform: translateY(-50%);\n`;\n\nconst TeamSelectInput = styled('div')`\n  display: grid;\n  gap: ${space(1)};\n  grid-template-columns: 1fr min-content;\n  align-items: center;\n`;\n\nconst HelpText = styled('p')`\n  color: ${p => p.theme.subText};\n  max-width: 760px;\n`;\n","import {Team} from 'sentry/types';\nimport getDisplayName from 'sentry/utils/getDisplayName';\nimport {useTeams} from 'sentry/utils/useTeams';\n\ntype InjectedTeamsProps = {\n  teams?: Team[];\n};\n\n/**\n * Higher order component that provides a list of teams\n *\n * @deprecated Prefer `useTeams` or `<Teams />`.\n */\nconst withTeams = <P extends InjectedTeamsProps>(\n  WrappedComponent: React.ComponentType<P>\n) => {\n  function WithTeams(props: Omit<P, keyof InjectedTeamsProps> & InjectedTeamsProps) {\n    const {teams} = useTeams();\n    return <WrappedComponent teams={teams} {...(props as P)} />;\n  }\n\n  WithTeams.displayName = `withTeams(${getDisplayName(WrappedComponent)})`;\n\n  return WithTeams;\n};\n\nexport default withTeams;\n","import styled from '@emotion/styled';\n\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\nimport {space} from 'sentry/styles/space';\nimport CreateProject from 'sentry/views/projectInstall/createProject';\n\nfunction NewProject() {\n  return (\n    <SentryDocumentTitle>\n      <Container>\n        <div className=\"container\">\n          <Content>\n            <CreateProject />\n          </Content>\n        </div>\n      </Container>\n    </SentryDocumentTitle>\n  );\n}\n\nconst Container = styled('div')`\n  flex: 1;\n  background: ${p => p.theme.background};\n`;\n\nconst Content = styled('div')`\n  margin-top: ${space(3)};\n`;\n\nexport default NewProject;\n"],"names":["slugify","str","normalize","toLowerCase","replace","CreateProject","Component","constructor","props","context","super","_defineProperty","async","e","preventDefault","organization","api","this","projectName","platform","team","dataFragment","state","slug","shouldCreateCustomRule","name","conditions","actions","actionMatch","frequency","defaultRules","setState","inFlight","Sentry","scope","setExtra","projectData","requestPromise","method","data","default_rules","ruleId","id","trackAnalytics","issue_alert","project_id","rule_id","ProjectsStore","platformKey","browserHistory","normalizeUrl","err","error","responseJSON","detail","status","_ref2","newName","teams","location","query","accessTeams","filter","hasAccess","length","getPlatformName","undefined","componentDidMount","setEventNames","defaultCategory","category","categoryList","_ref","renderProjectForm","createProjectForm","_jsxs","CreateProjectForm","onSubmit","createProject","children","_jsx","FormLabel","t","ProjectNameInputWrap","StyledPlatformIcon","size","ProjectNameInput","type","placeholder","autoComplete","value","onChange","target","TeamSelectInput","TeamSelector","menuPlacement","clearable","choice","teamFilter","filterTeam","Button","borderless","icon","IconAdd","isCircled","onClick","openCreateTeamModal","onClose","_ref3","title","priority","disabled","canSubmitForm","Fragment","Layout","withMargins","every","condition","render","Alert","HelpText","tct","link","ExternalLink","href","PlatformPicker","setPlatform","selectedPlatform","showOther","IssueAlertOptions","updatedData","displayName","withRouteAnalytics","withApi","withSentryRouter","withOrganization","WrappedComponent","WithTeams","useTeams","getDisplayName","withTeams","_styled","space","p","theme","background","fontSizeExtraLarge","styles","Input","formPadding","md","paddingLeft","PlatformIcon","subText","NewProject","SentryDocumentTitle","Container","className","Content"],"sourceRoot":""}