{"version":3,"file":"chunks/app_views_issueDetails_groupReplays_index_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/utils/useCleanQueryParamsOnRouteLeave.tsx","webpack:///./app/views/issueDetails/groupReplays/groupReplays.tsx","webpack:///./app/views/issueDetails/groupReplays/useReplaysFromIssue.tsx","webpack:///./app/views/issueDetails/groupReplays/index.tsx"],"sourcesContent":["import {useCallback, useEffect} from 'react';\nimport {browserHistory} from 'react-router';\nimport type {Location} from 'history';\n\nimport {useLocation} from 'sentry/utils/useLocation';\n\ntype Opts = {\n  fieldsToClean: string[];\n};\n\nexport function handleRouteLeave<Q extends object>({\n  fieldsToClean,\n  newLocation,\n  oldPathname,\n}: {\n  fieldsToClean: string[];\n  newLocation: Location<Q>;\n  oldPathname: string;\n}) {\n  const hasSomeValues = fieldsToClean.some(\n    field => newLocation.query[field] !== undefined\n  );\n\n  if (newLocation.pathname === oldPathname || !hasSomeValues) {\n    return;\n  }\n\n  // Removes fields from the URL on route leave so that the parameters will\n  // not interfere with other pages\n  const query = fieldsToClean.reduce(\n    (newQuery, field) => {\n      newQuery[field] = undefined;\n      return newQuery;\n    },\n    {...newLocation.query}\n  );\n\n  browserHistory.replace({\n    pathname: newLocation.pathname,\n    query,\n  });\n}\n\nfunction useCleanQueryParamsOnRouteLeave({fieldsToClean}: Opts) {\n  const location = useLocation();\n\n  const onRouteLeave = useCallback(\n    newLocation => {\n      handleRouteLeave({\n        fieldsToClean,\n        newLocation,\n        oldPathname: location.pathname,\n      });\n    },\n    [location.pathname, fieldsToClean]\n  );\n\n  useEffect(() => {\n    return browserHistory.listen(onRouteLeave);\n  }, [onRouteLeave]);\n}\n\nexport default useCleanQueryParamsOnRouteLeave;\n","import {useEffect, useMemo} from 'react';\nimport styled from '@emotion/styled';\nimport {Location} from 'history';\n\nimport * as Layout from 'sentry/components/layouts/thirds';\nimport type {Group, Organization} from 'sentry/types';\nimport {trackAnalytics} from 'sentry/utils/analytics';\nimport EventView from 'sentry/utils/discover/eventView';\nimport useReplayList from 'sentry/utils/replays/hooks/useReplayList';\nimport {useLocation} from 'sentry/utils/useLocation';\nimport useOrganization from 'sentry/utils/useOrganization';\nimport useReplaysFromIssue from 'sentry/views/issueDetails/groupReplays/useReplaysFromIssue';\nimport ReplayTable from 'sentry/views/replays/replayTable';\nimport {ReplayColumns} from 'sentry/views/replays/replayTable/types';\nimport type {ReplayListLocationQuery} from 'sentry/views/replays/types';\n\ntype Props = {\n  group: Group;\n};\n\nconst VISIBLE_COLUMNS = [\n  ReplayColumns.replay,\n  ReplayColumns.os,\n  ReplayColumns.browser,\n  ReplayColumns.duration,\n  ReplayColumns.countErrors,\n  ReplayColumns.activity,\n];\n\nfunction GroupReplays({group}: Props) {\n  const organization = useOrganization();\n  const location = useLocation<ReplayListLocationQuery>();\n\n  const {eventView, fetchError, pageLinks} = useReplaysFromIssue({\n    group,\n    location,\n    organization,\n  });\n\n  useEffect(() => {\n    trackAnalytics('replay.render-issues-group-list', {\n      project_id: group.project.id,\n      platform: group.project.platform,\n      organization,\n    });\n    // we only want to fire this event once\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  if (!eventView) {\n    return (\n      <StyledLayoutPage withPadding>\n        <ReplayTable\n          fetchError={fetchError}\n          isFetching\n          replays={[]}\n          sort={undefined}\n          visibleColumns={VISIBLE_COLUMNS}\n        />\n      </StyledLayoutPage>\n    );\n  }\n  return (\n    <GroupReplaysTable\n      eventView={eventView}\n      organization={organization}\n      pageLinks={pageLinks}\n      visibleColumns={VISIBLE_COLUMNS}\n    />\n  );\n}\n\nfunction GroupReplaysTable({\n  eventView,\n  organization,\n  visibleColumns,\n}: {\n  eventView: EventView;\n  organization: Organization;\n  pageLinks: string | null;\n  visibleColumns: ReplayColumns[];\n}) {\n  const location = useMemo(() => ({query: {}} as Location<ReplayListLocationQuery>), []);\n\n  const {replays, isFetching, fetchError} = useReplayList({\n    eventView,\n    location,\n    organization,\n    queryReferrer: 'issueReplays',\n  });\n\n  return (\n    <StyledLayoutPage withPadding>\n      <ReplayTable\n        fetchError={fetchError}\n        isFetching={isFetching}\n        replays={replays}\n        sort={undefined}\n        visibleColumns={visibleColumns}\n      />\n    </StyledLayoutPage>\n  );\n}\n\nconst StyledLayoutPage = styled(Layout.Page)`\n  box-shadow: 0px 0px 1px ${p => p.theme.gray200};\n  background-color: ${p => p.theme.background};\n`;\n\nexport default GroupReplays;\n","import {useCallback, useEffect, useMemo, useState} from 'react';\nimport * as Sentry from '@sentry/react';\nimport {Location} from 'history';\n\nimport type {Group, Organization} from 'sentry/types';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {decodeScalar} from 'sentry/utils/queryString';\nimport {DEFAULT_SORT} from 'sentry/utils/replays/fetchReplayList';\nimport useApi from 'sentry/utils/useApi';\nimport useCleanQueryParamsOnRouteLeave from 'sentry/utils/useCleanQueryParamsOnRouteLeave';\nimport {REPLAY_LIST_FIELDS} from 'sentry/views/replays/types';\n\nfunction useReplayFromIssue({\n  group,\n  location,\n  organization,\n}: {\n  group: Group;\n  location: Location;\n  organization: Organization;\n}) {\n  const api = useApi();\n\n  const [replayIds, setReplayIds] = useState<string[]>();\n\n  const [fetchError, setFetchError] = useState();\n\n  const fetchReplayIds = useCallback(async () => {\n    try {\n      const response = await api.requestPromise(\n        `/organizations/${organization.slug}/replay-count/`,\n        {\n          query: {\n            returnIds: true,\n            query: `issue.id:[${group.id}]`,\n            statsPeriod: '14d',\n            project: -1,\n          },\n        }\n      );\n      setReplayIds(response[group.id] || []);\n    } catch (error) {\n      Sentry.captureException(error);\n      setFetchError(error);\n    }\n  }, [api, organization.slug, group.id]);\n\n  const eventView = useMemo(() => {\n    if (!replayIds) {\n      return null;\n    }\n    return EventView.fromSavedQuery({\n      id: '',\n      name: '',\n      version: 2,\n      fields: REPLAY_LIST_FIELDS,\n      query: `id:[${String(replayIds)}]`,\n      range: '14d',\n      projects: [],\n      orderby: decodeScalar(location.query.sort, DEFAULT_SORT),\n    });\n  }, [location.query.sort, replayIds]);\n\n  useCleanQueryParamsOnRouteLeave({fieldsToClean: ['cursor']});\n  useEffect(() => {\n    fetchReplayIds();\n  }, [fetchReplayIds]);\n\n  return {\n    eventView,\n    fetchError,\n    pageLinks: null,\n  };\n}\n\nexport default useReplayFromIssue;\n","import {ComponentProps} from 'react';\n\nimport Feature from 'sentry/components/acl/feature';\nimport {Alert} from 'sentry/components/alert';\nimport * as Layout from 'sentry/components/layouts/thirds';\nimport {t} from 'sentry/locale';\nimport useOrganization from 'sentry/utils/useOrganization';\n\nimport GroupReplays from './groupReplays';\n\ntype Props = ComponentProps<typeof GroupReplays>;\n\nfunction renderNoAccess() {\n  return (\n    <Layout.Page withPadding>\n      <Alert type=\"warning\">{t(\"You don't have access to this feature\")}</Alert>\n    </Layout.Page>\n  );\n}\n\nfunction GroupReplaysContainer(props: Props) {\n  const organization = useOrganization();\n\n  return (\n    <Feature\n      features={['session-replay']}\n      organization={organization}\n      renderDisabled={renderNoAccess}\n    >\n      <GroupReplays {...props} />\n    </Feature>\n  );\n}\n\nexport default GroupReplaysContainer;\n"],"names":["handleRouteLeave","_ref","fieldsToClean","newLocation","oldPathname","hasSomeValues","some","field","undefined","query","pathname","reduce","newQuery","browserHistory","_ref2","location","useLocation","onRouteLeave","useCallback","useEffect","VISIBLE_COLUMNS","ReplayColumns","GroupReplays","group","organization","useOrganization","eventView","fetchError","pageLinks","api","useApi","replayIds","setReplayIds","useState","setFetchError","fetchReplayIds","async","response","requestPromise","slug","returnIds","id","statsPeriod","project","error","Sentry","useMemo","EventView","name","version","fields","REPLAY_LIST_FIELDS","String","range","projects","orderby","decodeScalar","sort","DEFAULT_SORT","useCleanQueryParamsOnRouteLeave","useReplaysFromIssue","trackAnalytics","project_id","platform","_jsx","GroupReplaysTable","visibleColumns","StyledLayoutPage","withPadding","children","ReplayTable","isFetching","replays","useReplayList","queryReferrer","displayName","_styled","Layout","target","p","theme","gray200","background","renderNoAccess","Alert","type","t","GroupReplaysContainer","props","Feature","features","renderDisabled"],"sourceRoot":""}