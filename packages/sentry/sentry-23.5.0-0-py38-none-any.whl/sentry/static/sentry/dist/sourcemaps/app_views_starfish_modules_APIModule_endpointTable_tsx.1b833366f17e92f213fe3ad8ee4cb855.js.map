{"version":3,"file":"chunks/app_views_starfish_modules_APIModule_endpointTable_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/views/starfish/modules/APIModule/endpointTable.tsx"],"sourcesContent":["import {ReactElement} from 'react';\nimport styled from '@emotion/styled';\nimport {useQuery} from '@tanstack/react-query';\nimport {Location} from 'history';\nimport moment from 'moment';\n\nimport {DateTimeObject} from 'sentry/components/charts/utils';\nimport Duration from 'sentry/components/duration';\nimport GridEditable, {\n  COL_WIDTH_UNDEFINED,\n  GridColumnHeader,\n} from 'sentry/components/gridEditable';\nimport Link from 'sentry/components/links/link';\nimport {CHART_PALETTE} from 'sentry/constants/chartPalette';\nimport {Series} from 'sentry/types/echarts';\nimport Sparkline from 'sentry/views/starfish/components/sparkline';\nimport {HOST} from 'sentry/views/starfish/utils/constants';\nimport {useSpansQuery} from 'sentry/views/starfish/utils/useSpansQuery';\nimport {zeroFillSeries} from 'sentry/views/starfish/utils/zeroFillSeries';\nimport {EndpointDataRow} from 'sentry/views/starfish/views/endpointDetails';\n\nimport {\n  getEndpointAggregatesQuery,\n  getEndpointListEventView,\n  getEndpointListQuery,\n} from './queries';\n\ntype Props = {\n  filterOptions: {\n    action: string;\n    datetime: DateTimeObject;\n    domain: string;\n    transaction: string;\n  };\n  location: Location;\n  onSelect: (row: EndpointDataRow) => void;\n  columns?: {\n    key: string;\n    name: string;\n    width: number;\n  }[];\n};\n\nexport type DataRow = {\n  count: number;\n  description: string;\n  domain: string;\n  group_id: string;\n};\n\nconst COLUMN_ORDER = [\n  {\n    key: 'description',\n    name: 'URL',\n    width: 600,\n  },\n  {\n    key: 'throughput',\n    name: 'throughput',\n    width: 200,\n  },\n  {\n    key: 'p50_trend',\n    name: 'p50 Trend',\n    width: 200,\n  },\n  {\n    key: 'p50(span.self_time)',\n    name: 'p50',\n    width: COL_WIDTH_UNDEFINED,\n  },\n  {\n    key: 'count_unique(user)',\n    name: 'Users',\n    width: COL_WIDTH_UNDEFINED,\n  },\n  {\n    key: 'count_unique(transaction)',\n    name: 'Transactions',\n    width: COL_WIDTH_UNDEFINED,\n  },\n  {\n    key: 'sum(span.self_time)',\n    name: 'Total Time',\n    width: COL_WIDTH_UNDEFINED,\n  },\n];\n\nexport default function EndpointTable({\n  location,\n  onSelect,\n  filterOptions,\n  columns,\n}: Props) {\n  const {isLoading: areEndpointsLoading, data: endpointsData} = useSpansQuery({\n    queryString: getEndpointListQuery(filterOptions),\n    eventView: getEndpointListEventView(filterOptions),\n    initialData: [],\n  });\n\n  const {isLoading: areEndpointAggregatesLoading, data: endpointsThroughputData} =\n    useQuery({\n      queryKey: ['endpointAggregates', filterOptions],\n      queryFn: () =>\n        fetch(`${HOST}/?query=${getEndpointAggregatesQuery(filterOptions)}`).then(res =>\n          res.json()\n        ),\n      retry: false,\n      initialData: [],\n    });\n\n  const aggregatesGroupedByURL = {};\n  endpointsThroughputData.forEach(({description, interval, count, p50}) => {\n    if (description in aggregatesGroupedByURL) {\n      aggregatesGroupedByURL[description].push({name: interval, count, p50});\n    } else {\n      aggregatesGroupedByURL[description] = [{name: interval, count, p50}];\n    }\n  });\n\n  const combinedEndpointData = endpointsData.map(data => {\n    const url = data.description;\n\n    const throughputSeries: Series = {\n      seriesName: 'throughput',\n      data: aggregatesGroupedByURL[url]?.map(({name, count}) => ({\n        name,\n        value: count,\n      })),\n    };\n\n    const p50Series: Series = {\n      seriesName: 'p50 Trend',\n      data: aggregatesGroupedByURL[url]?.map(({name, p50}) => ({\n        name,\n        value: p50,\n      })),\n    };\n\n    const zeroFilledThroughput = zeroFillSeries(\n      throughputSeries,\n      moment.duration(12, 'hours')\n    );\n    const zeroFilledP50 = zeroFillSeries(p50Series, moment.duration(12, 'hours'));\n    return {...data, throughput: zeroFilledThroughput, p50_trend: zeroFilledP50};\n  });\n\n  return (\n    <GridEditable\n      isLoading={areEndpointsLoading || areEndpointAggregatesLoading}\n      data={combinedEndpointData}\n      columnOrder={columns ?? COLUMN_ORDER}\n      columnSortBy={[]}\n      grid={{\n        renderHeadCell,\n        renderBodyCell: (column: GridColumnHeader, row: EndpointDataRow) =>\n          renderBodyCell(column, row, onSelect),\n      }}\n      location={location}\n    />\n  );\n}\n\nexport function renderHeadCell(column: GridColumnHeader): React.ReactNode {\n  if (column.key === 'throughput' || column.key === 'p50_trend') {\n    return (\n      <TextAlignLeft>\n        <OverflowEllipsisTextContainer>{column.name}</OverflowEllipsisTextContainer>\n      </TextAlignLeft>\n    );\n  }\n\n  // TODO: come up with a better way to identify number columns to align to the right\n  if (\n    column.key.toString().match(/^p\\d\\d/) ||\n    !['description', 'transaction'].includes(column.key.toString())\n  ) {\n    return (\n      <TextAlignRight>\n        <OverflowEllipsisTextContainer>{column.name}</OverflowEllipsisTextContainer>\n      </TextAlignRight>\n    );\n  }\n  return <OverflowEllipsisTextContainer>{column.name}</OverflowEllipsisTextContainer>;\n}\n\nexport function renderBodyCell(\n  column: GridColumnHeader,\n  row: EndpointDataRow,\n  onSelect?: (row: EndpointDataRow) => void\n): React.ReactNode {\n  if (column.key === 'description' && onSelect) {\n    return (\n      <OverflowEllipsisTextContainer>\n        <Link onClick={() => onSelect(row)} to=\"\">\n          {row[column.key]}\n        </Link>\n      </OverflowEllipsisTextContainer>\n    );\n  }\n\n  if (column.key === 'throughput') {\n    return (\n      <Sparkline\n        color={CHART_PALETTE[3][0]}\n        series={row[column.key]}\n        width={column.width ? column.width - column.width / 5 : undefined}\n      />\n    );\n  }\n\n  if (column.key === 'p50_trend') {\n    return (\n      <Sparkline\n        color={CHART_PALETTE[3][3]}\n        series={row[column.key]}\n        width={column.width ? column.width - column.width / 5 : undefined}\n      />\n    );\n  }\n\n  // TODO: come up with a better way to identify number columns to align to the right\n  let node: ReactElement | null = null;\n  if (column.key.toString().match(/^p\\d\\d/) || column.key === 'sum(span.self_time)') {\n    node = <Duration seconds={row[column.key] / 1000} fixedDigits={2} abbreviation />;\n  } else if (!['description', 'transaction'].includes(column.key.toString())) {\n    node = (\n      <OverflowEllipsisTextContainer>{row[column.key]}</OverflowEllipsisTextContainer>\n    );\n  } else {\n    node = (\n      <OverflowEllipsisTextContainer>{row[column.key]}</OverflowEllipsisTextContainer>\n    );\n  }\n\n  const isNumericColumn =\n    column.key.toString().match(/^p\\d\\d/) || column.key.toString().match(/^.*\\(.*\\)/);\n\n  if (isNumericColumn) {\n    return <TextAlignRight>{node}</TextAlignRight>;\n  }\n\n  return <TextAlignLeft>{node}</TextAlignLeft>;\n}\n\nexport const OverflowEllipsisTextContainer = styled('span')`\n  text-overflow: ellipsis;\n  overflow: hidden;\n  white-space: nowrap;\n`;\n\nexport const TextAlignRight = styled('span')`\n  text-align: right;\n  width: 100%;\n`;\n\nexport const TextAlignLeft = styled('span')`\n  text-align: left;\n  width: 100%;\n`;\n"],"names":["COLUMN_ORDER","key","name","width","COL_WIDTH_UNDEFINED","EndpointTable","_ref","location","onSelect","filterOptions","columns","isLoading","areEndpointsLoading","data","endpointsData","useSpansQuery","queryString","getEndpointListQuery","eventView","getEndpointListEventView","initialData","areEndpointAggregatesLoading","endpointsThroughputData","useQuery","queryKey","queryFn","fetch","HOST","getEndpointAggregatesQuery","then","res","json","retry","aggregatesGroupedByURL","forEach","_ref2","description","interval","count","p50","push","combinedEndpointData","map","url","throughputSeries","seriesName","_ref3","value","p50Series","_ref4","zeroFilledThroughput","zeroFillSeries","moment","zeroFilledP50","throughput","p50_trend","_jsx","GridEditable","columnOrder","columnSortBy","grid","renderHeadCell","renderBodyCell","column","row","TextAlignLeft","children","OverflowEllipsisTextContainer","toString","match","includes","TextAlignRight","Link","onClick","to","Sparkline","color","CHART_PALETTE","series","undefined","node","Duration","seconds","fixedDigits","abbreviation","displayName","_styled","target","styles"],"sourceRoot":""}