{"version":3,"file":"chunks/app_components_events_interfaces_spans_dividerHandlerManager_tsx-app_components_performance_w-25e90b.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/events/interfaces/spans/dividerHandlerManager.tsx","webpack:///./app/components/performance/waterfall/row.tsx","webpack:///./app/components/performance/waterfall/rowDivider.tsx","webpack:///./app/components/performance/waterfall/rowTitle.tsx","webpack:///./app/components/performance/waterfall/treeConnector.tsx","webpack:///./app/utils/userselect.tsx"],"sourcesContent":["import {Component, createContext, createRef} from 'react';\n\nimport {\n  clamp,\n  rectOfContent,\n  toPercent,\n} from 'sentry/components/performance/waterfall/utils';\nimport {setBodyUserSelect, UserSelectValues} from 'sentry/utils/userselect';\n\n// divider handle is positioned at 50% width from the left-hand side\nconst DEFAULT_DIVIDER_POSITION = 0.4;\n\nconst selectRefs = (\n  refs: Array<React.RefObject<HTMLDivElement>>,\n  transform: (dividerDOM: HTMLDivElement) => void\n) => {\n  refs.forEach(ref => {\n    if (ref.current) {\n      transform(ref.current);\n    }\n  });\n};\n\nexport type DividerHandlerManagerChildrenProps = {\n  addDividerLineRef: () => React.RefObject<HTMLDivElement>;\n  addGhostDividerLineRef: () => React.RefObject<HTMLDivElement>;\n  dividerPosition: number;\n  onDragStart: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;\n  setHover: (nextHover: boolean) => void;\n};\n\ntype StateType = {\n  dividerPosition: number; // between 0 and 1\n};\n\nconst DividerManagerContext = createContext<DividerHandlerManagerChildrenProps>({\n  dividerPosition: DEFAULT_DIVIDER_POSITION,\n  onDragStart: () => {},\n  setHover: () => {},\n  addDividerLineRef: () => createRef<HTMLDivElement>(),\n  addGhostDividerLineRef: () => createRef<HTMLDivElement>(),\n});\n\ntype PropType = {\n  children: React.ReactNode;\n\n  // this is the DOM element where the drag events occur. it's also the reference point\n  // for calculating the relative mouse x coordinate.\n  interactiveLayerRef: React.RefObject<HTMLDivElement>;\n};\n\nexport class Provider extends Component<PropType, StateType> {\n  state: StateType = {\n    dividerPosition: DEFAULT_DIVIDER_POSITION,\n  };\n\n  componentWillUnmount() {\n    this.cleanUpListeners();\n  }\n\n  previousUserSelect: UserSelectValues | null = null;\n  dividerHandlePosition: number = DEFAULT_DIVIDER_POSITION;\n  isDragging: boolean = false;\n  dividerLineRefs: Array<React.RefObject<HTMLDivElement>> = [];\n  ghostDividerLineRefs: Array<React.RefObject<HTMLDivElement>> = [];\n\n  hasInteractiveLayer = (): boolean => !!this.props.interactiveLayerRef.current;\n\n  addDividerLineRef = () => {\n    const ref = createRef<HTMLDivElement>();\n    this.dividerLineRefs.push(ref);\n    return ref;\n  };\n\n  addGhostDividerLineRef = () => {\n    const ref = createRef<HTMLDivElement>();\n    this.ghostDividerLineRefs.push(ref);\n    return ref;\n  };\n\n  setHover = (nextHover: boolean) => {\n    if (this.isDragging) {\n      return;\n    }\n\n    selectRefs(this.dividerLineRefs, dividerDOM => {\n      if (nextHover) {\n        dividerDOM.classList.add('hovering');\n        return;\n      }\n\n      dividerDOM.classList.remove('hovering');\n    });\n  };\n\n  onDragStart = (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    if (this.isDragging || event.type !== 'mousedown' || !this.hasInteractiveLayer()) {\n      return;\n    }\n\n    event.stopPropagation();\n\n    // prevent the user from selecting things outside the minimap when dragging\n    // the mouse cursor inside the minimap\n\n    this.previousUserSelect = setBodyUserSelect({\n      userSelect: 'none',\n      MozUserSelect: 'none',\n      msUserSelect: 'none',\n      webkitUserSelect: 'none',\n    });\n\n    // attach event listeners so that the mouse cursor does not select text during a drag\n    window.addEventListener('mousemove', this.onDragMove);\n    window.addEventListener('mouseup', this.onDragEnd);\n\n    this.setHover(true);\n\n    // indicate drag has begun\n\n    this.isDragging = true;\n\n    selectRefs(this.dividerLineRefs, (dividerDOM: HTMLDivElement) => {\n      dividerDOM.style.backgroundColor = 'rgba(73,80,87,0.75)';\n      dividerDOM.style.cursor = 'col-resize';\n    });\n\n    selectRefs(this.ghostDividerLineRefs, (dividerDOM: HTMLDivElement) => {\n      dividerDOM.style.cursor = 'col-resize';\n\n      const {parentNode} = dividerDOM;\n\n      if (!parentNode) {\n        return;\n      }\n\n      const container = parentNode as HTMLDivElement;\n      container.style.display = 'block';\n    });\n  };\n\n  onDragMove = (event: MouseEvent) => {\n    if (!this.isDragging || event.type !== 'mousemove' || !this.hasInteractiveLayer()) {\n      return;\n    }\n\n    const rect = rectOfContent(this.props.interactiveLayerRef.current!);\n\n    // mouse x-coordinate relative to the interactive layer's left side\n    const rawMouseX = (event.pageX - rect.x) / rect.width;\n\n    const min = 0;\n    const max = 1;\n\n    // clamp rawMouseX to be within [0, 1]\n    this.dividerHandlePosition = clamp(rawMouseX, min, max);\n\n    const dividerHandlePositionString = toPercent(this.dividerHandlePosition);\n\n    selectRefs(this.ghostDividerLineRefs, (dividerDOM: HTMLDivElement) => {\n      const {parentNode} = dividerDOM;\n\n      if (!parentNode) {\n        return;\n      }\n\n      const container = parentNode as HTMLDivElement;\n\n      container.style.width = `calc(${dividerHandlePositionString} + 0.5px)`;\n    });\n  };\n\n  onDragEnd = (event: MouseEvent) => {\n    if (!this.isDragging || event.type !== 'mouseup' || !this.hasInteractiveLayer()) {\n      return;\n    }\n\n    // remove listeners that were attached in onDragStart\n\n    this.cleanUpListeners();\n\n    // restore body styles\n\n    if (this.previousUserSelect) {\n      setBodyUserSelect(this.previousUserSelect);\n      this.previousUserSelect = null;\n    }\n\n    // indicate drag has ended\n\n    this.isDragging = false;\n\n    this.setHover(false);\n\n    selectRefs(this.dividerLineRefs, (dividerDOM: HTMLDivElement) => {\n      dividerDOM.style.backgroundColor = '';\n      dividerDOM.style.cursor = '';\n    });\n\n    selectRefs(this.ghostDividerLineRefs, (dividerDOM: HTMLDivElement) => {\n      dividerDOM.style.cursor = '';\n\n      const {parentNode} = dividerDOM;\n\n      if (!parentNode) {\n        return;\n      }\n\n      const container = parentNode as HTMLDivElement;\n      container.style.display = 'none';\n    });\n\n    this.setState({\n      // commit dividerHandlePosition to be dividerPosition\n      dividerPosition: this.dividerHandlePosition,\n    });\n  };\n\n  cleanUpListeners = () => {\n    if (this.isDragging) {\n      // we only remove listeners during a drag\n      window.removeEventListener('mousemove', this.onDragMove);\n      window.removeEventListener('mouseup', this.onDragEnd);\n    }\n  };\n\n  render() {\n    const childrenProps = {\n      dividerPosition: this.state.dividerPosition,\n      setHover: this.setHover,\n      onDragStart: this.onDragStart,\n      addDividerLineRef: this.addDividerLineRef,\n      addGhostDividerLineRef: this.addGhostDividerLineRef,\n    };\n\n    // NOTE: <DividerManagerContext.Provider /> will not re-render its children\n    // - if the `value` prop changes, and\n    // - if the `children` prop stays the same\n    //\n    // Thus, only <DividerManagerContext.Consumer /> components will re-render.\n    // This is an optimization for when childrenProps changes, but this.props does not change.\n    //\n    // We prefer to minimize the amount of top-down prop drilling from this component\n    // to the respective divider components.\n\n    return (\n      <DividerManagerContext.Provider value={childrenProps}>\n        {this.props.children}\n      </DividerManagerContext.Provider>\n    );\n  }\n}\n\nexport const Consumer = DividerManagerContext.Consumer;\n","import styled from '@emotion/styled';\n\nimport {ROW_HEIGHT} from 'sentry/components/performance/waterfall/constants';\nimport {getBackgroundColor} from 'sentry/components/performance/waterfall/utils';\n\ninterface RowProps extends React.HTMLAttributes<HTMLDivElement> {\n  cursor?: 'pointer' | 'default';\n  showBorder?: boolean;\n  visible?: boolean;\n}\n\nexport const Row = styled('div')<RowProps>`\n  display: ${p => (p.visible ? 'block' : 'none')};\n  border-top: ${p => (p.showBorder ? `1px solid ${p.theme.border}` : null)};\n  margin-top: ${p => (p.showBorder ? '-1px' : null)}; /* to prevent offset on toggle */\n  position: relative;\n  overflow: hidden;\n  min-height: ${ROW_HEIGHT}px;\n  cursor: ${p => p.cursor ?? 'pointer'};\n  transition: background-color 0.15s ease-in-out;\n\n  &:last-child {\n    & > [data-component='span-detail'] {\n      border-bottom: none !important;\n    }\n  }\n`;\n\ntype RowCellProps = {\n  showDetail?: boolean;\n  showStriping?: boolean;\n};\n\nexport const RowCellContainer = styled('div')<RowCellProps>`\n  display: flex;\n  position: relative;\n  height: ${ROW_HEIGHT}px;\n\n  /* for virtual scrollbar */\n  overflow: hidden;\n\n  user-select: none;\n\n  &:hover > div[data-type='span-row-cell'] {\n    background-color: ${p =>\n      p.showDetail ? p.theme.textColor : p.theme.backgroundSecondary};\n  }\n`;\n\nexport const RowCell = styled('div')<RowCellProps>`\n  position: relative;\n  height: 100%;\n  overflow: hidden;\n  background-color: ${p => getBackgroundColor(p)};\n  transition: background-color 125ms ease-in-out;\n  color: ${p => (p.showDetail ? p.theme.background : 'inherit')};\n  display: flex;\n  align-items: center;\n`;\n","import styled from '@emotion/styled';\n\nimport {IconAdd, IconFire, IconProfiling, IconSubtract} from 'sentry/icons';\nimport {space} from 'sentry/styles/space';\nimport {Aliases, Color} from 'sentry/utils/theme';\n\nexport const DividerContainer = styled('div')`\n  position: relative;\n  min-width: 1px;\n`;\n\nexport const DividerLine = styled('div')<{showDetail?: boolean}>`\n  background-color: ${p => (p.showDetail ? p.theme.textColor : p.theme.border)};\n  position: absolute;\n  height: 100%;\n  width: 1px;\n  transition: background-color 125ms ease-in-out;\n  z-index: ${p => p.theme.zIndex.traceView.dividerLine};\n\n  /* enhanced hit-box */\n  &:after {\n    content: '';\n    z-index: -1;\n    position: absolute;\n    left: -2px;\n    top: 0;\n    width: 5px;\n    height: 100%;\n  }\n\n  &.hovering {\n    background-color: ${p => p.theme.textColor};\n    width: 3px;\n    transform: translateX(-1px);\n    margin-right: -2px;\n\n    cursor: ew-resize;\n\n    &:after {\n      left: -2px;\n      width: 7px;\n    }\n  }\n`;\n\nexport const DividerLineGhostContainer = styled('div')`\n  position: absolute;\n  width: 100%;\n  height: 100%;\n`;\n\nconst BadgeBorder = styled('div')<{\n  color: Color | keyof Aliases;\n  fillBackground?: boolean;\n}>`\n  position: absolute;\n  margin: ${space(0.25)};\n  left: -11px;\n  background: ${p => (p.fillBackground ? p.theme[p.color] : p.theme.background)};\n  width: ${space(3)};\n  height: ${space(3)};\n  border: 1px solid ${p => p.theme[p.color]};\n  border-radius: 50%;\n  z-index: ${p => p.theme.zIndex.traceView.dividerLine};\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n\nexport function ErrorBadge() {\n  return (\n    <BadgeBorder color=\"error\">\n      <IconFire color=\"errorText\" size=\"xs\" />\n    </BadgeBorder>\n  );\n}\n\nexport function EmbeddedTransactionBadge({\n  expanded,\n  onClick,\n}: {\n  expanded: boolean;\n  onClick: () => void;\n}) {\n  return (\n    <BadgeBorder\n      data-test-id=\"embedded-transaction-badge\"\n      color=\"border\"\n      onClick={event => {\n        event.stopPropagation();\n        event.preventDefault();\n        onClick();\n      }}\n    >\n      {expanded ? (\n        <IconSubtract color=\"textColor\" size=\"xs\" />\n      ) : (\n        <IconAdd color=\"textColor\" size=\"xs\" />\n      )}\n    </BadgeBorder>\n  );\n}\n\nexport function ProfileBadge() {\n  return (\n    <BadgeBorder data-test-id=\"profile-badge\" color=\"activeText\" fillBackground>\n      <IconProfiling color=\"background\" size=\"xs\" />\n    </BadgeBorder>\n  );\n}\n","import styled from '@emotion/styled';\n\nimport {ROW_HEIGHT} from 'sentry/components/performance/waterfall/constants';\n\nexport const RowTitleContainer = styled('div')`\n  display: flex;\n  align-items: center;\n  height: ${ROW_HEIGHT}px;\n  position: absolute;\n  left: 0;\n  top: 0;\n  width: 100%;\n  user-select: none;\n`;\n\nexport const RowTitle = styled('div')`\n  position: relative;\n  height: 100%;\n  font-size: ${p => p.theme.fontSizeSmall};\n  white-space: nowrap;\n  display: flex;\n  flex: 1;\n  align-items: center;\n`;\n\nexport const RowTitleContent = styled('span')<{errored: boolean}>`\n  color: ${p => (p.errored ? p.theme.error : 'inherit')};\n`;\n\nexport const SpanGroupRowTitleContent = styled('span')<{color: string}>`\n  color: ${p => p.color};\n`;\n","import styled from '@emotion/styled';\n\nimport {ROW_HEIGHT, SpanBarType} from 'sentry/components/performance/waterfall/constants';\nimport {getToggleTheme} from 'sentry/components/performance/waterfall/utils';\nimport {IconChevron} from 'sentry/icons';\nimport {space} from 'sentry/styles/space';\n\nconst TOGGLE_BUTTON_MARGIN_RIGHT = 16;\nexport const TOGGLE_BUTTON_MAX_WIDTH = 30;\nexport const TOGGLE_BORDER_BOX = TOGGLE_BUTTON_MAX_WIDTH + TOGGLE_BUTTON_MARGIN_RIGHT;\nconst TREE_TOGGLE_CONTAINER_WIDTH = 40;\n\nexport const ConnectorBar = styled('div')<{orphanBranch: boolean}>`\n  height: 250%;\n\n  border-left: 2px ${p => (p.orphanBranch ? 'dashed' : 'solid')} ${p => p.theme.border};\n  position: absolute;\n  top: 0;\n`;\n\ntype TogglerTypes = {\n  hasToggler?: boolean;\n  isLast?: boolean;\n};\n\nexport const TreeConnector = styled('div')<TogglerTypes & {orphanBranch: boolean}>`\n  height: ${p => (p.isLast ? ROW_HEIGHT / 2 + 1 : ROW_HEIGHT)}px;\n  width: 100%;\n  border-left: ${p => `2px ${p.orphanBranch ? 'dashed' : 'solid'} ${p.theme.border};`};\n  position: absolute;\n  top: 0;\n\n  ${p =>\n    p.isLast\n      ? `\n      border-bottom: 2px ${p.orphanBranch ? 'dashed' : 'solid'} ${p.theme.border};\n      border-bottom-left-radius: ${p.theme.borderRadius};`\n      : `\n      &:before {\n        content: '';\n        height: 2px;\n        left: -2px;\n        border-bottom: 2px ${p.orphanBranch ? 'dashed' : 'solid'} ${p.theme.border};\n        width: calc(100% - 2px);\n        position: absolute;\n        bottom: calc(50% - 1px);\n      }`}\n\n  &:after {\n    content: '';\n    background-color: ${p => p.theme.border};\n    border-radius: 50%;\n    height: 6px;\n    width: 6px;\n    position: absolute;\n    right: 0;\n    top: ${ROW_HEIGHT / 2 - 3}px;\n  }\n`;\n\ntype SpanTreeTogglerAndDivProps = {\n  disabled: boolean;\n  errored: boolean;\n  isExpanded: boolean;\n  isSpanGroupToggler?: boolean;\n  spanBarType?: SpanBarType;\n};\n\nexport const TreeToggle = styled('div')<SpanTreeTogglerAndDivProps>`\n  height: 16px;\n  white-space: nowrap;\n  min-width: 30px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  border-radius: 99px;\n  padding: 0px ${space(0.5)};\n  transition: all 0.15s ease-in-out;\n  font-size: 10px;\n  line-height: 0;\n  z-index: 1;\n  box-shadow: ${p => p.theme.dropShadowLight};\n\n  ${p => getToggleTheme(p)}\n`;\n\nexport const TreeToggleContainer = styled('div')<TogglerTypes>`\n  position: relative;\n  height: ${ROW_HEIGHT}px;\n  width: ${TREE_TOGGLE_CONTAINER_WIDTH}px;\n  min-width: ${TREE_TOGGLE_CONTAINER_WIDTH}px;\n  margin-right: ${space(1)};\n  z-index: ${p => p.theme.zIndex.traceView.spanTreeToggler};\n  display: flex;\n  justify-content: flex-end;\n  align-items: center;\n`;\n\nexport const TreeToggleIcon = styled(IconChevron)`\n  width: 7px;\n  margin-left: ${space(0.25)};\n`;\n","export type UserSelectValues = {\n  MozUserSelect: string | null;\n  msUserSelect: string | null;\n  userSelect: string | null;\n  webkitUserSelect: string | null;\n};\n\nexport const setBodyUserSelect = (nextValues: UserSelectValues): UserSelectValues => {\n  // NOTE: Vendor prefixes other than `ms` should begin with a capital letter.\n  // ref: https://reactjs.org/docs/dom-elements.html#style\n\n  const previousValues = {\n    userSelect: document.body.style.userSelect,\n    // MozUserSelect is not typed in TS\n    // @ts-expect-error\n    MozUserSelect: document.body.style.MozUserSelect,\n    // msUserSelect is not typed in TS\n    // @ts-expect-error\n    msUserSelect: document.body.style.msUserSelect,\n    webkitUserSelect: document.body.style.webkitUserSelect,\n  };\n\n  document.body.style.userSelect = nextValues.userSelect || '';\n  // MozUserSelect is not typed in TS\n  // @ts-expect-error\n  document.body.style.MozUserSelect = nextValues.MozUserSelect || '';\n  // msUserSelect is not typed in TS\n  // @ts-expect-error\n  document.body.style.msUserSelect = nextValues.msUserSelect || '';\n  document.body.style.webkitUserSelect = nextValues.webkitUserSelect || '';\n\n  return previousValues;\n};\n"],"names":["selectRefs","refs","transform","forEach","ref","current","DividerManagerContext","createContext","dividerPosition","onDragStart","setHover","addDividerLineRef","createRef","addGhostDividerLineRef","Provider","Component","constructor","arguments","_defineProperty","this","props","interactiveLayerRef","dividerLineRefs","push","ghostDividerLineRefs","nextHover","isDragging","dividerDOM","classList","add","remove","event","type","hasInteractiveLayer","stopPropagation","previousUserSelect","setBodyUserSelect","userSelect","MozUserSelect","msUserSelect","webkitUserSelect","window","addEventListener","onDragMove","onDragEnd","style","backgroundColor","cursor","parentNode","display","rect","rectOfContent","rawMouseX","pageX","x","width","dividerHandlePosition","clamp","dividerHandlePositionString","toPercent","cleanUpListeners","setState","removeEventListener","componentWillUnmount","render","childrenProps","state","_jsx","value","children","displayName","Consumer","Row","_styled","target","p","visible","showBorder","theme","border","ROW_HEIGHT","RowCellContainer","showDetail","textColor","backgroundSecondary","RowCell","getBackgroundColor","background","DividerContainer","name","styles","DividerLine","zIndex","traceView","dividerLine","DividerLineGhostContainer","BadgeBorder","space","fillBackground","color","ErrorBadge","IconFire","size","EmbeddedTransactionBadge","_ref","expanded","onClick","preventDefault","IconSubtract","IconAdd","ProfileBadge","IconProfiling","RowTitleContainer","RowTitle","fontSizeSmall","RowTitleContent","errored","error","SpanGroupRowTitleContent","TOGGLE_BUTTON_MAX_WIDTH","TOGGLE_BORDER_BOX","ConnectorBar","orphanBranch","TreeConnector","isLast","borderRadius","TreeToggle","dropShadowLight","getToggleTheme","TreeToggleContainer","spanTreeToggler","TreeToggleIcon","IconChevron","nextValues","previousValues","document","body"],"sourceRoot":""}