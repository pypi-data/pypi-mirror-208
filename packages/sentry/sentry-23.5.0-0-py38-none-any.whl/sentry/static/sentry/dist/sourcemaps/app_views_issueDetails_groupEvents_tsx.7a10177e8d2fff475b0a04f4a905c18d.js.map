{"version":3,"file":"chunks/app_views_issueDetails_groupEvents_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/utils/useCleanQueryParamsOnRouteLeave.tsx","webpack:///./app/views/issueDetails/allEventsTable.tsx","webpack:///./app/views/issueDetails/groupEvents.tsx"],"sourcesContent":["import {useCallback, useEffect} from 'react';\nimport {browserHistory} from 'react-router';\nimport type {Location} from 'history';\n\nimport {useLocation} from 'sentry/utils/useLocation';\n\ntype Opts = {\n  fieldsToClean: string[];\n};\n\nexport function handleRouteLeave<Q extends object>({\n  fieldsToClean,\n  newLocation,\n  oldPathname,\n}: {\n  fieldsToClean: string[];\n  newLocation: Location<Q>;\n  oldPathname: string;\n}) {\n  const hasSomeValues = fieldsToClean.some(\n    field => newLocation.query[field] !== undefined\n  );\n\n  if (newLocation.pathname === oldPathname || !hasSomeValues) {\n    return;\n  }\n\n  // Removes fields from the URL on route leave so that the parameters will\n  // not interfere with other pages\n  const query = fieldsToClean.reduce(\n    (newQuery, field) => {\n      newQuery[field] = undefined;\n      return newQuery;\n    },\n    {...newLocation.query}\n  );\n\n  browserHistory.replace({\n    pathname: newLocation.pathname,\n    query,\n  });\n}\n\nfunction useCleanQueryParamsOnRouteLeave({fieldsToClean}: Opts) {\n  const location = useLocation();\n\n  const onRouteLeave = useCallback(\n    newLocation => {\n      handleRouteLeave({\n        fieldsToClean,\n        newLocation,\n        oldPathname: location.pathname,\n      });\n    },\n    [location.pathname, fieldsToClean]\n  );\n\n  useEffect(() => {\n    return browserHistory.listen(onRouteLeave);\n  }, [onRouteLeave]);\n}\n\nexport default useCleanQueryParamsOnRouteLeave;\n","import {useEffect, useState} from 'react';\nimport {Location} from 'history';\n\nimport LoadingError from 'sentry/components/loadingError';\nimport {\n  PlatformCategory,\n  PlatformKey,\n  profiling as PROFILING_PLATFORMS,\n} from 'sentry/data/platformCategories';\nimport {t} from 'sentry/locale';\nimport {EventTransaction, Group, IssueCategory, Organization} from 'sentry/types';\nimport EventView, {decodeSorts} from 'sentry/utils/discover/eventView';\nimport {DiscoverDatasets} from 'sentry/utils/discover/types';\nimport {getConfigForIssueType} from 'sentry/utils/issueTypeConfig';\nimport {platformToCategory} from 'sentry/utils/platform';\nimport {useApiQuery} from 'sentry/utils/queryClient';\nimport {useRoutes} from 'sentry/utils/useRoutes';\nimport EventsTable from 'sentry/views/performance/transactionSummary/transactionEvents/eventsTable';\n\nexport interface Props {\n  group: Group;\n  issueId: string;\n  location: Location;\n  organization: Organization;\n  excludedTags?: string[];\n}\n\nconst makeGroupPreviewRequestUrl = ({groupId}: {groupId: string}) => {\n  return `/issues/${groupId}/events/latest/`;\n};\n\nfunction AllEventsTable(props: Props) {\n  const {location, organization, issueId, excludedTags, group} = props;\n  const config = getConfigForIssueType(props.group);\n  const [error, setError] = useState<string>('');\n  const routes = useRoutes();\n  const {fields, columnTitles} = getColumns(group, organization);\n\n  const endpointUrl = makeGroupPreviewRequestUrl({\n    groupId: group.id,\n  });\n\n  const queryEnabled = group.issueCategory === IssueCategory.PERFORMANCE;\n  const {data, isLoading, isLoadingError} = useApiQuery<EventTransaction>([endpointUrl], {\n    staleTime: 60000,\n    enabled: queryEnabled,\n  });\n\n  // TODO: this is a temporary way to check whether\n  // perf issue is backed by occurrences or transactions\n  // Once migration to the issue platform is complete a call to /latest should be removed\n  const groupIsOccurrenceBacked = !!data?.occurrence;\n\n  const eventView: EventView = EventView.fromLocation(props.location);\n  if (\n    config.usesIssuePlatform ||\n    (group.issueCategory === IssueCategory.PERFORMANCE && groupIsOccurrenceBacked)\n  ) {\n    eventView.dataset = DiscoverDatasets.ISSUE_PLATFORM;\n  }\n  eventView.fields = fields.map(fieldName => ({field: fieldName}));\n\n  eventView.sorts = decodeSorts(location).filter(sort => fields.includes(sort.field));\n\n  useEffect(() => {\n    setError('');\n  }, [eventView.query]);\n\n  if (!eventView.sorts.length) {\n    eventView.sorts = [{field: 'timestamp', kind: 'desc'}];\n  }\n\n  const idQuery =\n    group.issueCategory === IssueCategory.PERFORMANCE && !groupIsOccurrenceBacked\n      ? `performance.issue_ids:${issueId} event.type:transaction`\n      : `issue.id:${issueId}`;\n  eventView.project = [parseInt(group.project.id, 10)];\n  eventView.query = `${idQuery} ${props.location.query.query || ''}`;\n  eventView.statsPeriod = '90d';\n\n  if (error || isLoadingError) {\n    return (\n      <LoadingError message={error || isLoadingError} onRetry={() => setError('')} />\n    );\n  }\n\n  return (\n    <EventsTable\n      eventView={eventView}\n      location={location}\n      issueId={issueId}\n      organization={organization}\n      routes={routes}\n      excludedTags={excludedTags}\n      projectSlug={group.project.slug}\n      customColumns={['minidump']}\n      setError={(msg: string | undefined) => setError(msg ?? '')}\n      transactionName=\"\"\n      columnTitles={columnTitles.slice()}\n      referrer=\"api.issues.issue_events\"\n      isEventLoading={queryEnabled ? isLoading : false}\n    />\n  );\n}\n\ntype ColumnInfo = {columnTitles: string[]; fields: string[]};\n\nconst getColumns = (group: Group, organization: Organization): ColumnInfo => {\n  const isPerfIssue = group.issueCategory === IssueCategory.PERFORMANCE;\n  const isReplayEnabled = organization.features.includes('session-replay');\n\n  // profiles only exist on transactions, so this only works with\n  // performance issues, and not errors\n  const isProfilingEnabled = isPerfIssue && organization.features.includes('profiling');\n\n  const {fields: platformSpecificFields, columnTitles: platformSpecificColumnTitles} =\n    getPlatformColumns(group.project.platform ?? group.platform, {\n      isProfilingEnabled,\n      isReplayEnabled,\n    });\n\n  const fields: string[] = [\n    'id',\n    'transaction',\n    'title',\n    'release',\n    'environment',\n    'user.display',\n    'device',\n    'os',\n    ...platformSpecificFields,\n    ...(isPerfIssue ? ['transaction.duration'] : []),\n    'timestamp',\n  ];\n\n  const columnTitles: string[] = [\n    t('event id'),\n    t('transaction'),\n    t('title'),\n    t('release'),\n    t('environment'),\n    t('user'),\n    t('device'),\n    t('os'),\n    ...platformSpecificColumnTitles,\n    ...(isPerfIssue ? [t('total duration')] : []),\n    t('timestamp'),\n    t('minidump'),\n  ];\n\n  return {\n    fields,\n    columnTitles,\n  };\n};\n\nconst getPlatformColumns = (\n  platform: PlatformKey | undefined,\n  options: {isProfilingEnabled: boolean; isReplayEnabled: boolean}\n): ColumnInfo => {\n  const backendServerlessColumnInfo = {\n    fields: ['url', 'runtime'],\n    columnTitles: [t('url'), t('runtime')],\n  };\n\n  const categoryToColumnMap: Record<PlatformCategory, ColumnInfo> = {\n    [PlatformCategory.BACKEND]: backendServerlessColumnInfo,\n    [PlatformCategory.SERVERLESS]: backendServerlessColumnInfo,\n    [PlatformCategory.FRONTEND]: {\n      fields: ['url', 'browser'],\n      columnTitles: [t('url'), t('browser')],\n    },\n    [PlatformCategory.MOBILE]: {\n      fields: ['url'],\n      columnTitles: [t('url')],\n    },\n    [PlatformCategory.DESKTOP]: {\n      fields: [],\n      columnTitles: [],\n    },\n    [PlatformCategory.OTHER]: {\n      fields: [],\n      columnTitles: [],\n    },\n  };\n\n  const platformCategory = platformToCategory(platform);\n  const platformColumns = categoryToColumnMap[platformCategory];\n\n  if (options.isReplayEnabled) {\n    platformColumns.fields.push('replayId');\n    platformColumns.columnTitles.push(t('replay'));\n  }\n\n  if (options.isProfilingEnabled && platform && PROFILING_PLATFORMS.includes(platform)) {\n    platformColumns.columnTitles.push(t('profile'));\n    platformColumns.fields.push('profile.id');\n  }\n\n  return platformColumns;\n};\n\nexport default AllEventsTable;\n","import {Component} from 'react';\nimport {browserHistory, RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport {Client} from 'sentry/api';\nimport EventSearchBar from 'sentry/components/events/searchBar';\nimport * as Layout from 'sentry/components/layouts/thirds';\nimport {space} from 'sentry/styles/space';\nimport {Group, Organization} from 'sentry/types';\nimport {handleRouteLeave} from 'sentry/utils/useCleanQueryParamsOnRouteLeave';\nimport withApi from 'sentry/utils/withApi';\nimport {normalizeUrl} from 'sentry/utils/withDomainRequired';\nimport withOrganization from 'sentry/utils/withOrganization';\n\nimport AllEventsTable from './allEventsTable';\n\ntype Props = {\n  api: Client;\n  group: Group;\n  organization: Organization;\n} & RouteComponentProps<{groupId: string}, {}>;\n\ninterface State {\n  query: string;\n}\n\nconst excludedTags = [\n  'environment',\n  'issue',\n  'issue.id',\n  'performance.issue_ids',\n  'transaction.op',\n  'transaction.status',\n];\n\nclass GroupEvents extends Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n\n    const queryParams = this.props.location.query;\n\n    this.state = {\n      query: queryParams.query || '',\n    };\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps: Props) {\n    if (this.props.location.search !== nextProps.location.search) {\n      const queryParams = nextProps.location.query;\n\n      this.setState({\n        query: queryParams.query,\n      });\n    }\n  }\n\n  UNSAFE_componentDidMount() {\n    this._unsubscribeHandleRouteLeave = browserHistory.listen(newLocation =>\n      handleRouteLeave({\n        fieldsToClean: ['cursor'],\n        newLocation,\n        oldPathname: this.props.location.pathname,\n      })\n    );\n  }\n\n  UNSAFE_componentWillUnmount() {\n    this._unsubscribeHandleRouteLeave?.();\n  }\n\n  _unsubscribeHandleRouteLeave: undefined | ReturnType<typeof browserHistory.listen>;\n\n  handleSearch = (query: string) => {\n    const targetQueryParams = {...this.props.location.query};\n    targetQueryParams.query = query;\n    const {organization} = this.props;\n    const {groupId} = this.props.params;\n\n    browserHistory.push(\n      normalizeUrl({\n        pathname: `/organizations/${organization.slug}/issues/${groupId}/events/`,\n        query: targetQueryParams,\n      })\n    );\n  };\n\n  render() {\n    return (\n      <Layout.Body>\n        <Layout.Main fullWidth>\n          <AllEventsFilters>\n            <EventSearchBar\n              organization={this.props.organization}\n              defaultQuery=\"\"\n              onSearch={this.handleSearch}\n              excludedTags={excludedTags}\n              query={this.state.query}\n              hasRecentSearches={false}\n            />\n          </AllEventsFilters>\n          <AllEventsTable\n            issueId={this.props.group.id}\n            location={this.props.location}\n            organization={this.props.organization}\n            group={this.props.group}\n            excludedTags={excludedTags}\n          />\n        </Layout.Main>\n      </Layout.Body>\n    );\n  }\n}\n\nconst AllEventsFilters = styled('div')`\n  margin-bottom: ${space(2)};\n`;\n\nexport {GroupEvents};\n\nexport default withOrganization(withApi(GroupEvents));\n"],"names":["handleRouteLeave","_ref","fieldsToClean","newLocation","oldPathname","hasSomeValues","some","field","undefined","query","pathname","reduce","newQuery","browserHistory","_ref2","location","useLocation","onRouteLeave","useCallback","useEffect","AllEventsTable","props","organization","issueId","excludedTags","group","config","getConfigForIssueType","error","setError","useState","routes","useRoutes","fields","columnTitles","getColumns","endpointUrl","groupId","makeGroupPreviewRequestUrl","id","queryEnabled","issueCategory","IssueCategory","data","isLoading","isLoadingError","useApiQuery","staleTime","enabled","groupIsOccurrenceBacked","occurrence","eventView","EventView","usesIssuePlatform","dataset","DiscoverDatasets","map","fieldName","sorts","decodeSorts","filter","sort","includes","length","kind","idQuery","project","parseInt","statsPeriod","_jsx","LoadingError","message","onRetry","EventsTable","projectSlug","slug","customColumns","msg","transactionName","slice","referrer","isEventLoading","displayName","isPerfIssue","isReplayEnabled","features","isProfilingEnabled","platformSpecificFields","platformSpecificColumnTitles","getPlatformColumns","platform","t","options","backendServerlessColumnInfo","platformColumns","PlatformCategory","platformToCategory","push","PROFILING_PLATFORMS","GroupEvents","Component","constructor","super","_defineProperty","targetQueryParams","this","params","normalizeUrl","queryParams","state","UNSAFE_componentWillReceiveProps","nextProps","search","setState","UNSAFE_componentDidMount","_unsubscribeHandleRouteLeave","UNSAFE_componentWillUnmount","render","Layout","children","_jsxs","fullWidth","AllEventsFilters","EventSearchBar","defaultQuery","onSearch","handleSearch","hasRecentSearches","_styled","target","space","withOrganization","withApi"],"sourceRoot":""}