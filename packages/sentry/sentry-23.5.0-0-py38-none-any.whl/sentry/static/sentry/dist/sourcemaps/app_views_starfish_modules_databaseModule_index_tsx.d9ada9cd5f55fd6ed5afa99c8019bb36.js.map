{"version":3,"file":"chunks/app_views_starfish_modules_databaseModule_index_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"qoCA4BA,SAASA,EAAUC,GACjB,MAAM,aAACC,EAAcC,UAAWC,EAAU,SAAEC,EAAUC,MAAOC,GAAeN,GAErEO,EAAeC,IAAoBC,EAAAA,EAAAA,UAAwB,IAC5DC,EAAmBH,EAAc,IAAII,UAAUC,QAAU,GACxDC,EAAsBC,IAA2BL,EAAAA,EAAAA,WAAU,IAC3DM,EAAgBC,IAAqBP,EAAAA,EAAAA,WAAS,GAE/CQ,EAAgBA,IAAMD,GAAkB,IACvCE,EAASC,IAAcV,EAAAA,EAAAA,WAAS,IAChCW,EAAcC,IAAmBZ,EAAAA,EAAAA,UAASH,GAC3CgB,GAAeC,EAAAA,EAAAA,QAAuB,OAC5CC,EAAAA,EAAAA,GAAkBF,GAAcG,EAAAA,EAAAA,aAAYR,EAAe,KAE3D,MAAMS,GAAMC,EAAAA,EAAAA,KACNzB,EAAYC,EAAWyB,QAEvBC,EAAO,kBAAiB5B,EAAa6B,eAErCC,EAAoB7B,EAAU8B,SAAgCC,IAAIC,QA6ElEC,GAA2BV,EAAAA,EAAAA,aAC/BW,KACEC,UACE,IACElB,GAAW,GACX,MAAMmB,EAAa,IAAIC,EAAAA,GAAc,IACrCD,EAAWE,gBAAgB,cAAe,CAACC,EAAqBpC,KAAS,GACzEiC,EAAWE,gBAAgB,aAAc,CAAC,gBAGtCE,OAAOC,KAAKjB,EAAIkB,gBAAgBhC,QAClCc,EAAImB,QAGN,MAAOC,SAAiBC,EAAAA,EAAAA,IAErBrB,EAAKG,EAAK,CACXmB,MAAO,CAAC,cAAe,aAAc,WACrChB,QAASD,EACTkB,KAAM,WACN5C,MAAOiC,EAAWY,eAClBC,YAAajD,EAAUiD,YACvBC,SAAU,gDAGNC,EAAgBP,EAAQQ,KAAKC,QACjC,CAACC,EAA0BC,KACzBD,EAAY7C,SAAS+C,KAAK,CACxBC,MAAOC,EAAkBH,GACzBI,MAAOJ,EAAKK,YACZC,KAAMC,EAAAA,EAAAA,KACNC,KAAM,KAEDT,IAET,CACEK,MAAO,mBACPlD,SAAU,GACVuD,KAAM,KACNH,KAAM,WAIVjD,GAAyB,GAEzBN,EAAiB,CAAC6C,GACpB,CAAE,MAAOc,GACP,MAAM,IAAIC,MAAM,qCAClB,CAAE,QACAjD,GAAW,EACb,IAEFkD,EAAAA,GACA,CAACC,SAAS,IAEZ,CAAC5C,EAAKG,EAAK3B,EAAUiD,YAAapB,EAAiBwC,KAAK,OAGpDC,EAAoBb,IACxB,MAAMF,EAAOgB,EAAkBd,GAC/Be,EAAajB,EAAKK,aAAa,EAAM,EAQjCY,EAAeA,CAACrE,EAAesE,KACnCnE,EAAiB,IACjBa,EAAgBhB,GAChBA,EAAQ,IAAIkC,EAAAA,GAAclC,GAAO6C,eAGjC9C,EAASC,EADSsE,EAAYtE,EAAS,gBAAeA,KACzB,IAC7BY,GAAe,EAmBjB,OACE2D,EAAAA,EAAAA,IAACC,EAAS,CAAC,eAAa,yBAAyBC,IAAKxD,EAAaX,SAAA,EACjEoE,EAAAA,EAAAA,IAACC,EAAAA,EAAa,CACZC,aAAaC,EAAAA,EAAAA,GAAE,uBACfC,SA7KqB9E,IAOzB,GANAgB,EAAgBhB,GAEK,IAAjBA,EAAMO,QACRR,EAAS,IAGPC,EAAMO,OAAS,EAGjB,OAFAJ,EAAiB,SACjBS,IAvBuBD,GAAkB,GA4B3CmB,EAAyB9B,EAAM,EAgK3B+E,UA7JiBC,IACrB,MAAM,IAACC,GAAOD,EAEd,IAAInE,EAIJ,GAAY,WAARoE,GAAoBvE,EACtBE,QADF,CAKA,IACW,YAARqE,GAA6B,cAARA,IACtBvE,GACAL,EAAmB,EACnB,CACA,MAAM6E,EAAyBhF,EAAc,GAAGI,SAASE,GACnD2E,GACH3E,EAAuBH,GAA4B,YAAR4E,GAAqB,EAAI,IACrE5E,EACFI,EAAwB0E,GACxB,MAAMC,EAAsBlF,EAAc,GAAGI,SAAS6E,GAEtD,IAAIE,EAAmBnF,EAkBvB,OAjBIgF,IACFG,GAAmBC,EAAAA,EAAAA,IACjBpF,EACAgF,GACA,IAIAE,IACFC,GAAmBC,EAAAA,EAAAA,IACjBD,EACAD,GACA,SAIJjF,EAAiBkF,EAEnB,CAEA,GAAY,UAARJ,EAAiB,CACnBD,EAAMO,iBACN,MAAMC,EAActF,EAAc,IAAII,SAASE,GAE3CgF,GAAalC,MACfa,EAAiBqB,EAAYlC,OAE7Be,EAAatD,GAAc,EAE/B,CA5CA,CA4CA,EAwGIf,MAAOe,IAERL,IACCgE,EAAAA,EAAAA,IAACe,EAAAA,EAAc,CACbC,cAAe,IACfC,gBAAiB5E,EACjBF,QAASA,EACT+E,MAAO1F,EACP2F,QAAS1B,EACT2B,YA9CqBxC,IAeaF,KACxC,MAAM,YAACK,EAAW,WAAEsC,GAAc3C,EAE5BpD,EAAQH,EAAUmG,4BACxB7F,EAAiB,IAEjB,MAAM8F,GAAOC,EAAAA,EAAAA,IAAiC,CAC5CC,QAASvG,EAAa6B,KACtBgC,cACA2C,UAAWvE,OAAOkE,GAClB/F,UAGFqG,EAAAA,eAAAA,MAAoBC,EAAAA,EAAAA,GAAaL,GAAM,EA1BvCM,CADanC,EAAkBd,GACO,MAiD1C,CAlNS5D,EAAS8G,YAAA,YAoNlB,MAAMjD,EAAqBH,GACjB,GAAEA,EAAKK,eAAeL,EAAK2C,aAG/B3B,EAAqBd,IACzB,MAAMmD,EAAYnD,EAAMoD,YAAY,KAEpC,MAAO,CACLX,WAAYY,SAASrD,EAAMsD,MAAMH,EAAY,GAAI,IACjDhD,YAAaH,EAAMsD,MAAM,EAAGH,GAC7B,EASUrE,EAAwBpC,IAC9BA,EAAM6G,WAAW,OACpB7G,EAAQ,IAAMA,GAGXA,EAAM8G,SAAS,OAClB9G,GAAgB,KAGXA,GAGHwE,GAAYuC,EAAAA,EAAAA,GAAO,MAAK,CAAAC,OAAA,YAAZD,CAAa,CAAAE,KAAA,SAAAC,OAAA,sBAI/B,G,keChQA,SAASxH,EAASyH,GAUC,IATjBnH,MAAOoH,EAAS,aAChBC,EAAe,GAAE,SACjBvC,EAAQ,SACR/E,EAAQ,MACRuH,EAAK,KACLC,EAAI,UACJC,EAAS,SACTC,KACGC,GACYP,EACf,MAAMQ,GAAWzG,EAAAA,EAAAA,QAAyB,OAEnClB,EAAO4H,IAAYxH,EAAAA,EAAAA,UAASgH,GAAaC,IAIhDQ,EAAAA,EAAAA,YAAU,KACiB,iBAAdT,GACTQ,EAASR,EACX,GACC,CAACA,IAEJ,MAAMU,GAAgB1G,EAAAA,EAAAA,cACnB2G,IACC,MAAM,MAACzE,GAASyE,EAAEf,OAClBY,EAAStE,GACTwB,IAAWxB,EAAM,GAEnB,CAACwB,IAGGkD,GAAW5G,EAAAA,EAAAA,cACd2G,IACCA,EAAExC,iBACFoC,EAASM,SAASC,OAClBnI,IAAWC,EAAM,GAEnB,CAACD,EAAUC,IAGPmI,GAAc/G,EAAAA,EAAAA,cAAY,KAC9BwG,EAAS,IACT9C,IAAW,IACX/E,IAAW,GAAG,GACb,CAAC+E,EAAU/E,IAEd,OACE2E,EAAAA,EAAAA,IAAC0D,EAAQ,CAACJ,SAAUA,EAAUR,UAAWA,EAAUlH,UACjDiE,EAAAA,EAAAA,IAAC8D,EAAAA,GAAU,CAAA/H,SAAA,EACToE,EAAAA,EAAAA,IAAC2D,EAAAA,GAAAA,aAAuB,CAACC,sBAAoB,EAAAhI,UAC3CoE,EAAAA,EAAAA,IAAC6D,EAAAA,GAAU,CAACC,MAAM,UAAUjB,KAAe,OAATA,EAAgB,KAAO,UAE3D7C,EAAAA,EAAAA,IAAC+D,EAAW,IACNf,EACJjD,IAAKkD,EACLjE,KAAK,OACLuD,KAAK,QACLyB,aAAa,MACbpF,MAAOtD,EACP8E,SAAUgD,EACVR,MAAOA,EACPC,KAAMA,KAERhD,EAAAA,EAAAA,IAAC8D,EAAAA,GAAAA,cAAwB,CAAA/H,SAAA,CACtBmH,IACEzH,IACD0E,EAAAA,EAAAA,IAACiE,EAAuB,CACtBpB,KAAK,OACLqB,YAAU,EACV/C,QAASsC,EACTtE,MAAMa,EAAAA,EAAAA,IAACmE,EAAAA,EAAS,CAACtB,KAAK,OACtB,cAAY1C,EAAAA,EAAAA,GAAE,kBAO5B,CA/ESnF,EAAS8G,YAAA,YAiFlB,MAAM4B,GAAWrB,EAAAA,EAAAA,GAAO,OAAM,CAAAC,OAAA,YAAbD,CAAc,CAAAE,KAAA,SAAAC,OAAA,oCAKzBuB,GAAc1B,EAAAA,EAAAA,GAAOsB,EAAAA,GAAAA,MAAgB,CAAArB,OAAA,YAAvBD,EAChB+B,GAAKA,EAAExB,OAAU,UAASwB,EAAExB,UAAQ,KAG3BqB,GAA0B5B,EAAAA,EAAAA,GAAOgC,EAAAA,GAAM,CAAA/B,OAAA,YAAbD,CAAc,UAC1C+B,GAAKA,EAAEE,MAAMC,SAAO,aAClBC,EAAAA,EAAAA,GAAM,IAAI,KAGvB,G,6QC9GA,MAAMC,GAAmBC,EAAAA,EAAAA,eAGtB,CACDC,eAAWC,EACXC,aAAezF,QAGV,SAAS0F,EAAiBrC,GAA0C,IAAzC,SAAC7G,GAAsC6G,EACvE,MAAOkC,EAAWE,IAAgBnJ,EAAAA,EAAAA,YAClC,OACEsE,EAAAA,EAAAA,IAACyE,EAAiBM,SAAQ,CACxBnG,MAAO,CACL+F,YACAE,gBACAjJ,SAEDA,GAGP,CAEO,SAASoJ,IACd,MAAM,UAACL,IAAaM,EAAAA,EAAAA,YAAWR,GAC/B,OAAKE,GAKH3E,EAAAA,EAAAA,IAACkF,EAAAA,GAAK,CAAClG,KAAK,QAAQ,eAAa,mBAAmBmG,UAAQ,EAAAvJ,SACzD+I,IALI,IAQX,CAzBgBG,EAAiBhD,YAAA,oBAcjBkD,EAAclD,YAAA,iBAavB,MAAMsD,EAAeA,KAAMH,EAAAA,EAAAA,YAAWR,E,kiDCb7C,MAAMY,EAAW,GAQjB,SAASC,EAAaC,EAASC,GAC7B,MAAMC,GAASzF,EAAAA,EAAAA,IAAA,QAAApE,UAAOuE,EAAAA,EAAAA,GAAE,eAExB,MAAO,CACL,CACEvB,MAAO,MACP6G,SACAD,MAAQ,UAEPD,EAAQrI,KAAIwI,IACN,CACL9G,MAAO8G,EAAOnF,IACdkF,SACAD,MAAQ,GAAEE,EAAOnF,KAAO,YAAYmF,EAAO9G,SAAS4G,QAI5D,CAEe,SAASG,EAAiBlD,GAA2B,IAA1B,MAACmD,EAAK,SAAExF,GAAgBqC,EAChE,MAAMoD,GAAaC,EAAAA,EAAAA,KACbxB,GAAQyB,EAAAA,EAAAA,MACR,UAACC,EAAS,QAAEC,IAAWC,EAAAA,EAAAA,IAAeL,IACtC,gBAACM,EAAe,cAAEC,IAAiBC,EAAAA,EAAAA,IACvCR,EAAWS,UAAUC,WAGhBhI,KAAMiI,IAAaC,EAAAA,EAAAA,OACnBC,UAAWC,EAAmBpI,KAAMqI,IACzCC,EAAAA,EAAAA,IAA6BxB,IACxBqB,UAAWI,EAAmBvI,KAAMwI,IACzCC,EAAAA,EAAAA,IAAuB3B,GAEnB4B,EAA6C,CAAC,EAC9CC,EAA0C,CAAC,EAC5CJ,IACHC,EAAeI,SAAQC,IACrBH,EAAeG,EAAMC,QAAU,CAC7BC,WAAYF,EAAMC,OAClB9I,KAAM,IAER2I,EAAYE,EAAMC,QAAU,CAC1BC,WAAYF,EAAMC,OAClB9I,KAAM,GACP,IAGHwI,EAAeI,SAAQC,IACrBH,EAAeG,EAAMC,QAAQ9I,KAAKI,KAAK,CACrCC,MAAOwI,EAAMG,IACbhF,KAAM6E,EAAMI,WAEdN,EAAYE,EAAMC,QAAQ9I,KAAKI,KAAK,CAClCC,MAAOwI,EAAMK,MACblF,KAAM6E,EAAMI,UACZ,KAIN,MAAME,EAAa,IAAI,IAAIC,IAAIZ,EAAe7J,KAAI0K,GAAKA,EAAEP,YAClDX,UAAWmB,EAA6BtJ,KAAMuJ,IACnDC,EAAAA,EAAAA,IAA4BL,EAAYrC,GAEpC2C,GAAuBC,EAAAA,EAAAA,GAC3BH,EACA,cACA,MACA9B,EACAC,EACAZ,GAGI6C,GAAuBD,EAAAA,EAAAA,GAC3BH,EACA,cACA,MACA9B,EACAC,EACAZ,GAGI8C,EAAaxK,OAAOyK,OAAOnB,GAAgB/J,KAAImL,IACnDC,EAAAA,EAAAA,GACED,EACAE,IAAAA,SAAgBlD,EAAU,SAC1BkD,IAAOpC,GACPoC,IAAOnC,MAGLoC,EAAa7K,OAAOyK,OAAOlB,GAAahK,KAAImL,IAChDC,EAAAA,EAAAA,GACED,EACAE,IAAAA,SAAgBlD,EAAU,SAC1BkD,IAAOpC,GACPoC,IAAOnC,MAILqC,EAAwC,CAAC,EAEzCC,EAA4C,CAAC,EAC9C/B,IACHC,EAAaO,SAAQC,IACnBsB,EAActB,EAAM1B,QAAU,CAC5B4B,WAAYF,EAAM1B,OAClBnH,KAAM,IAERkK,EAAWrB,EAAM1B,QAAU,CACzB4B,WAAYF,EAAM1B,OAClBnH,KAAM,GACP,IAGHqI,EAAaO,SAAQC,IACnBsB,EAActB,EAAM1B,QAAQnH,KAAKI,KAAK,CACpCC,MAAOwI,EAAMG,IACbhF,KAAM6E,EAAMI,WAEdiB,EAAWrB,EAAM1B,QAAQnH,KAAKI,KAAK,CACjCC,MAAOwI,EAAMK,MACblF,KAAM6E,EAAMI,UACZ,KAIN,MAAMmB,EAAc,IAAIrE,EAAMsE,OAAOC,gBAAgB,GAAG3G,MAAM,EAAG,GAAIoC,EAAMwE,SAE3E,OACEjJ,EAAAA,EAAAA,IAACkJ,EAAAA,SAAQ,CAAAnN,SAAA,EACPiE,EAAAA,EAAAA,IAACmJ,EAAe,CAAApN,SAAA,EACdoE,EAAAA,EAAAA,IAACiJ,EAAmB,CAAArN,UAClBoE,EAAAA,EAAAA,IAACkJ,EAAAA,EAAU,CAACpK,OAAOqB,EAAAA,EAAAA,GAAE,wBAAwBvE,UAC3CoE,EAAAA,EAAAA,IAACmJ,EAAAA,EAAK,CACJ/K,YAAY,MACZgL,OAAQ,IACR7K,KAAM2J,EACNmB,MAAM,GACNC,IAAI,GACJnN,QAAS0L,EACT0B,KAAK,EACLC,KAAM,CACJC,KAAM,IACNC,MAAO,IACPC,IAAK,OACLC,OAAQ,OAEVC,iBAAkB,EAClBC,aAAW,EACXC,YAAU,SAIhB/J,EAAAA,EAAAA,IAACiJ,EAAmB,CAAArN,UAClBoE,EAAAA,EAAAA,IAACkJ,EAAAA,EAAU,CAACpK,OAAOqB,EAAAA,EAAAA,GAAE,+BAA+BvE,UAClDoE,EAAAA,EAAAA,IAACmJ,EAAAA,EAAK,CACJ/K,YAAY,MACZgL,OAAQ,IACR7K,KAAMyJ,EACNqB,MAAM,GACNC,IAAI,GACJnN,QAAS0L,EACT0B,KAAK,EACLC,KAAM,CACJC,KAAM,IACNC,MAAO,IACPC,IAAK,OACLC,OAAQ,OAEVC,iBAAkB,EAClBE,YAAU,EACVD,aAAW,WAKG,IAArBtD,EAAU3K,QAAqC,KAArB2K,EAAU,GAAGjG,KACtCP,EAAAA,EAAAA,IAAC+I,EAAAA,SAAQ,KAETlJ,EAAAA,EAAAA,IAACkJ,EAAAA,SAAQ,CAAAnN,SAAA,EACPiE,EAAAA,EAAAA,IAACmJ,EAAe,CAAApN,SAAA,EACdoE,EAAAA,EAAAA,IAACiJ,EAAmB,CAAArN,UAClBoE,EAAAA,EAAAA,IAACkJ,EAAAA,EAAU,CAACpK,OAAOqB,EAAAA,EAAAA,GAAE,sBAAsBvE,UACzCoE,EAAAA,EAAAA,IAACmJ,EAAAA,EAAK,CACJ/K,YAAY,MACZgL,OAAQ,IACR7K,KAAM4J,EACNkB,MAAM,GACNC,IAAI,GACJX,YAAaA,EACbxM,QAAS2K,EACTyC,KAAK,EACLC,KAAM,CACJC,KAAM,IACNC,MAAO,IACPC,IAAK,OACLC,OAAQ,OAEVC,iBAAkB,EAClBC,aAAW,EACXC,YAAU,SAIhB/J,EAAAA,EAAAA,IAACiJ,EAAmB,CAAArN,UAClBoE,EAAAA,EAAAA,IAACkJ,EAAAA,EAAU,CAACpK,OAAOqB,EAAAA,EAAAA,GAAE,oBAAoBvE,UACvCoE,EAAAA,EAAAA,IAACmJ,EAAAA,EAAK,CACJ/K,YAAY,MACZgL,OAAQ,IACR7K,KAAMiK,EACNa,MAAM,GACNC,IAAI,GACJX,YAAaA,EACbxM,QAASwK,EACT4C,KAAK,EACLC,KAAM,CACJC,KAAM,IACNC,MAAO,IACPC,IAAK,OACLC,OAAQ,OAEVC,iBAAkB,EAClBE,YAAU,EACVD,aAAW,YAKnB9J,EAAAA,EAAAA,IAACgK,EAAS,CAAApO,UACRoE,EAAAA,EAAAA,IAACiK,EAAAA,EAAa,CACZrL,MAAOgH,EACPsE,aAAc,CAACzE,QAAQtF,EAAAA,EAAAA,GAAE,UACzBoF,QAASD,EAAakB,EAAW,OACjC2D,UAAU,QACV/J,SAAUgK,GAAOhK,EAASgK,EAAIxL,gBAO5C,CA7NwB+G,EAAiB7D,YAAA,oBA+NzC,MAAMkI,GAAY3H,EAAAA,EAAAA,GAAQ,MAAI,CAAAC,OAAA,YAAZD,CAAa,+BAEZmC,EAAAA,EAAAA,GAAM,GAAE,KAGrBwE,GAAkB3G,EAAAA,EAAAA,GAAO,MAAK,CAAAC,OAAA,YAAZD,CAAa,uDAI5BmC,EAAAA,EAAAA,GAAM,GAAE,KAGXyE,GAAsB5G,EAAAA,EAAAA,GAAO,MAAK,CAAAC,OAAA,YAAZD,CAAa,CAAAE,KAAA,SAAAC,OAAA,W,gJC3PzC,SAAS6H,IACP,MAAMC,GAAWC,EAAAA,EAAAA,KACXrP,GAAesP,EAAAA,EAAAA,KACfrP,EAAYsP,EAAAA,GAAAA,aAAuBH,IAClC1E,EAAO8E,IAAYhP,EAAAA,EAAAA,UAAiB,QACpCiP,EAAWC,IAAgBlP,EAAAA,EAAAA,WAAkB,IAC7CmP,EAAWC,IAAgBpP,EAAAA,EAAAA,WAAkB,IAC7CqD,EAAagM,IAAkBrP,EAAAA,EAAAA,UAAiB,KAChDwC,EAAM8M,IAAWtP,EAAAA,EAAAA,UAAwB,CAC9CuP,eAAWrG,EACXsG,gBAAYtG,KAEPuG,EAAMC,IAAW1P,EAAAA,EAAAA,UAA+D,CACrF2P,cAAUzG,EACVrD,UAAMqD,EACN0G,UAAM1G,KAGN8B,UAAW6E,EACXhN,KAAMiI,EACNgF,aAAcC,IACZC,EAAAA,EAAAA,IAAkB,CACpB3M,cACA6G,QACA+E,YACAE,YACAc,QAASzN,EAAKgN,YAAY3K,IAC1BqL,cAAe1N,EAAK+M,YAEhBY,GAAc/F,EAAAA,EAAAA,MAEd,UAACQ,GAAauF,GACd,SAACC,EAAQ,aAAEC,EAAY,SAAExF,GAAYD,GAE3C0F,EAAAA,EAAAA,IACE,CACG,kBAAiB9Q,EAAa6B,wBAC/B,CACEzB,MAAO,CAEH2Q,YAAaF,EACb9O,QAAS6O,EAAS5O,KAAIgP,GAAQ/O,OAAO+O,SAEpCC,EAAAA,EAAAA,IAAwB5F,MAIjC,CACE6F,UAAW,KAIf,MAAO7N,KAAM8N,IAAmBC,EAAAA,EAAAA,IAAS,CACvCC,SAAU,CAAC,eAAgBxN,EAAa4L,EAAWE,GACnD2B,QAASA,IACPC,MACG,GAAEC,EAAAA,aAAeC,EAAAA,EAAAA,IAAqB,CACrCpG,SAAUsF,EAAYvF,UAAUC,SAChCxH,mBAEF6N,MAAKC,GAAOA,EAAIC,SACpBC,OAAO,EACPC,YAAa,KAGTC,GAAiBC,EAAAA,EAAAA,GACrB1G,EACA6F,EACA9D,IAAAA,SAAgB,GAAI,UAGhB4E,EAA2B,CAAC,EAClCd,EAAgBlF,SAAQ1E,IAAyC,IAAxC,YAAC2K,EAAW,SAAE5F,EAAQ,MAAEC,EAAK,IAAEF,GAAI9E,EACtD2K,KAAeD,EACjBA,EAAyBC,GAAazO,KAAK,CAAC4D,KAAMiF,EAAUC,QAAOF,QAEnE4F,EAAyBC,GAAe,CAAC,CAAC7K,KAAMiF,EAAUC,QAAOF,OACnE,KAGFpE,EAAAA,EAAAA,YAAU,KACR,SAASkK,EAAaC,GAAY,IAAX,QAACC,GAAQD,EAC9BlC,GAAQoC,IACN,GAAIA,EAAWnC,SAAU,CACvB,GAAImC,EAAWlC,MAAoB,KAAZiC,EACrB,OAAOE,EAAeD,EAAWlC,MAEnC,GAAIkC,EAAWjM,MAAoB,KAAZgM,EACrB,OAAOE,EAAeD,EAAWjM,KAErC,CACA,OAAOiM,CAAU,GAErB,CAIA,OAFAE,SAASC,iBAAiB,UAAWN,GAE9B,WACLK,SAASE,oBAAoB,UAAWP,EAC1C,CAAC,GAEA,CAAC7G,IAEJ,MAaMiH,EAAiBA,CAACI,EAAcC,KACpCA,IAAatH,EAAUuH,WAAUxP,GAAQA,EAAKyP,WAAaH,EAAIG,WAC/D,MAAMC,EAAUH,EAAW,EAAItH,EAAUsH,EAAW,QAAKlJ,EACnDsJ,EAAUJ,EAAWtH,EAAU3K,OAAS,EAAI2K,EAAUsH,EAAW,QAAKlJ,EAC5E,MAAO,CAACyG,SAAUwC,EAAKtM,KAAM2M,EAAS5C,KAAM2C,EAAQ,EAGhDE,EAAiBA,CAACN,EAAcC,KACpC1C,EAAQqC,EAAeI,EAAKC,GAAU,EAoBxC,OACE9N,EAAAA,EAAAA,IAACoO,EAAAA,GAAW,CAAAxS,UACViE,EAAAA,EAAAA,IAACiF,EAAAA,GAAiB,CAAAlJ,SAAA,EAChBoE,EAAAA,EAAAA,IAACoO,EAAAA,GAAa,CAAAxS,UACZoE,EAAAA,EAAAA,IAACoO,EAAAA,GAAoB,CAAAxS,UACnBoE,EAAAA,EAAAA,IAACoO,EAAAA,GAAY,CAAAxS,UAAEuE,EAAAA,EAAAA,GAAE,mBAIrBH,EAAAA,EAAAA,IAACoO,EAAAA,GAAW,CAAAxS,UACViE,EAAAA,EAAAA,IAACuO,EAAAA,GAAW,CAACC,WAAS,EAAAzS,SAAA,EACpBoE,EAAAA,EAAAA,IAACgF,EAAAA,GAAc,KACfhF,EAAAA,EAAAA,IAACsO,EAAsB,CAAA1S,UACrBoE,EAAAA,EAAAA,IAACuO,EAAAA,EAAc,CAACC,cAAc,YAEhCxO,EAAAA,EAAAA,IAAC2F,EAAiB,CAAC2E,SAAUA,EAAU1E,MAAOA,EAAOxF,SAAUsK,KAC/D7K,EAAAA,EAAAA,IAAC4O,EAAqB,CAAA7S,SAAA,EACpBoE,EAAAA,EAAAA,IAAC0O,EAAc,CACblJ,MAAM,qBACNmJ,SAAUhE,EACV9H,KAAK,KACL+L,OA9DUC,KACtBjE,GAAcD,GACTA,GACHG,GAAa,EACf,KA4DU9K,EAAAA,EAAAA,IAAC0O,EAAc,CACblJ,MAAM,qBACNmJ,SAAU9D,EACVhI,KAAK,KACL+L,OA9DUE,KACtBhE,GAAcD,GACTA,GACHD,GAAa,EACf,QA6DQ5K,EAAAA,EAAAA,IAACyO,EAAqB,CAAA7S,UACpBoE,EAAAA,EAAAA,IAAC+O,EAAAA,EAAwB,CACvB7T,aAAcA,EACdC,UAAWA,EACXE,SAAWC,GAjDHA,KACpB,MAAMiC,EAAa,IAAIC,EAAAA,GAAclC,GAC/B0T,EAAoBzR,EAAW0R,gBAAgB,eACjDD,EAAkBnT,OACpBkP,EAAeiE,EAAkB,IAG/BzR,EAAW2R,SAASrT,OAAS,EAE/BkP,EAAexN,EAAW2R,SAAS1P,KAAK,MAG1CuL,EAAe,GAAG,EAqCuBpL,CAAarE,GAC1CA,MAAOyD,OAGXiB,EAAAA,EAAAA,IAACmP,EAAAA,EAAiB,CAChB7E,SAAUA,EACV/L,KAAM0O,EACNmC,cAAe7D,GAAsBE,EACrC4D,SAAUlB,EACVmB,aAActE,EACduE,YAAapE,EAAKE,YAEpBrL,EAAAA,EAAAA,IAACwP,EAAAA,EAAW,CACVJ,cAAe7D,GAAsBE,EACrCgE,YAAa5B,IACXM,EAAeN,EAAI,EAErB6B,cAAexR,EACf2P,IAAK1C,EAAKE,SACV6C,QAAS/C,EAAK5J,KACd0M,QAAS9C,EAAKG,KACdqE,QAxEmBC,IAAMxE,EAAQ,CAACC,cAAUzG,IAyE5C7F,YAAaA,aAO3B,CA/MSsL,EAAcvI,YAAA,iBAiNvB,UAEMwM,GAAyBjM,EAAAA,EAAAA,GAAO,MAAK,CAAAC,OAAA,YAAZD,CAAa,wCAGnCmC,EAAAA,EAAAA,GAAM,GAAE,mBACEA,EAAAA,EAAAA,GAAM,GAAE,KAGrBiK,GAAwBpM,EAAAA,EAAAA,GAAO,MAAK,CAAAC,OAAA,YAAZD,CAAa,kBACxBmC,EAAAA,EAAAA,GAAM,GAAE,KAG3B,SAASkK,EAAezT,GACtB,OACE4E,EAAAA,EAAAA,IAAA,QACEgQ,MAAO,CACLC,QAAS,cACTC,KAAKvL,EAAAA,EAAAA,GAAM,GACXwL,cAAcxL,EAAAA,EAAAA,GAAM,GACpByL,WAAY,UACZrU,SAAA,EAEFoE,EAAAA,EAAAA,IAAA,QAAApE,SAAOX,EAAMuK,SACbxF,EAAAA,EAAAA,IAACkQ,EAAAA,EAAM,IAAKjV,MAGlB,CAdSyT,EAAc5M,YAAA,gB","sources":["webpack:///./app/components/performance/searchBar.tsx","webpack:///./app/components/searchBar.tsx","webpack:///./app/utils/performance/contexts/pageError.tsx","webpack:///./app/views/starfish/modules/databaseModule/databaseChartView.tsx","webpack:///./app/views/starfish/modules/databaseModule/index.tsx"],"sourcesContent":["import {useCallback, useRef, useState} from 'react';\nimport {browserHistory} from 'react-router';\nimport styled from '@emotion/styled';\nimport debounce from 'lodash/debounce';\n\nimport BaseSearchBar from 'sentry/components/searchBar';\nimport {getSearchGroupWithItemMarkedActive} from 'sentry/components/smartSearchBar/utils';\nimport {DEFAULT_DEBOUNCE_DURATION} from 'sentry/constants';\nimport {t} from 'sentry/locale';\nimport {Organization} from 'sentry/types';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {doDiscoverQuery} from 'sentry/utils/discover/genericDiscoverQuery';\nimport {MutableSearch} from 'sentry/utils/tokenizeSearch';\nimport useApi from 'sentry/utils/useApi';\nimport useOnClickOutside from 'sentry/utils/useOnClickOutside';\nimport {normalizeUrl} from 'sentry/utils/withDomainRequired';\nimport {transactionSummaryRouteWithQuery} from 'sentry/views/performance/transactionSummary/utils';\n\nimport SearchDropdown from '../smartSearchBar/searchDropdown';\nimport {ItemType, SearchGroup} from '../smartSearchBar/types';\n\nexport type SearchBarProps = {\n  eventView: EventView;\n  onSearch: (query: string) => void;\n  organization: Organization;\n  query: string;\n};\n\nfunction SearchBar(props: SearchBarProps) {\n  const {organization, eventView: _eventView, onSearch, query: searchQuery} = props;\n\n  const [searchResults, setSearchResults] = useState<SearchGroup[]>([]);\n  const transactionCount = searchResults[0]?.children?.length || 0;\n  const [highlightedItemIndex, setHighlightedItemIndex] = useState(-1);\n  const [isDropdownOpen, setIsDropdownOpen] = useState(false);\n  const openDropdown = () => setIsDropdownOpen(true);\n  const closeDropdown = () => setIsDropdownOpen(false);\n  const [loading, setLoading] = useState(false);\n  const [searchString, setSearchString] = useState(searchQuery);\n  const containerRef = useRef<HTMLDivElement>(null);\n  useOnClickOutside(containerRef, useCallback(closeDropdown, []));\n\n  const api = useApi();\n  const eventView = _eventView.clone();\n\n  const url = `/organizations/${organization.slug}/events/`;\n\n  const projectIdStrings = (eventView.project as Readonly<number>[])?.map(String);\n\n  const handleSearchChange = query => {\n    setSearchString(query);\n\n    if (query.length === 0) {\n      onSearch('');\n    }\n\n    if (query.length < 3) {\n      setSearchResults([]);\n      closeDropdown();\n      return;\n    }\n\n    openDropdown();\n    getSuggestedTransactions(query);\n  };\n\n  const handleKeyDown = (event: React.KeyboardEvent) => {\n    const {key} = event;\n\n    if (loading) {\n      return;\n    }\n\n    if (key === 'Escape' && isDropdownOpen) {\n      closeDropdown();\n      return;\n    }\n\n    if (\n      (key === 'ArrowUp' || key === 'ArrowDown') &&\n      isDropdownOpen &&\n      transactionCount > 0\n    ) {\n      const currentHighlightedItem = searchResults[0].children[highlightedItemIndex];\n      const nextHighlightedItemIndex =\n        (highlightedItemIndex + transactionCount + (key === 'ArrowUp' ? -1 : 1)) %\n        transactionCount;\n      setHighlightedItemIndex(nextHighlightedItemIndex);\n      const nextHighlightedItem = searchResults[0].children[nextHighlightedItemIndex];\n\n      let newSearchResults = searchResults;\n      if (currentHighlightedItem) {\n        newSearchResults = getSearchGroupWithItemMarkedActive(\n          searchResults,\n          currentHighlightedItem,\n          false\n        );\n      }\n\n      if (nextHighlightedItem) {\n        newSearchResults = getSearchGroupWithItemMarkedActive(\n          newSearchResults,\n          nextHighlightedItem,\n          true\n        );\n      }\n\n      setSearchResults(newSearchResults);\n      return;\n    }\n\n    if (key === 'Enter') {\n      event.preventDefault();\n      const currentItem = searchResults[0]?.children[highlightedItemIndex];\n\n      if (currentItem?.value) {\n        handleChooseItem(currentItem.value);\n      } else {\n        handleSearch(searchString, true);\n      }\n    }\n  };\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const getSuggestedTransactions = useCallback(\n    debounce(\n      async query => {\n        try {\n          setLoading(true);\n          const conditions = new MutableSearch('');\n          conditions.addFilterValues('transaction', [wrapQueryInWildcards(query)], false);\n          conditions.addFilterValues('event.type', ['transaction']);\n\n          // clear any active requests\n          if (Object.keys(api.activeRequests).length) {\n            api.clear();\n          }\n\n          const [results] = await doDiscoverQuery<{\n            data: DataItem[];\n          }>(api, url, {\n            field: ['transaction', 'project_id', 'count()'],\n            project: projectIdStrings,\n            sort: '-count()',\n            query: conditions.formatString(),\n            statsPeriod: eventView.statsPeriod,\n            referrer: 'api.performance.transaction-name-search-bar',\n          });\n\n          const parsedResults = results.data.reduce(\n            (searchGroup: SearchGroup, item) => {\n              searchGroup.children.push({\n                value: encodeItemToValue(item),\n                title: item.transaction,\n                type: ItemType.LINK,\n                desc: '',\n              });\n              return searchGroup;\n            },\n            {\n              title: 'All Transactions',\n              children: [],\n              icon: null,\n              type: 'header',\n            }\n          );\n\n          setHighlightedItemIndex(-1);\n\n          setSearchResults([parsedResults]);\n        } catch (_) {\n          throw new Error('Unable to fetch event field values');\n        } finally {\n          setLoading(false);\n        }\n      },\n      DEFAULT_DEBOUNCE_DURATION,\n      {leading: true}\n    ),\n    [api, url, eventView.statsPeriod, projectIdStrings.join(',')]\n  );\n\n  const handleChooseItem = (value: string) => {\n    const item = decodeValueToItem(value);\n    handleSearch(item.transaction, false);\n  };\n\n  const handleClickItemIcon = (value: string) => {\n    const item = decodeValueToItem(value);\n    navigateToItemTransactionSummary(item);\n  };\n\n  const handleSearch = (query: string, asRawText: boolean) => {\n    setSearchResults([]);\n    setSearchString(query);\n    query = new MutableSearch(query).formatString();\n\n    const fullQuery = asRawText ? query : `transaction:\"${query}\"`;\n    onSearch(query ? fullQuery : '');\n    closeDropdown();\n  };\n\n  const navigateToItemTransactionSummary = (item: DataItem) => {\n    const {transaction, project_id} = item;\n\n    const query = eventView.generateQueryStringObject();\n    setSearchResults([]);\n\n    const next = transactionSummaryRouteWithQuery({\n      orgSlug: organization.slug,\n      transaction,\n      projectID: String(project_id),\n      query,\n    });\n\n    browserHistory.push(normalizeUrl(next));\n  };\n\n  return (\n    <Container data-test-id=\"transaction-search-bar\" ref={containerRef}>\n      <BaseSearchBar\n        placeholder={t('Search Transactions')}\n        onChange={handleSearchChange}\n        onKeyDown={handleKeyDown}\n        query={searchString}\n      />\n      {isDropdownOpen && (\n        <SearchDropdown\n          maxMenuHeight={300}\n          searchSubstring={searchString}\n          loading={loading}\n          items={searchResults}\n          onClick={handleChooseItem}\n          onIconClick={handleClickItemIcon}\n        />\n      )}\n    </Container>\n  );\n}\n\nconst encodeItemToValue = (item: DataItem) => {\n  return `${item.transaction}:${item.project_id}`;\n};\n\nconst decodeValueToItem = (value: string): DataItem => {\n  const lastIndex = value.lastIndexOf(':');\n\n  return {\n    project_id: parseInt(value.slice(lastIndex + 1), 10),\n    transaction: value.slice(0, lastIndex),\n  };\n};\n\ninterface DataItem {\n  project_id: number;\n  transaction: string;\n  'count()'?: number;\n}\n\nexport const wrapQueryInWildcards = (query: string) => {\n  if (!query.startsWith('*')) {\n    query = '*' + query;\n  }\n\n  if (!query.endsWith('*')) {\n    query = query + '*';\n  }\n\n  return query;\n};\n\nconst Container = styled('div')`\n  position: relative;\n`;\n\nexport default SearchBar;\n","import {useCallback, useEffect, useRef, useState} from 'react';\nimport styled from '@emotion/styled';\n\nimport {Button} from 'sentry/components/button';\nimport {InputGroup, InputProps} from 'sentry/components/inputGroup';\nimport {IconSearch} from 'sentry/icons';\nimport {IconClose} from 'sentry/icons/iconClose';\nimport {t} from 'sentry/locale';\nimport {space} from 'sentry/styles/space';\n\ninterface SearchBarProps extends Omit<InputProps, 'onChange'> {\n  defaultQuery?: string;\n  onChange?: (query: string) => void;\n  onSearch?: (query: string) => void;\n  query?: string;\n  trailing?: React.ReactNode;\n  width?: string;\n}\n\nfunction SearchBar({\n  query: queryProp,\n  defaultQuery = '',\n  onChange,\n  onSearch,\n  width,\n  size,\n  className,\n  trailing,\n  ...inputProps\n}: SearchBarProps) {\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const [query, setQuery] = useState(queryProp ?? defaultQuery);\n\n  // if query prop keeps changing we should treat this as\n  // a controlled component and its internal state should be in sync\n  useEffect(() => {\n    if (typeof queryProp === 'string') {\n      setQuery(queryProp);\n    }\n  }, [queryProp]);\n\n  const onQueryChange = useCallback(\n    (e: React.ChangeEvent<HTMLInputElement>) => {\n      const {value} = e.target;\n      setQuery(value);\n      onChange?.(value);\n    },\n    [onChange]\n  );\n\n  const onSubmit = useCallback(\n    (e: React.FormEvent<HTMLFormElement>) => {\n      e.preventDefault();\n      inputRef.current?.blur();\n      onSearch?.(query);\n    },\n    [onSearch, query]\n  );\n\n  const clearSearch = useCallback(() => {\n    setQuery('');\n    onChange?.('');\n    onSearch?.('');\n  }, [onChange, onSearch]);\n\n  return (\n    <FormWrap onSubmit={onSubmit} className={className}>\n      <InputGroup>\n        <InputGroup.LeadingItems disablePointerEvents>\n          <IconSearch color=\"subText\" size={size === 'xs' ? 'xs' : 'sm'} />\n        </InputGroup.LeadingItems>\n        <StyledInput\n          {...inputProps}\n          ref={inputRef}\n          type=\"text\"\n          name=\"query\"\n          autoComplete=\"off\"\n          value={query}\n          onChange={onQueryChange}\n          width={width}\n          size={size}\n        />\n        <InputGroup.TrailingItems>\n          {trailing}\n          {!!query && (\n            <SearchBarTrailingButton\n              size=\"zero\"\n              borderless\n              onClick={clearSearch}\n              icon={<IconClose size=\"xs\" />}\n              aria-label={t('Clear')}\n            />\n          )}\n        </InputGroup.TrailingItems>\n      </InputGroup>\n    </FormWrap>\n  );\n}\n\nconst FormWrap = styled('form')`\n  display: block;\n  position: relative;\n`;\n\nconst StyledInput = styled(InputGroup.Input)`\n  ${p => p.width && `width: ${p.width};`}\n`;\n\nexport const SearchBarTrailingButton = styled(Button)`\n  color: ${p => p.theme.subText};\n  padding: ${space(0.5)};\n`;\n\nexport default SearchBar;\n","import {createContext, useContext, useState} from 'react';\n\nimport {Alert} from 'sentry/components/alert';\n\nconst pageErrorContext = createContext<{\n  setPageError: (error: string | undefined) => void;\n  pageError?: string;\n}>({\n  pageError: undefined,\n  setPageError: (_: string | undefined) => {},\n});\n\nexport function PageErrorProvider({children}: {children: React.ReactNode}) {\n  const [pageError, setPageError] = useState<string | undefined>();\n  return (\n    <pageErrorContext.Provider\n      value={{\n        pageError,\n        setPageError,\n      }}\n    >\n      {children}\n    </pageErrorContext.Provider>\n  );\n}\n\nexport function PageErrorAlert() {\n  const {pageError} = useContext(pageErrorContext);\n  if (!pageError) {\n    return null;\n  }\n\n  return (\n    <Alert type=\"error\" data-test-id=\"page-error-alert\" showIcon>\n      {pageError}\n    </Alert>\n  );\n}\n\nexport const usePageError = () => useContext(pageErrorContext);\n","import {Fragment} from 'react';\nimport {useTheme} from '@emotion/react';\nimport styled from '@emotion/styled';\nimport {Location} from 'history';\nimport moment from 'moment';\n\nimport {CompactSelect} from 'sentry/components/compactSelect';\nimport {t} from 'sentry/locale';\nimport {space} from 'sentry/styles/space';\nimport {Series} from 'sentry/types/echarts';\nimport usePageFilters from 'sentry/utils/usePageFilters';\nimport Chart from 'sentry/views/starfish/components/chart';\nimport ChartPanel from 'sentry/views/starfish/components/chartPanel';\nimport {\n  useGetTransactionsForTables,\n  useQueryDbTables,\n  useQueryTopDbOperationsChart,\n  useQueryTopTablesChart,\n} from 'sentry/views/starfish/modules/databaseModule/queries';\nimport {queryToSeries} from 'sentry/views/starfish/modules/databaseModule/utils';\nimport {\n  datetimeToClickhouseFilterTimestamps,\n  getDateFilters,\n} from 'sentry/views/starfish/utils/dates';\nimport {zeroFillSeries} from 'sentry/views/starfish/utils/zeroFillSeries';\n\nconst INTERVAL = 12;\n\ntype Props = {\n  location: Location;\n  onChange: (value: string) => void;\n  table: string;\n};\n\nfunction parseOptions(options, label) {\n  const prefix = <span>{t('Operation')}</span>;\n\n  return [\n    {\n      value: 'ALL',\n      prefix,\n      label: `ALL`,\n    },\n    ...options.map(action => {\n      return {\n        value: action.key,\n        prefix,\n        label: `${action.key || 'null'} - ${action.value} ${label}`,\n      };\n    }),\n  ];\n}\n\nexport default function DatabaseChartView({table, onChange}: Props) {\n  const pageFilter = usePageFilters();\n  const theme = useTheme();\n  const {startTime, endTime} = getDateFilters(pageFilter);\n  const {start_timestamp, end_timestamp} = datetimeToClickhouseFilterTimestamps(\n    pageFilter.selection.datetime\n  );\n\n  const {data: tableData} = useQueryDbTables();\n  const {isLoading: isTopGraphLoading, data: topGraphData} =\n    useQueryTopDbOperationsChart(INTERVAL);\n  const {isLoading: tableGraphLoading, data: tableGraphData} =\n    useQueryTopTablesChart(INTERVAL);\n\n  const seriesByDomain: {[action: string]: Series} = {};\n  const tpmByDomain: {[action: string]: Series} = {};\n  if (!tableGraphLoading) {\n    tableGraphData.forEach(datum => {\n      seriesByDomain[datum.domain] = {\n        seriesName: datum.domain,\n        data: [],\n      };\n      tpmByDomain[datum.domain] = {\n        seriesName: datum.domain,\n        data: [],\n      };\n    });\n\n    tableGraphData.forEach(datum => {\n      seriesByDomain[datum.domain].data.push({\n        value: datum.p75,\n        name: datum.interval,\n      });\n      tpmByDomain[datum.domain].data.push({\n        value: datum.count,\n        name: datum.interval,\n      });\n    });\n  }\n\n  const tableNames = [...new Set(tableGraphData.map(d => d.domain))];\n  const {isLoading: isTopTransactionDataLoading, data: topTransactionsData} =\n    useGetTransactionsForTables(tableNames, INTERVAL);\n\n  const tpmTransactionSeries = queryToSeries(\n    topTransactionsData,\n    'transaction',\n    'epm',\n    startTime,\n    endTime,\n    INTERVAL\n  );\n\n  const p75TransactionSeries = queryToSeries(\n    topTransactionsData,\n    'transaction',\n    'p75',\n    startTime,\n    endTime,\n    INTERVAL\n  );\n\n  const topDomains = Object.values(seriesByDomain).map(series =>\n    zeroFillSeries(\n      series,\n      moment.duration(INTERVAL, 'hours'),\n      moment(start_timestamp),\n      moment(end_timestamp)\n    )\n  );\n  const tpmDomains = Object.values(tpmByDomain).map(series =>\n    zeroFillSeries(\n      series,\n      moment.duration(INTERVAL, 'hours'),\n      moment(start_timestamp),\n      moment(end_timestamp)\n    )\n  );\n\n  const tpmByQuery: {[query: string]: Series} = {};\n\n  const seriesByQuery: {[action: string]: Series} = {};\n  if (!isTopGraphLoading) {\n    topGraphData.forEach(datum => {\n      seriesByQuery[datum.action] = {\n        seriesName: datum.action,\n        data: [],\n      };\n      tpmByQuery[datum.action] = {\n        seriesName: datum.action,\n        data: [],\n      };\n    });\n\n    topGraphData.forEach(datum => {\n      seriesByQuery[datum.action].data.push({\n        value: datum.p75,\n        name: datum.interval,\n      });\n      tpmByQuery[datum.action].data.push({\n        value: datum.count,\n        name: datum.interval,\n      });\n    });\n  }\n\n  const chartColors = [...theme.charts.getColorPalette(6).slice(2, 7), theme.gray300];\n\n  return (\n    <Fragment>\n      <ChartsContainer>\n        <ChartsContainerItem>\n          <ChartPanel title={t('Top Transactions P75')}>\n            <Chart\n              statsPeriod=\"24h\"\n              height={180}\n              data={p75TransactionSeries}\n              start=\"\"\n              end=\"\"\n              loading={isTopTransactionDataLoading}\n              utc={false}\n              grid={{\n                left: '0',\n                right: '0',\n                top: '16px',\n                bottom: '8px',\n              }}\n              definedAxisTicks={4}\n              isLineChart\n              showLegend\n            />\n          </ChartPanel>\n        </ChartsContainerItem>\n        <ChartsContainerItem>\n          <ChartPanel title={t('Top Transactions Throughput')}>\n            <Chart\n              statsPeriod=\"24h\"\n              height={180}\n              data={tpmTransactionSeries}\n              start=\"\"\n              end=\"\"\n              loading={isTopTransactionDataLoading}\n              utc={false}\n              grid={{\n                left: '0',\n                right: '0',\n                top: '16px',\n                bottom: '8px',\n              }}\n              definedAxisTicks={4}\n              showLegend\n              isLineChart\n            />\n          </ChartPanel>\n        </ChartsContainerItem>\n      </ChartsContainer>\n      {tableData.length === 1 && tableData[0].key === '' ? (\n        <Fragment />\n      ) : (\n        <Fragment>\n          <ChartsContainer>\n            <ChartsContainerItem>\n              <ChartPanel title={t('Slowest Tables P75')}>\n                <Chart\n                  statsPeriod=\"24h\"\n                  height={180}\n                  data={topDomains}\n                  start=\"\"\n                  end=\"\"\n                  chartColors={chartColors}\n                  loading={tableGraphLoading}\n                  utc={false}\n                  grid={{\n                    left: '0',\n                    right: '0',\n                    top: '16px',\n                    bottom: '8px',\n                  }}\n                  definedAxisTicks={4}\n                  isLineChart\n                  showLegend\n                />\n              </ChartPanel>\n            </ChartsContainerItem>\n            <ChartsContainerItem>\n              <ChartPanel title={t('Table Throughput')}>\n                <Chart\n                  statsPeriod=\"24h\"\n                  height={180}\n                  data={tpmDomains}\n                  start=\"\"\n                  end=\"\"\n                  chartColors={chartColors}\n                  loading={isTopGraphLoading}\n                  utc={false}\n                  grid={{\n                    left: '0',\n                    right: '0',\n                    top: '16px',\n                    bottom: '8px',\n                  }}\n                  definedAxisTicks={4}\n                  showLegend\n                  isLineChart\n                />\n              </ChartPanel>\n            </ChartsContainerItem>\n          </ChartsContainer>\n          <Selectors>\n            <CompactSelect\n              value={table}\n              triggerProps={{prefix: t('Table')}}\n              options={parseOptions(tableData, 'p75')}\n              menuTitle=\"Table\"\n              onChange={opt => onChange(opt.value)}\n            />\n          </Selectors>\n        </Fragment>\n      )}\n    </Fragment>\n  );\n}\n\nconst Selectors = styled(`div`)`\n  display: flex;\n  margin-bottom: ${space(2)};\n`;\n\nconst ChartsContainer = styled('div')`\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  gap: ${space(2)};\n`;\n\nconst ChartsContainerItem = styled('div')`\n  flex: 1;\n`;\n","import {useEffect, useState} from 'react';\nimport styled from '@emotion/styled';\nimport moment from 'moment';\n\nimport DatePageFilter from 'sentry/components/datePageFilter';\nimport * as Layout from 'sentry/components/layouts/thirds';\nimport {normalizeDateTimeParams} from 'sentry/components/organizations/pageFilters/parse';\nimport TransactionNameSearchBar from 'sentry/components/performance/searchBar';\nimport Switch from 'sentry/components/switchButton';\nimport {t} from 'sentry/locale';\nimport {space} from 'sentry/styles/space';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {\n  PageErrorAlert,\n  PageErrorProvider,\n} from 'sentry/utils/performance/contexts/pageError';\nimport {useApiQuery, useQuery} from 'sentry/utils/queryClient';\nimport {MutableSearch} from 'sentry/utils/tokenizeSearch';\nimport {useLocation} from 'sentry/utils/useLocation';\nimport useOrganization from 'sentry/utils/useOrganization';\nimport usePageFilters from 'sentry/utils/usePageFilters';\nimport {\n  getDbAggregatesQuery,\n  useQueryMainTable,\n} from 'sentry/views/starfish/modules/databaseModule/queries';\nimport combineTableDataWithSparklineData from 'sentry/views/starfish/utils/combineTableDataWithSparklineData';\nimport {HOST} from 'sentry/views/starfish/utils/constants';\n\nimport DatabaseChartView from './databaseChartView';\nimport DatabaseTableView, {DataRow, MainTableSort} from './databaseTableView';\nimport QueryDetail from './panel';\n\nexport type Sort<T> = {\n  direction: 'desc' | 'asc' | undefined;\n  sortHeader: T | undefined;\n};\n\nfunction DatabaseModule() {\n  const location = useLocation();\n  const organization = useOrganization();\n  const eventView = EventView.fromLocation(location);\n  const [table, setTable] = useState<string>('ALL');\n  const [filterNew, setFilterNew] = useState<boolean>(false);\n  const [filterOld, setFilterOld] = useState<boolean>(false);\n  const [transaction, setTransaction] = useState<string>('');\n  const [sort, setSort] = useState<MainTableSort>({\n    direction: undefined,\n    sortHeader: undefined,\n  });\n  const [rows, setRows] = useState<{next?: DataRow; prev?: DataRow; selected?: DataRow}>({\n    selected: undefined,\n    next: undefined,\n    prev: undefined,\n  });\n  const {\n    isLoading: isTableDataLoading,\n    data: tableData,\n    isRefetching: isTableRefetching,\n  } = useQueryMainTable({\n    transaction,\n    table,\n    filterNew,\n    filterOld,\n    sortKey: sort.sortHeader?.key,\n    sortDirection: sort.direction,\n  });\n  const pageFilters = usePageFilters();\n\n  const {selection} = pageFilters;\n  const {projects, environments, datetime} = selection;\n\n  useApiQuery<null>(\n    [\n      `/organizations/${organization.slug}/events-starfish/`,\n      {\n        query: {\n          ...{\n            environment: environments,\n            project: projects.map(proj => String(proj)),\n          },\n          ...normalizeDateTimeParams(datetime),\n        },\n      },\n    ],\n    {\n      staleTime: 10,\n    }\n  );\n\n  const {data: dbAggregateData} = useQuery({\n    queryKey: ['dbAggregates', transaction, filterNew, filterOld],\n    queryFn: () =>\n      fetch(\n        `${HOST}/?query=${getDbAggregatesQuery({\n          datetime: pageFilters.selection.datetime,\n          transaction,\n        })}`\n      ).then(res => res.json()),\n    retry: false,\n    initialData: [],\n  });\n\n  const combinedDbData = combineTableDataWithSparklineData(\n    tableData,\n    dbAggregateData,\n    moment.duration(12, 'hours')\n  );\n\n  const aggregatesGroupedByQuery = {};\n  dbAggregateData.forEach(({description, interval, count, p75}) => {\n    if (description in aggregatesGroupedByQuery) {\n      aggregatesGroupedByQuery[description].push({name: interval, count, p75});\n    } else {\n      aggregatesGroupedByQuery[description] = [{name: interval, count, p75}];\n    }\n  });\n\n  useEffect(() => {\n    function handleKeyDown({keyCode}) {\n      setRows(currentRow => {\n        if (currentRow.selected) {\n          if (currentRow.prev && keyCode === 37) {\n            return getUpdatedRows(currentRow.prev);\n          }\n          if (currentRow.next && keyCode === 39) {\n            return getUpdatedRows(currentRow.next);\n          }\n        }\n        return currentRow;\n      });\n    }\n\n    document.addEventListener('keydown', handleKeyDown);\n\n    return function cleanup() {\n      document.removeEventListener('keydown', handleKeyDown);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [tableData]);\n\n  const toggleFilterNew = () => {\n    setFilterNew(!filterNew);\n    if (!filterNew) {\n      setFilterOld(false);\n    }\n  };\n  const toggleFilterOld = () => {\n    setFilterOld(!filterOld);\n    if (!filterOld) {\n      setFilterNew(false);\n    }\n  };\n\n  const getUpdatedRows = (row: DataRow, rowIndex?: number) => {\n    rowIndex ??= tableData.findIndex(data => data.group_id === row.group_id);\n    const prevRow = rowIndex > 0 ? tableData[rowIndex - 1] : undefined;\n    const nextRow = rowIndex < tableData.length - 1 ? tableData[rowIndex + 1] : undefined;\n    return {selected: row, next: nextRow, prev: prevRow};\n  };\n\n  const setSelectedRow = (row: DataRow, rowIndex?: number) => {\n    setRows(getUpdatedRows(row, rowIndex));\n  };\n\n  const unsetSelectedSpanGroup = () => setRows({selected: undefined});\n\n  const handleSearch = (query: string) => {\n    const conditions = new MutableSearch(query);\n    const transactionValues = conditions.getFilterValues('transaction');\n    if (transactionValues.length) {\n      setTransaction(transactionValues[0]);\n      return;\n    }\n    if (conditions.freeText.length > 0) {\n      // so no need to wrap it here\n      setTransaction(conditions.freeText.join(' '));\n      return;\n    }\n    setTransaction('');\n  };\n\n  return (\n    <Layout.Page>\n      <PageErrorProvider>\n        <Layout.Header>\n          <Layout.HeaderContent>\n            <Layout.Title>{t('Database')}</Layout.Title>\n          </Layout.HeaderContent>\n        </Layout.Header>\n\n        <Layout.Body>\n          <Layout.Main fullWidth>\n            <PageErrorAlert />\n            <FilterOptionsContainer>\n              <DatePageFilter alignDropdown=\"left\" />\n            </FilterOptionsContainer>\n            <DatabaseChartView location={location} table={table} onChange={setTable} />\n            <SearchFilterContainer>\n              <LabelledSwitch\n                label=\"Filter New Queries\"\n                isActive={filterNew}\n                size=\"lg\"\n                toggle={toggleFilterNew}\n              />\n              <LabelledSwitch\n                label=\"Filter Old Queries\"\n                isActive={filterOld}\n                size=\"lg\"\n                toggle={toggleFilterOld}\n              />\n            </SearchFilterContainer>\n            <SearchFilterContainer>\n              <TransactionNameSearchBar\n                organization={organization}\n                eventView={eventView}\n                onSearch={(query: string) => handleSearch(query)}\n                query={transaction}\n              />\n            </SearchFilterContainer>\n            <DatabaseTableView\n              location={location}\n              data={combinedDbData as DataRow[]}\n              isDataLoading={isTableDataLoading || isTableRefetching}\n              onSelect={setSelectedRow}\n              onSortChange={setSort}\n              selectedRow={rows.selected}\n            />\n            <QueryDetail\n              isDataLoading={isTableDataLoading || isTableRefetching}\n              onRowChange={row => {\n                setSelectedRow(row);\n              }}\n              mainTableSort={sort}\n              row={rows.selected}\n              nextRow={rows.next}\n              prevRow={rows.prev}\n              onClose={unsetSelectedSpanGroup}\n              transaction={transaction}\n            />\n          </Layout.Main>\n        </Layout.Body>\n      </PageErrorProvider>\n    </Layout.Page>\n  );\n}\n\nexport default DatabaseModule;\n\nconst FilterOptionsContainer = styled('div')`\n  display: flex;\n  flex-direction: row;\n  gap: ${space(1)};\n  margin-bottom: ${space(2)};\n`;\n\nconst SearchFilterContainer = styled('div')`\n  margin-bottom: ${space(2)};\n`;\n\nfunction LabelledSwitch(props) {\n  return (\n    <span\n      style={{\n        display: 'inline-flex',\n        gap: space(1),\n        paddingRight: space(2),\n        alignItems: 'center',\n      }}\n    >\n      <span>{props.label}</span>\n      <Switch {...props} />\n    </span>\n  );\n}\n"],"names":["SearchBar","props","organization","eventView","_eventView","onSearch","query","searchQuery","searchResults","setSearchResults","useState","transactionCount","children","length","highlightedItemIndex","setHighlightedItemIndex","isDropdownOpen","setIsDropdownOpen","closeDropdown","loading","setLoading","searchString","setSearchString","containerRef","useRef","useOnClickOutside","useCallback","api","useApi","clone","url","slug","projectIdStrings","project","map","String","getSuggestedTransactions","debounce","async","conditions","MutableSearch","addFilterValues","wrapQueryInWildcards","Object","keys","activeRequests","clear","results","doDiscoverQuery","field","sort","formatString","statsPeriod","referrer","parsedResults","data","reduce","searchGroup","item","push","value","encodeItemToValue","title","transaction","type","ItemType","desc","icon","_","Error","DEFAULT_DEBOUNCE_DURATION","leading","join","handleChooseItem","decodeValueToItem","handleSearch","asRawText","_jsxs","Container","ref","_jsx","BaseSearchBar","placeholder","t","onChange","onKeyDown","event","key","currentHighlightedItem","nextHighlightedItemIndex","nextHighlightedItem","newSearchResults","getSearchGroupWithItemMarkedActive","preventDefault","currentItem","SearchDropdown","maxMenuHeight","searchSubstring","items","onClick","onIconClick","project_id","generateQueryStringObject","next","transactionSummaryRouteWithQuery","orgSlug","projectID","browserHistory","normalizeUrl","navigateToItemTransactionSummary","displayName","lastIndex","lastIndexOf","parseInt","slice","startsWith","endsWith","_styled","target","name","styles","_ref","queryProp","defaultQuery","width","size","className","trailing","inputProps","inputRef","setQuery","useEffect","onQueryChange","e","onSubmit","current","blur","clearSearch","FormWrap","InputGroup","disablePointerEvents","IconSearch","color","StyledInput","autoComplete","SearchBarTrailingButton","borderless","IconClose","p","Button","theme","subText","space","pageErrorContext","createContext","pageError","undefined","setPageError","PageErrorProvider","Provider","PageErrorAlert","useContext","Alert","showIcon","usePageError","INTERVAL","parseOptions","options","label","prefix","action","DatabaseChartView","table","pageFilter","usePageFilters","useTheme","startTime","endTime","getDateFilters","start_timestamp","end_timestamp","datetimeToClickhouseFilterTimestamps","selection","datetime","tableData","useQueryDbTables","isLoading","isTopGraphLoading","topGraphData","useQueryTopDbOperationsChart","tableGraphLoading","tableGraphData","useQueryTopTablesChart","seriesByDomain","tpmByDomain","forEach","datum","domain","seriesName","p75","interval","count","tableNames","Set","d","isTopTransactionDataLoading","topTransactionsData","useGetTransactionsForTables","tpmTransactionSeries","queryToSeries","p75TransactionSeries","topDomains","values","series","zeroFillSeries","moment","tpmDomains","tpmByQuery","seriesByQuery","chartColors","charts","getColorPalette","gray300","Fragment","ChartsContainer","ChartsContainerItem","ChartPanel","Chart","height","start","end","utc","grid","left","right","top","bottom","definedAxisTicks","isLineChart","showLegend","Selectors","CompactSelect","triggerProps","menuTitle","opt","DatabaseModule","location","useLocation","useOrganization","EventView","setTable","filterNew","setFilterNew","filterOld","setFilterOld","setTransaction","setSort","direction","sortHeader","rows","setRows","selected","prev","isTableDataLoading","isRefetching","isTableRefetching","useQueryMainTable","sortKey","sortDirection","pageFilters","projects","environments","useApiQuery","environment","proj","normalizeDateTimeParams","staleTime","dbAggregateData","useQuery","queryKey","queryFn","fetch","HOST","getDbAggregatesQuery","then","res","json","retry","initialData","combinedDbData","combineTableDataWithSparklineData","aggregatesGroupedByQuery","description","handleKeyDown","_ref2","keyCode","currentRow","getUpdatedRows","document","addEventListener","removeEventListener","row","rowIndex","findIndex","group_id","prevRow","nextRow","setSelectedRow","Layout","fullWidth","FilterOptionsContainer","DatePageFilter","alignDropdown","SearchFilterContainer","LabelledSwitch","isActive","toggle","toggleFilterNew","toggleFilterOld","TransactionNameSearchBar","transactionValues","getFilterValues","freeText","DatabaseTableView","isDataLoading","onSelect","onSortChange","selectedRow","QueryDetail","onRowChange","mainTableSort","onClose","unsetSelectedSpanGroup","style","display","gap","paddingRight","alignItems","Switch"],"sourceRoot":""}