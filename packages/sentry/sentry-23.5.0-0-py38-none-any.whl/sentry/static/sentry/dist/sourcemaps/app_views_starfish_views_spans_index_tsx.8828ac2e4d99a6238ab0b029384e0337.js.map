{"version":3,"file":"chunks/app_views_starfish_views_spans_index_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/searchBar.tsx","webpack:///./app/views/starfish/views/spans/spanTimeCharts.tsx","webpack:///./app/views/starfish/views/spans/clusters.tsx","webpack:///./app/views/starfish/views/spans/queries.tsx","webpack:///./app/views/starfish/views/spans/spansTable.tsx","webpack:///./app/views/starfish/views/spans/spansView.tsx","webpack:///./app/views/starfish/views/spans/index.tsx","webpack:///../node_modules/core-js/internals/array-iteration-from-last.js","webpack:///../node_modules/core-js/internals/function-bind-context.js","webpack:///../node_modules/core-js/internals/function-uncurry-this-clause.js","webpack:///../node_modules/core-js/modules/es.array.find-last.js","webpack:///../node_modules/lodash/_baseSum.js","webpack:///../node_modules/lodash/sumBy.js"],"sourcesContent":["import {useCallback, useEffect, useRef, useState} from 'react';\nimport styled from '@emotion/styled';\n\nimport {Button} from 'sentry/components/button';\nimport {InputGroup, InputProps} from 'sentry/components/inputGroup';\nimport {IconSearch} from 'sentry/icons';\nimport {IconClose} from 'sentry/icons/iconClose';\nimport {t} from 'sentry/locale';\nimport {space} from 'sentry/styles/space';\n\ninterface SearchBarProps extends Omit<InputProps, 'onChange'> {\n  defaultQuery?: string;\n  onChange?: (query: string) => void;\n  onSearch?: (query: string) => void;\n  query?: string;\n  trailing?: React.ReactNode;\n  width?: string;\n}\n\nfunction SearchBar({\n  query: queryProp,\n  defaultQuery = '',\n  onChange,\n  onSearch,\n  width,\n  size,\n  className,\n  trailing,\n  ...inputProps\n}: SearchBarProps) {\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const [query, setQuery] = useState(queryProp ?? defaultQuery);\n\n  // if query prop keeps changing we should treat this as\n  // a controlled component and its internal state should be in sync\n  useEffect(() => {\n    if (typeof queryProp === 'string') {\n      setQuery(queryProp);\n    }\n  }, [queryProp]);\n\n  const onQueryChange = useCallback(\n    (e: React.ChangeEvent<HTMLInputElement>) => {\n      const {value} = e.target;\n      setQuery(value);\n      onChange?.(value);\n    },\n    [onChange]\n  );\n\n  const onSubmit = useCallback(\n    (e: React.FormEvent<HTMLFormElement>) => {\n      e.preventDefault();\n      inputRef.current?.blur();\n      onSearch?.(query);\n    },\n    [onSearch, query]\n  );\n\n  const clearSearch = useCallback(() => {\n    setQuery('');\n    onChange?.('');\n    onSearch?.('');\n  }, [onChange, onSearch]);\n\n  return (\n    <FormWrap onSubmit={onSubmit} className={className}>\n      <InputGroup>\n        <InputGroup.LeadingItems disablePointerEvents>\n          <IconSearch color=\"subText\" size={size === 'xs' ? 'xs' : 'sm'} />\n        </InputGroup.LeadingItems>\n        <StyledInput\n          {...inputProps}\n          ref={inputRef}\n          type=\"text\"\n          name=\"query\"\n          autoComplete=\"off\"\n          value={query}\n          onChange={onQueryChange}\n          width={width}\n          size={size}\n        />\n        <InputGroup.TrailingItems>\n          {trailing}\n          {!!query && (\n            <SearchBarTrailingButton\n              size=\"zero\"\n              borderless\n              onClick={clearSearch}\n              icon={<IconClose size=\"xs\" />}\n              aria-label={t('Clear')}\n            />\n          )}\n        </InputGroup.TrailingItems>\n      </InputGroup>\n    </FormWrap>\n  );\n}\n\nconst FormWrap = styled('form')`\n  display: block;\n  position: relative;\n`;\n\nconst StyledInput = styled(InputGroup.Input)`\n  ${p => p.width && `width: ${p.width};`}\n`;\n\nexport const SearchBarTrailingButton = styled(Button)`\n  color: ${p => p.theme.subText};\n  padding: ${space(0.5)};\n`;\n\nexport default SearchBar;\n","import {useTheme} from '@emotion/react';\nimport styled from '@emotion/styled';\nimport groupBy from 'lodash/groupBy';\nimport moment from 'moment';\n\nimport {DateTimeObject} from 'sentry/components/charts/utils';\nimport {t} from 'sentry/locale';\nimport {space} from 'sentry/styles/space';\nimport usePageFilters from 'sentry/utils/usePageFilters';\nimport Chart from 'sentry/views/starfish/components/chart';\nimport ChartPanel from 'sentry/views/starfish/components/chartPanel';\nimport {\n  datetimeToClickhouseFilterTimestamps,\n  PERIOD_REGEX,\n} from 'sentry/views/starfish/utils/dates';\nimport {useSpansQuery} from 'sentry/views/starfish/utils/useSpansQuery';\nimport {zeroFillSeries} from 'sentry/views/starfish/utils/zeroFillSeries';\n\nimport type {Cluster} from './clusters';\n\ntype Props = {\n  clusters: Cluster[];\n  descriptionFilter: string;\n};\n\nexport function SpanTimeCharts({descriptionFilter, clusters}: Props) {\n  const themes = useTheme();\n\n  const pageFilter = usePageFilters();\n  const [_, num, unit] = pageFilter.selection.datetime.period?.match(PERIOD_REGEX) ?? [];\n  const startTime =\n    num && unit\n      ? moment().subtract(num, unit as 'h' | 'd')\n      : moment(pageFilter.selection.datetime.start);\n  const endTime = moment(pageFilter.selection.datetime.end ?? undefined);\n\n  const lastCluster = clusters.at(-1);\n\n  const {isLoading, data} = useSpansQuery({\n    queryString: `${getSpanTotalTimeChartQuery(\n      pageFilter.selection.datetime,\n      descriptionFilter,\n      lastCluster?.grouping_column || '',\n      clusters.map(c => c.condition(c.name))\n    )}&referrer=span-time-charts`,\n    initialData: [],\n  });\n\n  if (!lastCluster) {\n    return null;\n  }\n\n  const dataByGroup = groupBy(data, 'primary_group');\n\n  const throughputTimeSeries = Object.keys(dataByGroup).map(groupName => {\n    const groupData = dataByGroup[groupName];\n\n    return zeroFillSeries(\n      {\n        seriesName: groupName,\n        data: groupData.map(datum => ({\n          value: datum.throughput,\n          name: datum.interval,\n        })),\n      },\n      moment.duration(1, 'day'),\n      startTime,\n      endTime\n    );\n  });\n\n  const totalTimeSeries = Object.keys(dataByGroup).map(groupName => {\n    const groupData = dataByGroup[groupName];\n\n    return zeroFillSeries(\n      {\n        seriesName: groupName,\n        data: groupData.map(datum => ({\n          value: datum.total_time,\n          name: datum.interval,\n        })),\n      },\n      moment.duration(1, 'day'),\n      startTime,\n      endTime\n    );\n  });\n\n  const p50Series = Object.keys(dataByGroup).map(groupName => {\n    const groupData = dataByGroup[groupName];\n\n    return zeroFillSeries(\n      {\n        seriesName: groupName,\n        data: groupData.map(datum => ({\n          value: datum.p50,\n          name: datum.interval,\n        })),\n      },\n      moment.duration(1, 'day'),\n      startTime,\n      endTime\n    );\n  });\n\n  return (\n    <ChartsContainer>\n      <ChartsContainerItem>\n        <ChartPanel title={t('Total Time')}>\n          <Chart\n            statsPeriod=\"24h\"\n            height={100}\n            data={totalTimeSeries}\n            start=\"\"\n            end=\"\"\n            loading={isLoading}\n            utc={false}\n            grid={{\n              left: '0',\n              right: '0',\n              top: '8px',\n              bottom: '0',\n            }}\n            definedAxisTicks={4}\n            stacked\n            chartColors={themes.charts.getColorPalette(2)}\n            disableXAxis\n          />\n        </ChartPanel>\n      </ChartsContainerItem>\n\n      <ChartsContainerItem>\n        <ChartPanel title={t('Throughput')}>\n          <Chart\n            statsPeriod=\"24h\"\n            height={100}\n            data={throughputTimeSeries}\n            start=\"\"\n            end=\"\"\n            loading={isLoading}\n            utc={false}\n            grid={{\n              left: '0',\n              right: '0',\n              top: '8px',\n              bottom: '0',\n            }}\n            definedAxisTicks={4}\n            stacked\n            isLineChart\n            chartColors={themes.charts.getColorPalette(2)}\n            disableXAxis\n          />\n        </ChartPanel>\n      </ChartsContainerItem>\n\n      <ChartsContainerItem>\n        <ChartPanel title={t('p50')}>\n          <Chart\n            statsPeriod=\"24h\"\n            height={100}\n            data={p50Series}\n            start=\"\"\n            end=\"\"\n            loading={isLoading}\n            utc={false}\n            grid={{\n              left: '0',\n              right: '0',\n              top: '8px',\n              bottom: '0',\n            }}\n            definedAxisTicks={4}\n            stacked\n            isLineChart\n            chartColors={themes.charts.getColorPalette(2)}\n            disableXAxis\n          />\n        </ChartPanel>\n      </ChartsContainerItem>\n    </ChartsContainer>\n  );\n}\n\nexport const getSpanTotalTimeChartQuery = (\n  datetime: DateTimeObject,\n  descriptionFilter: string | undefined,\n  groupingColumn: string,\n  conditions: string[] = []\n) => {\n  const {start_timestamp, end_timestamp} = datetimeToClickhouseFilterTimestamps(datetime);\n  const validConditions = conditions.filter(Boolean);\n\n  return `SELECT\n    ${groupingColumn ? `${groupingColumn} AS primary_group,` : ''}\n    count() AS throughput,\n    sum(exclusive_time) AS total_time,\n    quantile(0.50)(exclusive_time) AS p50,\n    toStartOfInterval(start_timestamp, INTERVAL 1 DAY) as interval\n    FROM spans_experimental_starfish\n    WHERE greaterOrEquals(start_timestamp, '${start_timestamp}')\n    ${end_timestamp ? `AND lessOrEquals(start_timestamp, '${end_timestamp}')` : ''}\n    ${validConditions.length > 0 ? 'AND' : ''}\n    ${validConditions.join(' AND ')}\n    ${descriptionFilter ? `AND match(lower(description), '${descriptionFilter}')` : ''}\n    GROUP BY ${groupingColumn ? 'primary_group, ' : ''} interval\n    ORDER BY interval ASC\n  `;\n};\n\nconst ChartsContainer = styled('div')`\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  gap: ${space(2)};\n`;\n\nconst ChartsContainerItem = styled('div')`\n  flex: 1;\n`;\n","export type Cluster = {\n  condition: (value: any) => string;\n  label: string;\n  name: string;\n  description_label?: string;\n  domain_label?: string;\n  explanation?: string;\n  grouping_column?: string;\n  grouping_condition?: (value: any) => () => string;\n  isDynamic?: boolean;\n  value?: string;\n};\n\nexport const CLUSTERS: Record<string, Cluster> = {\n  top: {\n    name: 'top',\n    label: 'All',\n    explanation: 'Time Spent',\n    condition: () => '',\n    grouping_column: \"module IN ['db', 'http'] ? concat('top.',  module) : 'top.other'\",\n  },\n  'top.db': {\n    name: 'top.db',\n    label: 'Database',\n    explanation: 'Database Operations',\n    description_label: 'Query',\n    domain_label: 'Table',\n    condition: () => \"module == 'db'\",\n    grouping_column:\n      \"action IN ['SELECT', 'INSERT'] ? concat('db.',  lower(action)) : 'db.other'\",\n  },\n  'db.select': {\n    name: 'db.select',\n    label: 'SELECT',\n    condition: () => \"action == 'SELECT'\",\n  },\n  'db.insert': {\n    name: 'db.insert',\n    label: 'INSERT',\n    condition: () => \"action == 'INSERT'\",\n  },\n  'db.other': {\n    name: 'db.other',\n    label: 'Other',\n    condition: () => \"action NOT IN ['SELECT', 'INSERT']\",\n    grouping_column: 'action',\n    grouping_condition: value => () => `action == '${value}'`,\n  },\n  'top.http': {\n    name: 'top.http',\n    label: 'HTTP',\n    explanation: 'HTTP Server vs. Client',\n    description_label: 'URL',\n    domain_label: 'Host',\n    condition: () => \"module == 'http'\",\n    grouping_column: \"concat('http.client.',  lower(action))\",\n  },\n  'top.other': {\n    name: 'top.other',\n    label: 'Other',\n    condition: () => \"module NOT IN ['http', 'db']\",\n    grouping_column: \"splitByChar('.', span_operation)[1]\",\n    grouping_condition: value => () => `splitByChar('.', span_operation)[1] = '${value}'`,\n  },\n  'http.client.get': {\n    name: 'http.client.get',\n    label: 'GET',\n    explanation: 'Domains',\n    condition: () => \"action == 'GET'\",\n    grouping_column: 'domain',\n    grouping_condition: value => () => `domain = '${value}'`,\n  },\n  'http.client.post': {\n    name: 'http.client.post',\n    label: 'POST',\n    condition: () => \"action == 'POST'\",\n  },\n  'http.client.other': {\n    name: 'http.client.other',\n    label: 'Other',\n    condition: () => \"action NOT IN ['GET', 'POST']\",\n  },\n};\n","import {DateTimeObject} from 'sentry/components/charts/utils';\nimport {datetimeToClickhouseFilterTimestamps} from 'sentry/views/starfish/utils/dates';\n\nexport const getTimeSpentQuery = (\n  descriptionFilter: string | undefined,\n  groupingColumn: string,\n  conditions: string[] = []\n) => {\n  const validConditions = conditions.filter(Boolean);\n\n  return `SELECT\n    ${groupingColumn} AS primary_group,\n    sum(exclusive_time) AS exclusive_time\n    FROM spans_experimental_starfish\n    WHERE 1 = 1\n    ${validConditions.length > 0 ? 'AND' : ''}\n    ${validConditions.join(' AND ')}\n    ${descriptionFilter ? `AND match(lower(description), '${descriptionFilter}')` : ''}\n    GROUP BY primary_group\n  `;\n};\n\nexport const getSpanListQuery = (\n  descriptionFilter: string | undefined,\n  datetime: DateTimeObject,\n  conditions: string[] = [],\n  orderBy: string,\n  limit: number\n) => {\n  const {start_timestamp, end_timestamp} = datetimeToClickhouseFilterTimestamps(datetime);\n  const validConditions = conditions.filter(Boolean);\n\n  return `SELECT\n    group_id, span_operation, domain, description,\n    sum(exclusive_time) as total_exclusive_time,\n    uniq(transaction) as transactions,\n    quantile(0.50)(exclusive_time) as p50,\n    quantile(0.75)(exclusive_time) as p75\n    FROM spans_experimental_starfish\n    WHERE greaterOrEquals(start_timestamp, '${start_timestamp}')\n    ${validConditions.length > 0 ? 'AND' : ''}\n    ${validConditions.join(' AND ')}\n    ${end_timestamp ? `AND lessOrEquals(start_timestamp, '${end_timestamp}')` : ''}\n    ${descriptionFilter ? `AND match(lower(description), '${descriptionFilter}')` : ''}\n    GROUP BY group_id, span_operation, domain, description\n    ORDER BY ${orderBy ?? 'count'} desc\n    ${limit ? `LIMIT ${limit}` : ''}`;\n};\n\nexport const getSpansTrendsQuery = (\n  descriptionFilter: string | undefined,\n  datetime: DateTimeObject,\n  groupIDs: string[]\n) => {\n  const {start_timestamp, end_timestamp} = datetimeToClickhouseFilterTimestamps(datetime);\n\n  return `\n    SELECT\n    group_id, span_operation,\n    toStartOfInterval(start_timestamp, INTERVAL 1 DAY) as interval,\n    quantile(0.50)(exclusive_time) as percentile_value\n    FROM spans_experimental_starfish\n    WHERE greaterOrEquals(start_timestamp, '${start_timestamp}')\n    ${end_timestamp ? `AND lessOrEquals(start_timestamp, '${end_timestamp}')` : ''}\n    AND group_id IN (${groupIDs.map(id => `'${id}'`).join(',')})\n    ${descriptionFilter ? `AND match(lower(description), '${descriptionFilter}')` : ''}\n    GROUP BY group_id, span_operation, interval\n    ORDER BY interval asc\n  `;\n};\n","import styled from '@emotion/styled';\nimport {Location} from 'history';\nimport moment from 'moment';\n\nimport Duration from 'sentry/components/duration';\nimport GridEditable, {\n  COL_WIDTH_UNDEFINED,\n  GridColumnHeader,\n  GridColumnOrder,\n} from 'sentry/components/gridEditable';\nimport SortLink from 'sentry/components/gridEditable/sortLink';\nimport Link from 'sentry/components/links/link';\nimport {CHART_PALETTE} from 'sentry/constants/chartPalette';\nimport {Series} from 'sentry/types/echarts';\nimport {TableColumnSort} from 'sentry/views/discover/table/types';\nimport Sparkline from 'sentry/views/starfish/components/sparkline';\nimport {zeroFillSeries} from 'sentry/views/starfish/utils/zeroFillSeries';\n\nimport type {Cluster} from './clusters';\n\ntype Props = {\n  clusters: Cluster[];\n  isLoading: boolean;\n  location: Location;\n  onSetOrderBy: (orderBy: string) => void;\n  orderBy: string;\n  spansData: SpanDataRow[];\n  spansTrendsData: SpanTrendDataRow[];\n};\n\nexport type SpanDataRow = {\n  description: string;\n  group_id: string;\n  span_operation: string;\n};\n\nexport type SpanTrendDataRow = {\n  group_id: string;\n  interval: string;\n  percentile_value: string;\n  span_operation: string;\n};\n\nexport default function SpansTable({\n  location,\n  spansData,\n  orderBy,\n  onSetOrderBy,\n  clusters,\n  spansTrendsData,\n  isLoading,\n}: Props) {\n  const spansTrendsGrouped = {};\n\n  spansTrendsData?.forEach(({group_id, span_operation, interval, percentile_value}) => {\n    if (span_operation in spansTrendsGrouped) {\n      if (group_id in spansTrendsGrouped[span_operation]) {\n        return spansTrendsGrouped[span_operation][group_id].push({\n          name: interval,\n          value: percentile_value,\n        });\n      }\n      return (spansTrendsGrouped[span_operation][group_id] = [\n        {name: interval, value: percentile_value},\n      ]);\n    }\n    return (spansTrendsGrouped[span_operation] = {\n      [group_id]: [{name: interval, value: percentile_value}],\n    });\n  });\n\n  const combinedSpansData = spansData?.map(spanData => {\n    const {group_id, span_operation} = spanData;\n    if (spansTrendsGrouped[span_operation] === undefined) {\n      return spanData;\n    }\n    const percentile_trend: Series = {\n      seriesName: 'percentile_trend',\n      data: spansTrendsGrouped[span_operation][group_id],\n    };\n\n    const zeroFilled = zeroFillSeries(percentile_trend, moment.duration(1, 'day'));\n    return {...spanData, percentile_trend: zeroFilled};\n  });\n\n  return (\n    <GridEditable\n      isLoading={isLoading}\n      data={combinedSpansData}\n      columnOrder={getColumns(clusters)}\n      columnSortBy={\n        orderBy ? [] : [{key: orderBy, order: 'desc'} as TableColumnSort<string>]\n      }\n      grid={{\n        renderHeadCell: getRenderHeadCell(orderBy, onSetOrderBy),\n        renderBodyCell,\n      }}\n      location={location}\n    />\n  );\n}\n\nfunction getRenderHeadCell(orderBy: string, onSetOrderBy: (orderBy: string) => void) {\n  function renderHeadCell(column: GridColumnHeader): React.ReactNode {\n    return (\n      <SortLink\n        align=\"left\"\n        canSort={column.key !== 'percentile_trend'}\n        direction={orderBy === column.key ? 'desc' : undefined}\n        onClick={() => {\n          onSetOrderBy(`${column.key}`);\n        }}\n        title={column.name}\n        generateSortLink={() => {\n          return {\n            ...location,\n          };\n        }}\n      />\n    );\n  }\n\n  return renderHeadCell;\n}\n\nfunction renderBodyCell(column: GridColumnHeader, row: SpanDataRow): React.ReactNode {\n  if (column.key === 'percentile_trend' && row[column.key]) {\n    return (\n      <Sparkline\n        color={CHART_PALETTE[3][0]}\n        series={row[column.key]}\n        width={column.width ? column.width - column.width / 5 : undefined}\n      />\n    );\n  }\n\n  if (column.key === 'description') {\n    return (\n      <OverflowEllipsisTextContainer>\n        <Link to={`/starfish/span/${encodeURIComponent(row.group_id)}`}>\n          {row.description}\n        </Link>\n      </OverflowEllipsisTextContainer>\n    );\n  }\n\n  if (column.key.toString().match(/^p\\d\\d/) || column.key === 'total_exclusive_time') {\n    return <Duration seconds={row[column.key] / 1000} fixedDigits={2} abbreviation />;\n  }\n\n  return row[column.key];\n}\n\nfunction getColumns(clusters: Cluster[]): GridColumnOrder[] {\n  const secondCluster = clusters.at(1);\n  const description =\n    clusters.findLast(cluster => Boolean(cluster.description_label))?.description_label ||\n    'Description';\n\n  const domain =\n    clusters.findLast(cluster => Boolean(cluster.domain_label))?.domain_label || 'Domain';\n\n  const order: Array<GridColumnOrder | false> = [\n    !secondCluster && {\n      key: 'span_operation',\n      name: 'Operation',\n      width: COL_WIDTH_UNDEFINED,\n    },\n    {\n      key: 'description',\n      name: description,\n      width: COL_WIDTH_UNDEFINED,\n    },\n    !!secondCluster && {\n      key: 'domain',\n      name: domain,\n      width: COL_WIDTH_UNDEFINED,\n    },\n    {\n      key: 'total_exclusive_time',\n      name: 'Total Time',\n      width: 250,\n    },\n    {\n      key: 'transactions',\n      name: 'Transactions',\n      width: COL_WIDTH_UNDEFINED,\n    },\n    {\n      key: 'p50',\n      name: 'p50',\n      width: COL_WIDTH_UNDEFINED,\n    },\n    {\n      key: 'percentile_trend',\n      name: 'p50 Trend',\n      width: 250,\n    },\n  ];\n\n  return order.filter((x): x is GridColumnOrder => Boolean(x));\n}\n\nexport const OverflowEllipsisTextContainer = styled('span')`\n  text-overflow: ellipsis;\n  overflow: hidden;\n  white-space: nowrap;\n`;\n","import {Fragment, useState} from 'react';\nimport styled from '@emotion/styled';\nimport {useQueries, useQuery} from '@tanstack/react-query';\nimport {Location} from 'history';\nimport keyBy from 'lodash/keyBy';\nimport _orderBy from 'lodash/orderBy';\nimport sumBy from 'lodash/sumBy';\n\nimport DatePageFilter from 'sentry/components/datePageFilter';\nimport SearchBar from 'sentry/components/searchBar';\nimport TagDistributionMeter from 'sentry/components/tagDistributionMeter';\nimport {space} from 'sentry/styles/space';\nimport usePageFilters from 'sentry/utils/usePageFilters';\nimport {HostDetails} from 'sentry/views/starfish/modules/APIModule/hostDetails';\nimport {HOST} from 'sentry/views/starfish/utils/constants';\nimport {SpanTimeCharts} from 'sentry/views/starfish/views/spans/spanTimeCharts';\n\nimport {CLUSTERS} from './clusters';\nimport {getSpanListQuery, getSpansTrendsQuery, getTimeSpentQuery} from './queries';\nimport type {SpanDataRow, SpanTrendDataRow} from './spansTable';\nimport SpansTable from './spansTable';\n\nconst LIMIT: number = 25;\n\ntype Props = {\n  location: Location;\n};\n\ntype State = {\n  orderBy: string;\n};\n\nexport default function SpansView(props: Props) {\n  const pageFilter = usePageFilters();\n  const [state, setState] = useState<State>({orderBy: 'total_exclusive_time'});\n\n  const [searchTerm, setSearchTerm] = useState<string>('');\n  const [didConfirmSearch, setDidConfirmSearch] = useState<boolean>(false);\n  const {orderBy} = state;\n\n  const [clusterPath, setClusterPath] = useState<string[]>(['top']);\n  const currentClusters = clusterPath.map(\n    clusterName =>\n      CLUSTERS[clusterName] || {\n        isDynamic: true,\n        name: clusterName.split(':')[1],\n        value: clusterName.split(':')[1],\n        parentClusterName: clusterName.split(':')[0],\n      }\n  );\n\n  const descriptionFilter = didConfirmSearch && searchTerm ? `${searchTerm}` : undefined;\n\n  const currentCluster = currentClusters.at(-1);\n  if (currentCluster?.isDynamic) {\n    const previousCluster = currentClusters.at(-2);\n    currentCluster.condition =\n      previousCluster?.grouping_condition?.(currentCluster.name) || (() => '');\n  }\n\n  const lastStaticCluster = currentClusters.findLast(cluster => !cluster.isDynamic);\n\n  const clusterBreakdowns = useQueries({\n    queries: currentClusters.map(cluster => {\n      return {\n        queryKey: ['clusterBreakdown', descriptionFilter, cluster.name],\n        queryFn: () =>\n          fetch(\n            `${HOST}/?query=${getTimeSpentQuery(\n              descriptionFilter,\n              cluster.grouping_column || '',\n              currentClusters.map(c => c.condition(c.name))\n            )}`\n          ).then(res => res.json()),\n        retry: false,\n        enabled: Boolean(cluster.grouping_column),\n        initialData: [],\n      };\n    }),\n  });\n\n  const {isLoading: areSpansLoading, data: spansData} = useQuery<SpanDataRow[]>({\n    queryKey: ['spans', currentCluster?.name || 'none', descriptionFilter, orderBy],\n    queryFn: () =>\n      fetch(\n        `${HOST}/?query=${getSpanListQuery(\n          descriptionFilter,\n          pageFilter.selection.datetime,\n          currentClusters.map(c => c.condition(c.name)),\n          orderBy,\n          LIMIT\n        )}`\n      ).then(res => res.json()),\n    retry: false,\n    initialData: [],\n  });\n\n  const groupIDs = spansData.map(({group_id}) => group_id);\n\n  const {isLoading: areSpansTrendsLoading, data: spansTrendsData} = useQuery<\n    SpanTrendDataRow[]\n  >({\n    queryKey: ['spansTrends', currentCluster?.name || 'none', descriptionFilter],\n    queryFn: () =>\n      fetch(\n        `${HOST}/?query=${getSpansTrendsQuery(\n          descriptionFilter,\n          pageFilter.selection.datetime,\n          groupIDs\n        )}`\n      ).then(res => res.json()),\n    retry: false,\n    initialData: [],\n    enabled: groupIDs.length > 0,\n  });\n\n  return (\n    <Fragment>\n      <div>\n        <FilterOptionsContainer>\n          <DatePageFilter alignDropdown=\"left\" />\n        </FilterOptionsContainer>\n\n        {currentClusters.map((cluster, depth) => {\n          const clusterBreakdownResponse = clusterBreakdowns[depth];\n          if (\n            !clusterBreakdownResponse ||\n            clusterBreakdownResponse.isLoading ||\n            clusterBreakdownResponse.error\n          ) {\n            return null;\n          }\n\n          const exclusiveTimeBySubCluster = keyBy(\n            clusterBreakdownResponse.data,\n            'primary_group'\n          );\n\n          const clusters = Object.keys(exclusiveTimeBySubCluster);\n\n          const segments = _orderBy(\n            (clusters || []).map(clusterName => {\n              const subCluster = CLUSTERS[clusterName];\n\n              return {\n                name: subCluster?.label || clusterName,\n                value: clusterName,\n                count: exclusiveTimeBySubCluster[clusterName]?.exclusive_time,\n                url: '',\n              };\n            }),\n            'count',\n            'desc'\n          );\n\n          if (segments.length === 0) {\n            return null;\n          }\n\n          return (\n            <TagDistributionMeter\n              key={cluster.name}\n              title={cluster.explanation || cluster.label}\n              onTagClick={(_name, tag) => {\n                const incomingCluster = CLUSTERS[tag.value];\n                const bottomCluster = currentClusters.at(-1);\n\n                const incomingClusterName = incomingCluster\n                  ? tag.value\n                  : `${bottomCluster?.name || ''}:${tag.value}`;\n\n                setClusterPath([...clusterPath.slice(0, depth + 1), incomingClusterName]);\n              }}\n              segments={segments}\n              totalValues={sumBy(segments, 'count')}\n            />\n          );\n        })}\n      </div>\n\n      <div>\n        <button onClick={() => setClusterPath(['top'])}>Reset</button>\n      </div>\n\n      <SearchBar\n        onChange={value => {\n          setSearchTerm(value);\n          setDidConfirmSearch(false);\n        }}\n        placeholder=\"Search Spans\"\n        query={searchTerm}\n        onSearch={() => {\n          setDidConfirmSearch(true);\n        }}\n      />\n\n      {lastStaticCluster?.name === 'http.client.get' && currentCluster?.value && (\n        <HostDetails host={currentCluster.value} />\n      )}\n\n      <SpanTimeCharts\n        descriptionFilter={descriptionFilter || ''}\n        clusters={currentClusters}\n      />\n\n      <SpansTable\n        location={props.location}\n        clusters={currentClusters}\n        isLoading={areSpansLoading || areSpansTrendsLoading}\n        spansData={spansData}\n        orderBy={orderBy}\n        onSetOrderBy={newOrderBy => setState({orderBy: newOrderBy})}\n        spansTrendsData={spansTrendsData}\n      />\n    </Fragment>\n  );\n}\n\nconst FilterOptionsContainer = styled('div')`\n  display: flex;\n  flex-direction: row;\n  gap: ${space(1)};\n  margin-bottom: ${space(2)};\n`;\n","import {RouteComponentProps} from 'react-router';\nimport {Location} from 'history';\n\nimport * as Layout from 'sentry/components/layouts/thirds';\nimport {t} from 'sentry/locale';\nimport {\n  PageErrorAlert,\n  PageErrorProvider,\n} from 'sentry/utils/performance/contexts/pageError';\n\nimport SpansView from './spansView';\n\ntype Props = {\n  location: Location;\n} & RouteComponentProps<{groupId: string}, {}>;\n\nexport default function Spans(props: Props) {\n  return (\n    <Layout.Page>\n      <PageErrorProvider>\n        <Layout.Header>\n          <Layout.HeaderContent>\n            <Layout.Title>{t('Spans')}</Layout.Title>\n          </Layout.HeaderContent>\n        </Layout.Header>\n\n        <Layout.Body>\n          <Layout.Main fullWidth>\n            <PageErrorAlert />\n            <SpansView location={props.location} />\n          </Layout.Main>\n        </Layout.Body>\n      </PageErrorProvider>\n    </Layout.Page>\n  );\n}\n","var bind = require('../internals/function-bind-context');\nvar IndexedObject = require('../internals/indexed-object');\nvar toObject = require('../internals/to-object');\nvar lengthOfArrayLike = require('../internals/length-of-array-like');\n\n// `Array.prototype.{ findLast, findLastIndex }` methods implementation\nvar createMethod = function (TYPE) {\n  var IS_FIND_LAST_INDEX = TYPE == 1;\n  return function ($this, callbackfn, that) {\n    var O = toObject($this);\n    var self = IndexedObject(O);\n    var boundFunction = bind(callbackfn, that);\n    var index = lengthOfArrayLike(self);\n    var value, result;\n    while (index-- > 0) {\n      value = self[index];\n      result = boundFunction(value, index, O);\n      if (result) switch (TYPE) {\n        case 0: return value; // findLast\n        case 1: return index; // findLastIndex\n      }\n    }\n    return IS_FIND_LAST_INDEX ? -1 : undefined;\n  };\n};\n\nmodule.exports = {\n  // `Array.prototype.findLast` method\n  // https://github.com/tc39/proposal-array-find-from-last\n  findLast: createMethod(0),\n  // `Array.prototype.findLastIndex` method\n  // https://github.com/tc39/proposal-array-find-from-last\n  findLastIndex: createMethod(1)\n};\n","var uncurryThis = require('../internals/function-uncurry-this-clause');\nvar aCallable = require('../internals/a-callable');\nvar NATIVE_BIND = require('../internals/function-bind-native');\n\nvar bind = uncurryThis(uncurryThis.bind);\n\n// optional / simple context binding\nmodule.exports = function (fn, that) {\n  aCallable(fn);\n  return that === undefined ? fn : NATIVE_BIND ? bind(fn, that) : function (/* ...args */) {\n    return fn.apply(that, arguments);\n  };\n};\n","var classofRaw = require('../internals/classof-raw');\nvar uncurryThis = require('../internals/function-uncurry-this');\n\nmodule.exports = function (fn) {\n  // Nashorn bug:\n  //   https://github.com/zloirock/core-js/issues/1128\n  //   https://github.com/zloirock/core-js/issues/1130\n  if (classofRaw(fn) === 'Function') return uncurryThis(fn);\n};\n","'use strict';\nvar $ = require('../internals/export');\nvar $findLast = require('../internals/array-iteration-from-last').findLast;\nvar addToUnscopables = require('../internals/add-to-unscopables');\n\n// `Array.prototype.findLast` method\n// https://github.com/tc39/proposal-array-find-from-last\n$({ target: 'Array', proto: true }, {\n  findLast: function findLast(callbackfn /* , that = undefined */) {\n    return $findLast(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n  }\n});\n\naddToUnscopables('findLast');\n","/**\n * The base implementation of `_.sum` and `_.sumBy` without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} array The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {number} Returns the sum.\n */\nfunction baseSum(array, iteratee) {\n  var result,\n      index = -1,\n      length = array.length;\n\n  while (++index < length) {\n    var current = iteratee(array[index]);\n    if (current !== undefined) {\n      result = result === undefined ? current : (result + current);\n    }\n  }\n  return result;\n}\n\nmodule.exports = baseSum;\n","var baseIteratee = require('./_baseIteratee'),\n    baseSum = require('./_baseSum');\n\n/**\n * This method is like `_.sum` except that it accepts `iteratee` which is\n * invoked for each element in `array` to generate the value to be summed.\n * The iteratee is invoked with one argument: (value).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Math\n * @param {Array} array The array to iterate over.\n * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n * @returns {number} Returns the sum.\n * @example\n *\n * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];\n *\n * _.sumBy(objects, function(o) { return o.n; });\n * // => 20\n *\n * // The `_.property` iteratee shorthand.\n * _.sumBy(objects, 'n');\n * // => 20\n */\nfunction sumBy(array, iteratee) {\n  return (array && array.length)\n    ? baseSum(array, baseIteratee(iteratee, 2))\n    : 0;\n}\n\nmodule.exports = sumBy;\n"],"names":["SearchBar","_ref","query","queryProp","defaultQuery","onChange","onSearch","width","size","className","trailing","inputProps","inputRef","useRef","setQuery","useState","useEffect","onQueryChange","useCallback","e","value","target","onSubmit","preventDefault","current","blur","clearSearch","_jsx","FormWrap","children","_jsxs","InputGroup","disablePointerEvents","IconSearch","color","StyledInput","ref","type","name","autoComplete","SearchBarTrailingButton","borderless","onClick","icon","IconClose","t","displayName","_styled","styles","p","Button","theme","subText","space","SpanTimeCharts","descriptionFilter","clusters","themes","useTheme","pageFilter","usePageFilters","_","num","unit","selection","datetime","period","match","PERIOD_REGEX","startTime","moment","subtract","start","endTime","end","undefined","lastCluster","at","isLoading","data","useSpansQuery","queryString","getSpanTotalTimeChartQuery","grouping_column","map","c","condition","initialData","dataByGroup","groupBy","throughputTimeSeries","Object","keys","groupName","groupData","zeroFillSeries","seriesName","datum","throughput","interval","totalTimeSeries","total_time","p50Series","p50","ChartsContainer","ChartsContainerItem","ChartPanel","title","Chart","statsPeriod","height","loading","utc","grid","left","right","top","bottom","definedAxisTicks","stacked","chartColors","charts","getColorPalette","disableXAxis","isLineChart","groupingColumn","conditions","arguments","length","start_timestamp","end_timestamp","datetimeToClickhouseFilterTimestamps","validConditions","filter","Boolean","join","CLUSTERS","label","explanation","description_label","domain_label","grouping_condition","getTimeSpentQuery","getSpanListQuery","orderBy","limit","getSpansTrendsQuery","groupIDs","id","SpansTable","location","spansData","onSetOrderBy","spansTrendsData","spansTrendsGrouped","forEach","_ref2","group_id","span_operation","percentile_value","push","combinedSpansData","spanData","percentile_trend","zeroFilled","GridEditable","columnOrder","getColumns","columnSortBy","key","order","renderHeadCell","getRenderHeadCell","renderBodyCell","column","SortLink","align","canSort","direction","generateSortLink","row","Sparkline","CHART_PALETTE","series","OverflowEllipsisTextContainer","Link","to","encodeURIComponent","description","toString","Duration","seconds","fixedDigits","abbreviation","secondCluster","findLast","cluster","domain","COL_WIDTH_UNDEFINED","x","LIMIT","SpansView","props","state","setState","searchTerm","setSearchTerm","didConfirmSearch","setDidConfirmSearch","clusterPath","setClusterPath","currentClusters","clusterName","isDynamic","split","parentClusterName","currentCluster","previousCluster","lastStaticCluster","clusterBreakdowns","useQueries","queries","queryKey","queryFn","fetch","HOST","then","res","json","retry","enabled","areSpansLoading","useQuery","areSpansTrendsLoading","Fragment","FilterOptionsContainer","DatePageFilter","alignDropdown","depth","clusterBreakdownResponse","error","exclusiveTimeBySubCluster","keyBy","segments","_orderBy","subCluster","count","exclusive_time","url","TagDistributionMeter","onTagClick","_name","tag","incomingCluster","bottomCluster","incomingClusterName","slice","totalValues","sumBy","placeholder","HostDetails","host","newOrderBy","Spans","Layout","PageErrorProvider","fullWidth","PageErrorAlert","bind","IndexedObject","toObject","lengthOfArrayLike","createMethod","TYPE","IS_FIND_LAST_INDEX","$this","callbackfn","that","O","self","boundFunction","index","module","exports","findLastIndex","uncurryThis","aCallable","NATIVE_BIND","fn","apply","classofRaw","$","$findLast","addToUnscopables","proto","this","array","iteratee","result","baseIteratee","baseSum"],"sourceRoot":""}