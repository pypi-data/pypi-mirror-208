{"version":3,"file":"chunks/app_views_performance_transactionSummary_transactionOverview_tagExplorer_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/gridEditable/sortLink.tsx","webpack:///./app/utils/performance/segmentExplorer/segmentExplorerQuery.tsx","webpack:///./app/views/performance/transactionSummary/transactionOverview/tagExplorer.tsx"],"sourcesContent":["import {browserHistory} from 'react-router';\nimport styled from '@emotion/styled';\nimport {LocationDescriptorObject} from 'history';\n\nimport Link from 'sentry/components/links/link';\nimport {IconArrow} from 'sentry/icons';\n\nexport type Alignments = 'left' | 'right' | undefined;\nexport type Directions = 'desc' | 'asc' | undefined;\n\ntype Props = {\n  align: Alignments;\n  canSort: boolean;\n  direction: Directions;\n  generateSortLink: () => LocationDescriptorObject | undefined;\n  title: React.ReactNode;\n  onClick?: (e: React.MouseEvent<HTMLAnchorElement>) => void;\n  replace?: boolean;\n};\n\nfunction SortLink({\n  align,\n  title,\n  canSort,\n  generateSortLink,\n  onClick,\n  direction,\n  replace,\n}: Props) {\n  const target = generateSortLink();\n\n  if (!target || !canSort) {\n    return <StyledNonLink align={align}>{title}</StyledNonLink>;\n  }\n\n  const arrow = !direction ? null : (\n    <StyledIconArrow size=\"xs\" direction={direction === 'desc' ? 'down' : 'up'} />\n  );\n\n  const handleOnClick: React.MouseEventHandler<HTMLAnchorElement> = e => {\n    if (replace) {\n      e.preventDefault();\n      browserHistory.replace(target);\n    }\n    onClick?.(e);\n  };\n\n  return (\n    <StyledLink align={align} to={target} onClick={handleOnClick}>\n      {title} {arrow}\n    </StyledLink>\n  );\n}\n\ntype LinkProps = React.ComponentPropsWithoutRef<typeof Link>;\ntype StyledLinkProps = LinkProps & {align: Alignments};\n\nconst StyledLink = styled((props: StyledLinkProps) => {\n  // @ts-ignore It doesn't look like the `css` property is a part of the props,\n  // but prior to this style of destructure-omitting it, it was being omitted\n  // with lodash.omit. I mean keeping it omitted here just in case.\n  const {align: _align, css: _css, ...forwardProps} = props;\n  return <Link {...forwardProps} />;\n})`\n  display: block;\n  width: 100%;\n  white-space: nowrap;\n  color: inherit;\n\n  &:hover,\n  &:active,\n  &:focus,\n  &:visited {\n    color: inherit;\n  }\n\n  ${(p: StyledLinkProps) => (p.align ? `text-align: ${p.align};` : '')}\n`;\n\nconst StyledNonLink = styled('div')<{align: Alignments}>`\n  display: block;\n  width: 100%;\n  white-space: nowrap;\n  ${(p: {align: Alignments}) => (p.align ? `text-align: ${p.align};` : '')}\n`;\n\nconst StyledIconArrow = styled(IconArrow)`\n  vertical-align: top;\n`;\n\nexport default SortLink;\n","import {EventQuery} from 'sentry/actionCreators/events';\nimport {LocationQuery} from 'sentry/utils/discover/eventView';\nimport GenericDiscoverQuery, {\n  DiscoverQueryProps,\n  GenericChildrenProps,\n} from 'sentry/utils/discover/genericDiscoverQuery';\n\n/**\n * An individual row in a Segment explorer result\n */\nexport type TableDataRow = {\n  aggregate: number;\n  comparison: number;\n  count: number;\n  frequency: number;\n  sumdelta: number;\n  tags_key: string;\n  tags_value: string;\n};\n\nexport type TableData = {\n  data: TableDataRow[];\n  meta: {};\n};\n\n/**\n * A Segment Explorer result including rows and metadata.\n */\n\ntype ChildrenProps = Omit<GenericChildrenProps<TableData>, 'tableData'> & {\n  tableData: TableData | null;\n};\n\ntype QueryProps = DiscoverQueryProps & {\n  aggregateColumn: string;\n  children: (props: ChildrenProps) => React.ReactNode;\n  allTagKeys?: boolean;\n  sort?: string | string[];\n  tagKey?: string;\n};\n\ntype FacetQuery = LocationQuery &\n  EventQuery & {\n    aggregateColumn?: string;\n    allTagKeys?: boolean;\n    sort?: string | string[];\n    tagKey?: string;\n  };\n\nexport function getRequestFunction(_props: QueryProps) {\n  const {aggregateColumn} = _props;\n  function getTagExplorerRequestPayload(props: DiscoverQueryProps) {\n    const {eventView} = props;\n    const apiPayload: FacetQuery = eventView.getEventsAPIPayload(props.location);\n    apiPayload.aggregateColumn = aggregateColumn;\n    apiPayload.sort = _props.sort ? _props.sort : apiPayload.sort;\n    if (_props.allTagKeys) {\n      apiPayload.allTagKeys = _props.allTagKeys;\n    }\n    if (_props.tagKey) {\n      apiPayload.tagKey = _props.tagKey;\n    }\n    return apiPayload;\n  }\n  return getTagExplorerRequestPayload;\n}\n\nfunction shouldRefetchData(prevProps: QueryProps, nextProps: QueryProps) {\n  return (\n    prevProps.aggregateColumn !== nextProps.aggregateColumn ||\n    prevProps.sort !== nextProps.sort ||\n    prevProps.allTagKeys !== nextProps.allTagKeys ||\n    prevProps.tagKey !== nextProps.tagKey\n  );\n}\n\nfunction SegmentExplorerQuery(props: QueryProps) {\n  return (\n    <GenericDiscoverQuery<TableData, QueryProps>\n      route=\"events-facets-performance\"\n      getRequestPayload={getRequestFunction(props)}\n      shouldRefetchData={shouldRefetchData}\n      {...props}\n    />\n  );\n}\n\nexport default SegmentExplorerQuery;\n","import {Component, Fragment} from 'react';\nimport {browserHistory} from 'react-router';\nimport styled from '@emotion/styled';\nimport {Location, LocationDescriptorObject} from 'history';\n\nimport GuideAnchor from 'sentry/components/assistant/guideAnchor';\nimport {Button} from 'sentry/components/button';\nimport {SectionHeading} from 'sentry/components/charts/styles';\nimport GridEditable, {\n  COL_WIDTH_UNDEFINED,\n  GridColumn,\n  GridColumnOrder,\n} from 'sentry/components/gridEditable';\nimport SortLink from 'sentry/components/gridEditable/sortLink';\nimport Link from 'sentry/components/links/link';\nimport Pagination, {CursorHandler} from 'sentry/components/pagination';\nimport PerformanceDuration from 'sentry/components/performanceDuration';\nimport {t} from 'sentry/locale';\nimport {space} from 'sentry/styles/space';\nimport {Organization, Project} from 'sentry/types';\nimport {trackAnalytics} from 'sentry/utils/analytics';\nimport EventView, {fromSorts, isFieldSortable} from 'sentry/utils/discover/eventView';\nimport {fieldAlignment} from 'sentry/utils/discover/fields';\nimport {formatPercentage} from 'sentry/utils/formatters';\nimport SegmentExplorerQuery, {\n  TableData,\n  TableDataRow,\n} from 'sentry/utils/performance/segmentExplorer/segmentExplorerQuery';\nimport {decodeScalar} from 'sentry/utils/queryString';\nimport {MutableSearch} from 'sentry/utils/tokenizeSearch';\nimport CellAction, {Actions, updateQuery} from 'sentry/views/discover/table/cellAction';\nimport {TableColumn} from 'sentry/views/discover/table/types';\n\nimport {\n  platformAndConditionsToPerformanceType,\n  PROJECT_PERFORMANCE_TYPE,\n} from '../../utils';\nimport {\n  SPAN_OPERATION_BREAKDOWN_FILTER_TO_FIELD,\n  SpanOperationBreakdownFilter,\n} from '../filter';\nimport {tagsRouteWithQuery} from '../transactionTags/utils';\nimport {normalizeSearchConditions} from '../utils';\n\nconst TAGS_CURSOR_NAME = 'tags_cursor';\n\ntype ColumnKeys =\n  | 'key'\n  | 'tagValue'\n  | 'aggregate'\n  | 'frequency'\n  | 'comparison'\n  | 'sumdelta';\ntype TagColumn = GridColumnOrder<ColumnKeys> & {\n  column: {\n    kind: string;\n  };\n  field: string;\n  canSort?: boolean;\n};\nexport const TAG_EXPLORER_COLUMN_ORDER: TagColumn[] = [\n  {\n    key: 'key',\n    field: 'key',\n    name: 'Tag Key',\n    width: -1,\n    column: {\n      kind: 'field',\n    },\n  },\n  {\n    key: 'tagValue',\n    field: 'tagValue',\n    name: 'Tag Values',\n    width: -1,\n    column: {\n      kind: 'field',\n    },\n  },\n  {\n    key: 'aggregate',\n    field: 'aggregate',\n    name: 'Avg Duration',\n    width: -1,\n    column: {\n      kind: 'field',\n    },\n    canSort: true,\n  },\n  {\n    key: 'frequency',\n    field: 'frequency',\n    name: 'Frequency',\n    width: -1,\n    column: {\n      kind: 'field',\n    },\n    canSort: true,\n  },\n  {\n    key: 'comparison',\n    field: 'comparison',\n    name: 'Compared To Avg',\n    width: -1,\n    column: {\n      kind: 'field',\n    },\n    canSort: true,\n  },\n  {\n    key: 'sumdelta',\n    field: 'sumdelta',\n    name: 'Total Time Lost',\n    width: -1,\n    column: {\n      kind: 'field',\n    },\n    canSort: true,\n  },\n];\n\nexport const getTransactionField = (\n  currentFilter: SpanOperationBreakdownFilter,\n  projects: Project[],\n  eventView: EventView\n) => {\n  const fieldFromFilter = SPAN_OPERATION_BREAKDOWN_FILTER_TO_FIELD[currentFilter];\n  if (fieldFromFilter) {\n    return fieldFromFilter;\n  }\n\n  const performanceType = platformAndConditionsToPerformanceType(projects, eventView);\n  if (performanceType === PROJECT_PERFORMANCE_TYPE.FRONTEND) {\n    return 'measurements.lcp';\n  }\n\n  return 'transaction.duration';\n};\n\nconst getColumnsWithReplacedDuration = (\n  currentFilter: SpanOperationBreakdownFilter,\n  projects: Project[],\n  eventView: EventView\n) => {\n  const columns = TAG_EXPLORER_COLUMN_ORDER.map(c => ({...c}));\n  const durationColumn = columns.find(c => c.key === 'aggregate');\n\n  if (!durationColumn) {\n    return columns;\n  }\n\n  const fieldFromFilter = SPAN_OPERATION_BREAKDOWN_FILTER_TO_FIELD[currentFilter];\n  if (fieldFromFilter) {\n    durationColumn.name = 'Avg Span Duration';\n    return columns;\n  }\n\n  const performanceType = platformAndConditionsToPerformanceType(projects, eventView);\n  if (performanceType === PROJECT_PERFORMANCE_TYPE.FRONTEND) {\n    durationColumn.name = 'Avg LCP';\n    return columns;\n  }\n\n  return columns;\n};\n\ntype TagValueProps = {\n  row: TableDataRow;\n};\n\nexport function TagValue(props: TagValueProps) {\n  return <div className=\"truncate\">{props.row.tags_value}</div>;\n}\n\ntype Props = {\n  currentFilter: SpanOperationBreakdownFilter;\n  eventView: EventView;\n  location: Location;\n  organization: Organization;\n  projects: Project[];\n  transactionName: string;\n};\n\ntype State = {\n  widths: number[];\n};\nexport class TagExplorer extends Component<Props> {\n  state: State = {\n    widths: [],\n  };\n\n  handleResizeColumn = (columnIndex: number, nextColumn: GridColumn) => {\n    const widths: number[] = [...this.state.widths];\n    widths[columnIndex] = nextColumn.width\n      ? Number(nextColumn.width)\n      : COL_WIDTH_UNDEFINED;\n    this.setState({widths});\n  };\n\n  getColumnOrder = (columns: GridColumnOrder[]) => {\n    const {widths} = this.state;\n    return columns.map((col: GridColumnOrder, i: number) => {\n      if (typeof widths[i] === 'number') {\n        return {...col, width: widths[i]};\n      }\n      return col;\n    });\n  };\n\n  onSortClick(currentSortKind?: string, currentSortField?: string) {\n    const {organization} = this.props;\n    trackAnalytics('performance_views.summary.tag_explorer.sort', {\n      organization,\n      field: currentSortField,\n      direction: currentSortKind,\n    });\n  }\n\n  renderHeadCell(\n    sortedEventView: EventView,\n    tableMeta: TableData['meta'],\n    column: TableColumn<ColumnKeys>,\n    columnInfo: TagColumn\n  ): React.ReactNode {\n    const {location} = this.props;\n    const align = fieldAlignment(column.key, column.type, tableMeta);\n    const field = {field: column.key, width: column.width};\n\n    function generateSortLink(): LocationDescriptorObject | undefined {\n      if (!tableMeta) {\n        return undefined;\n      }\n\n      const nextEventView = sortedEventView.sortOnField(field, tableMeta);\n      const {sort} = nextEventView.generateQueryStringObject();\n\n      return {\n        ...location,\n        query: {...location.query, [TAGS_CURSOR_NAME]: undefined, tagSort: sort},\n      };\n    }\n    const currentSort = sortedEventView.sortForField(field, tableMeta);\n    const canSort = isFieldSortable(field, tableMeta);\n\n    const currentSortKind = currentSort ? currentSort.kind : undefined;\n    const currentSortField = currentSort ? currentSort.field : undefined;\n\n    return (\n      <SortLink\n        align={align}\n        title={columnInfo.name}\n        direction={currentSortKind}\n        canSort={canSort}\n        generateSortLink={generateSortLink}\n        onClick={() => this.onSortClick(currentSortKind, currentSortField)}\n      />\n    );\n  }\n\n  renderHeadCellWithMeta = (\n    sortedEventView: EventView,\n    tableMeta: TableData['meta'],\n    columns: TagColumn[]\n  ) => {\n    return (column: TableColumn<ColumnKeys>, index: number): React.ReactNode =>\n      this.renderHeadCell(sortedEventView, tableMeta, column, columns[index]);\n  };\n\n  handleTagValueClick = (location: Location, tagKey: string, tagValue: string) => {\n    const {organization} = this.props;\n    trackAnalytics('performance_views.summary.tag_explorer.tag_value', {\n      organization,\n    });\n\n    const queryString = decodeScalar(location.query.query);\n    const conditions = new MutableSearch(queryString ?? '');\n\n    conditions.addFilterValues(tagKey, [tagValue]);\n\n    const query = conditions.formatString();\n    browserHistory.push({\n      pathname: location.pathname,\n      query: {\n        ...location.query,\n        query: String(query).trim(),\n      },\n    });\n  };\n\n  handleCellAction = (\n    column: TableColumn<ColumnKeys>,\n    tagValue: React.ReactText,\n    actionRow: any\n  ) => {\n    return (action: Actions) => {\n      const {eventView, location, organization} = this.props;\n      trackAnalytics('performance_views.summary.tag_explorer.cell_action', {\n        organization,\n      });\n\n      const searchConditions = normalizeSearchConditions(eventView.query);\n\n      updateQuery(searchConditions, action, {...column, name: actionRow.id}, tagValue);\n\n      browserHistory.push({\n        pathname: location.pathname,\n        query: {\n          ...location.query,\n          [TAGS_CURSOR_NAME]: undefined,\n          query: searchConditions.formatString(),\n        },\n      });\n    };\n  };\n\n  onTagKeyClick() {\n    const {organization} = this.props;\n    trackAnalytics('performance_views.summary.tag_explorer.visit_tag_key', {\n      organization,\n    });\n  }\n\n  renderBodyCell = (\n    parentProps: Props,\n    column: TableColumn<ColumnKeys>,\n    dataRow: TableDataRow\n  ): React.ReactNode => {\n    const value = dataRow[column.key];\n    const {location, organization, transactionName} = parentProps;\n\n    if (column.key === 'key') {\n      const target = tagsRouteWithQuery({\n        orgSlug: organization.slug,\n        transaction: transactionName,\n        projectID: decodeScalar(location.query.project),\n        query: {...location.query, tagKey: dataRow.tags_key},\n      });\n      return (\n        <Link to={target} onClick={() => this.onTagKeyClick()}>\n          {dataRow.tags_key}\n        </Link>\n      );\n    }\n\n    const allowActions = [Actions.ADD, Actions.EXCLUDE];\n\n    if (column.key === 'tagValue') {\n      const actionRow = {...dataRow, id: dataRow.tags_key};\n      return (\n        <CellAction\n          column={column}\n          dataRow={actionRow}\n          handleCellAction={this.handleCellAction(column, dataRow.tags_value, actionRow)}\n          allowActions={allowActions}\n        >\n          <div className=\"truncate\">{dataRow.tags_value}</div>\n        </CellAction>\n      );\n    }\n\n    if (column.key === 'frequency') {\n      return <AlignRight>{formatPercentage(dataRow.frequency, 0)}</AlignRight>;\n    }\n\n    if (column.key === 'comparison') {\n      const localValue = dataRow.comparison;\n      const pct = formatPercentage(localValue - 1, 0);\n      return (\n        <AlignRight>\n          {localValue > 1 ? t('+%s slower', pct) : t('%s faster', pct)}\n        </AlignRight>\n      );\n    }\n\n    if (column.key === 'aggregate') {\n      return (\n        <AlignRight>\n          <PerformanceDuration abbreviation milliseconds={dataRow.aggregate} />\n        </AlignRight>\n      );\n    }\n\n    if (column.key === 'sumdelta') {\n      return (\n        <AlignRight>\n          <PerformanceDuration abbreviation milliseconds={dataRow.sumdelta} />\n        </AlignRight>\n      );\n    }\n    return value;\n  };\n\n  renderBodyCellWithData = (parentProps: Props) => {\n    return (column: TableColumn<ColumnKeys>, dataRow: TableDataRow): React.ReactNode =>\n      this.renderBodyCell(parentProps, column, dataRow);\n  };\n\n  render() {\n    const {eventView, organization, location, currentFilter, projects, transactionName} =\n      this.props;\n\n    const tagSort = decodeScalar(location.query?.tagSort);\n    const cursor = decodeScalar(location.query?.[TAGS_CURSOR_NAME]);\n\n    const tagEventView = eventView.clone();\n    tagEventView.fields = TAG_EXPLORER_COLUMN_ORDER;\n\n    const tagSorts = fromSorts(tagSort);\n\n    const sortedEventView = tagEventView.withSorts(\n      tagSorts.length\n        ? tagSorts\n        : [\n            {\n              field: 'sumdelta',\n              kind: 'desc',\n            },\n          ]\n    );\n\n    const aggregateColumn = getTransactionField(currentFilter, projects, sortedEventView);\n\n    const adjustedColumns = getColumnsWithReplacedDuration(\n      currentFilter,\n      projects,\n      sortedEventView\n    );\n    const columns = this.getColumnOrder(adjustedColumns);\n\n    const columnSortBy = sortedEventView.getSorts();\n\n    return (\n      <SegmentExplorerQuery\n        eventView={sortedEventView}\n        orgSlug={organization.slug}\n        location={location}\n        aggregateColumn={aggregateColumn}\n        limit={5}\n        cursor={cursor}\n      >\n        {({isLoading, tableData, pageLinks}) => {\n          return (\n            <Fragment>\n              <GuideAnchor target=\"tag_explorer\">\n                <TagsHeader\n                  transactionName={transactionName}\n                  location={location}\n                  organization={organization}\n                  pageLinks={pageLinks}\n                />\n              </GuideAnchor>\n              <GridEditable\n                isLoading={isLoading}\n                data={tableData && tableData.data ? tableData.data : []}\n                columnOrder={columns}\n                columnSortBy={columnSortBy}\n                grid={{\n                  renderHeadCell: this.renderHeadCellWithMeta(\n                    sortedEventView,\n                    tableData?.meta || {},\n                    adjustedColumns\n                  ) as any,\n                  renderBodyCell: this.renderBodyCellWithData(this.props) as any,\n                  onResizeColumn: this.handleResizeColumn as any,\n                }}\n                location={location}\n              />\n            </Fragment>\n          );\n        }}\n      </SegmentExplorerQuery>\n    );\n  }\n}\n\ntype HeaderProps = {\n  location: Location;\n  organization: Organization;\n  pageLinks: string | null;\n  transactionName: string;\n};\n\nfunction TagsHeader(props: HeaderProps) {\n  const {pageLinks, organization, location, transactionName} = props;\n\n  const handleCursor: CursorHandler = (cursor, pathname, query) => {\n    trackAnalytics('performance_views.summary.tag_explorer.change_page', {\n      organization,\n    });\n    browserHistory.push({\n      pathname,\n      query: {...query, [TAGS_CURSOR_NAME]: cursor},\n    });\n  };\n\n  const handleViewAllTagsClick = () => {\n    trackAnalytics('performance_views.summary.tag_explorer.change_page', {\n      organization,\n    });\n  };\n\n  const viewAllTarget = tagsRouteWithQuery({\n    orgSlug: organization.slug,\n    transaction: transactionName,\n    projectID: decodeScalar(location.query.project),\n    query: {...location.query},\n  });\n\n  return (\n    <Header>\n      <div>\n        <SectionHeading>{t('Suspect Tags')}</SectionHeading>\n      </div>\n      <Button\n        onClick={handleViewAllTagsClick}\n        to={viewAllTarget}\n        size=\"xs\"\n        data-test-id=\"tags-explorer-open-tags\"\n      >\n        {t('View All Tags')}\n      </Button>\n      <StyledPagination pageLinks={pageLinks} onCursor={handleCursor} size=\"xs\" />\n    </Header>\n  );\n}\n\nconst AlignRight = styled('div')`\n  text-align: right;\n  font-variant-numeric: tabular-nums;\n  width: 100%;\n`;\n\nconst Header = styled('div')`\n  display: grid;\n  grid-template-columns: 1fr auto auto;\n  margin-bottom: ${space(1)};\n  align-items: center;\n`;\n\nconst StyledPagination = styled(Pagination)`\n  margin: 0 0 0 ${space(1)};\n`;\n"],"names":["SortLink","_ref","align","title","canSort","generateSortLink","onClick","direction","replace","target","_jsx","StyledNonLink","children","arrow","StyledIconArrow","size","_jsxs","StyledLink","to","e","preventDefault","browserHistory","displayName","_styled","props","_align","css","_css","forwardProps","Link","p","IconArrow","name","styles","getRequestFunction","_props","aggregateColumn","eventView","apiPayload","getEventsAPIPayload","location","sort","allTagKeys","tagKey","shouldRefetchData","prevProps","nextProps","SegmentExplorerQuery","GenericDiscoverQuery","route","getRequestPayload","TAGS_CURSOR_NAME","TAG_EXPLORER_COLUMN_ORDER","key","field","width","column","kind","getTransactionField","currentFilter","projects","fieldFromFilter","SPAN_OPERATION_BREAKDOWN_FILTER_TO_FIELD","platformAndConditionsToPerformanceType","PROJECT_PERFORMANCE_TYPE","TagValue","className","row","tags_value","TagExplorer","Component","constructor","arguments","_defineProperty","widths","columnIndex","nextColumn","this","state","Number","COL_WIDTH_UNDEFINED","setState","columns","map","col","i","sortedEventView","tableMeta","index","renderHeadCell","tagValue","organization","trackAnalytics","queryString","decodeScalar","query","conditions","MutableSearch","addFilterValues","formatString","pathname","String","trim","actionRow","action","searchConditions","normalizeSearchConditions","updateQuery","id","undefined","parentProps","dataRow","value","transactionName","tagsRouteWithQuery","orgSlug","slug","transaction","projectID","project","tags_key","onTagKeyClick","allowActions","Actions","CellAction","handleCellAction","AlignRight","formatPercentage","frequency","localValue","comparison","pct","t","PerformanceDuration","abbreviation","milliseconds","aggregate","sumdelta","renderBodyCell","onSortClick","currentSortKind","currentSortField","columnInfo","fieldAlignment","type","currentSort","sortForField","isFieldSortable","nextEventView","sortOnField","generateQueryStringObject","tagSort","render","cursor","tagEventView","clone","fields","tagSorts","fromSorts","withSorts","length","adjustedColumns","getColumnsWithReplacedDuration","c","durationColumn","find","getColumnOrder","columnSortBy","getSorts","limit","isLoading","tableData","pageLinks","Fragment","GuideAnchor","TagsHeader","GridEditable","data","columnOrder","grid","renderHeadCellWithMeta","meta","renderBodyCellWithData","onResizeColumn","handleResizeColumn","viewAllTarget","Header","SectionHeading","Button","handleViewAllTagsClick","StyledPagination","onCursor","handleCursor","space","Pagination"],"sourceRoot":""}