{"version":3,"file":"chunks/app_components_gridEditable_sortLink_tsx-app_components_tagDistributionMeter_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/gridEditable/sortLink.tsx","webpack:///./app/components/tagDistributionMeter.tsx"],"sourcesContent":["import {browserHistory} from 'react-router';\nimport styled from '@emotion/styled';\nimport {LocationDescriptorObject} from 'history';\n\nimport Link from 'sentry/components/links/link';\nimport {IconArrow} from 'sentry/icons';\n\nexport type Alignments = 'left' | 'right' | undefined;\nexport type Directions = 'desc' | 'asc' | undefined;\n\ntype Props = {\n  align: Alignments;\n  canSort: boolean;\n  direction: Directions;\n  generateSortLink: () => LocationDescriptorObject | undefined;\n  title: React.ReactNode;\n  onClick?: (e: React.MouseEvent<HTMLAnchorElement>) => void;\n  replace?: boolean;\n};\n\nfunction SortLink({\n  align,\n  title,\n  canSort,\n  generateSortLink,\n  onClick,\n  direction,\n  replace,\n}: Props) {\n  const target = generateSortLink();\n\n  if (!target || !canSort) {\n    return <StyledNonLink align={align}>{title}</StyledNonLink>;\n  }\n\n  const arrow = !direction ? null : (\n    <StyledIconArrow size=\"xs\" direction={direction === 'desc' ? 'down' : 'up'} />\n  );\n\n  const handleOnClick: React.MouseEventHandler<HTMLAnchorElement> = e => {\n    if (replace) {\n      e.preventDefault();\n      browserHistory.replace(target);\n    }\n    onClick?.(e);\n  };\n\n  return (\n    <StyledLink align={align} to={target} onClick={handleOnClick}>\n      {title} {arrow}\n    </StyledLink>\n  );\n}\n\ntype LinkProps = React.ComponentPropsWithoutRef<typeof Link>;\ntype StyledLinkProps = LinkProps & {align: Alignments};\n\nconst StyledLink = styled((props: StyledLinkProps) => {\n  // @ts-ignore It doesn't look like the `css` property is a part of the props,\n  // but prior to this style of destructure-omitting it, it was being omitted\n  // with lodash.omit. I mean keeping it omitted here just in case.\n  const {align: _align, css: _css, ...forwardProps} = props;\n  return <Link {...forwardProps} />;\n})`\n  display: block;\n  width: 100%;\n  white-space: nowrap;\n  color: inherit;\n\n  &:hover,\n  &:active,\n  &:focus,\n  &:visited {\n    color: inherit;\n  }\n\n  ${(p: StyledLinkProps) => (p.align ? `text-align: ${p.align};` : '')}\n`;\n\nconst StyledNonLink = styled('div')<{align: Alignments}>`\n  display: block;\n  width: 100%;\n  white-space: nowrap;\n  ${(p: {align: Alignments}) => (p.align ? `text-align: ${p.align};` : '')}\n`;\n\nconst StyledIconArrow = styled(IconArrow)`\n  vertical-align: top;\n`;\n\nexport default SortLink;\n","import {Fragment} from 'react';\nimport isPropValid from '@emotion/is-prop-valid';\nimport styled from '@emotion/styled';\nimport {LocationDescriptor} from 'history';\n\nimport {TagSegment} from 'sentry/actionCreators/events';\nimport Link from 'sentry/components/links/link';\nimport {Tooltip} from 'sentry/components/tooltip';\nimport Version from 'sentry/components/version';\nimport {t} from 'sentry/locale';\nimport {space} from 'sentry/styles/space';\nimport {percent} from 'sentry/utils';\n\ntype Props = {\n  segments: TagSegment[];\n  title: string;\n  totalValues: number;\n  colors?: string[];\n  hasError?: boolean;\n  isLoading?: boolean;\n  onTagClick?: (title: string, value: TagSegment) => void;\n  renderEmpty?: () => React.ReactNode;\n  renderError?: () => React.ReactNode;\n  renderLoading?: () => React.ReactNode;\n  showReleasePackage?: boolean;\n  showTitle?: boolean;\n};\n\nexport type SegmentValue = {\n  index: number;\n  onClick: () => void;\n  to: LocationDescriptor;\n};\n\nfunction TagDistributionMeter({\n  colors = COLORS,\n  isLoading = false,\n  hasError = false,\n  renderLoading = () => null,\n  renderEmpty = () => <p>{t('No recent data.')}</p>,\n  renderError = () => null,\n  showReleasePackage = false,\n  showTitle = true,\n  segments,\n  title,\n  totalValues,\n  onTagClick,\n}: Props) {\n  function renderTitle() {\n    if (!Array.isArray(segments) || segments.length <= 0) {\n      return (\n        <Title>\n          <TitleType>{title}</TitleType>\n        </Title>\n      );\n    }\n\n    const largestSegment = segments[0];\n    const pct = percent(largestSegment.count, totalValues);\n    const pctLabel = Math.floor(pct);\n    const renderLabel = () => {\n      switch (title) {\n        case 'release':\n          return (\n            <Label>\n              <Version\n                version={largestSegment.name}\n                anchor={false}\n                tooltipRawVersion\n                withPackage={showReleasePackage}\n                truncate\n              />\n            </Label>\n          );\n        default:\n          return <Label>{largestSegment.name || t('n/a')}</Label>;\n      }\n    };\n\n    return (\n      <Title>\n        <TitleType>{title}</TitleType>\n        <TitleDescription>\n          {renderLabel()}\n          {isLoading || hasError ? null : <Percent>{pctLabel}%</Percent>}\n        </TitleDescription>\n      </Title>\n    );\n  }\n\n  function renderSegments() {\n    if (isLoading) {\n      return renderLoading();\n    }\n\n    if (hasError) {\n      return <SegmentBar>{renderError()}</SegmentBar>;\n    }\n\n    if (totalValues === 0) {\n      return <SegmentBar>{renderEmpty()}</SegmentBar>;\n    }\n\n    return (\n      <SegmentBar>\n        {segments.map((value, index) => {\n          const pct = percent(value.count, totalValues);\n          const pctLabel = Math.floor(pct);\n          const renderTooltipValue = () => {\n            switch (title) {\n              case 'release':\n                return (\n                  <Version\n                    version={value.name}\n                    anchor={false}\n                    withPackage={showReleasePackage}\n                  />\n                );\n              default:\n                return value.name || t('n/a');\n            }\n          };\n\n          const tooltipHtml = (\n            <Fragment>\n              <div className=\"truncate\">{renderTooltipValue()}</div>\n              {pctLabel}%\n            </Fragment>\n          );\n\n          const segmentProps: SegmentValue = {\n            index,\n            to: value.url,\n            onClick: () => onTagClick?.(title, value),\n          };\n\n          return (\n            <div key={value.value} style={{width: pct + '%'}}>\n              <Tooltip title={tooltipHtml} containerDisplayMode=\"block\">\n                {value.isOther ? (\n                  <OtherSegment\n                    aria-label={t('Other')}\n                    color={colors[colors.length - 1]}\n                  />\n                ) : (\n                  <Segment\n                    aria-label={t(\n                      'Add the %s %s segment tag to the search query',\n                      title,\n                      value.value\n                    )}\n                    color={colors[index]}\n                    {...segmentProps}\n                  />\n                )}\n              </Tooltip>\n            </div>\n          );\n        })}\n      </SegmentBar>\n    );\n  }\n\n  const totalVisible = segments.reduce((sum, value) => sum + value.count, 0);\n  const hasOther = totalVisible < totalValues;\n\n  if (hasOther) {\n    segments.push({\n      isOther: true,\n      name: t('Other'),\n      value: 'other',\n      count: totalValues - totalVisible,\n      url: '',\n    });\n  }\n\n  return (\n    <TagSummary>\n      {showTitle && renderTitle()}\n      {renderSegments()}\n    </TagSummary>\n  );\n}\n\nexport default TagDistributionMeter;\n\nconst COLORS = [\n  '#3A3387',\n  '#5F40A3',\n  '#8C4FBD',\n  '#B961D3',\n  '#DE76E4',\n  '#EF91E8',\n  '#F7B2EC',\n  '#FCD8F4',\n  '#FEEBF9',\n];\n\nconst TagSummary = styled('div')`\n  margin-bottom: ${space(1)};\n`;\n\nconst SegmentBar = styled('div')`\n  display: flex;\n  overflow: hidden;\n  border-radius: ${p => p.theme.borderRadius};\n`;\n\nconst Title = styled('div')`\n  display: flex;\n  font-size: ${p => p.theme.fontSizeSmall};\n  justify-content: space-between;\n  margin-bottom: ${space(0.25)};\n  line-height: 1.1;\n`;\n\nconst TitleType = styled('div')`\n  color: ${p => p.theme.textColor};\n  font-weight: bold;\n  ${p => p.theme.overflowEllipsis};\n`;\n\nconst TitleDescription = styled('div')`\n  display: flex;\n  color: ${p => p.theme.gray300};\n  text-align: right;\n`;\n\nconst Label = styled('div')`\n  ${p => p.theme.overflowEllipsis};\n  max-width: 150px;\n`;\n\nconst Percent = styled('div')`\n  font-weight: bold;\n  font-variant-numeric: tabular-nums;\n  padding-left: ${space(0.5)};\n  color: ${p => p.theme.textColor};\n`;\n\nconst OtherSegment = styled('span')<{color: string}>`\n  display: block;\n  width: 100%;\n  height: 16px;\n  color: inherit;\n  outline: none;\n  background-color: ${p => p.color};\n`;\n\nconst Segment = styled(Link, {shouldForwardProp: isPropValid})<{color: string}>`\n  display: block;\n  width: 100%;\n  height: 16px;\n  color: inherit;\n  outline: none;\n  background-color: ${p => p.color};\n  border-radius: 0;\n`;\n"],"names":["SortLink","_ref","align","title","canSort","generateSortLink","onClick","direction","replace","target","_jsx","StyledNonLink","children","arrow","StyledIconArrow","size","_jsxs","StyledLink","to","e","preventDefault","browserHistory","displayName","_styled","props","_align","css","_css","forwardProps","Link","p","IconArrow","name","styles","TagDistributionMeter","colors","COLORS","isLoading","hasError","renderLoading","renderEmpty","t","renderError","showReleasePackage","showTitle","segments","totalValues","onTagClick","totalVisible","reduce","sum","value","count","push","isOther","url","TagSummary","Array","isArray","length","Title","TitleType","largestSegment","pct","percent","pctLabel","Math","floor","TitleDescription","Label","Version","version","anchor","tooltipRawVersion","withPackage","truncate","Percent","renderTitle","SegmentBar","map","index","tooltipHtml","Fragment","className","segmentProps","style","width","Tooltip","containerDisplayMode","OtherSegment","color","Segment","space","theme","borderRadius","fontSizeSmall","textColor","overflowEllipsis","gray300","shouldForwardProp","isPropValid"],"sourceRoot":""}