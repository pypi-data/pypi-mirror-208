# coding: utf-8

"""
    SYSNET CRZP connector API

    SYSNET CRÅ½P connector REST API (IPPC & CITES extension)  # noqa: E501

    OpenAPI spec version: 1.1.0
    Contact: info@sysnet.cz
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RoleReference(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'role_type': 'str',
        'code': 'str',
        'id': 'str',
        'name': 'str',
        'registered_for': 'SystemReference'
    }

    attribute_map = {
        'role_type': 'roleType',
        'code': 'code',
        'id': 'id',
        'name': 'name',
        'registered_for': 'registeredFor'
    }

    def __init__(self, role_type=None, code=None, id=None, name=None, registered_for=None):  # noqa: E501
        """RoleReference - a model defined in Swagger"""  # noqa: E501
        self._role_type = None
        self._code = None
        self._id = None
        self._name = None
        self._registered_for = None
        self.discriminator = None
        if role_type is not None:
            self.role_type = role_type
        if code is not None:
            self.code = code
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if registered_for is not None:
            self.registered_for = registered_for

    @property
    def role_type(self):
        """Gets the role_type of this RoleReference.  # noqa: E501


        :return: The role_type of this RoleReference.  # noqa: E501
        :rtype: str
        """
        return self._role_type

    @role_type.setter
    def role_type(self, role_type):
        """Sets the role_type of this RoleReference.


        :param role_type: The role_type of this RoleReference.  # noqa: E501
        :type: str
        """

        self._role_type = role_type

    @property
    def code(self):
        """Gets the code of this RoleReference.  # noqa: E501


        :return: The code of this RoleReference.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this RoleReference.


        :param code: The code of this RoleReference.  # noqa: E501
        :type: str
        """

        self._code = code

    @property
    def id(self):
        """Gets the id of this RoleReference.  # noqa: E501


        :return: The id of this RoleReference.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RoleReference.


        :param id: The id of this RoleReference.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this RoleReference.  # noqa: E501


        :return: The name of this RoleReference.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RoleReference.


        :param name: The name of this RoleReference.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def registered_for(self):
        """Gets the registered_for of this RoleReference.  # noqa: E501


        :return: The registered_for of this RoleReference.  # noqa: E501
        :rtype: SystemReference
        """
        return self._registered_for

    @registered_for.setter
    def registered_for(self, registered_for):
        """Sets the registered_for of this RoleReference.


        :param registered_for: The registered_for of this RoleReference.  # noqa: E501
        :type: SystemReference
        """

        self._registered_for = registered_for

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RoleReference, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RoleReference):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
