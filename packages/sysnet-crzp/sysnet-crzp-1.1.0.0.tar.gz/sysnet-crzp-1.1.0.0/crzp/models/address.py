# coding: utf-8

"""
    SYSNET CRZP connector API

    SYSNET CRÅ½P connector REST API (IPPC & CITES extension)  # noqa: E501

    OpenAPI spec version: 1.1.0
    Contact: info@sysnet.cz
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Address(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'address_place_ruian': 'RuianReference',
        'city_district': 'str',
        'city_district_ruian': 'RuianReference',
        'country': 'DictionaryReference',
        'district': 'str',
        'district_ruian': 'RuianReference',
        'house_number': 'str',
        'house_number_type': 'str',
        'municipality': 'str',
        'municipality_ruian': 'RuianReference',
        'municipality_part': 'str',
        'municipality_part_ruian': 'RuianReference',
        'orientation_number': 'str',
        'orientation_number_mark': 'str',
        'region': 'str',
        'region_ruian': 'RuianReference',
        'street': 'str',
        'street_ruian': 'RuianReference',
        'zip': 'str'
    }

    attribute_map = {
        'id': 'id',
        'address_place_ruian': 'addressPlaceRuian',
        'city_district': 'cityDistrict',
        'city_district_ruian': 'cityDistrictRuian',
        'country': 'country',
        'district': 'district',
        'district_ruian': 'districtRuian',
        'house_number': 'houseNumber',
        'house_number_type': 'houseNumberType',
        'municipality': 'municipality',
        'municipality_ruian': 'municipalityRuian',
        'municipality_part': 'municipalityPart',
        'municipality_part_ruian': 'municipalityPartRuian',
        'orientation_number': 'orientationNumber',
        'orientation_number_mark': 'orientationNumberMark',
        'region': 'region',
        'region_ruian': 'regionRuian',
        'street': 'street',
        'street_ruian': 'streetRuian',
        'zip': 'zip'
    }

    def __init__(self, id=None, address_place_ruian=None, city_district=None, city_district_ruian=None, country=None, district=None, district_ruian=None, house_number=None, house_number_type=None, municipality=None, municipality_ruian=None, municipality_part=None, municipality_part_ruian=None, orientation_number=None, orientation_number_mark=None, region=None, region_ruian=None, street=None, street_ruian=None, zip=None):  # noqa: E501
        """Address - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._address_place_ruian = None
        self._city_district = None
        self._city_district_ruian = None
        self._country = None
        self._district = None
        self._district_ruian = None
        self._house_number = None
        self._house_number_type = None
        self._municipality = None
        self._municipality_ruian = None
        self._municipality_part = None
        self._municipality_part_ruian = None
        self._orientation_number = None
        self._orientation_number_mark = None
        self._region = None
        self._region_ruian = None
        self._street = None
        self._street_ruian = None
        self._zip = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if address_place_ruian is not None:
            self.address_place_ruian = address_place_ruian
        if city_district is not None:
            self.city_district = city_district
        if city_district_ruian is not None:
            self.city_district_ruian = city_district_ruian
        if country is not None:
            self.country = country
        if district is not None:
            self.district = district
        if district_ruian is not None:
            self.district_ruian = district_ruian
        if house_number is not None:
            self.house_number = house_number
        if house_number_type is not None:
            self.house_number_type = house_number_type
        if municipality is not None:
            self.municipality = municipality
        if municipality_ruian is not None:
            self.municipality_ruian = municipality_ruian
        if municipality_part is not None:
            self.municipality_part = municipality_part
        if municipality_part_ruian is not None:
            self.municipality_part_ruian = municipality_part_ruian
        if orientation_number is not None:
            self.orientation_number = orientation_number
        if orientation_number_mark is not None:
            self.orientation_number_mark = orientation_number_mark
        if region is not None:
            self.region = region
        if region_ruian is not None:
            self.region_ruian = region_ruian
        if street is not None:
            self.street = street
        if street_ruian is not None:
            self.street_ruian = street_ruian
        if zip is not None:
            self.zip = zip

    @property
    def id(self):
        """Gets the id of this Address.  # noqa: E501


        :return: The id of this Address.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Address.


        :param id: The id of this Address.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def address_place_ruian(self):
        """Gets the address_place_ruian of this Address.  # noqa: E501


        :return: The address_place_ruian of this Address.  # noqa: E501
        :rtype: RuianReference
        """
        return self._address_place_ruian

    @address_place_ruian.setter
    def address_place_ruian(self, address_place_ruian):
        """Sets the address_place_ruian of this Address.


        :param address_place_ruian: The address_place_ruian of this Address.  # noqa: E501
        :type: RuianReference
        """

        self._address_place_ruian = address_place_ruian

    @property
    def city_district(self):
        """Gets the city_district of this Address.  # noqa: E501


        :return: The city_district of this Address.  # noqa: E501
        :rtype: str
        """
        return self._city_district

    @city_district.setter
    def city_district(self, city_district):
        """Sets the city_district of this Address.


        :param city_district: The city_district of this Address.  # noqa: E501
        :type: str
        """

        self._city_district = city_district

    @property
    def city_district_ruian(self):
        """Gets the city_district_ruian of this Address.  # noqa: E501


        :return: The city_district_ruian of this Address.  # noqa: E501
        :rtype: RuianReference
        """
        return self._city_district_ruian

    @city_district_ruian.setter
    def city_district_ruian(self, city_district_ruian):
        """Sets the city_district_ruian of this Address.


        :param city_district_ruian: The city_district_ruian of this Address.  # noqa: E501
        :type: RuianReference
        """

        self._city_district_ruian = city_district_ruian

    @property
    def country(self):
        """Gets the country of this Address.  # noqa: E501


        :return: The country of this Address.  # noqa: E501
        :rtype: DictionaryReference
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this Address.


        :param country: The country of this Address.  # noqa: E501
        :type: DictionaryReference
        """

        self._country = country

    @property
    def district(self):
        """Gets the district of this Address.  # noqa: E501


        :return: The district of this Address.  # noqa: E501
        :rtype: str
        """
        return self._district

    @district.setter
    def district(self, district):
        """Sets the district of this Address.


        :param district: The district of this Address.  # noqa: E501
        :type: str
        """

        self._district = district

    @property
    def district_ruian(self):
        """Gets the district_ruian of this Address.  # noqa: E501


        :return: The district_ruian of this Address.  # noqa: E501
        :rtype: RuianReference
        """
        return self._district_ruian

    @district_ruian.setter
    def district_ruian(self, district_ruian):
        """Sets the district_ruian of this Address.


        :param district_ruian: The district_ruian of this Address.  # noqa: E501
        :type: RuianReference
        """

        self._district_ruian = district_ruian

    @property
    def house_number(self):
        """Gets the house_number of this Address.  # noqa: E501


        :return: The house_number of this Address.  # noqa: E501
        :rtype: str
        """
        return self._house_number

    @house_number.setter
    def house_number(self, house_number):
        """Sets the house_number of this Address.


        :param house_number: The house_number of this Address.  # noqa: E501
        :type: str
        """

        self._house_number = house_number

    @property
    def house_number_type(self):
        """Gets the house_number_type of this Address.  # noqa: E501


        :return: The house_number_type of this Address.  # noqa: E501
        :rtype: str
        """
        return self._house_number_type

    @house_number_type.setter
    def house_number_type(self, house_number_type):
        """Sets the house_number_type of this Address.


        :param house_number_type: The house_number_type of this Address.  # noqa: E501
        :type: str
        """

        self._house_number_type = house_number_type

    @property
    def municipality(self):
        """Gets the municipality of this Address.  # noqa: E501


        :return: The municipality of this Address.  # noqa: E501
        :rtype: str
        """
        return self._municipality

    @municipality.setter
    def municipality(self, municipality):
        """Sets the municipality of this Address.


        :param municipality: The municipality of this Address.  # noqa: E501
        :type: str
        """

        self._municipality = municipality

    @property
    def municipality_ruian(self):
        """Gets the municipality_ruian of this Address.  # noqa: E501


        :return: The municipality_ruian of this Address.  # noqa: E501
        :rtype: RuianReference
        """
        return self._municipality_ruian

    @municipality_ruian.setter
    def municipality_ruian(self, municipality_ruian):
        """Sets the municipality_ruian of this Address.


        :param municipality_ruian: The municipality_ruian of this Address.  # noqa: E501
        :type: RuianReference
        """

        self._municipality_ruian = municipality_ruian

    @property
    def municipality_part(self):
        """Gets the municipality_part of this Address.  # noqa: E501


        :return: The municipality_part of this Address.  # noqa: E501
        :rtype: str
        """
        return self._municipality_part

    @municipality_part.setter
    def municipality_part(self, municipality_part):
        """Sets the municipality_part of this Address.


        :param municipality_part: The municipality_part of this Address.  # noqa: E501
        :type: str
        """

        self._municipality_part = municipality_part

    @property
    def municipality_part_ruian(self):
        """Gets the municipality_part_ruian of this Address.  # noqa: E501


        :return: The municipality_part_ruian of this Address.  # noqa: E501
        :rtype: RuianReference
        """
        return self._municipality_part_ruian

    @municipality_part_ruian.setter
    def municipality_part_ruian(self, municipality_part_ruian):
        """Sets the municipality_part_ruian of this Address.


        :param municipality_part_ruian: The municipality_part_ruian of this Address.  # noqa: E501
        :type: RuianReference
        """

        self._municipality_part_ruian = municipality_part_ruian

    @property
    def orientation_number(self):
        """Gets the orientation_number of this Address.  # noqa: E501


        :return: The orientation_number of this Address.  # noqa: E501
        :rtype: str
        """
        return self._orientation_number

    @orientation_number.setter
    def orientation_number(self, orientation_number):
        """Sets the orientation_number of this Address.


        :param orientation_number: The orientation_number of this Address.  # noqa: E501
        :type: str
        """

        self._orientation_number = orientation_number

    @property
    def orientation_number_mark(self):
        """Gets the orientation_number_mark of this Address.  # noqa: E501


        :return: The orientation_number_mark of this Address.  # noqa: E501
        :rtype: str
        """
        return self._orientation_number_mark

    @orientation_number_mark.setter
    def orientation_number_mark(self, orientation_number_mark):
        """Sets the orientation_number_mark of this Address.


        :param orientation_number_mark: The orientation_number_mark of this Address.  # noqa: E501
        :type: str
        """

        self._orientation_number_mark = orientation_number_mark

    @property
    def region(self):
        """Gets the region of this Address.  # noqa: E501


        :return: The region of this Address.  # noqa: E501
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this Address.


        :param region: The region of this Address.  # noqa: E501
        :type: str
        """

        self._region = region

    @property
    def region_ruian(self):
        """Gets the region_ruian of this Address.  # noqa: E501


        :return: The region_ruian of this Address.  # noqa: E501
        :rtype: RuianReference
        """
        return self._region_ruian

    @region_ruian.setter
    def region_ruian(self, region_ruian):
        """Sets the region_ruian of this Address.


        :param region_ruian: The region_ruian of this Address.  # noqa: E501
        :type: RuianReference
        """

        self._region_ruian = region_ruian

    @property
    def street(self):
        """Gets the street of this Address.  # noqa: E501


        :return: The street of this Address.  # noqa: E501
        :rtype: str
        """
        return self._street

    @street.setter
    def street(self, street):
        """Sets the street of this Address.


        :param street: The street of this Address.  # noqa: E501
        :type: str
        """

        self._street = street

    @property
    def street_ruian(self):
        """Gets the street_ruian of this Address.  # noqa: E501


        :return: The street_ruian of this Address.  # noqa: E501
        :rtype: RuianReference
        """
        return self._street_ruian

    @street_ruian.setter
    def street_ruian(self, street_ruian):
        """Sets the street_ruian of this Address.


        :param street_ruian: The street_ruian of this Address.  # noqa: E501
        :type: RuianReference
        """

        self._street_ruian = street_ruian

    @property
    def zip(self):
        """Gets the zip of this Address.  # noqa: E501


        :return: The zip of this Address.  # noqa: E501
        :rtype: str
        """
        return self._zip

    @zip.setter
    def zip(self, zip):
        """Sets the zip of this Address.


        :param zip: The zip of this Address.  # noqa: E501
        :type: str
        """

        self._zip = zip

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Address, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Address):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
