# coding: utf-8

"""
    SYSNET CRZP connector API

    SYSNET CRŽP connector REST API (IPPC & CITES extension)  # noqa: E501

    OpenAPI spec version: 1.1.0
    Contact: info@sysnet.cz
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class IppcActivity(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ispop_id': 'str',
        'decription': 'str',
        'other_activity': 'str'
    }

    attribute_map = {
        'ispop_id': 'ispopId',
        'decription': 'decription',
        'other_activity': 'otherActivity'
    }

    def __init__(self, ispop_id=None, decription=None, other_activity=None):  # noqa: E501
        """IppcActivity - a model defined in Swagger"""  # noqa: E501
        self._ispop_id = None
        self._decription = None
        self._other_activity = None
        self.discriminator = None
        if ispop_id is not None:
            self.ispop_id = ispop_id
        if decription is not None:
            self.decription = decription
        if other_activity is not None:
            self.other_activity = other_activity

    @property
    def ispop_id(self):
        """Gets the ispop_id of this IppcActivity.  # noqa: E501

        ID v systému ISPOP1  # noqa: E501

        :return: The ispop_id of this IppcActivity.  # noqa: E501
        :rtype: str
        """
        return self._ispop_id

    @ispop_id.setter
    def ispop_id(self, ispop_id):
        """Sets the ispop_id of this IppcActivity.

        ID v systému ISPOP1  # noqa: E501

        :param ispop_id: The ispop_id of this IppcActivity.  # noqa: E501
        :type: str
        """

        self._ispop_id = ispop_id

    @property
    def decription(self):
        """Gets the decription of this IppcActivity.  # noqa: E501

        Popis  # noqa: E501

        :return: The decription of this IppcActivity.  # noqa: E501
        :rtype: str
        """
        return self._decription

    @decription.setter
    def decription(self, decription):
        """Sets the decription of this IppcActivity.

        Popis  # noqa: E501

        :param decription: The decription of this IppcActivity.  # noqa: E501
        :type: str
        """

        self._decription = decription

    @property
    def other_activity(self):
        """Gets the other_activity of this IppcActivity.  # noqa: E501

        Ostatní činnost  # noqa: E501

        :return: The other_activity of this IppcActivity.  # noqa: E501
        :rtype: str
        """
        return self._other_activity

    @other_activity.setter
    def other_activity(self, other_activity):
        """Sets the other_activity of this IppcActivity.

        Ostatní činnost  # noqa: E501

        :param other_activity: The other_activity of this IppcActivity.  # noqa: E501
        :type: str
        """

        self._other_activity = other_activity

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IppcActivity, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IppcActivity):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
