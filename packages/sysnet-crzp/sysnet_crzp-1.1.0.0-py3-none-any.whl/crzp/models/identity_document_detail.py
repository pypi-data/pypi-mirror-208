# coding: utf-8

"""
    SYSNET CRZP connector API

    SYSNET CRŽP connector REST API (IPPC & CITES extension)  # noqa: E501

    OpenAPI spec version: 1.1.0
    Contact: info@sysnet.cz
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class IdentityDocumentDetail(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'doc_type': 'str',
        'id': 'str',
        'id_number': 'str',
        'valid_from': 'datetime',
        'valid_to': 'datetime'
    }

    attribute_map = {
        'doc_type': 'docType',
        'id': 'id',
        'id_number': 'idNumber',
        'valid_from': 'validFrom',
        'valid_to': 'validTo'
    }

    def __init__(self, doc_type=None, id=None, id_number=None, valid_from=None, valid_to=None):  # noqa: E501
        """IdentityDocumentDetail - a model defined in Swagger"""  # noqa: E501
        self._doc_type = None
        self._id = None
        self._id_number = None
        self._valid_from = None
        self._valid_to = None
        self.discriminator = None
        if doc_type is not None:
            self.doc_type = doc_type
        if id is not None:
            self.id = id
        if id_number is not None:
            self.id_number = id_number
        if valid_from is not None:
            self.valid_from = valid_from
        if valid_to is not None:
            self.valid_to = valid_to

    @property
    def doc_type(self):
        """Gets the doc_type of this IdentityDocumentDetail.  # noqa: E501


        :return: The doc_type of this IdentityDocumentDetail.  # noqa: E501
        :rtype: str
        """
        return self._doc_type

    @doc_type.setter
    def doc_type(self, doc_type):
        """Sets the doc_type of this IdentityDocumentDetail.


        :param doc_type: The doc_type of this IdentityDocumentDetail.  # noqa: E501
        :type: str
        """

        self._doc_type = doc_type

    @property
    def id(self):
        """Gets the id of this IdentityDocumentDetail.  # noqa: E501


        :return: The id of this IdentityDocumentDetail.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this IdentityDocumentDetail.


        :param id: The id of this IdentityDocumentDetail.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def id_number(self):
        """Gets the id_number of this IdentityDocumentDetail.  # noqa: E501

        Číslo občanského průkazu nebo pasu  # noqa: E501

        :return: The id_number of this IdentityDocumentDetail.  # noqa: E501
        :rtype: str
        """
        return self._id_number

    @id_number.setter
    def id_number(self, id_number):
        """Sets the id_number of this IdentityDocumentDetail.

        Číslo občanského průkazu nebo pasu  # noqa: E501

        :param id_number: The id_number of this IdentityDocumentDetail.  # noqa: E501
        :type: str
        """

        self._id_number = id_number

    @property
    def valid_from(self):
        """Gets the valid_from of this IdentityDocumentDetail.  # noqa: E501

        Platnost informace od (neodpovídá platnosti na dokladu)  # noqa: E501

        :return: The valid_from of this IdentityDocumentDetail.  # noqa: E501
        :rtype: datetime
        """
        return self._valid_from

    @valid_from.setter
    def valid_from(self, valid_from):
        """Sets the valid_from of this IdentityDocumentDetail.

        Platnost informace od (neodpovídá platnosti na dokladu)  # noqa: E501

        :param valid_from: The valid_from of this IdentityDocumentDetail.  # noqa: E501
        :type: datetime
        """

        self._valid_from = valid_from

    @property
    def valid_to(self):
        """Gets the valid_to of this IdentityDocumentDetail.  # noqa: E501

        Platnost informace do (neodpovídá platnosti na dokladu)  # noqa: E501

        :return: The valid_to of this IdentityDocumentDetail.  # noqa: E501
        :rtype: datetime
        """
        return self._valid_to

    @valid_to.setter
    def valid_to(self, valid_to):
        """Sets the valid_to of this IdentityDocumentDetail.

        Platnost informace do (neodpovídá platnosti na dokladu)  # noqa: E501

        :param valid_to: The valid_to of this IdentityDocumentDetail.  # noqa: E501
        :type: datetime
        """

        self._valid_to = valid_to

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IdentityDocumentDetail, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IdentityDocumentDetail):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
