# coding: utf-8

"""
    SYSNET CRZP connector API

    SYSNET CRÅ½P connector REST API (IPPC & CITES extension)  # noqa: E501

    OpenAPI spec version: 1.1.0
    Contact: info@sysnet.cz
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EuState(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'eu_state': 'str',
        'year': 'int'
    }

    attribute_map = {
        'eu_state': 'euState',
        'year': 'year'
    }

    def __init__(self, eu_state=None, year=None):  # noqa: E501
        """EuState - a model defined in Swagger"""  # noqa: E501
        self._eu_state = None
        self._year = None
        self.discriminator = None
        if eu_state is not None:
            self.eu_state = eu_state
        if year is not None:
            self.year = year

    @property
    def eu_state(self):
        """Gets the eu_state of this EuState.  # noqa: E501

        Stav EU  # noqa: E501

        :return: The eu_state of this EuState.  # noqa: E501
        :rtype: str
        """
        return self._eu_state

    @eu_state.setter
    def eu_state(self, eu_state):
        """Sets the eu_state of this EuState.

        Stav EU  # noqa: E501

        :param eu_state: The eu_state of this EuState.  # noqa: E501
        :type: str
        """

        self._eu_state = eu_state

    @property
    def year(self):
        """Gets the year of this EuState.  # noqa: E501


        :return: The year of this EuState.  # noqa: E501
        :rtype: int
        """
        return self._year

    @year.setter
    def year(self, year):
        """Sets the year of this EuState.


        :param year: The year of this EuState.  # noqa: E501
        :type: int
        """

        self._year = year

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EuState, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EuState):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
