# coding: utf-8

"""
    SYSNET CRZP connector API

    SYSNET CRÅ½P connector REST API (IPPC & CITES extension)  # noqa: E501

    OpenAPI spec version: 1.1.0
    Contact: info@sysnet.cz
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RoleHolders(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'count': 'int',
        'begin': 'str',
        'role': 'RoleReference',
        'holder': 'list[HolderReference]'
    }

    attribute_map = {
        'count': 'count',
        'begin': 'begin',
        'role': 'role',
        'holder': 'holder'
    }

    def __init__(self, count=None, begin=None, role=None, holder=None):  # noqa: E501
        """RoleHolders - a model defined in Swagger"""  # noqa: E501
        self._count = None
        self._begin = None
        self._role = None
        self._holder = None
        self.discriminator = None
        if count is not None:
            self.count = count
        if begin is not None:
            self.begin = begin
        if role is not None:
            self.role = role
        if holder is not None:
            self.holder = holder

    @property
    def count(self):
        """Gets the count of this RoleHolders.  # noqa: E501

        number of results found  # noqa: E501

        :return: The count of this RoleHolders.  # noqa: E501
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this RoleHolders.

        number of results found  # noqa: E501

        :param count: The count of this RoleHolders.  # noqa: E501
        :type: int
        """

        self._count = count

    @property
    def begin(self):
        """Gets the begin of this RoleHolders.  # noqa: E501

        if the previous query did not return all occurrences,  start searching from this identifier (searchAfter)   # noqa: E501

        :return: The begin of this RoleHolders.  # noqa: E501
        :rtype: str
        """
        return self._begin

    @begin.setter
    def begin(self, begin):
        """Sets the begin of this RoleHolders.

        if the previous query did not return all occurrences,  start searching from this identifier (searchAfter)   # noqa: E501

        :param begin: The begin of this RoleHolders.  # noqa: E501
        :type: str
        """

        self._begin = begin

    @property
    def role(self):
        """Gets the role of this RoleHolders.  # noqa: E501


        :return: The role of this RoleHolders.  # noqa: E501
        :rtype: RoleReference
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this RoleHolders.


        :param role: The role of this RoleHolders.  # noqa: E501
        :type: RoleReference
        """

        self._role = role

    @property
    def holder(self):
        """Gets the holder of this RoleHolders.  # noqa: E501


        :return: The holder of this RoleHolders.  # noqa: E501
        :rtype: list[HolderReference]
        """
        return self._holder

    @holder.setter
    def holder(self, holder):
        """Sets the holder of this RoleHolders.


        :param holder: The holder of this RoleHolders.  # noqa: E501
        :type: list[HolderReference]
        """

        self._holder = holder

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RoleHolders, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RoleHolders):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
