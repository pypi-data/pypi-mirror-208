# coding: utf-8

"""
    SYSNET CRZP connector API

    SYSNET CRÅ½P connector REST API (IPPC & CITES extension)  # noqa: E501

    OpenAPI spec version: 1.1.0
    Contact: info@sysnet.cz
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class LegalEntityPart(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ico': 'str',
        'name': 'str',
        'legal_form': 'DictionaryReference',
        'origin_date': 'date',
        'end_date': 'date'
    }

    attribute_map = {
        'ico': 'ico',
        'name': 'name',
        'legal_form': 'legalForm',
        'origin_date': 'originDate',
        'end_date': 'endDate'
    }

    def __init__(self, ico=None, name=None, legal_form=None, origin_date=None, end_date=None):  # noqa: E501
        """LegalEntityPart - a model defined in Swagger"""  # noqa: E501
        self._ico = None
        self._name = None
        self._legal_form = None
        self._origin_date = None
        self._end_date = None
        self.discriminator = None
        if ico is not None:
            self.ico = ico
        if name is not None:
            self.name = name
        if legal_form is not None:
            self.legal_form = legal_form
        if origin_date is not None:
            self.origin_date = origin_date
        if end_date is not None:
            self.end_date = end_date

    @property
    def ico(self):
        """Gets the ico of this LegalEntityPart.  # noqa: E501


        :return: The ico of this LegalEntityPart.  # noqa: E501
        :rtype: str
        """
        return self._ico

    @ico.setter
    def ico(self, ico):
        """Sets the ico of this LegalEntityPart.


        :param ico: The ico of this LegalEntityPart.  # noqa: E501
        :type: str
        """

        self._ico = ico

    @property
    def name(self):
        """Gets the name of this LegalEntityPart.  # noqa: E501


        :return: The name of this LegalEntityPart.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this LegalEntityPart.


        :param name: The name of this LegalEntityPart.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def legal_form(self):
        """Gets the legal_form of this LegalEntityPart.  # noqa: E501


        :return: The legal_form of this LegalEntityPart.  # noqa: E501
        :rtype: DictionaryReference
        """
        return self._legal_form

    @legal_form.setter
    def legal_form(self, legal_form):
        """Sets the legal_form of this LegalEntityPart.


        :param legal_form: The legal_form of this LegalEntityPart.  # noqa: E501
        :type: DictionaryReference
        """

        self._legal_form = legal_form

    @property
    def origin_date(self):
        """Gets the origin_date of this LegalEntityPart.  # noqa: E501


        :return: The origin_date of this LegalEntityPart.  # noqa: E501
        :rtype: date
        """
        return self._origin_date

    @origin_date.setter
    def origin_date(self, origin_date):
        """Sets the origin_date of this LegalEntityPart.


        :param origin_date: The origin_date of this LegalEntityPart.  # noqa: E501
        :type: date
        """

        self._origin_date = origin_date

    @property
    def end_date(self):
        """Gets the end_date of this LegalEntityPart.  # noqa: E501


        :return: The end_date of this LegalEntityPart.  # noqa: E501
        :rtype: date
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this LegalEntityPart.


        :param end_date: The end_date of this LegalEntityPart.  # noqa: E501
        :type: date
        """

        self._end_date = end_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LegalEntityPart, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LegalEntityPart):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
