# coding: utf-8

"""
    SYSNET CRZP connector API

    SYSNET CRÅ½P connector REST API (IPPC & CITES extension)  # noqa: E501

    OpenAPI spec version: 1.1.0
    Contact: info@sysnet.cz
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class IrzFacilityOperationItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'created': 'datetime',
        'updated': 'datetime',
        'deleted': 'datetime',
        'irz_facility': 'IrzFacilityReference',
        'operator': 'SubjectReference',
        'valid_from': 'date',
        'valid_to': 'date'
    }

    attribute_map = {
        'id': 'id',
        'created': 'created',
        'updated': 'updated',
        'deleted': 'deleted',
        'irz_facility': 'irzFacility',
        'operator': 'operator',
        'valid_from': 'validFrom',
        'valid_to': 'validTo'
    }

    def __init__(self, id=None, created=None, updated=None, deleted=None, irz_facility=None, operator=None, valid_from=None, valid_to=None):  # noqa: E501
        """IrzFacilityOperationItem - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._created = None
        self._updated = None
        self._deleted = None
        self._irz_facility = None
        self._operator = None
        self._valid_from = None
        self._valid_to = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if created is not None:
            self.created = created
        if updated is not None:
            self.updated = updated
        if deleted is not None:
            self.deleted = deleted
        if irz_facility is not None:
            self.irz_facility = irz_facility
        if operator is not None:
            self.operator = operator
        if valid_from is not None:
            self.valid_from = valid_from
        if valid_to is not None:
            self.valid_to = valid_to

    @property
    def id(self):
        """Gets the id of this IrzFacilityOperationItem.  # noqa: E501


        :return: The id of this IrzFacilityOperationItem.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this IrzFacilityOperationItem.


        :param id: The id of this IrzFacilityOperationItem.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def created(self):
        """Gets the created of this IrzFacilityOperationItem.  # noqa: E501


        :return: The created of this IrzFacilityOperationItem.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this IrzFacilityOperationItem.


        :param created: The created of this IrzFacilityOperationItem.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def updated(self):
        """Gets the updated of this IrzFacilityOperationItem.  # noqa: E501


        :return: The updated of this IrzFacilityOperationItem.  # noqa: E501
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this IrzFacilityOperationItem.


        :param updated: The updated of this IrzFacilityOperationItem.  # noqa: E501
        :type: datetime
        """

        self._updated = updated

    @property
    def deleted(self):
        """Gets the deleted of this IrzFacilityOperationItem.  # noqa: E501


        :return: The deleted of this IrzFacilityOperationItem.  # noqa: E501
        :rtype: datetime
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this IrzFacilityOperationItem.


        :param deleted: The deleted of this IrzFacilityOperationItem.  # noqa: E501
        :type: datetime
        """

        self._deleted = deleted

    @property
    def irz_facility(self):
        """Gets the irz_facility of this IrzFacilityOperationItem.  # noqa: E501


        :return: The irz_facility of this IrzFacilityOperationItem.  # noqa: E501
        :rtype: IrzFacilityReference
        """
        return self._irz_facility

    @irz_facility.setter
    def irz_facility(self, irz_facility):
        """Sets the irz_facility of this IrzFacilityOperationItem.


        :param irz_facility: The irz_facility of this IrzFacilityOperationItem.  # noqa: E501
        :type: IrzFacilityReference
        """

        self._irz_facility = irz_facility

    @property
    def operator(self):
        """Gets the operator of this IrzFacilityOperationItem.  # noqa: E501


        :return: The operator of this IrzFacilityOperationItem.  # noqa: E501
        :rtype: SubjectReference
        """
        return self._operator

    @operator.setter
    def operator(self, operator):
        """Sets the operator of this IrzFacilityOperationItem.


        :param operator: The operator of this IrzFacilityOperationItem.  # noqa: E501
        :type: SubjectReference
        """

        self._operator = operator

    @property
    def valid_from(self):
        """Gets the valid_from of this IrzFacilityOperationItem.  # noqa: E501

        Datum platnosti: od  # noqa: E501

        :return: The valid_from of this IrzFacilityOperationItem.  # noqa: E501
        :rtype: date
        """
        return self._valid_from

    @valid_from.setter
    def valid_from(self, valid_from):
        """Sets the valid_from of this IrzFacilityOperationItem.

        Datum platnosti: od  # noqa: E501

        :param valid_from: The valid_from of this IrzFacilityOperationItem.  # noqa: E501
        :type: date
        """

        self._valid_from = valid_from

    @property
    def valid_to(self):
        """Gets the valid_to of this IrzFacilityOperationItem.  # noqa: E501

        Datum platnosti: do  # noqa: E501

        :return: The valid_to of this IrzFacilityOperationItem.  # noqa: E501
        :rtype: date
        """
        return self._valid_to

    @valid_to.setter
    def valid_to(self, valid_to):
        """Sets the valid_to of this IrzFacilityOperationItem.

        Datum platnosti: do  # noqa: E501

        :param valid_to: The valid_to of this IrzFacilityOperationItem.  # noqa: E501
        :type: date
        """

        self._valid_to = valid_to

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IrzFacilityOperationItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IrzFacilityOperationItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
