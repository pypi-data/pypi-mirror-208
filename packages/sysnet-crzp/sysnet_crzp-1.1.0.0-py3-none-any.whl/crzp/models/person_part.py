# coding: utf-8

"""
    SYSNET CRZP connector API

    SYSNET CRÅ½P connector REST API (IPPC & CITES extension)  # noqa: E501

    OpenAPI spec version: 1.1.0
    Contact: info@sysnet.cz
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PersonPart(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'degree_before': 'str',
        'degree_after': 'str',
        'first_name': 'str',
        'last_name': 'str',
        'birth_date': 'date',
        'decease_date': 'date',
        'identity_document': 'list[IdentityDocumentDetail]'
    }

    attribute_map = {
        'degree_before': 'degreeBefore',
        'degree_after': 'degreeAfter',
        'first_name': 'firstName',
        'last_name': 'lastName',
        'birth_date': 'birthDate',
        'decease_date': 'deceaseDate',
        'identity_document': 'identityDocument'
    }

    def __init__(self, degree_before=None, degree_after=None, first_name=None, last_name=None, birth_date=None, decease_date=None, identity_document=None):  # noqa: E501
        """PersonPart - a model defined in Swagger"""  # noqa: E501
        self._degree_before = None
        self._degree_after = None
        self._first_name = None
        self._last_name = None
        self._birth_date = None
        self._decease_date = None
        self._identity_document = None
        self.discriminator = None
        if degree_before is not None:
            self.degree_before = degree_before
        if degree_after is not None:
            self.degree_after = degree_after
        if first_name is not None:
            self.first_name = first_name
        if last_name is not None:
            self.last_name = last_name
        if birth_date is not None:
            self.birth_date = birth_date
        if decease_date is not None:
            self.decease_date = decease_date
        if identity_document is not None:
            self.identity_document = identity_document

    @property
    def degree_before(self):
        """Gets the degree_before of this PersonPart.  # noqa: E501


        :return: The degree_before of this PersonPart.  # noqa: E501
        :rtype: str
        """
        return self._degree_before

    @degree_before.setter
    def degree_before(self, degree_before):
        """Sets the degree_before of this PersonPart.


        :param degree_before: The degree_before of this PersonPart.  # noqa: E501
        :type: str
        """

        self._degree_before = degree_before

    @property
    def degree_after(self):
        """Gets the degree_after of this PersonPart.  # noqa: E501


        :return: The degree_after of this PersonPart.  # noqa: E501
        :rtype: str
        """
        return self._degree_after

    @degree_after.setter
    def degree_after(self, degree_after):
        """Sets the degree_after of this PersonPart.


        :param degree_after: The degree_after of this PersonPart.  # noqa: E501
        :type: str
        """

        self._degree_after = degree_after

    @property
    def first_name(self):
        """Gets the first_name of this PersonPart.  # noqa: E501


        :return: The first_name of this PersonPart.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this PersonPart.


        :param first_name: The first_name of this PersonPart.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this PersonPart.  # noqa: E501


        :return: The last_name of this PersonPart.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this PersonPart.


        :param last_name: The last_name of this PersonPart.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def birth_date(self):
        """Gets the birth_date of this PersonPart.  # noqa: E501


        :return: The birth_date of this PersonPart.  # noqa: E501
        :rtype: date
        """
        return self._birth_date

    @birth_date.setter
    def birth_date(self, birth_date):
        """Sets the birth_date of this PersonPart.


        :param birth_date: The birth_date of this PersonPart.  # noqa: E501
        :type: date
        """

        self._birth_date = birth_date

    @property
    def decease_date(self):
        """Gets the decease_date of this PersonPart.  # noqa: E501


        :return: The decease_date of this PersonPart.  # noqa: E501
        :rtype: date
        """
        return self._decease_date

    @decease_date.setter
    def decease_date(self, decease_date):
        """Sets the decease_date of this PersonPart.


        :param decease_date: The decease_date of this PersonPart.  # noqa: E501
        :type: date
        """

        self._decease_date = decease_date

    @property
    def identity_document(self):
        """Gets the identity_document of this PersonPart.  # noqa: E501


        :return: The identity_document of this PersonPart.  # noqa: E501
        :rtype: list[IdentityDocumentDetail]
        """
        return self._identity_document

    @identity_document.setter
    def identity_document(self, identity_document):
        """Sets the identity_document of this PersonPart.


        :param identity_document: The identity_document of this PersonPart.  # noqa: E501
        :type: list[IdentityDocumentDetail]
        """

        self._identity_document = identity_document

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PersonPart, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PersonPart):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
