# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ....core.datetime_utils import serialize_datetime
from ...devices.types.device_id import DeviceId
from .access_code_error import AccessCodeError
from .access_code_id import AccessCodeId
from .access_code_warning import AccessCodeWarning


class AccessCode(pydantic.BaseModel):
    access_code_id: AccessCodeId = pydantic.Field(description=("ID of the Access Code\n"))
    device_id: DeviceId = pydantic.Field(description=("ID of the Device\n"))
    type: str
    code: str = pydantic.Field(description=("Access code of Device\n"))
    starts_at: typing.Optional[dt.datetime] = pydantic.Field(
        description=("Timestamp of when the Access Code begins (only relevant for time_bound codes)\n")
    )
    ends_at: typing.Optional[dt.datetime] = pydantic.Field(
        description=("Timestamp of when the Access Code ends (only relevant for time_bound codes)\n")
    )
    created_at: dt.datetime = pydantic.Field(description=("Timestamp of when the Access Code was created\n"))
    name: typing.Optional[str] = pydantic.Field(description=("Name of Access Code\n"))
    status: typing.Optional[str]
    common_code_key: typing.Optional[str]
    errors: typing.List[AccessCodeError]
    warnings: typing.List[AccessCodeWarning]

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        json_encoders = {dt.datetime: serialize_datetime}
