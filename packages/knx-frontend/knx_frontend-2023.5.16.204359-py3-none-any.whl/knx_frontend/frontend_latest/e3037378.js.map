{"version":3,"file":"e3037378.js","mappings":";;;;;;;AAgBA;AC8BA;;;;AAKA;;;AAIA;AAKA;AACA;AACA;AACA;AACA;;;;AAIA;;AAIA;;AAEA;;;;AAKA;AACA;;AAEA;AAEA;;;;;AAKA;AACA;;;AAGA;;;;;AAMA;AACA;AApGA;;AAwGA;;AAGA;;;;AAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+GA;AC1JA;AACA;AACA;AACA;AACA;AACA;;AAGA;AAGA;;AAeA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtDA;ACzBA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAIA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAIA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;AA0CA;;;;;;AC1DA;;;;;ACzDA;;;;ADkEA;AACA;;;;AAIA;AACA;;;;AAIA;;;;AAIA;;;;;AAKA;;;;;AAKA;;;;;;;AAOA;;;AAGA;;;AAGA;;;;AAIA;;;AAGA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;;;;;AAKA;AACA;;;;;AAjFA;;;AA6FA;;;;AAIA;AACA;;;AAGA;AACA;;;AAGA;AACA;;;;;;AAMA;AACA;AACA;;;;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4JA","sources":["webpack://knx-frontend/./homeassistant-frontend/src/components/ha-button.ts","webpack://knx-frontend/./homeassistant-frontend/src/components/ha-file-upload.ts","webpack://knx-frontend/mwc-textarea-base.ts","webpack://knx-frontend/./homeassistant-frontend/src/components/ha-textarea.ts","webpack://knx-frontend/./homeassistant-frontend/src/components/ha-selector/ha-selector-text.ts","webpack://knx-frontend/./src/views/info.ts","webpack://knx-frontend/./src/version.ts"],"sourcesContent":["import { Button } from \"@material/mwc-button\";\nimport { css } from \"lit\";\nimport { customElement } from \"lit/decorators\";\nimport { styles } from \"@material/mwc-button/styles.css\";\n\n@customElement(\"ha-button\")\nexport class HaButton extends Button {\n  static override styles = [\n    styles,\n    css`\n      ::slotted([slot=\"icon\"]) {\n        margin-inline-start: 0px;\n        margin-inline-end: 8px;\n        direction: var(--direction);\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-button\": HaButton;\n  }\n}\n","import { styles } from \"@material/mwc-textfield/mwc-textfield.css\";\nimport { mdiClose } from \"@mdi/js\";\nimport { css, html, LitElement, PropertyValues, TemplateResult } from \"lit\";\nimport { customElement, property, query, state } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport { HomeAssistant } from \"../types\";\nimport \"./ha-circular-progress\";\nimport \"./ha-icon-button\";\n\ndeclare global {\n  interface HASSDomEvents {\n    \"file-picked\": { files: FileList };\n  }\n}\n\n@customElement(\"ha-file-upload\")\nexport class HaFileUpload extends LitElement {\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @property() public accept!: string;\n\n  @property() public icon?: string;\n\n  @property() public label!: string;\n\n  @property() public value: string | TemplateResult | null = null;\n\n  @property({ type: Boolean }) private uploading = false;\n\n  @property({ type: Boolean, attribute: \"auto-open-file-dialog\" })\n  private autoOpenFileDialog = false;\n\n  @state() private _drag = false;\n\n  @query(\"#input\") private _input?: HTMLInputElement;\n\n  protected firstUpdated(changedProperties: PropertyValues) {\n    super.firstUpdated(changedProperties);\n    if (this.autoOpenFileDialog) {\n      this._openFilePicker();\n    }\n  }\n\n  public render(): TemplateResult {\n    return html`\n      ${this.uploading\n        ? html`<ha-circular-progress\n            alt=\"Uploading\"\n            size=\"large\"\n            active\n          ></ha-circular-progress>`\n        : html`\n            <label\n              for=\"input\"\n              class=\"mdc-text-field mdc-text-field--filled ${classMap({\n                \"mdc-text-field--focused\": this._drag,\n                \"mdc-text-field--with-leading-icon\": Boolean(this.icon),\n                \"mdc-text-field--with-trailing-icon\": Boolean(this.value),\n              })}\"\n              @drop=${this._handleDrop}\n              @dragenter=${this._handleDragStart}\n              @dragover=${this._handleDragStart}\n              @dragleave=${this._handleDragEnd}\n              @dragend=${this._handleDragEnd}\n            >\n              <span class=\"mdc-text-field__ripple\"></span>\n              <span\n                class=\"mdc-floating-label ${this.value || this._drag\n                  ? \"mdc-floating-label--float-above\"\n                  : \"\"}\"\n                id=\"label\"\n                >${this.label}</span\n              >\n              ${this.icon\n                ? html`<span\n                    class=\"mdc-text-field__icon mdc-text-field__icon--leading\"\n                  >\n                    <ha-icon-button\n                      @click=${this._openFilePicker}\n                      .path=${this.icon}\n                    ></ha-icon-button>\n                  </span>`\n                : \"\"}\n              <div class=\"value\">${this.value}</div>\n              <input\n                id=\"input\"\n                type=\"file\"\n                class=\"mdc-text-field__input file\"\n                accept=${this.accept}\n                @change=${this._handleFilePicked}\n                aria-labelledby=\"label\"\n              />\n              ${this.value\n                ? html`<span\n                    class=\"mdc-text-field__icon mdc-text-field__icon--trailing\"\n                  >\n                    <ha-icon-button\n                      slot=\"suffix\"\n                      @click=${this._clearValue}\n                      .label=${this.hass?.localize(\"ui.common.close\") ||\n                      \"close\"}\n                      .path=${mdiClose}\n                    ></ha-icon-button>\n                  </span>`\n                : \"\"}\n              <span\n                class=\"mdc-line-ripple ${this._drag\n                  ? \"mdc-line-ripple--active\"\n                  : \"\"}\"\n              ></span>\n            </label>\n          `}\n    `;\n  }\n\n  private _openFilePicker() {\n    this._input?.click();\n  }\n\n  private _handleDrop(ev: DragEvent) {\n    ev.preventDefault();\n    ev.stopPropagation();\n    if (ev.dataTransfer?.files) {\n      fireEvent(this, \"file-picked\", { files: ev.dataTransfer.files });\n    }\n    this._drag = false;\n  }\n\n  private _handleDragStart(ev: DragEvent) {\n    ev.preventDefault();\n    ev.stopPropagation();\n    this._drag = true;\n  }\n\n  private _handleDragEnd(ev: DragEvent) {\n    ev.preventDefault();\n    ev.stopPropagation();\n    this._drag = false;\n  }\n\n  private _handleFilePicked(ev) {\n    fireEvent(this, \"file-picked\", { files: ev.target.files });\n  }\n\n  private _clearValue(ev: Event) {\n    ev.preventDefault();\n    this.value = null;\n    fireEvent(this, \"change\");\n  }\n\n  static get styles() {\n    return [\n      styles,\n      css`\n        :host {\n          display: block;\n        }\n        .mdc-text-field--filled {\n          height: auto;\n          padding-top: 16px;\n          cursor: pointer;\n        }\n        .mdc-text-field--filled.mdc-text-field--with-trailing-icon {\n          padding-top: 28px;\n        }\n        .mdc-text-field:not(.mdc-text-field--disabled) .mdc-text-field__icon {\n          color: var(--secondary-text-color);\n        }\n        .mdc-text-field--filled.mdc-text-field--with-trailing-icon\n          .mdc-text-field__icon {\n          align-self: flex-end;\n        }\n        .mdc-text-field__icon--leading {\n          margin-bottom: 12px;\n          inset-inline-start: initial;\n          inset-inline-end: 0px;\n          direction: var(--direction);\n        }\n        .mdc-text-field--filled .mdc-floating-label--float-above {\n          transform: scale(0.75);\n          top: 8px;\n        }\n        .mdc-floating-label {\n          inset-inline-start: 16px !important;\n          inset-inline-end: initial !important;\n          direction: var(--direction);\n        }\n        .mdc-text-field--filled .mdc-floating-label {\n          inset-inline-start: 48px !important;\n          inset-inline-end: initial !important;\n          direction: var(--direction);\n        }\n        .dragged:before {\n          position: var(--layout-fit_-_position);\n          top: var(--layout-fit_-_top);\n          right: var(--layout-fit_-_right);\n          bottom: var(--layout-fit_-_bottom);\n          left: var(--layout-fit_-_left);\n          background: currentColor;\n          content: \"\";\n          opacity: var(--dark-divider-opacity);\n          pointer-events: none;\n          border-radius: 4px;\n        }\n        .value {\n          width: 100%;\n        }\n        input.file {\n          display: none;\n        }\n        img {\n          max-width: 100%;\n          max-height: 125px;\n        }\n        ha-icon-button {\n          --mdc-icon-button-size: 24px;\n          --mdc-icon-size: 20px;\n        }\n        ha-circular-progress {\n          display: block;\n          text-align-last: center;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-file-upload\": HaFileUpload;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n// Style preference for leading underscores.\n// tslint:disable:strip-private-property-underscore\n\n\nimport {TextAreaCharCounter, TextFieldBase, TextFieldInputMode, TextFieldType} from '@material/mwc-textfield/mwc-textfield-base.js';\nimport {ComplexAttributeConverter, html, TemplateResult} from 'lit';\nimport {property, query} from 'lit/decorators.js';\nimport {classMap} from 'lit/directives/class-map.js';\nimport {ifDefined} from 'lit/directives/if-defined.js';\nimport {live} from 'lit/directives/live.js';\n\nexport {TextAreaCharCounter, TextFieldInputMode, TextFieldType};\n\nconst booleanOrStringConverter: ComplexAttributeConverter<boolean|string> = {\n  fromAttribute(value) {\n    if (value === null) {\n      return false;\n    } else if (value === '') {\n      return true;\n    }\n\n    return value;\n  },\n  toAttribute(value) {\n    if (typeof value === 'boolean') {\n      return value ? '' : null;\n    }\n\n    return value;\n  }\n};\n\n/** @soyCompatible */\nexport abstract class TextAreaBase extends TextFieldBase {\n  @query('textarea') protected override formElement!: HTMLInputElement;\n\n  @property({type: Number}) rows = 2;\n\n  @property({type: Number}) cols = 20;\n\n  @property({converter: booleanOrStringConverter})\n  override charCounter: boolean|TextAreaCharCounter = false;\n\n  /** @soyTemplate */\n  override render(): TemplateResult {\n    const shouldRenderCharCounter = this.charCounter && this.maxLength !== -1;\n    const shouldRenderInternalCharCounter =\n        shouldRenderCharCounter && this.charCounter === 'internal';\n    const shouldRenderExternalCharCounter =\n        shouldRenderCharCounter && !shouldRenderInternalCharCounter;\n    const shouldRenderHelperText = !!this.helper || !!this.validationMessage ||\n        shouldRenderExternalCharCounter;\n\n    /** @classMap */\n    const classes = {\n      'mdc-text-field--disabled': this.disabled,\n      'mdc-text-field--no-label': !this.label,\n      'mdc-text-field--filled': !this.outlined,\n      'mdc-text-field--outlined': this.outlined,\n      'mdc-text-field--end-aligned': this.endAligned,\n      'mdc-text-field--with-internal-counter': shouldRenderInternalCharCounter,\n    };\n\n    return html`\n      <label class=\"mdc-text-field mdc-text-field--textarea ${\n        classMap(classes)}\">\n        ${this.renderRipple()}\n        ${this.outlined ? this.renderOutline() : this.renderLabel()}\n        ${this.renderInput()}\n        ${this.renderCharCounter(shouldRenderInternalCharCounter)}\n        ${this.renderLineRipple()}\n      </label>\n      ${\n        this.renderHelperText(\n            shouldRenderHelperText, shouldRenderExternalCharCounter)}\n    `;\n  }\n\n  /** @soyTemplate */\n  protected override renderInput(): TemplateResult {\n    const ariaLabelledbyOrUndef = !!this.label ? 'label' : undefined;\n    const minOrUndef = this.minLength === -1 ? undefined : this.minLength;\n    const maxOrUndef = this.maxLength === -1 ? undefined : this.maxLength;\n    const autocapitalizeOrUndef = this.autocapitalize ?\n        (this.autocapitalize as 'off' | 'none' | 'on' | 'sentences' | 'words' |\n         'characters' | 'off' | 'none' | 'on' | 'sentences' | 'words' |\n         'characters') :\n        undefined;\n\n    return html`\n      <textarea\n          aria-labelledby=${ifDefined(ariaLabelledbyOrUndef)}\n          class=\"mdc-text-field__input\"\n          .value=\"${live(this.value) as unknown as string}\"\n          rows=\"${this.rows}\"\n          cols=\"${this.cols}\"\n          ?disabled=\"${this.disabled}\"\n          placeholder=\"${this.placeholder}\"\n          ?required=\"${this.required}\"\n          ?readonly=\"${this.readOnly}\"\n          minlength=\"${ifDefined(minOrUndef)}\"\n          maxlength=\"${ifDefined(maxOrUndef)}\"\n          name=\"${ifDefined(this.name === '' ? undefined : this.name)}\"\n          inputmode=\"${ifDefined(this.inputMode)}\"\n          autocapitalize=\"${ifDefined(autocapitalizeOrUndef)}\"\n          @input=\"${this.handleInputChange}\"\n          @blur=\"${this.onInputBlur}\">\n      </textarea>`;\n  }\n}\n","import { TextAreaBase } from \"@material/mwc-textarea/mwc-textarea-base\";\nimport { styles as textfieldStyles } from \"@material/mwc-textfield/mwc-textfield.css\";\nimport { styles as textareaStyles } from \"@material/mwc-textarea/mwc-textarea.css\";\nimport { css, PropertyValues } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\n\n@customElement(\"ha-textarea\")\nexport class HaTextArea extends TextAreaBase {\n  @property({ type: Boolean, reflect: true }) autogrow = false;\n\n  firstUpdated() {\n    super.firstUpdated();\n\n    this.setAttribute(\"dir\", document.dir);\n  }\n\n  updated(changedProperties: PropertyValues) {\n    super.updated(changedProperties);\n    if (this.autogrow && changedProperties.has(\"value\")) {\n      this.mdcRoot.dataset.value = this.value + '=\\u200B\"'; // add a zero-width space to correctly wrap\n    }\n  }\n\n  static override styles = [\n    textfieldStyles,\n    textareaStyles,\n    css`\n      :host([autogrow]) .mdc-text-field {\n        position: relative;\n        min-height: 74px;\n        min-width: 178px;\n        max-height: 200px;\n      }\n      :host([autogrow]) .mdc-text-field:after {\n        content: attr(data-value);\n        margin-top: 23px;\n        margin-bottom: 9px;\n        line-height: 1.5rem;\n        min-height: 42px;\n        padding: 0px 32px 0 16px;\n        letter-spacing: var(\n          --mdc-typography-subtitle1-letter-spacing,\n          0.009375em\n        );\n        visibility: hidden;\n        white-space: pre-wrap;\n      }\n      :host([autogrow]) .mdc-text-field__input {\n        position: absolute;\n        height: calc(100% - 32px);\n      }\n      :host([autogrow]) .mdc-text-field.mdc-text-field--no-label:after {\n        margin-top: 16px;\n        margin-bottom: 16px;\n      }\n      :host([dir=\"rtl\"]) .mdc-floating-label {\n        right: 16px;\n        left: initial;\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-textarea\": HaTextArea;\n  }\n}\n","import { mdiEye, mdiEyeOff } from \"@mdi/js\";\nimport { css, CSSResultGroup, html, LitElement } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport { StringSelector } from \"../../data/selector\";\nimport { HomeAssistant } from \"../../types\";\nimport \"../ha-icon-button\";\nimport \"../ha-textarea\";\nimport \"../ha-textfield\";\n\n@customElement(\"ha-selector-text\")\nexport class HaTextSelector extends LitElement {\n  @property() public hass!: HomeAssistant;\n\n  @property() public value?: any;\n\n  @property() public name?: string;\n\n  @property() public label?: string;\n\n  @property() public placeholder?: string;\n\n  @property() public helper?: string;\n\n  @property() public selector!: StringSelector;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @property({ type: Boolean }) public required = true;\n\n  @state() private _unmaskedPassword = false;\n\n  protected render() {\n    if (this.selector.text?.multiline) {\n      return html`<ha-textarea\n        .name=${this.name}\n        .label=${this.label}\n        .placeholder=${this.placeholder}\n        .value=${this.value || \"\"}\n        .helper=${this.helper}\n        helperPersistent\n        .disabled=${this.disabled}\n        @input=${this._handleChange}\n        autocapitalize=\"none\"\n        .autocomplete=${this.selector.text?.autocomplete}\n        spellcheck=\"false\"\n        .required=${this.required}\n        autogrow\n      ></ha-textarea>`;\n    }\n    return html`<ha-textfield\n        .name=${this.name}\n        .value=${this.value || \"\"}\n        .placeholder=${this.placeholder || \"\"}\n        .helper=${this.helper}\n        helperPersistent\n        .disabled=${this.disabled}\n        .type=${this._unmaskedPassword ? \"text\" : this.selector.text?.type}\n        @input=${this._handleChange}\n        .label=${this.label || \"\"}\n        .suffix=${this.selector.text?.type === \"password\"\n          ? // reserve some space for the icon.\n            html`<div style=\"width: 24px\"></div>`\n          : this.selector.text?.suffix}\n        .required=${this.required}\n        .autocomplete=${this.selector.text?.autocomplete}\n      ></ha-textfield>\n      ${this.selector.text?.type === \"password\"\n        ? html`<ha-icon-button\n            toggles\n            .label=${`${this._unmaskedPassword ? \"Hide\" : \"Show\"} password`}\n            @click=${this._toggleUnmaskedPassword}\n            .path=${this._unmaskedPassword ? mdiEyeOff : mdiEye}\n          ></ha-icon-button>`\n        : \"\"}`;\n  }\n\n  private _toggleUnmaskedPassword(): void {\n    this._unmaskedPassword = !this._unmaskedPassword;\n  }\n\n  private _handleChange(ev) {\n    let value = ev.target.value;\n    if (this.value === value) {\n      return;\n    }\n    if (value === \"\" && !this.required) {\n      value = undefined;\n    }\n\n    fireEvent(this, \"value-changed\", { value });\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        display: block;\n        position: relative;\n      }\n      ha-textarea,\n      ha-textfield {\n        width: 100%;\n      }\n      ha-icon-button {\n        position: absolute;\n        top: 10px;\n        right: 10px;\n        --mdc-icon-button-size: 36px;\n        --mdc-icon-size: 20px;\n        color: var(--secondary-text-color);\n        inset-inline-start: initial;\n        inset-inline-end: 10px;\n        direction: var(--direction);\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-selector-text\": HaTextSelector;\n  }\n}\n","import { mdiFileUpload } from \"@mdi/js\";\nimport { css, nothing, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\n\nimport \"@ha/components/ha-button-menu\";\nimport \"@ha/components/ha-card\";\nimport \"@ha/layouts/ha-app-layout\";\nimport \"@ha/layouts/hass-subpage\";\nimport \"@ha/components/ha-button\";\nimport \"@ha/components/ha-file-upload\";\nimport \"@ha/components/ha-selector/ha-selector-text\";\nimport { uploadFile } from \"@ha/data/file_upload\";\nimport { extractApiErrorMessage } from \"@ha/data/hassio/common\";\nimport { showAlertDialog } from \"@ha/dialogs/generic/show-dialog-box\";\nimport { HomeAssistant } from \"@ha/types\";\n\nimport {\n  getKnxInfoData,\n  processProjectFile,\n  removeProjectFile,\n} from \"../services/websocket.service\";\nimport { KNXInfoData, KNXProjectInfo } from \"../types/websocket\";\nimport { localize } from \"../localize/localize\";\nimport { KNXLogger } from \"../tools/knx-logger\";\nimport { VERSION } from \"../version\";\n\nconst logger = new KNXLogger(\"info\");\n\n@customElement(\"knx-info\")\nexport class KNXInfo extends LitElement {\n  @property({ type: Object }) public hass!: HomeAssistant;\n\n  @property({ type: Boolean, reflect: true }) public narrow!: boolean;\n\n  @state() private knxInfoData: KNXInfoData | null = null;\n\n  @state() private _projectPassword?: string;\n\n  @state() private _uploading = false;\n\n  @state() private _projectFile?: File;\n\n  protected firstUpdated() {\n    this.loadKnxInfo();\n  }\n\n  protected render(): TemplateResult | void {\n    if (!this.knxInfoData) {\n      return html`Loading...`;\n    }\n\n    return html`\n      <div class=\"columns\">\n        <ha-card class=\"knx-info\" header=\"KNX Information\">\n          <div class=\"card-content knx-info-section\">\n            <div class=\"knx-content-row\">\n              <div>XKNX Version</div>\n              <div>${this.knxInfoData?.version}</div>\n            </div>\n\n            <div class=\"knx-content-row\">\n              <div>KNX Frontend Version</div>\n              <div>${VERSION}</div>\n            </div>\n\n            <div class=\"knx-content-row\">\n              <div>${localize(this.hass!.language, \"info_connected_to_bus\")}</div>\n              <div>${this.knxInfoData?.connected ? \"Yes\" : \"No\"}</div>\n            </div>\n\n            <div class=\"knx-content-row\">\n              <div>${localize(this.hass!.language, \"info_individual_address\")}</div>\n              <div>${this.knxInfoData?.current_address}</div>\n            </div>\n\n            <div class=\"knx-bug-report\">\n              <div>${localize(this.hass!.language, \"info_issue_tracker\")}</div>\n              <ul>\n                <li>\n                  <a href=\"https://github.com/XKNX/knx-frontend/issues\" target=\"_blank\"\n                    >${localize(this.hass!.language, \"info_issue_tracker_knx_frontend\")}</a\n                  >\n                </li>\n                <li>\n                  <a href=\"https://github.com/XKNX/xknxproject/issues\" target=\"_blank\"\n                    >${localize(this.hass!.language, \"info_issue_tracker_xknxproject\")}</a\n                  >\n                </li>\n                <li>\n                  <a href=\"https://github.com/XKNX/xknx/issues\" target=\"_blank\"\n                    >${localize(this.hass!.language, \"info_issue_tracker_xknx\")}</a\n                  >\n                </li>\n              </ul>\n            </div>\n          </div>\n        </ha-card>\n        ${this.knxInfoData?.project ? this._projectCard(this.knxInfoData.project) : nothing}\n        <ha-card\n          class=\"knx-info\"\n          .header=${localize(this.hass!.language, \"info_project_file_header\")}\n        >\n          <div class=\"knx-project-description\">\n            ${localize(this.hass!.language, \"info_project_upload_description\")}\n          </div>\n          <div class=\"knx-content-row\">\n            <ha-file-upload\n              .hass=${this.hass}\n              accept=\".knxproj\"\n              .icon=${mdiFileUpload}\n              .label=${localize(this.hass!.language, \"info_project_file\")}\n              .value=${this._projectFile?.name}\n              .uploading=${this._uploading}\n              @file-picked=${this._filePicked}\n            ></ha-file-upload>\n          </div>\n          <div class=\"knx-content-row\">\n            <ha-selector-text\n              .hass=${this.hass}\n              .value=${this._projectPassword || \"\"}\n              .label=${localize(this.hass!.language, \"info_project_password\")}\n              .selector=${{ text: { multiline: false, type: \"password\" } }}\n              .required=${false}\n              @value-changed=${this._passwordChanged}\n            >\n            </ha-selector-text>\n          </div>\n          <div class=\"knx-content-button\">\n            <ha-button @click=${this._uploadFile} .disabled=${this._uploading || !this._projectFile}\n              >${localize(this.hass!.language, \"info_project_upload\")}</ha-button\n            >\n          </div>\n        </ha-card>\n      </div>\n    `;\n  }\n\n  private _projectCard(projectInfo: KNXProjectInfo) {\n    return html`\n      <ha-card\n        class=\"knx-info\"\n        .header=${localize(this.hass!.language, \"info_project_data_header\")}\n      >\n        <div class=\"card-content knx-info-section\">\n          <div class=\"knx-content-row\">\n            <div>${localize(this.hass!.language, \"info_project_data_name\")}</div>\n            <div>${projectInfo.name}</div>\n          </div>\n          <div class=\"knx-content-row\">\n            <div>${localize(this.hass!.language, \"info_project_data_last_modified\")}</div>\n            <div>${new Date(projectInfo.last_modified).toUTCString()}</div>\n          </div>\n          <div class=\"knx-content-row\">\n            <div>${localize(this.hass!.language, \"info_project_data_tool_version\")}</div>\n            <div>${projectInfo.tool_version}</div>\n          </div>\n        </div>\n        <div class=\"knx-delete-project-button\">\n          <ha-button\n            class=\"knx-warning\"\n            @click=${this._removeProject}\n            .disabled=${this._uploading || !this.knxInfoData?.project}\n            >${localize(this.hass!.language, \"info_project_delete\")}</ha-button\n          >\n        </div>\n      </ha-card>\n    `;\n  }\n\n  private loadKnxInfo() {\n    getKnxInfoData(this.hass).then(\n      (knxInfoData) => {\n        this.knxInfoData = knxInfoData;\n        this.requestUpdate();\n      },\n      (err) => {\n        logger.error(\"getKnxInfoData\", err);\n      }\n    );\n  }\n\n  private _filePicked(ev) {\n    this._projectFile = ev.detail.files[0];\n  }\n\n  private _passwordChanged(ev) {\n    this._projectPassword = ev.detail.value;\n  }\n\n  private async _uploadFile(_ev) {\n    const file = this._projectFile;\n    if (typeof file === \"undefined\") {\n      return;\n    }\n\n    let error: Error | undefined;\n    this._uploading = true;\n    try {\n      const project_file_id = await uploadFile(this.hass, file);\n      await processProjectFile(this.hass, project_file_id, this._projectPassword || \"\");\n    } catch (err: any) {\n      error = err;\n      showAlertDialog(this, {\n        title: \"Upload failed\",\n        text: extractApiErrorMessage(err),\n        confirmText: \"ok\",\n      });\n    } finally {\n      if (!error) {\n        this._projectFile = undefined;\n        this._projectPassword = undefined;\n      }\n      this._uploading = false;\n      this.loadKnxInfo();\n    }\n  }\n\n  private async _removeProject(_ev) {\n    try {\n      await removeProjectFile(this.hass);\n    } catch (err: any) {\n      showAlertDialog(this, {\n        title: \"Deletion failed\",\n        text: extractApiErrorMessage(err),\n        confirmText: \"ok\",\n      });\n    } finally {\n      this.loadKnxInfo();\n    }\n  }\n\n  static get styles() {\n    return css`\n      .columns {\n        display: flex;\n        justify-content: center;\n      }\n\n      .columns > ha-card {\n        min-width: 400px;\n      }\n\n      @media screen and (max-width: 1232px) {\n        .columns {\n          flex-direction: column;\n        }\n\n        .columns > ha-card {\n          width: 96.5%;\n        }\n\n        .knx-delete-project-button {\n          top: 20px;\n        }\n\n        .knx-info {\n          margin-right: 8px;\n          max-width: 96.5%;\n        }\n      }\n\n      @media screen and (min-width: 1233px) {\n        .knx-info {\n          max-width: 400px;\n        }\n      }\n\n      .knx-info {\n        margin-left: 8px;\n        margin-top: 8px;\n      }\n\n      .knx-info-section {\n        display: flex;\n        flex-direction: column;\n      }\n\n      .knx-content-row {\n        display: flex;\n        flex-direction: row;\n        justify-content: space-between;\n      }\n\n      .knx-content-row > div:nth-child(2) {\n        margin-left: 1rem;\n      }\n\n      .knx-content-button {\n        display: flex;\n        flex-direction: row-reverse;\n        justify-content: space-between;\n      }\n\n      .knx-warning {\n        --mdc-theme-primary: var(--error-color);\n      }\n\n      .knx-project-description {\n        margin-top: -8px;\n        padding: 0px 16px 16px;\n      }\n\n      .knx-delete-project-button {\n        position: absolute;\n        bottom: 0;\n        right: 0;\n      }\n\n      .knx-bug-report {\n        margin-top: 20px;\n      }\n\n      .knx-bug-report > ul > li > a {\n        text-decoration: none;\n        color: var(--mdc-theme-primary);\n      }\n\n      ha-file-upload,\n      ha-selector-text {\n        width: 100%;\n        margin: 0 8px 8px;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"knx-info\": KNXInfo;\n  }\n}\n","export const VERSION = \"2023.5.16.204359\";\n"],"names":[],"sourceRoot":""}