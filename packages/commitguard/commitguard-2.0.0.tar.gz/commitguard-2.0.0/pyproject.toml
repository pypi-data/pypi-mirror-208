[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "commitguard"
description = "Library for managing and writing git hooks in Python using pyproject.toml for its settings âœ¨"
readme = "README.md"
requires-python = ">=3.7"
license = "MIT"
authors = [
    { name = "Yasser Tahiri", email = "hello@yezz.me" },
]
keywords = [
    "git",
    "hooks",
    "pre-commit",
    "commit",
]

classifiers = [
    "Development Status :: 5 - Production/Stable",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Intended Audience :: Developers",
    "Environment :: Console",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3.7",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3 :: Only",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development :: Version Control :: Git",
    "Typing :: Typed",
]

dependencies = [
    "typing-extensions >=3.7.4,<4.6.0",
    "colorful >=0.5.4,<0.6.0",
    "httpx[http2] >=0.24.0,<1.0.0",
    "rich >=13.0.0,<20.0.0",
    "tomlkit >=0.5.11",
]

dynamic = ["version"]

[project.scripts]
cli-name = "commitguard.cli:main"

[project.urls]
Homepage = "https://github.com/yezz123/CommitGuard"
Funding = 'https://github.com/sponsors/yezz123'

[project.optional-dependencies]
lint = [
    "pre-commit==3.3.1",
    "mypy==1.3.0",
]
test = [
    "pytest==7.3.1",
    "pytest-asyncio == 0.21.0",
    "pytest-cov==4.0.0",
    "pytest-pretty",
]
docs = [
    "mkdocs >=1.1.2,<2.0.0",
    "mkdocs-material >=8.1.4,<10.0.0",
    "mdx-include >=1.4.1,<2.0.0",
    "mkdocs-markdownextradata-plugin >=0.1.7,<0.3.0",
    "mkdocs-mermaid2-plugin==0.6.0",
    "markdown-include==0.8.1",
    "pymdown-extensions==9.11",
    "jinja2==3.1.2"
]

[tool.hatch.version]
path = "commitguard/__init__.py"

[tool.isort]
profile = "black"
known_third_party = ["typing_extensions"]

[tool.ruff]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "C",  # flake8-comprehensions
    "B",  # flake8-bugbear
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

[tool.ruff.isort]
known-third-party = ["typing_extensions"]

[tool.mypy]
ignore_missing_imports = true
explicit_package_bases = true

[[tool.mypy.overrides]]
module = "commitguard.tests.*"
ignore_missing_imports = true
check_untyped_defs = true

[tool.coverage.report]
precision = 2
exclude_lines = [
    "pragma: no cover",
    "raise NotImplementedError",
    "raise NotImplemented",
    "@overload",
    "if TYPE_CHECKING:",
    "if __name__ == .__main__.:",
]

[tool.pytest]
testpaths = "tests/"
log_cli = "1"
log_cli_level = "INFO"
log_cli_format = "%(asctime)s [%(levelname)8s] %(message)s (%(filename)s:%(lineno)s)"
log_cli_date_format= "%Y-%m-%d %H:%M:%S"
asyncio_mode= "auto"

[tool.commitguard]
mode = "pythonpath"
pre-commit = []
