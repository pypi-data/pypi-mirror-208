[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "commitguard"
version = "2.1.0"
description = "Library for managing and writing git hooks in Python using pyproject.toml for its settings âœ¨"
authors = ["Yasser Tahiri <hello@yezz.me>"]
license = "MIT"
readme = "README.md"
homepage = "https://github.com/yezz123/CommitGuard"
repository = "https://github.com/yezz123/CommitGuard"

classifiers=[
    "Development Status :: 5 - Production/Stable",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Intended Audience :: Developers",
    "Environment :: Console",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3.7",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3 :: Only",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development :: Version Control :: Git",
    "Typing :: Typed",
]
keywords = [
  "git",
  "formatting",
  "linting",
  "hooks",
]

packages = [
  { include = "commitguard"},
  { include = "tests", format = "sdist" },
  { include = "poetry.lock", format = "sdist"},
  { include = "poetry.toml", format = "sdist"},
]
include = [
  "commitguard/precommit/template",
]

[tool.poetry.dependencies]
python = "^3.7.2"
typing-extensions = { version = "^4.4.0", python = "<3.8" }
tomlkit = ">=0.5.11"
httpx = {extras = ["http2"], version = ">=0.23,<0.25"}
rich = ">=12.4.4"
colorful = "^0.5.4"

[tool.poetry.dev-dependencies]
mypy = "^1.3.0"
pytest = "^7.3.1"
pytest-asyncio = "^0.21.0"
pytest-cov= "^4.0.0"
pytest-pretty = "*"
black = ">=20.8"
isort = "^5.8.0"

[tool.poetry.scripts]
commitguard = "commitguard.cli:main"

[tool.black]
line-length = 80
target-version = ['py37', 'py38', 'py39', 'py310', 'py311']

[tool.commitguard]
pre-commit = []
mode = "poetry"

[tool.isort]
profile = "black"
line_length = 80
known_third_party = ["typing_extensions"]

[tool.mypy]
ignore_missing_imports = true
explicit_package_bases = true

[tool.pytest]
testpaths = "tests/"
log_cli = "1"
log_cli_level = "INFO"
log_cli_format = "%(asctime)s [%(levelname)8s] %(message)s (%(filename)s:%(lineno)s)"
log_cli_date_format= "%Y-%m-%d %H:%M:%S"
asyncio_mode= "auto"


[tool.ruff]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "C",  # flake8-comprehensions
    "B",  # flake8-bugbear
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

[tool.ruff.isort]
known-third-party = ["typing_extensions"]

[[tool.mypy.overrides]]
module = "commitguard.tests.*"
ignore_missing_imports = true
check_untyped_defs = true

[tool.coverage.report]
precision = 2
exclude_lines = [
    "pragma: no cover",
    "raise NotImplementedError",
    "raise NotImplemented",
    "@overload",
    "if TYPE_CHECKING:",
    "if __name__ == .__main__.:",
]