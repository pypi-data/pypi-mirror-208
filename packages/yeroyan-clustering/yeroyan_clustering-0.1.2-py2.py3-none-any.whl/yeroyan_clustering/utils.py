"""
A module for post analysis visualisations and summarization utils
"""

from typing import Literal, TypeAlias

import numpy as np
import pandas as pd

from yeroyan_clustering.processing import SuperTSNE, DataProcessor, numerical_features

features_to_aggregate: TypeAlias = Literal['all', 'categorical', 'numerical']


def visualise_feature_level(data_object: DataProcessor, processed_data: numerical_features,
                            visualiser: SuperTSNE, theoretical_label: str | np.ndarray, dim: int = 2):
    """A powerful visualisation utility to analyse features (categorical) separation and clustering results

    Parameters
    ----------
    data_object: DataProcessor :
        DataProcessor instance that has runned its .preprocess() method
    processed_data: numerical_features :
        Processed dataset (post PCA) returned by DataProcessor().preprocess() method
    visualiser: SuperTSNE :
        SuperTSNE instance for dimensionality reduction
    theoretical_label: str | np.ndarray :

    dim: int :
        Indicator of numbe rof dimensions to keep for t-SNE
        (Default value = 2)

    Returns
    -------
    None
    """
    theoretical_label_values = theoretical_label
    if isinstance(theoretical_label, str):
        theoretical_label_values = data_object.untransformed_data[theoretical_label].values
    visualiser.visualise(processed_data, theoretical_label_values, dim=dim)


def post_analysis(data_object: DataProcessor, predicted_labels: np.ndarray,
                  features: features_to_aggregate = 'all', stats: list = ('mean', 'median')):
    """Perform post clustering aggregations based on the predictions

    Parameters
    ----------
    data_object: DataProcessor :
        DataProcessor instance that has runned its .preprocess() method
    predicted_labels: np.ndarray :
        Predicted labels generated by clustering algorithm
    features: features_to_aggregate :
         (Default value = 'all')
    stats: list :
        Numerical Statistics used during group_by
        (Default value = ('mean')
    'median') :

    Returns
    -------
    tuple_: tuple
        three/two datasets from (full_data, numerical_summary, categorical_summary)
    """
    full_data = data_object.df.copy()
    full_data['Clusters'] = predicted_labels
    numeric = full_data.groupby('Clusters').agg(stats)
    categoric = {}
    for col in data_object.cat_cols:
        categoric[col] = pd.crosstab(full_data.Clusters, full_data[col])

    tuple_ = [full_data, numeric, categoric]
    if features == 'numerical':
        tuple_ = tuple_[:-1]
    elif features == 'categorical':
        tuple_.pop(1)

    return tuple(tuple_)
