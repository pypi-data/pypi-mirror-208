Metadata-Version: 2.1
Name: rfmanalysis
Version: 0.1.2
Summary: This repository contains a Python implementation of RFM (Recency, Frequency, Monetary) analysis, a customer segmentation technique used in marketing and customer relationship management. The RFM analysis helps identify customer segments based on their purchasing behavior, allowing businesses to tailor their marketing strategies and customer retention efforts.
Home-page: https://github.com/emmayann/rfmanalysis
Author: Emma Hovhannisyan
Author-email: emmahovhannisyan02@gmail.com
License: MIT license
Keywords: rfmanalysis
Classifier: Development Status :: 2 - Pre-Alpha
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Natural Language :: English
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Requires-Python: >=3.6
License-File: LICENSE
License-File: AUTHORS.rst

Here's the README.md in reStructuredText format:

.. image:: https://img.shields.io/pypi/v/rfmanalysis.svg
    :target: https://pypi.python.org/pypi/rfmanalysis
    :alt: Latest PyPI version

RFM Analysis
============

This repository contains a Python implementation of RFM (Recency, Frequency, Monetary) analysis, a customer segmentation technique used in marketing and customer relationship management. The RFM analysis helps identify customer segments based on their purchasing behavior, allowing businesses to tailor their marketing strategies and customer retention efforts.

RFMAnalysis
-----------

The `RFMAnalysis` class provides methods to perform RFM analysis on customer transaction data. Here is an overview of the class and its methods:

### Class Initialization

.. code-block:: python

    RFMAnalysis(data, id_col, date_col, revenue_col)

- `data`: Pandas DataFrame containing customer transaction data.
- `id_col`: Column name representing the unique customer identifier.
- `date_col`: Column name representing the transaction date.
- `revenue_col`: Column name representing the transaction revenue.

### Methods

- `create_rfm_columns()`: Creates the RFM columns (Recency, Frequency, Monetary) based on the transaction data.
- `scale_rfm_columns()`: Scales the RFM columns into quartiles (4 segments) for scoring.
- `rfm_scores()`: Calculates the RFM scores and segments for each customer.
- `top_customers()`: Sorts the customers by RFM segments in descending order.
- `give_names_to_segments()`: Assigns segment names to each RFM segment based on the RFM scores.
- `segments_distribution()`: Returns a DataFrame with the mean RFM values and segment counts.

RFMVisualizer
-------------

The `RFMVisualizer` class provides visualizations for RFM analysis. Here is an overview of the class and its methods:

### Static Methods

- `plot_rfm(rfm_data)`: Plots the distribution of RFM scores.
- `visualize_segments(rfm_data)`: Displays a treemap visualization of customer segments.
- `segment_distribution_barplot(rfm_data)`: Displays a bar chart of segment counts.
- `segment_boxplot(rfm_data)`: Displays boxplots of RFM scores for each segment.
- `segment_comparison(rfm_data)`: Displays bar charts comparing average RFM scores for each segment.

Usage
-----

To use the `RFMAnalysis` and `RFMVisualizer` classes, follow these steps:

1. Load the customer transaction data into a Pandas DataFrame.
2. Instantiate the `RFMAnalysis` class, providing the necessary parameters.
3. Call the methods of the `RFMAnalysis` class to perform RFM analysis and generate segment information.
4. Instantiate the `RFMVisualizer` class.
5. Call the visualization methods of the `RFMVisualizer` class, passing the RFM data generated by the `RFMAnalysis` class.

Here's an example of how to use these classes:

.. code-block:: python

    import pandas as pd
    from RFMAnalysis import RFMAnalysis
    from RFMVisualizer import RFMVisualizer

    # Load the customer transaction data
    data = pd.read_csv('customer_transactions.csv')

    # Perform RFM analysis
    analysis = RFMAnalysis(data, 'customer_id', 'transaction_date', 'revenue')
    analysis.create_rfm_columns()
    analysis.scale_rfm_columns()
    analysis.rfm_scores()
    analysis.top_customers()
    analysis.give_names_to_segments()

    # Visualize RFM analysis
    visualizer = RFMVisualizer()
    visualizer.plot_rfm(

analysis.rfm_data)
    visualizer.visualize_segments(analysis.rfm_data)
    visualizer.segment_distribution_barplot(analysis.rfm_data)
    visualizer.segment_boxplot(analysis.rfm_data)
    visualizer.segment_comparison(analysis.rfm_data)

Requirements
------------

The implementation requires the following libraries to be installed:

- pandas
- seaborn
- matplotlib
- squarify

You can install them using `pip`:

.. code-block:: bash

    pip install pandas seaborn matplotlib squarify

License
-------

This project is licensed under the MIT License. See the [LICENSE](LICENSE) file for more details.

=======
History
=======

0.1.0 (2023-05-16)
------------------

* First release on PyPI.
